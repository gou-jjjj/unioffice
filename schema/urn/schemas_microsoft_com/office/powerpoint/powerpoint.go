//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package powerpoint

import (
	_e "encoding/xml"
	_ge "fmt"

	_d "github.com/gou-jjjj/unioffice"
)

type CT_Rel struct {

	// Text Reference
	IdAttr *string
}

// Validate validates the CT_Rel and its children
func (_ga *CT_Rel) Validate() error {
	return _ga.ValidateWithPath("\u0043\u0054\u005f\u0052\u0065\u006c")
}

// Validate validates the CT_Empty and its children
func (_ef *CT_Empty) Validate() error {
	return _ef.ValidateWithPath("\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079")
}
func (_dg *Iscomment) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0069s\u0063\u006f\u006d\u006d\u0065\u006et"
	return _dg.CT_Empty.MarshalXML(e, start)
}
func (_ca *Textdata) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061"
	return _ca.CT_Rel.MarshalXML(e, start)
}

// ValidateWithPath validates the Textdata and its children, prefixing error messages with path
func (_bdf *Textdata) ValidateWithPath(path string) error {
	if _egb := _bdf.CT_Rel.ValidateWithPath(path); _egb != nil {
		return _egb
	}
	return nil
}
func (_cb *CT_Rel) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _cb.IdAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0069\u0064"}, Value: _ge.Sprintf("\u0025\u0076", *_cb.IdAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type Iscomment struct{ CT_Empty }

// ValidateWithPath validates the CT_Empty and its children, prefixing error messages with path
func (_c *CT_Empty) ValidateWithPath(path string) error { return nil }
func (_de *CT_Empty) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func (_eab *Iscomment) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_eab.CT_Empty = *NewCT_Empty()
	for {
		_bf, _eef := d.Token()
		if _eef != nil {
			return _ge.Errorf("p\u0061\u0072\u0073\u0069ng\u0020I\u0073\u0063\u006f\u006d\u006de\u006e\u0074\u003a\u0020\u0025\u0073", _eef)
		}
		if _eg, _cd := _bf.(_e.EndElement); _cd && _eg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_f *CT_Empty) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for {
		_dd, _gf := d.Token()
		if _gf != nil {
			return _ge.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fE\u006d\u0070\u0074\u0079: \u0025\u0073", _gf)
		}
		if _def, _fb := _dd.(_e.EndElement); _fb && _def.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Empty struct{}

// Validate validates the Iscomment and its children
func (_df *Iscomment) Validate() error {
	return _df.ValidateWithPath("\u0049s\u0063\u006f\u006d\u006d\u0065\u006et")
}

type Textdata struct{ CT_Rel }

func (_da *CT_Rel) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cg := range start.Attr {
		if _cg.Name.Local == "\u0069\u0064" {
			_gea := _cg.Value
			_da.IdAttr = &_gea
			continue
		}
	}
	for {
		_bd, _ee := d.Token()
		if _ee != nil {
			return _ge.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0043T\u005f\u0052e\u006c\u003a\u0020\u0025\u0073", _ee)
		}
		if _ff, _ddg := _bd.(_e.EndElement); _ddg && _ff.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the Textdata and its children
func (_bdd *Textdata) Validate() error {
	return _bdd.ValidateWithPath("\u0054\u0065\u0078\u0074\u0064\u0061\u0074\u0061")
}
func NewTextdata() *Textdata { _cce := &Textdata{}; _cce.CT_Rel = *NewCT_Rel(); return _cce }

// ValidateWithPath validates the CT_Rel and its children, prefixing error messages with path
func (_bg *CT_Rel) ValidateWithPath(path string) error { return nil }
func NewCT_Empty() *CT_Empty                           { _b := &CT_Empty{}; return _b }

// ValidateWithPath validates the Iscomment and its children, prefixing error messages with path
func (_fc *Iscomment) ValidateWithPath(path string) error {
	if _bga := _fc.CT_Empty.ValidateWithPath(path); _bga != nil {
		return _bga
	}
	return nil
}
func (_fd *Textdata) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fd.CT_Rel = *NewCT_Rel()
	for _, _a := range start.Attr {
		if _a.Name.Local == "\u0069\u0064" {
			_ddf := _a.Value
			_fd.IdAttr = &_ddf
			continue
		}
	}
	for {
		_cde, _db := d.Token()
		if _db != nil {
			return _ge.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0054\u0065\u0078t\u0064\u0061\u0074\u0061: \u0025\u0073", _db)
		}
		if _ega, _fgf := _cde.(_e.EndElement); _fgf && _ega.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_Rel() *CT_Rel       { _ea := &CT_Rel{}; return _ea }
func NewIscomment() *Iscomment { _fg := &Iscomment{}; _fg.CT_Empty = *NewCT_Empty(); return _fg }
func init() {
	_d.RegisterConstructor("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074", "\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079", NewCT_Empty)
	_d.RegisterConstructor("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074", "\u0043\u0054\u005f\u0052\u0065\u006c", NewCT_Rel)
	_d.RegisterConstructor("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074", "\u0069s\u0063\u006f\u006d\u006d\u0065\u006et", NewIscomment)
	_d.RegisterConstructor("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074", "\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061", NewTextdata)
}
