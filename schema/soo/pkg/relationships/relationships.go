//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package relationships

import (
	_f "encoding/xml"
	_fd "fmt"
	_d "unioffice"
	_ge "unioffice/common/logger"
)

func (_ebb ST_TargetMode) Validate() error { return _ebb.ValidateWithPath("") }

func (_da *CT_Relationships) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
_cg:
	for {
		_fcf, _eee := d.Token()
		if _eee != nil {
			return _eee
		}
		switch _aa := _fcf.(type) {
		case _f.StartElement:
			switch _aa.Name {
			case _f.Name{Space: "ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073h\u0069\u0070s", Local: "\u0052\u0065\u006ca\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070"}:
				_geg := NewRelationship()
				if _de := d.DecodeElement(_geg, &_aa); _de != nil {
					return _de
				}
				_da.Relationship = append(_da.Relationship, _geg)
			default:
				_ge.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u0020\u0025v", _aa.Name)
				if _ebg := d.Skip(); _ebg != nil {
					return _ebg
				}
			}
		case _f.EndElement:
			break _cg
		case _f.CharData:
		}
	}
	return nil
}

func (_dcg *Relationships) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	start.Attr = append(start.Attr, _f.Attr{Name: _f.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073h\u0069\u0070s"})
	start.Attr = append(start.Attr, _f.Attr{Name: _f.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073"
	return _dcg.CT_Relationships.MarshalXML(e, start)
}

// Validate validates the Relationship and its children
func (_ad *Relationship) Validate() error {
	return _ad.ValidateWithPath("\u0052\u0065\u006ca\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070")
}

func (_dfb ST_TargetMode) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	return e.EncodeElement(_dfb.String(), start)
}

type CT_Relationships struct{ Relationship []*Relationship }

// ValidateWithPath validates the CT_Relationships and its children, prefixing error messages with path
func (_cf *CT_Relationships) ValidateWithPath(path string) error {
	for _ae, _gf := range _cf.Relationship {
		if _cbb := _gf.ValidateWithPath(_fd.Sprintf("\u0025\u0073\u002f\u0052el\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u005b\u0025\u0064\u005d", path, _ae)); _cbb != nil {
			return _cbb
		}
	}
	return nil
}

// Validate validates the CT_Relationship and its children
func (_ee *CT_Relationship) Validate() error {
	return _ee.ValidateWithPath("\u0043T\u005fR\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070")
}

func (_fe *CT_Relationship) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
	for _, _c := range start.Attr {
		if _c.Name.Local == "\u0054\u0061\u0072\u0067\u0065\u0074\u004d\u006f\u0064\u0065" {
			_fe.TargetModeAttr.UnmarshalXMLAttr(_c)
			continue
		}
		if _c.Name.Local == "\u0054\u0061\u0072\u0067\u0065\u0074" {
			_eb := _c.Value
			_fe.TargetAttr = _eb
			continue
		}
		if _c.Name.Local == "\u0054\u0079\u0070\u0065" {
			_cb := _c.Value
			_fe.TypeAttr = _cb
			continue
		}
		if _c.Name.Local == "\u0049\u0064" {
			_gd := _c.Value
			_fe.IdAttr = _gd
			continue
		}
	}
	for {
		_ba, _fg := d.Token()
		if _fg != nil {
			return _fd.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0052\u0065\u006c\u0061\u0074\u0069o\u006e\u0073\u0068i\u0070:\u0020\u0025\u0073", _fg)
		}
		if _fb, _bc := _ba.(_f.CharData); _bc {
			_fe.Content = string(_fb)
		}
		if _gca, _ca := _ba.(_f.EndElement); _ca && _gca.Name == start.Name {
			break
		}
	}
	return nil
}

type Relationships struct{ CT_Relationships }

// ValidateWithPath validates the Relationships and its children, prefixing error messages with path
func (_ab *Relationships) ValidateWithPath(path string) error {
	if _fee := _ab.CT_Relationships.ValidateWithPath(path); _fee != nil {
		return _fee
	}
	return nil
}

// Validate validates the Relationships and its children
func (_fcc *Relationships) Validate() error {
	return _fcc.ValidateWithPath("\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073")
}

const (
	ST_TargetModeUnset    ST_TargetMode = 0
	ST_TargetModeExternal ST_TargetMode = 1
	ST_TargetModeInternal ST_TargetMode = 2
)

func NewRelationships() *Relationships {
	_dg := &Relationships{}
	_dg.CT_Relationships = *NewCT_Relationships()
	return _dg
}

func NewCT_Relationships() *CT_Relationships { _bfc := &CT_Relationships{}; return _bfc }

type ST_TargetMode byte

// Validate validates the CT_Relationships and its children
func (_gdc *CT_Relationships) Validate() error {
	return _gdc.ValidateWithPath("\u0043\u0054_\u0052\u0065\u006ca\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073")
}

// ValidateWithPath validates the Relationship and its children, prefixing error messages with path
func (_df *Relationship) ValidateWithPath(path string) error {
	if _cc := _df.CT_Relationship.ValidateWithPath(path); _cc != nil {
		return _cc
	}
	return nil
}

func (_cd *CT_Relationships) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	e.EncodeToken(start)
	if _cd.Relationship != nil {
		_fc := _f.StartElement{Name: _f.Name{Local: "\u0052\u0065\u006ca\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070"}}
		for _, _gdg := range _cd.Relationship {
			e.EncodeElement(_gdg, _fc)
		}
	}
	e.EncodeToken(_f.EndElement{Name: start.Name})
	return nil
}

type Relationship struct{ CT_Relationship }

func (_cafa *Relationships) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
	_cafa.CT_Relationships = *NewCT_Relationships()
_ce:
	for {
		_gcf, _bab := d.Token()
		if _bab != nil {
			return _bab
		}
		switch _fgg := _gcf.(type) {
		case _f.StartElement:
			switch _fgg.Name {
			case _f.Name{Space: "ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073h\u0069\u0070s", Local: "\u0052\u0065\u006ca\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070"}:
				_gcd := NewRelationship()
				if _gda := d.DecodeElement(_gcd, &_fgg); _gda != nil {
					return _gda
				}
				_cafa.Relationship = append(_cafa.Relationship, _gcd)
			default:
				_ge.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0052\u0065\u006c\u0061t\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073 \u0025\u0076", _fgg.Name)
				if _gcfd := d.Skip(); _gcfd != nil {
					return _gcfd
				}
			}
		case _f.EndElement:
			break _ce
		case _f.CharData:
		}
	}
	return nil
}

func (_dd ST_TargetMode) MarshalXMLAttr(name _f.Name) (_f.Attr, error) {
	_db := _f.Attr{}
	_db.Name = name
	switch _dd {
	case ST_TargetModeUnset:
		_db.Value = ""
	case ST_TargetModeExternal:
		_db.Value = "\u0045\u0078\u0074\u0065\u0072\u006e\u0061\u006c"
	case ST_TargetModeInternal:
		_db.Value = "\u0049\u006e\u0074\u0065\u0072\u006e\u0061\u006c"
	}
	return _db, nil
}

func (_b *CT_Relationship) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	if _b.TargetModeAttr != ST_TargetModeUnset {
		_a, _e := _b.TargetModeAttr.MarshalXMLAttr(_f.Name{Local: "\u0054\u0061\u0072\u0067\u0065\u0074\u004d\u006f\u0064\u0065"})
		if _e != nil {
			return _e
		}
		start.Attr = append(start.Attr, _a)
	}
	start.Attr = append(start.Attr, _f.Attr{Name: _f.Name{Local: "\u0054\u0061\u0072\u0067\u0065\u0074"}, Value: _fd.Sprintf("\u0025\u0076", _b.TargetAttr)})
	start.Attr = append(start.Attr, _f.Attr{Name: _f.Name{Local: "\u0054\u0079\u0070\u0065"}, Value: _fd.Sprintf("\u0025\u0076", _b.TypeAttr)})
	start.Attr = append(start.Attr, _f.Attr{Name: _f.Name{Local: "\u0049\u0064"}, Value: _fd.Sprintf("\u0025\u0076", _b.IdAttr)})
	e.EncodeElement(_b.Content, start)
	e.EncodeToken(_f.EndElement{Name: start.Name})
	return nil
}

type CT_Relationship struct {
	TargetModeAttr ST_TargetMode
	TargetAttr     string
	TypeAttr       string
	IdAttr         string
	Content        string
}

func (_deb *ST_TargetMode) UnmarshalXMLAttr(attr _f.Attr) error {
	switch attr.Value {
	case "":
		*_deb = 0
	case "\u0045\u0078\u0074\u0065\u0072\u006e\u0061\u006c":
		*_deb = 1
	case "\u0049\u006e\u0074\u0065\u0072\u006e\u0061\u006c":
		*_deb = 2
	}
	return nil
}

func NewRelationship() *Relationship {
	_ff := &Relationship{}
	_ff.CT_Relationship = *NewCT_Relationship()
	return _ff
}

// ValidateWithPath validates the CT_Relationship and its children, prefixing error messages with path
func (_bf *CT_Relationship) ValidateWithPath(path string) error {
	if _af := _bf.TargetModeAttr.ValidateWithPath(path + "\u002fT\u0061r\u0067\u0065\u0074\u004d\u006f\u0064\u0065\u0041\u0074\u0074\u0072"); _af != nil {
		return _af
	}
	return nil
}

func NewCT_Relationship() *CT_Relationship {
	_gc := &CT_Relationship{}
	return _gc
}

func (_ecc *ST_TargetMode) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
	_ccf, _ed := d.Token()
	if _ed != nil {
		return _ed
	}
	if _fcfa, _gcag := _ccf.(_f.EndElement); _gcag && _fcfa.Name == start.Name {
		*_ecc = 1
		return nil
	}
	if _fbb, _geb := _ccf.(_f.CharData); !_geb {
		return _fd.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ccf)
	} else {
		switch string(_fbb) {
		case "":
			*_ecc = 0
		case "\u0045\u0078\u0074\u0065\u0072\u006e\u0061\u006c":
			*_ecc = 1
		case "\u0049\u006e\u0074\u0065\u0072\u006e\u0061\u006c":
			*_ecc = 2
		}
	}
	_ccf, _ed = d.Token()
	if _ed != nil {
		return _ed
	}
	if _bcg, _bg := _ccf.(_f.EndElement); _bg && _bcg.Name == start.Name {
		return nil
	}
	return _fd.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ccf)
}

func (_cgg *Relationship) MarshalXML(e *_f.Encoder, start _f.StartElement) error {
	return _cgg.CT_Relationship.MarshalXML(e, start)
}

func (_efc ST_TargetMode) ValidateWithPath(path string) error {
	switch _efc {
	case 0, 1, 2:
	default:
		return _fd.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_efc))
	}
	return nil
}

func (_afa *Relationship) UnmarshalXML(d *_f.Decoder, start _f.StartElement) error {
	_afa.CT_Relationship = *NewCT_Relationship()
	for _, _gg := range start.Attr {
		if _gg.Name.Local == "\u0054\u0061\u0072\u0067\u0065\u0074\u004d\u006f\u0064\u0065" {
			_afa.TargetModeAttr.UnmarshalXMLAttr(_gg)
			continue
		}
		if _gg.Name.Local == "\u0054\u0061\u0072\u0067\u0065\u0074" {
			_gb := _gg.Value
			_afa.TargetAttr = _gb
			continue
		}
		if _gg.Name.Local == "\u0054\u0079\u0070\u0065" {
			_ec := _gg.Value
			_afa.TypeAttr = _ec
			continue
		}
		if _gg.Name.Local == "\u0049\u0064" {
			_caf := _gg.Value
			_afa.IdAttr = _caf
			continue
		}
	}
	for {
		_fgb, _bfd := d.Token()
		if _bfd != nil {
			return _fd.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0052\u0065\u006c\u0061\u0074i\u006f\u006e\u0073\u0068\u0069\u0070\u003a\u0020\u0025\u0073", _bfd)
		}
		if _ffb, _dc := _fgb.(_f.EndElement); _dc && _ffb.Name == start.Name {
			break
		}
	}
	return nil
}

func (_ef ST_TargetMode) String() string {
	switch _ef {
	case 0:
		return ""
	case 1:
		return "\u0045\u0078\u0074\u0065\u0072\u006e\u0061\u006c"
	case 2:
		return "\u0049\u006e\u0074\u0065\u0072\u006e\u0061\u006c"
	}
	return ""
}

func init() {
	_d.RegisterConstructor("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073h\u0069\u0070s", "\u0043\u0054_\u0052\u0065\u006ca\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073", NewCT_Relationships)
	_d.RegisterConstructor("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073h\u0069\u0070s", "\u0043T\u005fR\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070", NewCT_Relationship)
	_d.RegisterConstructor("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073h\u0069\u0070s", "\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073", NewRelationships)
	_d.RegisterConstructor("ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006b\u0061\u0067\u0065\u002f\u00320\u00306\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073h\u0069\u0070s", "\u0052\u0065\u006ca\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070", NewRelationship)
}
