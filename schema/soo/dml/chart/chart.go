//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart

import (
	_b "encoding/xml"
	_g "fmt"
	_f "regexp"
	_e "strconv"
	_gf "unioffice"
	_df "unioffice/common/logger"
	_gfc "unioffice/schema/soo/dml"
	_c "unioffice/schema/soo/dml/chartDrawing"
	_cf "unioffice/schema/soo/ofc/sharedTypes"
)

type Chart struct{ CT_RelId }

func NewCT_Orientation() *CT_Orientation { _daac := &CT_Orientation{}; return _daac }
func (_dabeg ST_HoleSize) String() string {
	if _dabeg.ST_HoleSizePercent != nil {
		return _g.Sprintf("\u0025\u0076", *_dabeg.ST_HoleSizePercent)
	}
	if _dabeg.ST_HoleSizeUByte != nil {
		return _g.Sprintf("\u0025\u0076", *_dabeg.ST_HoleSizeUByte)
	}
	return ""
}
func (_baff *CT_BubbleScale) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _ffaf := range start.Attr {
		if _ffaf.Name.Local == "\u0076\u0061\u006c" {
			_gfd, _ddge := ParseUnionST_BubbleScale(_ffaf.Value)
			if _ddge != nil {
				return _ddge
			}
			_baff.ValAttr = &_gfd
			continue
		}
	}
	for {
		_dde, _dgae := d.Token()
		if _dgae != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fB\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065:\u0020\u0025\u0073", _dgae)
		}
		if _bggc, _gca := _dde.(_b.EndElement); _gca && _bggc.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Area3DChart and its children, prefixing error messages with path
func (_fgb *CT_Area3DChart) ValidateWithPath(path string) error {
	if _fgb.Grouping != nil {
		if _dc := _fgb.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _dc != nil {
			return _dc
		}
	}
	if _fgb.VaryColors != nil {
		if _fc := _fgb.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _fc != nil {
			return _fc
		}
	}
	for _ebe, _egc := range _fgb.Ser {
		if _aeb := _egc.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _ebe)); _aeb != nil {
			return _aeb
		}
	}
	if _fgb.DLbls != nil {
		if _fe := _fgb.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _fe != nil {
			return _fe
		}
	}
	if _fgb.DropLines != nil {
		if _age := _fgb.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _age != nil {
			return _age
		}
	}
	if _fgb.GapDepth != nil {
		if _bb := _fgb.GapDepth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0044\u0065\u0070\u0074h"); _bb != nil {
			return _bb
		}
	}
	for _aed, _gb := range _fgb.AxId {
		if _bf := _gb.ValidateWithPath(_g.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _aed)); _bf != nil {
			return _bf
		}
	}
	if _fgb.ExtLst != nil {
		if _cg := _fgb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cg != nil {
			return _cg
		}
	}
	return nil
}
func (_eag *CT_AxDataSourceChoice) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_bcc := start
	switch start.Name {
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}:
		_eag.MultiLvlStrRef = NewCT_MultiLvlStrRef()
		if _ccd := d.DecodeElement(_eag.MultiLvlStrRef, &_bcc); _ccd != nil {
			return _ccd
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
		_eag.NumRef = NewCT_NumRef()
		if _fde := d.DecodeElement(_eag.NumRef, &_bcc); _fde != nil {
			return _fde
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
		_eag.NumLit = NewCT_NumData()
		if _ced := d.DecodeElement(_eag.NumLit, &_bcc); _ced != nil {
			return _ced
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
		_eag.StrRef = NewCT_StrRef()
		if _gba := d.DecodeElement(_eag.StrRef, &_bcc); _gba != nil {
			return _gba
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}:
		_eag.StrLit = NewCT_StrData()
		if _dcab := d.DecodeElement(_eag.StrLit, &_bcc); _dcab != nil {
			return _dcab
		}
	default:
		_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075n\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u006f\u006e C\u0054\u005f\u0041\u0078\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _bcc.Name)
		if _gag := d.Skip(); _gag != nil {
			return _gag
		}
	}
	return nil
}

const (
	ST_PageSetupOrientationUnset     ST_PageSetupOrientation = 0
	ST_PageSetupOrientationDefault   ST_PageSetupOrientation = 1
	ST_PageSetupOrientationPortrait  ST_PageSetupOrientation = 2
	ST_PageSetupOrientationLandscape ST_PageSetupOrientation = 3
)

// Validate validates the CT_SplitType and its children
func (_bgccg *CT_SplitType) Validate() error {
	return _bgccg.ValidateWithPath("\u0043\u0054\u005fS\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065")
}

type CT_PieSer struct {

	// Index
	Idx *CT_UnsignedInt

	// Order
	Order *CT_UnsignedInt

	// Series Text
	Tx   *CT_SerTx
	SpPr *_gfc.CT_ShapeProperties

	// Explosion
	Explosion *CT_UnsignedInt

	// Data Point
	DPt []*CT_DPt

	// Data Labels
	DLbls *CT_DLbls

	// Category Axis Data
	Cat *CT_AxDataSource
	Val *CT_NumDataSource

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_afc *CT_AxDataSource) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_afc.AxDataSourceChoice = NewCT_AxDataSourceChoice()
_cfc:
	for {
		_cdag, _ade := d.Token()
		if _ade != nil {
			return _ade
		}
		switch _bfb := _cdag.(type) {
		case _b.StartElement:
			switch _bfb.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}:
				_afc.AxDataSourceChoice = NewCT_AxDataSourceChoice()
				if _dba := d.DecodeElement(&_afc.AxDataSourceChoice.MultiLvlStrRef, &_bfb); _dba != nil {
					return _dba
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_afc.AxDataSourceChoice = NewCT_AxDataSourceChoice()
				if _ddad := d.DecodeElement(&_afc.AxDataSourceChoice.NumRef, &_bfb); _ddad != nil {
					return _ddad
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_afc.AxDataSourceChoice = NewCT_AxDataSourceChoice()
				if _cga := d.DecodeElement(&_afc.AxDataSourceChoice.NumLit, &_bfb); _cga != nil {
					return _cga
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_afc.AxDataSourceChoice = NewCT_AxDataSourceChoice()
				if _fbg := d.DecodeElement(&_afc.AxDataSourceChoice.StrRef, &_bfb); _fbg != nil {
					return _fbg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}:
				_afc.AxDataSourceChoice = NewCT_AxDataSourceChoice()
				if _agfd := d.DecodeElement(&_afc.AxDataSourceChoice.StrLit, &_bfb); _agfd != nil {
					return _agfd
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0041\u0078\u0044a\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0020\u0025\u0076", _bfb.Name)
				if _ca := d.Skip(); _ca != nil {
					return _ca
				}
			}
		case _b.EndElement:
			break _cfc
		case _b.CharData:
		}
	}
	return nil
}
func (_bggcd *CT_ChartLines) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_acc:
	for {
		_ecec, _ffgb := d.Token()
		if _ffgb != nil {
			return _ffgb
		}
		switch _dfdf := _ecec.(type) {
		case _b.StartElement:
			switch _dfdf.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_bggcd.SpPr = _gfc.NewCT_ShapeProperties()
				if _gbe := d.DecodeElement(_bggcd.SpPr, &_dfdf); _gbe != nil {
					return _gbe
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043h\u0061\u0072\u0074\u004c\u0069\u006e\u0065\u0073 \u0025\u0076", _dfdf.Name)
				if _gagf := d.Skip(); _gagf != nil {
					return _gagf
				}
			}
		case _b.EndElement:
			break _acc
		case _b.CharData:
		}
	}
	return nil
}
func (_afdce *CT_TickMark) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _ffadc := range start.Attr {
		if _ffadc.Name.Local == "\u0076\u0061\u006c" {
			_afdce.ValAttr.UnmarshalXMLAttr(_ffadc)
			continue
		}
	}
	for {
		_gdfdb, _aaabf := d.Token()
		if _aaabf != nil {
			return _g.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b\u003a\u0020\u0025\u0073", _aaabf)
		}
		if _faeec, _cfbfb := _gdfdb.(_b.EndElement); _cfbfb && _faeec.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_ErrDir and its children
func (_dedgd *CT_ErrDir) Validate() error {
	return _dedgd.ValidateWithPath("\u0043T\u005f\u0045\u0072\u0072\u0044\u0069r")
}
func (_degb *CT_PrintSettings) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _degb.HeaderFooter != nil {
		_ecef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0068\u0065\u0061\u0064\u0065\u0072\u0046o\u006f\u0074\u0065\u0072"}}
		e.EncodeElement(_degb.HeaderFooter, _ecef)
	}
	if _degb.PageMargins != nil {
		_ceagg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}}
		e.EncodeElement(_degb.PageMargins, _ceagg)
	}
	if _degb.PageSetup != nil {
		_aceff := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0070\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070"}}
		e.EncodeElement(_degb.PageSetup, _aceff)
	}
	if _degb.LegacyDrawingHF != nil {
		_eeged := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0065\u0067\u0061\u0063\u0079\u0044\u0072\u0061\u0077i\u006e\u0067\u0048\u0046"}}
		e.EncodeElement(_degb.LegacyDrawingHF, _eeged)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_BubbleSer and its children, prefixing error messages with path
func (_faed *CT_BubbleSer) ValidateWithPath(path string) error {
	if _gabe := _faed.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _gabe != nil {
		return _gabe
	}
	if _bfcg := _faed.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _bfcg != nil {
		return _bfcg
	}
	if _faed.Tx != nil {
		if _fdbd := _faed.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _fdbd != nil {
			return _fdbd
		}
	}
	if _faed.SpPr != nil {
		if _ccda := _faed.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ccda != nil {
			return _ccda
		}
	}
	if _faed.InvertIfNegative != nil {
		if _fdea := _faed.InvertIfNegative.ValidateWithPath(path + "\u002f\u0049\u006e\u0076\u0065\u0072\u0074\u0049\u0066\u004e\u0065\u0067a\u0074\u0069\u0076\u0065"); _fdea != nil {
			return _fdea
		}
	}
	for _aebd, _dcaa := range _faed.DPt {
		if _dcce := _dcaa.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _aebd)); _dcce != nil {
			return _dcce
		}
	}
	if _faed.DLbls != nil {
		if _dgff := _faed.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _dgff != nil {
			return _dgff
		}
	}
	for _ggaa, _edde := range _faed.Trendline {
		if _acef := _edde.ValidateWithPath(_g.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _ggaa)); _acef != nil {
			return _acef
		}
	}
	for _cbgc, _gabf := range _faed.ErrBars {
		if _afba := _gabf.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0045\u0072\u0072\u0042\u0061\u0072s\u005b\u0025\u0064\u005d", path, _cbgc)); _afba != nil {
			return _afba
		}
	}
	if _faed.XVal != nil {
		if _cec := _faed.XVal.ValidateWithPath(path + "\u002f\u0058\u0056a\u006c"); _cec != nil {
			return _cec
		}
	}
	if _faed.YVal != nil {
		if _agfb := _faed.YVal.ValidateWithPath(path + "\u002f\u0059\u0056a\u006c"); _agfb != nil {
			return _agfb
		}
	}
	if _faed.BubbleSize != nil {
		if _fbe := _faed.BubbleSize.ValidateWithPath(path + "/\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _fbe != nil {
			return _fbe
		}
	}
	if _faed.Bubble3D != nil {
		if _fbag := _faed.Bubble3D.ValidateWithPath(path + "\u002fB\u0075\u0062\u0062\u006c\u0065\u0033D"); _fbag != nil {
			return _fbag
		}
	}
	if _faed.ExtLst != nil {
		if _ddgf := _faed.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ddgf != nil {
			return _ddgf
		}
	}
	return nil
}
func (_cdeb *CT_Crosses) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_acdf, _abfc := _cdeb.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
	if _abfc != nil {
		return _abfc
	}
	start.Attr = append(start.Attr, _acdf)
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Area3DChart and its children
func (_ef *CT_Area3DChart) Validate() error {
	return _ef.ValidateWithPath("\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0033\u0044C\u0068\u0061\u0072\u0074")
}

// ValidateWithPath validates the CT_PieSer and its children, prefixing error messages with path
func (_ecccb *CT_PieSer) ValidateWithPath(path string) error {
	if _ceef := _ecccb.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _ceef != nil {
		return _ceef
	}
	if _fgcde := _ecccb.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _fgcde != nil {
		return _fgcde
	}
	if _ecccb.Tx != nil {
		if _ebdfb := _ecccb.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _ebdfb != nil {
			return _ebdfb
		}
	}
	if _ecccb.SpPr != nil {
		if _cbefb := _ecccb.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cbefb != nil {
			return _cbefb
		}
	}
	if _ecccb.Explosion != nil {
		if _agfeg := _ecccb.Explosion.ValidateWithPath(path + "\u002f\u0045\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"); _agfeg != nil {
			return _agfeg
		}
	}
	for _cdbcg, _aeagd := range _ecccb.DPt {
		if _afbge := _aeagd.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _cdbcg)); _afbge != nil {
			return _afbge
		}
	}
	if _ecccb.DLbls != nil {
		if _bcba := _ecccb.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _bcba != nil {
			return _bcba
		}
	}
	if _ecccb.Cat != nil {
		if _caadc := _ecccb.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _caadc != nil {
			return _caadc
		}
	}
	if _ecccb.Val != nil {
		if _ggdca := _ecccb.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _ggdca != nil {
			return _ggdca
		}
	}
	if _ecccb.ExtLst != nil {
		if _dfcgd := _ecccb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dfcgd != nil {
			return _dfcgd
		}
	}
	return nil
}
func NewEG_DLblShared() *EG_DLblShared { _geaec := &EG_DLblShared{}; return _geaec }
func NewCT_ErrBars() *CT_ErrBars {
	_fdedc := &CT_ErrBars{}
	_fdedc.ErrBarType = NewCT_ErrBarType()
	_fdedc.ErrValType = NewCT_ErrValType()
	return _fdedc
}
func NewCT_BandFmts() *CT_BandFmts { _gbg := &CT_BandFmts{}; return _gbg }
func (_feff ST_TickMark) ValidateWithPath(path string) error {
	switch _feff {
	case 0, 1, 2, 3, 4:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_feff))
	}
	return nil
}
func NewCT_NumDataSource() *CT_NumDataSource {
	_gbae := &CT_NumDataSource{}
	_gbae.NumDataSourceChoice = NewCT_NumDataSourceChoice()
	return _gbae
}
func (_bfafgb ST_TimeUnit) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_bfafgb.String(), start)
}
func NewCT_PlotAreaChoice() *CT_PlotAreaChoice { _cefca := &CT_PlotAreaChoice{}; return _cefca }
func (_bdcbc *CT_Surface3DChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_bfbgb:
	for {
		_eabef, _gfadb := d.Token()
		if _gfadb != nil {
			return _gfadb
		}
		switch _ccbbe := _eabef.(type) {
		case _b.StartElement:
			switch _ccbbe.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}:
				_bdcbc.Wireframe = NewCT_Boolean()
				if _gage := d.DecodeElement(_bdcbc.Wireframe, &_ccbbe); _gage != nil {
					return _gage
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_efdgf := NewCT_SurfaceSer()
				if _bbgcd := d.DecodeElement(_efdgf, &_ccbbe); _bbgcd != nil {
					return _bbgcd
				}
				_bdcbc.Ser = append(_bdcbc.Ser, _efdgf)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}:
				_bdcbc.BandFmts = NewCT_BandFmts()
				if _gcff := d.DecodeElement(_bdcbc.BandFmts, &_ccbbe); _gcff != nil {
					return _gcff
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_bgab := NewCT_UnsignedInt()
				if _caaaad := d.DecodeElement(_bgab, &_ccbbe); _caaaad != nil {
					return _caaaad
				}
				_bdcbc.AxId = append(_bdcbc.AxId, _bgab)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bdcbc.ExtLst = NewCT_ExtensionList()
				if _fbefa := d.DecodeElement(_bdcbc.ExtLst, &_ccbbe); _fbefa != nil {
					return _fbefa
				}
			default:
				_df.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _ccbbe.Name)
				if _egcffe := d.Skip(); _egcffe != nil {
					return _egcffe
				}
			}
		case _b.EndElement:
			break _bfbgb
		case _b.CharData:
		}
	}
	return nil
}

const (
	ST_ErrDirUnset ST_ErrDir = 0
	ST_ErrDirX     ST_ErrDir = 1
	ST_ErrDirY     ST_ErrDir = 2
)

// Validate validates the CT_ScatterSer and its children
func (_afbga *CT_ScatterSer) Validate() error {
	return _afbga.ValidateWithPath("\u0043\u0054\u005f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0065\u0072")
}

// ValidateWithPath validates the CT_ChartLines and its children, prefixing error messages with path
func (_ccee *CT_ChartLines) ValidateWithPath(path string) error {
	if _ccee.SpPr != nil {
		if _gdc := _ccee.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gdc != nil {
			return _gdc
		}
	}
	return nil
}

type CT_Pie3DChart struct {
	VaryColors *CT_Boolean

	// Pie Chart Series
	Ser []*CT_PieSer

	// Data Labels
	DLbls *CT_DLbls

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_feebf ST_DLblPos) ValidateWithPath(path string) error {
	switch _feebf {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_feebf))
	}
	return nil
}

// Validate validates the CT_RadarSer and its children
func (_dgbff *CT_RadarSer) Validate() error {
	return _dgbff.ValidateWithPath("C\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0065\u0072")
}

// ValidateWithPath validates the CT_DateAx and its children, prefixing error messages with path
func (_fdeac *CT_DateAx) ValidateWithPath(path string) error {
	if _acee := _fdeac.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _acee != nil {
		return _acee
	}
	if _cfeaa := _fdeac.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _cfeaa != nil {
		return _cfeaa
	}
	if _fdeac.Delete != nil {
		if _agcf := _fdeac.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _agcf != nil {
			return _agcf
		}
	}
	if _ccbe := _fdeac.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _ccbe != nil {
		return _ccbe
	}
	if _fdeac.MajorGridlines != nil {
		if _dccb := _fdeac.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _dccb != nil {
			return _dccb
		}
	}
	if _fdeac.MinorGridlines != nil {
		if _fdfb := _fdeac.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _fdfb != nil {
			return _fdfb
		}
	}
	if _fdeac.Title != nil {
		if _fcce := _fdeac.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _fcce != nil {
			return _fcce
		}
	}
	if _fdeac.NumFmt != nil {
		if _ffbf := _fdeac.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _ffbf != nil {
			return _ffbf
		}
	}
	if _fdeac.MajorTickMark != nil {
		if _deaee := _fdeac.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _deaee != nil {
			return _deaee
		}
	}
	if _fdeac.MinorTickMark != nil {
		if _bdc := _fdeac.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _bdc != nil {
			return _bdc
		}
	}
	if _fdeac.TickLblPos != nil {
		if _ebef := _fdeac.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _ebef != nil {
			return _ebef
		}
	}
	if _fdeac.SpPr != nil {
		if _acca := _fdeac.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _acca != nil {
			return _acca
		}
	}
	if _fdeac.TxPr != nil {
		if _eabe := _fdeac.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _eabe != nil {
			return _eabe
		}
	}
	if _bcca := _fdeac.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _bcca != nil {
		return _bcca
	}
	if _fdeac.AxSharedChoice != nil {
		if _afcg := _fdeac.AxSharedChoice.ValidateWithPath(path + "\u002fA\u0078S\u0068\u0061\u0072\u0065\u0064\u0043\u0068\u006f\u0069\u0063\u0065"); _afcg != nil {
			return _afcg
		}
	}
	if _fdeac.Auto != nil {
		if _gdd := _fdeac.Auto.ValidateWithPath(path + "\u002f\u0041\u0075t\u006f"); _gdd != nil {
			return _gdd
		}
	}
	if _fdeac.LblOffset != nil {
		if _ggad := _fdeac.LblOffset.ValidateWithPath(path + "\u002f\u004c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"); _ggad != nil {
			return _ggad
		}
	}
	if _fdeac.BaseTimeUnit != nil {
		if _egebc := _fdeac.BaseTimeUnit.ValidateWithPath(path + "\u002f\u0042\u0061\u0073\u0065\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"); _egebc != nil {
			return _egebc
		}
	}
	if _fdeac.MajorUnit != nil {
		if _aaaf := _fdeac.MajorUnit.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"); _aaaf != nil {
			return _aaaf
		}
	}
	if _fdeac.MajorTimeUnit != nil {
		if _gecd := _fdeac.MajorTimeUnit.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u006de\u0055\u006e\u0069\u0074"); _gecd != nil {
			return _gecd
		}
	}
	if _fdeac.MinorUnit != nil {
		if _daffa := _fdeac.MinorUnit.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"); _daffa != nil {
			return _daffa
		}
	}
	if _fdeac.MinorTimeUnit != nil {
		if _geggd := _fdeac.MinorTimeUnit.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u006de\u0055\u006e\u0069\u0074"); _geggd != nil {
			return _geggd
		}
	}
	if _fdeac.ExtLst != nil {
		if _ead := _fdeac.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ead != nil {
			return _ead
		}
	}
	return nil
}
func NewCT_ValAx() *CT_ValAx {
	_afgc := &CT_ValAx{}
	_afgc.AxId = NewCT_UnsignedInt()
	_afgc.Scaling = NewCT_Scaling()
	_afgc.AxPos = NewCT_AxPos()
	_afgc.CrossAx = NewCT_UnsignedInt()
	return _afgc
}
func (_cgggf *CT_SurfaceSer) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_cgggf.Idx = NewCT_UnsignedInt()
	_cgggf.Order = NewCT_UnsignedInt()
_facca:
	for {
		_eeefa, _gfcea := d.Token()
		if _gfcea != nil {
			return _gfcea
		}
		switch _dfaba := _eeefa.(type) {
		case _b.StartElement:
			switch _dfaba.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _ggcf := d.DecodeElement(_cgggf.Idx, &_dfaba); _ggcf != nil {
					return _ggcf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _cadcd := d.DecodeElement(_cgggf.Order, &_dfaba); _cadcd != nil {
					return _cadcd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_cgggf.Tx = NewCT_SerTx()
				if _ecadb := d.DecodeElement(_cgggf.Tx, &_dfaba); _ecadb != nil {
					return _ecadb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cgggf.SpPr = _gfc.NewCT_ShapeProperties()
				if _bdgdcg := d.DecodeElement(_cgggf.SpPr, &_dfaba); _bdgdcg != nil {
					return _bdgdcg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_cgggf.Cat = NewCT_AxDataSource()
				if _ebccaa := d.DecodeElement(_cgggf.Cat, &_dfaba); _ebccaa != nil {
					return _ebccaa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_cgggf.Val = NewCT_NumDataSource()
				if _cdcef := d.DecodeElement(_cgggf.Val, &_dfaba); _cdcef != nil {
					return _cdcef
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cgggf.ExtLst = NewCT_ExtensionList()
				if _abbeb := d.DecodeElement(_cgggf.ExtLst, &_dfaba); _abbeb != nil {
					return _abbeb
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053u\u0072\u0066\u0061\u0063\u0065\u0053\u0065\u0072 \u0025\u0076", _dfaba.Name)
				if _fdaffd := d.Skip(); _fdaffd != nil {
					return _fdaffd
				}
			}
		case _b.EndElement:
			break _facca
		case _b.CharData:
		}
	}
	return nil
}
func (_cdfbc *ST_LegendPos) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_afcbfd, _bccbc := d.Token()
	if _bccbc != nil {
		return _bccbc
	}
	if _aceg, _fecaf := _afcbfd.(_b.EndElement); _fecaf && _aceg.Name == start.Name {
		*_cdfbc = 1
		return nil
	}
	if _egacb, _ccage := _afcbfd.(_b.CharData); !_ccage {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _afcbfd)
	} else {
		switch string(_egacb) {
		case "":
			*_cdfbc = 0
		case "\u0062":
			*_cdfbc = 1
		case "\u0074\u0072":
			*_cdfbc = 2
		case "\u006c":
			*_cdfbc = 3
		case "\u0072":
			*_cdfbc = 4
		case "\u0074":
			*_cdfbc = 5
		}
	}
	_afcbfd, _bccbc = d.Token()
	if _bccbc != nil {
		return _bccbc
	}
	if _gdedb, _gdfdec := _afcbfd.(_b.EndElement); _gdfdec && _gdedb.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _afcbfd)
}

type ST_OfPieType byte
type CT_RadarChart struct {

	// Radar Style
	RadarStyle *CT_RadarStyle
	VaryColors *CT_Boolean

	// Radar Chart Series
	Ser []*CT_RadarSer

	// Data Labels
	DLbls *CT_DLbls

	// Axis ID
	AxId []*CT_UnsignedInt

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_caad *CT_LblOffset) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _ceba := range start.Attr {
		if _ceba.Name.Local == "\u0076\u0061\u006c" {
			_dbdc, _bagbb := ParseUnionST_LblOffset(_ceba.Value)
			if _bagbb != nil {
				return _bagbb
			}
			_caad.ValAttr = &_dbdc
			continue
		}
	}
	for {
		_dfege, _ebacbf := d.Token()
		if _ebacbf != nil {
			return _g.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u004c\u0062l\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0073", _ebacbf)
		}
		if _cdccf, _beeed := _dfege.(_b.EndElement); _beeed && _cdccf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bcbc *CT_HoleSize) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _badc := range start.Attr {
		if _badc.Name.Local == "\u0076\u0061\u006c" {
			_fgdaf, _gcgdb := ParseUnionST_HoleSize(_badc.Value)
			if _gcgdb != nil {
				return _gcgdb
			}
			_bcbc.ValAttr = &_fgdaf
			continue
		}
	}
	for {
		_dfebf, _afaf := d.Token()
		if _afaf != nil {
			return _g.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0048\u006f\u006c\u0065\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0073", _afaf)
		}
		if _ggccd, _ebcbe := _dfebf.(_b.EndElement); _ebcbe && _ggccd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_adbf *ST_HoleSize) Validate() error { return _adbf.ValidateWithPath("") }
func (_dbefd ST_BarDir) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_dbefd.String(), start)
}
func NewCT_PrintSettings() *CT_PrintSettings { _dfcb := &CT_PrintSettings{}; return _dfcb }

// Validate validates the CT_DLbls and its children
func (_daff *CT_DLbls) Validate() error {
	return _daff.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073")
}
func NewCT_MarkerStyle() *CT_MarkerStyle {
	_ddbb := &CT_MarkerStyle{}
	_ddbb.ValAttr = ST_MarkerStyle(1)
	return _ddbb
}
func (_adf *CT_BandFmt) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_bbbf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_adf.Idx, _bbbf)
	if _adf.SpPr != nil {
		_geaf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_adf.SpPr, _geaf)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_HeaderFooter and its children
func (_edgg *CT_HeaderFooter) Validate() error {
	return _edgg.ValidateWithPath("\u0043T\u005fH\u0065\u0061\u0064\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072")
}
func (_gaee *ST_CrossBetween) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_gaee = 0
	case "\u0062e\u0074\u0077\u0065\u0065\u006e":
		*_gaee = 1
	case "\u006d\u0069\u0064\u0043\u0061\u0074":
		*_gaee = 2
	}
	return nil
}
func (_ddb *CT_Bar3DChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_ddb.BarDir = NewCT_BarDir()
_cbaa:
	for {
		_fccc, _fbaa := d.Token()
		if _fbaa != nil {
			return _fbaa
		}
		switch _dcabf := _fccc.(type) {
		case _b.StartElement:
			switch _dcabf.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}:
				if _gcgf := d.DecodeElement(_ddb.BarDir, &_dcabf); _gcgf != nil {
					return _gcgf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_ddb.Grouping = NewCT_BarGrouping()
				if _bfd := d.DecodeElement(_ddb.Grouping, &_dcabf); _bfd != nil {
					return _bfd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_ddb.VaryColors = NewCT_Boolean()
				if _eddc := d.DecodeElement(_ddb.VaryColors, &_dcabf); _eddc != nil {
					return _eddc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_gfce := NewCT_BarSer()
				if _gfa := d.DecodeElement(_gfce, &_dcabf); _gfa != nil {
					return _gfa
				}
				_ddb.Ser = append(_ddb.Ser, _gfce)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ddb.DLbls = NewCT_DLbls()
				if _ccab := d.DecodeElement(_ddb.DLbls, &_dcabf); _ccab != nil {
					return _ccab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_ddb.GapWidth = NewCT_GapAmount()
				if _dfa := d.DecodeElement(_ddb.GapWidth, &_dcabf); _dfa != nil {
					return _dfa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}:
				_ddb.GapDepth = NewCT_GapAmount()
				if _faca := d.DecodeElement(_ddb.GapDepth, &_dcabf); _faca != nil {
					return _faca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}:
				_ddb.Shape = NewCT_Shape()
				if _geb := d.DecodeElement(_ddb.Shape, &_dcabf); _geb != nil {
					return _geb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_cgg := NewCT_UnsignedInt()
				if _gcf := d.DecodeElement(_cgg, &_dcabf); _gcf != nil {
					return _gcf
				}
				_ddb.AxId = append(_ddb.AxId, _cgg)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ddb.ExtLst = NewCT_ExtensionList()
				if _ffgg := d.DecodeElement(_ddb.ExtLst, &_dcabf); _ffgg != nil {
					return _ffgg
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042a\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _dcabf.Name)
				if _bad := d.Skip(); _bad != nil {
					return _bad
				}
			}
		case _b.EndElement:
			break _cbaa
		case _b.CharData:
		}
	}
	return nil
}

type CT_LegendPos struct {

	// Legend Position Value
	ValAttr ST_LegendPos
}
type CT_PlotAreaChoice1 struct {
	ValAx  *CT_ValAx
	CatAx  *CT_CatAx
	DateAx *CT_DateAx
	SerAx  *CT_SerAx
}

func (_cacff ST_TimeUnit) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_geccad := _b.Attr{}
	_geccad.Name = name
	switch _cacff {
	case ST_TimeUnitUnset:
		_geccad.Value = ""
	case ST_TimeUnitDays:
		_geccad.Value = "\u0064\u0061\u0079\u0073"
	case ST_TimeUnitMonths:
		_geccad.Value = "\u006d\u006f\u006e\u0074\u0068\u0073"
	case ST_TimeUnitYears:
		_geccad.Value = "\u0079\u0065\u0061r\u0073"
	}
	return _geccad, nil
}
func (_bdfb *CT_HPercent) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _bdfb.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", *_bdfb.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_adgdcg ST_LblAlgn) ValidateWithPath(path string) error {
	switch _adgdcg {
	case 0, 1, 2, 3:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_adgdcg))
	}
	return nil
}
func (_cge *CT_AreaChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _cge.Grouping != nil {
		_bd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_cge.Grouping, _bd)
	}
	if _cge.VaryColors != nil {
		_fef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_cge.VaryColors, _fef)
	}
	if _cge.Ser != nil {
		_dcf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _edf := range _cge.Ser {
			e.EncodeElement(_edf, _dcf)
		}
	}
	if _cge.DLbls != nil {
		_adg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_cge.DLbls, _adg)
	}
	if _cge.DropLines != nil {
		_afb := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_cge.DropLines, _afb)
	}
	_ec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _bfa := range _cge.AxId {
		e.EncodeElement(_bfa, _ec)
	}
	if _cge.ExtLst != nil {
		_fgf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cge.ExtLst, _fgf)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type ST_DLblPos byte
type ST_AxPos byte
type CT_PictureFormat struct {

	// Picture Format Value
	ValAttr ST_PictureFormat
}
type CT_SizeRepresents struct {

	// Size Represents Value
	ValAttr ST_SizeRepresents
}

// ValidateWithPath validates the CT_Grouping and its children, prefixing error messages with path
func (_abad *CT_Grouping) ValidateWithPath(path string) error {
	if _bccba := _abad.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bccba != nil {
		return _bccba
	}
	return nil
}
func (_fdfce ST_Overlap) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _fdfce.ST_OverlapPercent != nil {
		e.EncodeToken(_b.CharData(*_fdfce.ST_OverlapPercent))
	}
	if _fdfce.ST_OverlapByte != nil {
		e.EncodeToken(_b.CharData(_g.Sprintf("\u0025\u0064", *_fdfce.ST_OverlapByte)))
	}
	return e.EncodeToken(_b.EndElement{Name: start.Name})
}
func NewCT_View3D() *CT_View3D { _becc := &CT_View3D{}; return _becc }

type CT_PlotAreaChoice struct {
	AreaChart      *CT_AreaChart
	Area3DChart    *CT_Area3DChart
	LineChart      *CT_LineChart
	Line3DChart    *CT_Line3DChart
	StockChart     *CT_StockChart
	RadarChart     *CT_RadarChart
	ScatterChart   *CT_ScatterChart
	PieChart       *CT_PieChart
	Pie3DChart     *CT_Pie3DChart
	DoughnutChart  *CT_DoughnutChart
	BarChart       *CT_BarChart
	Bar3DChart     *CT_Bar3DChart
	OfPieChart     *CT_OfPieChart
	SurfaceChart   *CT_SurfaceChart
	Surface3DChart *CT_Surface3DChart
	BubbleChart    *CT_BubbleChart
}

// Validate validates the CT_ExternalData and its children
func (_gbcg *CT_ExternalData) Validate() error {
	return _gbcg.ValidateWithPath("\u0043T\u005fE\u0078\u0074\u0065\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061")
}

type CT_RotY struct {

	// Y Rotation Value
	ValAttr *uint16
}

func (_bbfeg ST_MarkerStyle) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_bbfeg.String(), start)
}
func NewCT_ChartLines() *CT_ChartLines { _ccfdf := &CT_ChartLines{}; return _ccfdf }

type CT_LayoutTarget struct {

	// Layout Target Value
	ValAttr ST_LayoutTarget
}

func (_febcb ST_DepthPercent) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _febcb.ST_DepthPercentWithSymbol != nil {
		e.EncodeToken(_b.CharData(*_febcb.ST_DepthPercentWithSymbol))
	}
	if _febcb.ST_DepthPercentUShort != nil {
		e.EncodeToken(_b.CharData(_g.Sprintf("\u0025\u0064", *_febcb.ST_DepthPercentUShort)))
	}
	return e.EncodeToken(_b.EndElement{Name: start.Name})
}

// Validate validates the EG_BarChartShared and its children
func (_bafae *EG_BarChartShared) Validate() error {
	return _bafae.ValidateWithPath("\u0045\u0047\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064")
}

// ValidateWithPath validates the CT_MarkerStyle and its children, prefixing error messages with path
func (_dbbbd *CT_MarkerStyle) ValidateWithPath(path string) error {
	if _dbbbd.ValAttr == ST_MarkerStyleUnset {
		return _g.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _ebaa := _dbbbd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ebaa != nil {
		return _ebaa
	}
	return nil
}
func (_gdgb *CT_PageMargins) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _gdgbf := range start.Attr {
		if _gdgbf.Name.Local == "\u006c" {
			_agbda, _adae := _e.ParseFloat(_gdgbf.Value, 64)
			if _adae != nil {
				return _adae
			}
			_gdgb.LAttr = _agbda
			continue
		}
		if _gdgbf.Name.Local == "\u0072" {
			_eabg, _cggf := _e.ParseFloat(_gdgbf.Value, 64)
			if _cggf != nil {
				return _cggf
			}
			_gdgb.RAttr = _eabg
			continue
		}
		if _gdgbf.Name.Local == "\u0074" {
			_ebbc, _egdc := _e.ParseFloat(_gdgbf.Value, 64)
			if _egdc != nil {
				return _egdc
			}
			_gdgb.TAttr = _ebbc
			continue
		}
		if _gdgbf.Name.Local == "\u0062" {
			_acabge, _beaee := _e.ParseFloat(_gdgbf.Value, 64)
			if _beaee != nil {
				return _beaee
			}
			_gdgb.BAttr = _acabge
			continue
		}
		if _gdgbf.Name.Local == "\u0068\u0065\u0061\u0064\u0065\u0072" {
			_bdcb, _fbffd := _e.ParseFloat(_gdgbf.Value, 64)
			if _fbffd != nil {
				return _fbffd
			}
			_gdgb.HeaderAttr = _bdcb
			continue
		}
		if _gdgbf.Name.Local == "\u0066\u006f\u006f\u0074\u0065\u0072" {
			_abebe, _efbeg := _e.ParseFloat(_gdgbf.Value, 64)
			if _efbeg != nil {
				return _efbeg
			}
			_gdgb.FooterAttr = _abebe
			continue
		}
	}
	for {
		_afbbb, _eagg := d.Token()
		if _eagg != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fP\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073:\u0020\u0025\u0073", _eagg)
		}
		if _cbeae, _dadad := _afbbb.(_b.EndElement); _dadad && _cbeae.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_BarGrouping struct {

	// Bar Grouping Value
	ValAttr ST_BarGrouping
}

// Validate validates the CT_DLbl and its children
func (_edg *CT_DLbl) Validate() error {
	return _edg.ValidateWithPath("\u0043T\u005f\u0044\u004c\u0062\u006c")
}
func (_ccdg *CT_CustSplit) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_bcgf:
	for {
		_aeddb, _bdgdc := d.Token()
		if _bdgdc != nil {
			return _bdgdc
		}
		switch _fedc := _aeddb.(type) {
		case _b.StartElement:
			switch _fedc.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0050\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0050\u0074"}:
				_bgcf := NewCT_UnsignedInt()
				if _dged := d.DecodeElement(_bgcf, &_fedc); _dged != nil {
					return _dged
				}
				_ccdg.SecondPiePt = append(_ccdg.SecondPiePt, _bgcf)
			default:
				_df.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_C\u0075\u0073t\u0053\u0070\u006c\u0069\u0074\u0020\u0025\u0076", _fedc.Name)
				if _ebf := d.Skip(); _ebf != nil {
					return _ebf
				}
			}
		case _b.EndElement:
			break _bcgf
		case _b.CharData:
		}
	}
	return nil
}
func NewCT_UpDownBars() *CT_UpDownBars { _ffdc := &CT_UpDownBars{}; return _ffdc }

type ST_LayoutMode byte

func (_eggb *CT_ManualLayout) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_beae:
	for {
		_faeb, _afcd := d.Token()
		if _afcd != nil {
			return _afcd
		}
		switch _cafd := _faeb.(type) {
		case _b.StartElement:
			switch _cafd.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079o\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079o\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074"}:
				_eggb.LayoutTarget = NewCT_LayoutTarget()
				if _bfaca := d.DecodeElement(_eggb.LayoutTarget, &_cafd); _bfaca != nil {
					return _bfaca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u004d\u006fd\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u004d\u006fd\u0065"}:
				_eggb.XMode = NewCT_LayoutMode()
				if _fdbe := d.DecodeElement(_eggb.XMode, &_cafd); _fdbe != nil {
					return _fdbe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u004d\u006fd\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u004d\u006fd\u0065"}:
				_eggb.YMode = NewCT_LayoutMode()
				if _efca := d.DecodeElement(_eggb.YMode, &_cafd); _efca != nil {
					return _efca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077\u004d\u006fd\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077\u004d\u006fd\u0065"}:
				_eggb.WMode = NewCT_LayoutMode()
				if _ceagc := d.DecodeElement(_eggb.WMode, &_cafd); _ceagc != nil {
					return _ceagc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u004d\u006fd\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u004d\u006fd\u0065"}:
				_eggb.HMode = NewCT_LayoutMode()
				if _bfbb := d.DecodeElement(_eggb.HMode, &_cafd); _bfbb != nil {
					return _bfbb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078"}:
				_eggb.X = NewCT_Double()
				if _bcdggc := d.DecodeElement(_eggb.X, &_cafd); _bcdggc != nil {
					return _bcdggc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079"}:
				_eggb.Y = NewCT_Double()
				if _acac := d.DecodeElement(_eggb.Y, &_cafd); _acac != nil {
					return _acac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077"}:
				_eggb.W = NewCT_Double()
				if _cbde := d.DecodeElement(_eggb.W, &_cafd); _cbde != nil {
					return _cbde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068"}:
				_eggb.H = NewCT_Double()
				if _edga := d.DecodeElement(_eggb.H, &_cafd); _edga != nil {
					return _edga
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_eggb.ExtLst = NewCT_ExtensionList()
				if _abaaf := d.DecodeElement(_eggb.ExtLst, &_cafd); _abaaf != nil {
					return _abaaf
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004d\u0061\u006eu\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074\u0020\u0025\u0076", _cafd.Name)
				if _bcabd := d.Skip(); _bcabd != nil {
					return _bcabd
				}
			}
		case _b.EndElement:
			break _beae
		case _b.CharData:
		}
	}
	return nil
}
func (_dcfa *CT_PivotFmt) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_ccad := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_dcfa.Idx, _ccad)
	if _dcfa.SpPr != nil {
		_cggcee := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_dcfa.SpPr, _cggcee)
	}
	if _dcfa.TxPr != nil {
		_gaef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_dcfa.TxPr, _gaef)
	}
	if _dcfa.Marker != nil {
		_feaa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_dcfa.Marker, _feaa)
	}
	if _dcfa.DLbl != nil {
		_abca := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u004c\u0062\u006c"}}
		e.EncodeElement(_dcfa.DLbl, _abca)
	}
	if _dcfa.ExtLst != nil {
		_gdeae := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dcfa.ExtLst, _gdeae)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_DepthPercent struct {

	// Depth Percent Value
	ValAttr *ST_DepthPercent
}

func (_efbde *CT_SerTxChoice) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _efbde.StrRef != nil {
		_ddfg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_efbde.StrRef, _ddfg)
	} else if _efbde.V != nil {
		_dgfad := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076"}}
		_gf.AddPreserveSpaceAttr(&_dgfad, *_efbde.V)
		e.EncodeElement(_efbde.V, _dgfad)
	}
	return nil
}
func (_edgedf ST_Grouping) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_ebbeg := _b.Attr{}
	_ebbeg.Name = name
	switch _edgedf {
	case ST_GroupingUnset:
		_ebbeg.Value = ""
	case ST_GroupingPercentStacked:
		_ebbeg.Value = "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case ST_GroupingStandard:
		_ebbeg.Value = "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case ST_GroupingStacked:
		_ebbeg.Value = "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return _ebbeg, nil
}
func (_faebg *CT_SecondPieSize) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _faebg.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", *_faebg.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_FirstSliceAng and its children, prefixing error messages with path
func (_ecebd *CT_FirstSliceAng) ValidateWithPath(path string) error {
	if _ecebd.ValAttr != nil {
		if *_ecebd.ValAttr < 0 {
			return _g.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_ecebd.ValAttr)
		}
		if *_ecebd.ValAttr > 360 {
			return _g.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003c\u003d\u0020\u0033\u0036\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_ecebd.ValAttr)
		}
	}
	return nil
}
func (_gdfdd *CT_PageMargins) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u006c"}, Value: _g.Sprintf("\u0025\u0076", _gdfdd.LAttr)})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0072"}, Value: _g.Sprintf("\u0025\u0076", _gdfdd.RAttr)})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0074"}, Value: _g.Sprintf("\u0025\u0076", _gdfdd.TAttr)})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0062"}, Value: _g.Sprintf("\u0025\u0076", _gdfdd.BAttr)})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0068\u0065\u0061\u0064\u0065\u0072"}, Value: _g.Sprintf("\u0025\u0076", _gdfdd.HeaderAttr)})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0066\u006f\u006f\u0074\u0065\u0072"}, Value: _g.Sprintf("\u0025\u0076", _gdfdd.FooterAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_cecbf *EG_AxSharedChoice) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _cecbf.Crosses != nil {
		_abadd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0065s"}}
		e.EncodeElement(_cecbf.Crosses, _abadd)
	} else if _cecbf.CrossesAt != nil {
		_cdgf := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0063\u0072\u006f\u0073\u0073\u0065\u0073\u0041\u0074"}}
		e.EncodeElement(_cecbf.CrossesAt, _cdgf)
	}
	return nil
}
func (_bagee *CT_SplitType) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _eccfd := range start.Attr {
		if _eccfd.Name.Local == "\u0076\u0061\u006c" {
			_bagee.ValAttr.UnmarshalXMLAttr(_eccfd)
			continue
		}
	}
	for {
		_dabd, _efbc := d.Token()
		if _efbc != nil {
			return _g.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0070l\u0069\u0074\u0054\u0079\u0070\u0065\u003a\u0020\u0025\u0073", _efbc)
		}
		if _aacce, _cfeac := _dabd.(_b.EndElement); _cfeac && _aacce.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_ErrBarType and its children
func (_cbgbc *CT_ErrBarType) Validate() error {
	return _cbgbc.ValidateWithPath("\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065")
}
func (_dbgf *Group_DLbls) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_afbdc:
	for {
		_dfbg, _dggbd := d.Token()
		if _dggbd != nil {
			return _dggbd
		}
		switch _dgcfe := _dfbg.(type) {
		case _b.StartElement:
			switch _dgcfe.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_dbgf.NumFmt = NewCT_NumFmt()
				if _ccedg := d.DecodeElement(_dbgf.NumFmt, &_dgcfe); _ccedg != nil {
					return _ccedg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_dbgf.SpPr = _gfc.NewCT_ShapeProperties()
				if _dgceb := d.DecodeElement(_dbgf.SpPr, &_dgcfe); _dgceb != nil {
					return _dgceb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_dbgf.TxPr = _gfc.NewCT_TextBody()
				if _cafdc := d.DecodeElement(_dbgf.TxPr, &_dgcfe); _cafdc != nil {
					return _cafdc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_dbgf.DLblPos = NewCT_DLblPos()
				if _fcegb := d.DecodeElement(_dbgf.DLblPos, &_dgcfe); _fcegb != nil {
					return _fcegb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_dbgf.ShowLegendKey = NewCT_Boolean()
				if _bbgga := d.DecodeElement(_dbgf.ShowLegendKey, &_dgcfe); _bbgga != nil {
					return _bbgga
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_dbgf.ShowVal = NewCT_Boolean()
				if _bgcdg := d.DecodeElement(_dbgf.ShowVal, &_dgcfe); _bgcdg != nil {
					return _bgcdg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_dbgf.ShowCatName = NewCT_Boolean()
				if _fecac := d.DecodeElement(_dbgf.ShowCatName, &_dgcfe); _fecac != nil {
					return _fecac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_dbgf.ShowSerName = NewCT_Boolean()
				if _bfged := d.DecodeElement(_dbgf.ShowSerName, &_dgcfe); _bfged != nil {
					return _bfged
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_dbgf.ShowPercent = NewCT_Boolean()
				if _dfccg := d.DecodeElement(_dbgf.ShowPercent, &_dgcfe); _dfccg != nil {
					return _dfccg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_dbgf.ShowBubbleSize = NewCT_Boolean()
				if _efggb := d.DecodeElement(_dbgf.ShowBubbleSize, &_dgcfe); _efggb != nil {
					return _efggb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_dbgf.Separator = new(string)
				if _bbgcf := d.DecodeElement(_dbgf.Separator, &_dgcfe); _bbgcf != nil {
					return _bbgcf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_dbgf.ShowLeaderLines = NewCT_Boolean()
				if _fcea := d.DecodeElement(_dbgf.ShowLeaderLines, &_dgcfe); _fcea != nil {
					return _fcea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_dbgf.LeaderLines = NewCT_ChartLines()
				if _edcef := d.DecodeElement(_dbgf.LeaderLines, &_dgcfe); _edcef != nil {
					return _edcef
				}
			default:
				_df.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0047\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c\u0073\u0020\u0025\u0076", _dgcfe.Name)
				if _cedfd := d.Skip(); _cedfd != nil {
					return _cedfd
				}
			}
		case _b.EndElement:
			break _afbdc
		case _b.CharData:
		}
	}
	return nil
}
func (_dggb *CT_ManualLayout) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _dggb.LayoutTarget != nil {
		_gecc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074\u0054a\u0072\u0067\u0065\u0074"}}
		e.EncodeElement(_dggb.LayoutTarget, _gecc)
	}
	if _dggb.XMode != nil {
		_ddeb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0078\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_dggb.XMode, _ddeb)
	}
	if _dggb.YMode != nil {
		_ceffd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0079\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_dggb.YMode, _ceffd)
	}
	if _dggb.WMode != nil {
		_gdfge := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0077\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_dggb.WMode, _gdfge)
	}
	if _dggb.HMode != nil {
		_faeg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0068\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_dggb.HMode, _faeg)
	}
	if _dggb.X != nil {
		_bgba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0078"}}
		e.EncodeElement(_dggb.X, _bgba)
	}
	if _dggb.Y != nil {
		_cfba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0079"}}
		e.EncodeElement(_dggb.Y, _cfba)
	}
	if _dggb.W != nil {
		_aabae := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0077"}}
		e.EncodeElement(_dggb.W, _aabae)
	}
	if _dggb.H != nil {
		_dabc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0068"}}
		e.EncodeElement(_dggb.H, _dabc)
	}
	if _dggb.ExtLst != nil {
		_ggage := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dggb.ExtLst, _ggage)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_dgfe ST_DLblPos) String() string {
	switch _dgfe {
	case 0:
		return ""
	case 1:
		return "\u0062e\u0073\u0074\u0046\u0069\u0074"
	case 2:
		return "\u0062"
	case 3:
		return "\u0063\u0074\u0072"
	case 4:
		return "\u0069\u006e\u0042\u0061\u0073\u0065"
	case 5:
		return "\u0069\u006e\u0045n\u0064"
	case 6:
		return "\u006c"
	case 7:
		return "\u006f\u0075\u0074\u0045\u006e\u0064"
	case 8:
		return "\u0072"
	case 9:
		return "\u0074"
	}
	return ""
}

// ValidateWithPath validates the CT_PictureOptions and its children, prefixing error messages with path
func (_ccdc *CT_PictureOptions) ValidateWithPath(path string) error {
	if _ccdc.ApplyToFront != nil {
		if _cgbf := _ccdc.ApplyToFront.ValidateWithPath(path + "\u002f\u0041\u0070\u0070\u006c\u0079\u0054\u006f\u0046\u0072\u006f\u006e\u0074"); _cgbf != nil {
			return _cgbf
		}
	}
	if _ccdc.ApplyToSides != nil {
		if _bcfa := _ccdc.ApplyToSides.ValidateWithPath(path + "\u002f\u0041\u0070\u0070\u006c\u0079\u0054\u006f\u0053\u0069\u0064\u0065\u0073"); _bcfa != nil {
			return _bcfa
		}
	}
	if _ccdc.ApplyToEnd != nil {
		if _afafb := _ccdc.ApplyToEnd.ValidateWithPath(path + "/\u0041\u0070\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"); _afafb != nil {
			return _afafb
		}
	}
	if _ccdc.PictureFormat != nil {
		if _fgce := _ccdc.PictureFormat.ValidateWithPath(path + "\u002f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u0046o\u0072\u006d\u0061\u0074"); _fgce != nil {
			return _fgce
		}
	}
	if _ccdc.PictureStackUnit != nil {
		if _gccf := _ccdc.PictureStackUnit.ValidateWithPath(path + "\u002f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u0053\u0074\u0061\u0063k\u0055\u006e\u0069\u0074"); _gccf != nil {
			return _gccf
		}
	}
	return nil
}

type CT_NumVal struct {

	// Index
	IdxAttr uint32

	// Number Format
	FormatCodeAttr *string

	// Numeric Value
	V string
}

func NewCT_OfPieType() *CT_OfPieType { _acfg := &CT_OfPieType{}; return _acfg }
func (_bccaa *CT_OfPieType) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _gbbc := range start.Attr {
		if _gbbc.Name.Local == "\u0076\u0061\u006c" {
			_bccaa.ValAttr.UnmarshalXMLAttr(_gbbc)
			continue
		}
	}
	for {
		_bcgea, _bgegb := d.Token()
		if _bgegb != nil {
			return _g.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u004f\u0066P\u0069\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0025\u0073", _bgegb)
		}
		if _ageda, _bddfa := _bcgea.(_b.EndElement); _bddfa && _ageda.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gcead ST_OfPieType) String() string {
	switch _gcead {
	case 0:
		return ""
	case 1:
		return "\u0070\u0069\u0065"
	case 2:
		return "\u0062\u0061\u0072"
	}
	return ""
}
func (_ffbae ST_TrendlineType) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_beag := _b.Attr{}
	_beag.Name = name
	switch _ffbae {
	case ST_TrendlineTypeUnset:
		_beag.Value = ""
	case ST_TrendlineTypeExp:
		_beag.Value = "\u0065\u0078\u0070"
	case ST_TrendlineTypeLinear:
		_beag.Value = "\u006c\u0069\u006e\u0065\u0061\u0072"
	case ST_TrendlineTypeLog:
		_beag.Value = "\u006c\u006f\u0067"
	case ST_TrendlineTypeMovingAvg:
		_beag.Value = "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g"
	case ST_TrendlineTypePoly:
		_beag.Value = "\u0070\u006f\u006c\u0079"
	case ST_TrendlineTypePower:
		_beag.Value = "\u0070\u006f\u0077e\u0072"
	}
	return _beag, nil
}
func (_bdcfd *ST_BubbleScale) Validate() error { return _bdcfd.ValidateWithPath("") }

type CT_Title struct {

	// Chart Text
	Tx *CT_Tx

	// Layout
	Layout *CT_Layout

	// Overlay
	Overlay *CT_Boolean
	SpPr    *_gfc.CT_ShapeProperties
	TxPr    *_gfc.CT_TextBody

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}
type ST_ErrDir byte

func (_gbfc *CT_Chart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_gbfc.PlotArea = NewCT_PlotArea()
_egfeb:
	for {
		_gfgg, _bbcg := d.Token()
		if _bbcg != nil {
			return _bbcg
		}
		switch _dddb := _gfgg.(type) {
		case _b.StartElement:
			switch _dddb.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_gbfc.Title = NewCT_Title()
				if _bbabf := d.DecodeElement(_gbfc.Title, &_dddb); _bbabf != nil {
					return _bbabf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075t\u006f\u0054\u0069t\u006c\u0065\u0044\u0065\u006c\u0065\u0074\u0065\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075t\u006f\u0054\u0069t\u006c\u0065\u0044\u0065\u006c\u0065\u0074\u0065\u0064"}:
				_gbfc.AutoTitleDeleted = NewCT_Boolean()
				if _aecb := d.DecodeElement(_gbfc.AutoTitleDeleted, &_dddb); _aecb != nil {
					return _aecb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070i\u0076\u006f\u0074\u0046\u006d\u0074s"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070i\u0076\u006f\u0074\u0046\u006d\u0074s"}:
				_gbfc.PivotFmts = NewCT_PivotFmts()
				if _eage := d.DecodeElement(_gbfc.PivotFmts, &_dddb); _eage != nil {
					return _eage
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0069\u0065\u0077\u0033\u0044"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0069\u0065\u0077\u0033\u0044"}:
				_gbfc.View3D = NewCT_View3D()
				if _eafg := d.DecodeElement(_gbfc.View3D, &_dddb); _eafg != nil {
					return _eafg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006c\u006fo\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006c\u006fo\u0072"}:
				_gbfc.Floor = NewCT_Surface()
				if _bedfb := d.DecodeElement(_gbfc.Floor, &_dddb); _bedfb != nil {
					return _bedfb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u0064\u0065\u0057\u0061\u006c\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u0064\u0065\u0057\u0061\u006c\u006c"}:
				_gbfc.SideWall = NewCT_Surface()
				if _bfge := d.DecodeElement(_gbfc.SideWall, &_dddb); _bfge != nil {
					return _bfge
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0057\u0061\u006c\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0057\u0061\u006c\u006c"}:
				_gbfc.BackWall = NewCT_Surface()
				if _abg := d.DecodeElement(_gbfc.BackWall, &_dddb); _abg != nil {
					return _abg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u006f\u0074\u0041\u0072\u0065\u0061"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u006f\u0074\u0041\u0072\u0065\u0061"}:
				if _efge := d.DecodeElement(_gbfc.PlotArea, &_dddb); _efge != nil {
					return _efge
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0065\u0067\u0065\u006e\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0065\u0067\u0065\u006e\u0064"}:
				_gbfc.Legend = NewCT_Legend()
				if _aeag := d.DecodeElement(_gbfc.Legend, &_dddb); _aeag != nil {
					return _aeag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u006c\u006f\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u006c\u006f\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"}:
				_gbfc.PlotVisOnly = NewCT_Boolean()
				if _ecfe := d.DecodeElement(_gbfc.PlotVisOnly, &_dddb); _ecfe != nil {
					return _ecfe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073"}:
				_gbfc.DispBlanksAs = NewCT_DispBlanksAs()
				if _fcab := d.DecodeElement(_gbfc.DispBlanksAs, &_dddb); _fcab != nil {
					return _fcab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068o\u0077\u0044\u004cb\u006c\u0073\u004f\u0076\u0065\u0072\u004d\u0061\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068o\u0077\u0044\u004cb\u006c\u0073\u004f\u0076\u0065\u0072\u004d\u0061\u0078"}:
				_gbfc.ShowDLblsOverMax = NewCT_Boolean()
				if _fcgf := d.DecodeElement(_gbfc.ShowDLblsOverMax, &_dddb); _fcgf != nil {
					return _fcgf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gbfc.ExtLst = NewCT_ExtensionList()
				if _cceb := d.DecodeElement(_gbfc.ExtLst, &_dddb); _cceb != nil {
					return _cceb
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _dddb.Name)
				if _cfbg := d.Skip(); _cfbg != nil {
					return _cfbg
				}
			}
		case _b.EndElement:
			break _egfeb
		case _b.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_NumVal and its children, prefixing error messages with path
func (_cdbeg *CT_NumVal) ValidateWithPath(path string) error { return nil }

// Validate validates the CT_RadarStyle and its children
func (_gddd *CT_RadarStyle) Validate() error {
	return _gddd.ValidateWithPath("\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065")
}
func (_dcdf *CT_Tx) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_dcdf.TxChoice.MarshalXML(e, _b.StartElement{})
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_ManualLayout and its children, prefixing error messages with path
func (_fagf *CT_ManualLayout) ValidateWithPath(path string) error {
	if _fagf.LayoutTarget != nil {
		if _aabf := _fagf.LayoutTarget.ValidateWithPath(path + "\u002f\u004c\u0061\u0079\u006f\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074"); _aabf != nil {
			return _aabf
		}
	}
	if _fagf.XMode != nil {
		if _gdecb := _fagf.XMode.ValidateWithPath(path + "\u002f\u0058\u004d\u006f\u0064\u0065"); _gdecb != nil {
			return _gdecb
		}
	}
	if _fagf.YMode != nil {
		if _gebc := _fagf.YMode.ValidateWithPath(path + "\u002f\u0059\u004d\u006f\u0064\u0065"); _gebc != nil {
			return _gebc
		}
	}
	if _fagf.WMode != nil {
		if _afcc := _fagf.WMode.ValidateWithPath(path + "\u002f\u0057\u004d\u006f\u0064\u0065"); _afcc != nil {
			return _afcc
		}
	}
	if _fagf.HMode != nil {
		if _gacga := _fagf.HMode.ValidateWithPath(path + "\u002f\u0048\u004d\u006f\u0064\u0065"); _gacga != nil {
			return _gacga
		}
	}
	if _fagf.X != nil {
		if _ecfc := _fagf.X.ValidateWithPath(path + "\u002f\u0058"); _ecfc != nil {
			return _ecfc
		}
	}
	if _fagf.Y != nil {
		if _aaaee := _fagf.Y.ValidateWithPath(path + "\u002f\u0059"); _aaaee != nil {
			return _aaaee
		}
	}
	if _fagf.W != nil {
		if _ccfc := _fagf.W.ValidateWithPath(path + "\u002f\u0057"); _ccfc != nil {
			return _ccfc
		}
	}
	if _fagf.H != nil {
		if _cece := _fagf.H.ValidateWithPath(path + "\u002f\u0048"); _cece != nil {
			return _cece
		}
	}
	if _fagf.ExtLst != nil {
		if _cfcfc := _fagf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cfcfc != nil {
			return _cfcfc
		}
	}
	return nil
}
func (_cbfdf *CT_TimeUnit) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _cbfdf.ValAttr != ST_TimeUnitUnset {
		_cggff, _fdfbf := _cbfdf.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _fdfbf != nil {
			return _fdfbf
		}
		start.Attr = append(start.Attr, _cggff)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func ParseUnionST_SecondPieSize(s string) (ST_SecondPieSize, error) {
	if ST_SecondPieSizePercentPatternRe.MatchString(s) {
		return ST_SecondPieSize{ST_SecondPieSizePercent: &s}, nil
	}
	_ffgd, _bbbfgb := _e.ParseUint(s, 10, 16)
	if _bbbfgb != nil {
		return ST_SecondPieSize{}, _bbbfgb
	}
	_dbfgd := uint16(_ffgd)
	return ST_SecondPieSize{ST_SecondPieSizeUShort: &_dbfgd}, nil
}
func (_dabcg ST_TickLblPos) String() string {
	switch _dabcg {
	case 0:
		return ""
	case 1:
		return "\u0068\u0069\u0067\u0068"
	case 2:
		return "\u006c\u006f\u0077"
	case 3:
		return "\u006e\u0065\u0078\u0074\u0054\u006f"
	case 4:
		return "\u006e\u006f\u006e\u0065"
	}
	return ""
}
func (_egebf ST_BarDir) ValidateWithPath(path string) error {
	switch _egebf {
	case 0, 1, 2:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_egebf))
	}
	return nil
}
func (_caaa *CT_LineSer) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_cebc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_caaa.Idx, _cebc)
	_gdcb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_caaa.Order, _gdcb)
	if _caaa.Tx != nil {
		_bcea := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_caaa.Tx, _bcea)
	}
	if _caaa.SpPr != nil {
		_bdgg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_caaa.SpPr, _bdgg)
	}
	if _caaa.Marker != nil {
		_cfeab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_caaa.Marker, _cfeab)
	}
	if _caaa.DPt != nil {
		_gega := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _gbaba := range _caaa.DPt {
			e.EncodeElement(_gbaba, _gega)
		}
	}
	if _caaa.DLbls != nil {
		_eacd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_caaa.DLbls, _eacd)
	}
	if _caaa.Trendline != nil {
		_ffgec := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _adac := range _caaa.Trendline {
			e.EncodeElement(_adac, _ffgec)
		}
	}
	if _caaa.ErrBars != nil {
		_geceg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		e.EncodeElement(_caaa.ErrBars, _geceg)
	}
	if _caaa.Cat != nil {
		_cffb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_caaa.Cat, _cffb)
	}
	if _caaa.Val != nil {
		_fabb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_caaa.Val, _fabb)
	}
	if _caaa.Smooth != nil {
		_ecff := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u006d\u006f\u006f\u0074\u0068"}}
		e.EncodeElement(_caaa.Smooth, _ecff)
	}
	if _caaa.ExtLst != nil {
		_ffegg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_caaa.ExtLst, _ffegg)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_dgbffc ST_LegendPos) ValidateWithPath(path string) error {
	switch _dgbffc {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dgbffc))
	}
	return nil
}

type CT_DateAx struct {

	// Axis ID
	AxId *CT_UnsignedInt

	// Scaling
	Scaling *CT_Scaling

	// Delete
	Delete *CT_Boolean

	// Axis Position
	AxPos *CT_AxPos

	// Major Gridlines
	MajorGridlines *CT_ChartLines

	// Minor Gridlines
	MinorGridlines *CT_ChartLines

	// Title
	Title *CT_Title

	// Number Format
	NumFmt *CT_NumFmt

	// Major Tick Mark
	MajorTickMark *CT_TickMark

	// Minor Tick Mark
	MinorTickMark *CT_TickMark

	// Tick Label Position
	TickLblPos *CT_TickLblPos
	SpPr       *_gfc.CT_ShapeProperties
	TxPr       *_gfc.CT_TextBody

	// Crossing Axis ID
	CrossAx        *CT_UnsignedInt
	AxSharedChoice *EG_AxSharedChoice

	// Automatic Category Axis
	Auto *CT_Boolean

	// Label Offset
	LblOffset *CT_LblOffset

	// Base Time Unit
	BaseTimeUnit *CT_TimeUnit

	// Major Unit
	MajorUnit *CT_AxisUnit

	// Major Time Unit
	MajorTimeUnit *CT_TimeUnit

	// Minor Unit
	MinorUnit *CT_AxisUnit

	// Minor Time Unit
	MinorTimeUnit *CT_TimeUnit

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func NewCT_LblOffset() *CT_LblOffset { _cggef := &CT_LblOffset{}; return _cggef }
func NewCT_Double() *CT_Double       { _gbag := &CT_Double{}; return _gbag }
func (_bbgd *CT_Surface3DChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _bbgd.Wireframe != nil {
		_daga := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0077\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"}}
		e.EncodeElement(_bbgd.Wireframe, _daga)
	}
	if _bbgd.Ser != nil {
		_afef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _fbgd := range _bbgd.Ser {
			e.EncodeElement(_fbgd, _afef)
		}
	}
	if _bbgd.BandFmts != nil {
		_eggcfa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_bbgd.BandFmts, _eggcfa)
	}
	_fcebg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _abfgg := range _bbgd.AxId {
		e.EncodeElement(_abfgg, _fcebg)
	}
	if _bbgd.ExtLst != nil {
		_edcgb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bbgd.ExtLst, _edcgb)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_DLblPos and its children, prefixing error messages with path
func (_fafb *CT_DLblPos) ValidateWithPath(path string) error {
	if _fafb.ValAttr == ST_DLblPosUnset {
		return _g.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _gcegb := _fafb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gcegb != nil {
		return _gcegb
	}
	return nil
}
func NewCT_Pie3DChart() *CT_Pie3DChart { _caaad := &CT_Pie3DChart{}; return _caaad }

// ValidateWithPath validates the CT_PivotFmt and its children, prefixing error messages with path
func (_dbef *CT_PivotFmt) ValidateWithPath(path string) error {
	if _daacb := _dbef.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _daacb != nil {
		return _daacb
	}
	if _dbef.SpPr != nil {
		if _fdccg := _dbef.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fdccg != nil {
			return _fdccg
		}
	}
	if _dbef.TxPr != nil {
		if _dfgac := _dbef.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _dfgac != nil {
			return _dfgac
		}
	}
	if _dbef.Marker != nil {
		if _dacc := _dbef.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _dacc != nil {
			return _dacc
		}
	}
	if _dbef.DLbl != nil {
		if _cabdd := _dbef.DLbl.ValidateWithPath(path + "\u002f\u0044\u004cb\u006c"); _cabdd != nil {
			return _cabdd
		}
	}
	if _dbef.ExtLst != nil {
		if _gcgfa := _dbef.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gcgfa != nil {
			return _gcgfa
		}
	}
	return nil
}

// Validate validates the CT_BarDir and its children
func (_cefg *CT_BarDir) Validate() error {
	return _cefg.ValidateWithPath("\u0043T\u005f\u0042\u0061\u0072\u0044\u0069r")
}

var ST_OverlapPercentPatternRe = _f.MustCompile(ST_OverlapPercentPattern)

func (_ebcaa *ST_Overlap) Validate() error { return _ebcaa.ValidateWithPath("") }
func (_eadg *CT_ErrDir) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_fcccf, _fgfe := _eadg.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
	if _fgfe != nil {
		return _fgfe
	}
	start.Attr = append(start.Attr, _fcccf)
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_BarSer and its children, prefixing error messages with path
func (_abdd *CT_BarSer) ValidateWithPath(path string) error {
	if _cdbe := _abdd.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _cdbe != nil {
		return _cdbe
	}
	if _ffc := _abdd.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _ffc != nil {
		return _ffc
	}
	if _abdd.Tx != nil {
		if _ccfd := _abdd.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _ccfd != nil {
			return _ccfd
		}
	}
	if _abdd.SpPr != nil {
		if _eabf := _abdd.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _eabf != nil {
			return _eabf
		}
	}
	if _abdd.InvertIfNegative != nil {
		if _cdf := _abdd.InvertIfNegative.ValidateWithPath(path + "\u002f\u0049\u006e\u0076\u0065\u0072\u0074\u0049\u0066\u004e\u0065\u0067a\u0074\u0069\u0076\u0065"); _cdf != nil {
			return _cdf
		}
	}
	if _abdd.PictureOptions != nil {
		if _dgb := _abdd.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _dgb != nil {
			return _dgb
		}
	}
	for _dgf, _efcg := range _abdd.DPt {
		if _gadg := _efcg.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _dgf)); _gadg != nil {
			return _gadg
		}
	}
	if _abdd.DLbls != nil {
		if _feb := _abdd.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _feb != nil {
			return _feb
		}
	}
	for _eed, _fdeb := range _abdd.Trendline {
		if _bbab := _fdeb.ValidateWithPath(_g.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _eed)); _bbab != nil {
			return _bbab
		}
	}
	if _abdd.ErrBars != nil {
		if _edaa := _abdd.ErrBars.ValidateWithPath(path + "\u002f\u0045\u0072\u0072\u0042\u0061\u0072\u0073"); _edaa != nil {
			return _edaa
		}
	}
	if _abdd.Cat != nil {
		if _abbf := _abdd.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _abbf != nil {
			return _abbf
		}
	}
	if _abdd.Val != nil {
		if _eaa := _abdd.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _eaa != nil {
			return _eaa
		}
	}
	if _abdd.Shape != nil {
		if _ddfe := _abdd.Shape.ValidateWithPath(path + "\u002f\u0053\u0068\u0061\u0070\u0065"); _ddfe != nil {
			return _ddfe
		}
	}
	if _abdd.ExtLst != nil {
		if _geba := _abdd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _geba != nil {
			return _geba
		}
	}
	return nil
}

type CT_ErrValType struct {

	// Error Bar Type Value
	ValAttr ST_ErrValType
}

func (_aecc *CT_MultiLvlStrRef) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_fbbaa:
	for {
		_dcbf, _ffbeb := d.Token()
		if _ffbeb != nil {
			return _ffbeb
		}
		switch _gbfgd := _dcbf.(type) {
		case _b.StartElement:
			switch _gbfgd.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}:
				if _bgbcd := d.DecodeElement(&_aecc.F, &_gbfgd); _bgbcd != nil {
					return _bgbcd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075l\u0074\u0069\u004cv\u006c\u0053\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075l\u0074\u0069\u004cv\u006c\u0053\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}:
				_aecc.MultiLvlStrCache = NewCT_MultiLvlStrData()
				if _adde := d.DecodeElement(_aecc.MultiLvlStrCache, &_gbfgd); _adde != nil {
					return _adde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aecc.ExtLst = NewCT_ExtensionList()
				if _dede := d.DecodeElement(_aecc.ExtLst, &_gbfgd); _dede != nil {
					return _dede
				}
			default:
				_df.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053\u0074\u0072\u0052\u0065\u0066\u0020\u0025\u0076", _gbfgd.Name)
				if _bbbca := d.Skip(); _bbbca != nil {
					return _bbbca
				}
			}
		case _b.EndElement:
			break _fbbaa
		case _b.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Chart and its children, prefixing error messages with path
func (_fcbe *CT_Chart) ValidateWithPath(path string) error {
	if _fcbe.Title != nil {
		if _cgdcd := _fcbe.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _cgdcd != nil {
			return _cgdcd
		}
	}
	if _fcbe.AutoTitleDeleted != nil {
		if _degg := _fcbe.AutoTitleDeleted.ValidateWithPath(path + "\u002f\u0041\u0075\u0074\u006f\u0054\u0069\u0074\u006c\u0065\u0044\u0065l\u0065\u0074\u0065\u0064"); _degg != nil {
			return _degg
		}
	}
	if _fcbe.PivotFmts != nil {
		if _cgfdd := _fcbe.PivotFmts.ValidateWithPath(path + "\u002f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073"); _cgfdd != nil {
			return _cgfdd
		}
	}
	if _fcbe.View3D != nil {
		if _bgfg := _fcbe.View3D.ValidateWithPath(path + "\u002fV\u0069\u0065\u0077\u0033\u0044"); _bgfg != nil {
			return _bgfg
		}
	}
	if _fcbe.Floor != nil {
		if _effd := _fcbe.Floor.ValidateWithPath(path + "\u002f\u0046\u006c\u006f\u006f\u0072"); _effd != nil {
			return _effd
		}
	}
	if _fcbe.SideWall != nil {
		if _dgbc := _fcbe.SideWall.ValidateWithPath(path + "\u002fS\u0069\u0064\u0065\u0057\u0061\u006cl"); _dgbc != nil {
			return _dgbc
		}
	}
	if _fcbe.BackWall != nil {
		if _fbff := _fcbe.BackWall.ValidateWithPath(path + "\u002fB\u0061\u0063\u006b\u0057\u0061\u006cl"); _fbff != nil {
			return _fbff
		}
	}
	if _ebdb := _fcbe.PlotArea.ValidateWithPath(path + "\u002fP\u006c\u006f\u0074\u0041\u0072\u0065a"); _ebdb != nil {
		return _ebdb
	}
	if _fcbe.Legend != nil {
		if _adgd := _fcbe.Legend.ValidateWithPath(path + "\u002fL\u0065\u0067\u0065\u006e\u0064"); _adgd != nil {
			return _adgd
		}
	}
	if _fcbe.PlotVisOnly != nil {
		if _dgda := _fcbe.PlotVisOnly.ValidateWithPath(path + "\u002f\u0050\u006co\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"); _dgda != nil {
			return _dgda
		}
	}
	if _fcbe.DispBlanksAs != nil {
		if _aede := _fcbe.DispBlanksAs.ValidateWithPath(path + "\u002f\u0044\u0069\u0073\u0070\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073"); _aede != nil {
			return _aede
		}
	}
	if _fcbe.ShowDLblsOverMax != nil {
		if _gbdff := _fcbe.ShowDLblsOverMax.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0044\u004c\u0062\u006c\u0073\u004f\u0076e\u0072\u004d\u0061\u0078"); _gbdff != nil {
			return _gbdff
		}
	}
	if _fcbe.ExtLst != nil {
		if _fbba := _fcbe.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fbba != nil {
			return _fbba
		}
	}
	return nil
}
func (_bgeg *CT_Extension) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _fbcfc := range start.Attr {
		if _fbcfc.Name.Local == "\u0075\u0072\u0069" {
			_gccd := _fbcfc.Value
			_bgeg.UriAttr = &_gccd
			continue
		}
	}
_eeafd:
	for {
		_bcge, _dbcf := d.Token()
		if _dbcf != nil {
			return _dbcf
		}
		switch _fgcg := _bcge.(type) {
		case _b.StartElement:
			switch _fgcg.Name {
			default:
				if _baac, _aadf := _gf.CreateElement(_fgcg); _aadf != nil {
					return _aadf
				} else {
					if _fgcdb := d.DecodeElement(_baac, &_fgcg); _fgcdb != nil {
						return _fgcdb
					}
					_bgeg.Any = _baac
				}
			}
		case _b.EndElement:
			break _eeafd
		case _b.CharData:
		}
	}
	return nil
}

type EG_DLblShared struct {

	// Number Format
	NumFmt *CT_NumFmt
	SpPr   *_gfc.CT_ShapeProperties
	TxPr   *_gfc.CT_TextBody

	// Data Label Position
	DLblPos *CT_DLblPos

	// Show Legend Key
	ShowLegendKey *CT_Boolean

	// Show Value
	ShowVal *CT_Boolean

	// Show Category Name
	ShowCatName *CT_Boolean

	// Show Series Name
	ShowSerName *CT_Boolean

	// Show Percent
	ShowPercent *CT_Boolean

	// Show Bubble Size
	ShowBubbleSize *CT_Boolean

	// Separator
	Separator *string
}

// ValidateWithPath validates the CT_ScatterChart and its children, prefixing error messages with path
func (_aebbf *CT_ScatterChart) ValidateWithPath(path string) error {
	if _cffgg := _aebbf.ScatterStyle.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065"); _cffgg != nil {
		return _cffgg
	}
	if _aebbf.VaryColors != nil {
		if _adcfc := _aebbf.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _adcfc != nil {
			return _adcfc
		}
	}
	for _ebedb, _beeag := range _aebbf.Ser {
		if _ggcdg := _beeag.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _ebedb)); _ggcdg != nil {
			return _ggcdg
		}
	}
	if _aebbf.DLbls != nil {
		if _dgecf := _aebbf.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _dgecf != nil {
			return _dgecf
		}
	}
	for _gbda, _gfgcd := range _aebbf.AxId {
		if _gfdbe := _gfgcd.ValidateWithPath(_g.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _gbda)); _gfdbe != nil {
			return _gfdbe
		}
	}
	if _aebbf.ExtLst != nil {
		if _deccd := _aebbf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _deccd != nil {
			return _deccd
		}
	}
	return nil
}

// ValidateWithPath validates the CT_DispUnits and its children, prefixing error messages with path
func (_bgde *CT_DispUnits) ValidateWithPath(path string) error {
	if _gagd := _bgde.DispUnitsChoice.ValidateWithPath(path + "\u002f\u0044i\u0073\u0070\u0055n\u0069\u0074\u0073\u0043\u0068\u006f\u0069\u0063\u0065"); _gagd != nil {
		return _gagd
	}
	if _bgde.DispUnitsLbl != nil {
		if _ebcg := _bgde.DispUnitsLbl.ValidateWithPath(path + "\u002f\u0044\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c"); _ebcg != nil {
			return _ebcg
		}
	}
	if _bgde.ExtLst != nil {
		if _agdc := _bgde.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _agdc != nil {
			return _agdc
		}
	}
	return nil
}
func (_dacbb *ST_RadarStyle) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_bdcce, _cggegf := d.Token()
	if _cggegf != nil {
		return _cggegf
	}
	if _abdaa, _ddaea := _bdcce.(_b.EndElement); _ddaea && _abdaa.Name == start.Name {
		*_dacbb = 1
		return nil
	}
	if _ffbfe, _dfdab := _bdcce.(_b.CharData); !_dfdab {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bdcce)
	} else {
		switch string(_ffbfe) {
		case "":
			*_dacbb = 0
		case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
			*_dacbb = 1
		case "\u006d\u0061\u0072\u006b\u0065\u0072":
			*_dacbb = 2
		case "\u0066\u0069\u006c\u006c\u0065\u0064":
			*_dacbb = 3
		}
	}
	_bdcce, _cggegf = d.Token()
	if _cggegf != nil {
		return _cggegf
	}
	if _bfbbgg, _dabae := _bdcce.(_b.EndElement); _dabae && _bfbbgg.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bdcce)
}

// Validate validates the CT_Perspective and its children
func (_eggcfb *CT_Perspective) Validate() error {
	return _eggcfb.ValidateWithPath("\u0043\u0054\u005f\u0050\u0065\u0072\u0073\u0070\u0065c\u0074\u0069\u0076\u0065")
}
func (_edagd *CT_DateAx) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_edagd.AxId = NewCT_UnsignedInt()
	_edagd.Scaling = NewCT_Scaling()
	_edagd.AxPos = NewCT_AxPos()
	_edagd.CrossAx = NewCT_UnsignedInt()
_eafa:
	for {
		_aeba, _dae := d.Token()
		if _dae != nil {
			return _dae
		}
		switch _fead := _aeba.(type) {
		case _b.StartElement:
			switch _fead.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _ecfgb := d.DecodeElement(_edagd.AxId, &_fead); _ecfgb != nil {
					return _ecfgb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _gbaf := d.DecodeElement(_edagd.Scaling, &_fead); _gbaf != nil {
					return _gbaf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_edagd.Delete = NewCT_Boolean()
				if _ffea := d.DecodeElement(_edagd.Delete, &_fead); _ffea != nil {
					return _ffea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _abdb := d.DecodeElement(_edagd.AxPos, &_fead); _abdb != nil {
					return _abdb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_edagd.MajorGridlines = NewCT_ChartLines()
				if _cbdd := d.DecodeElement(_edagd.MajorGridlines, &_fead); _cbdd != nil {
					return _cbdd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_edagd.MinorGridlines = NewCT_ChartLines()
				if _fedb := d.DecodeElement(_edagd.MinorGridlines, &_fead); _fedb != nil {
					return _fedb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_edagd.Title = NewCT_Title()
				if _bfdfc := d.DecodeElement(_edagd.Title, &_fead); _bfdfc != nil {
					return _bfdfc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_edagd.NumFmt = NewCT_NumFmt()
				if _bgca := d.DecodeElement(_edagd.NumFmt, &_fead); _bgca != nil {
					return _bgca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_edagd.MajorTickMark = NewCT_TickMark()
				if _gbba := d.DecodeElement(_edagd.MajorTickMark, &_fead); _gbba != nil {
					return _gbba
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_edagd.MinorTickMark = NewCT_TickMark()
				if _cdbdb := d.DecodeElement(_edagd.MinorTickMark, &_fead); _cdbdb != nil {
					return _cdbdb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_edagd.TickLblPos = NewCT_TickLblPos()
				if _fcag := d.DecodeElement(_edagd.TickLblPos, &_fead); _fcag != nil {
					return _fcag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_edagd.SpPr = _gfc.NewCT_ShapeProperties()
				if _caf := d.DecodeElement(_edagd.SpPr, &_fead); _caf != nil {
					return _caf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_edagd.TxPr = _gfc.NewCT_TextBody()
				if _bdfc := d.DecodeElement(_edagd.TxPr, &_fead); _bdfc != nil {
					return _bdfc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _bdef := d.DecodeElement(_edagd.CrossAx, &_fead); _bdef != nil {
					return _bdef
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_edagd.AxSharedChoice = NewEG_AxSharedChoice()
				if _cagag := d.DecodeElement(&_edagd.AxSharedChoice.Crosses, &_fead); _cagag != nil {
					return _cagag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_edagd.AxSharedChoice = NewEG_AxSharedChoice()
				if _cbac := d.DecodeElement(&_edagd.AxSharedChoice.CrossesAt, &_fead); _cbac != nil {
					return _cbac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}:
				_edagd.Auto = NewCT_Boolean()
				if _fabf := d.DecodeElement(_edagd.Auto, &_fead); _fabf != nil {
					return _fabf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}:
				_edagd.LblOffset = NewCT_LblOffset()
				if _efff := d.DecodeElement(_edagd.LblOffset, &_fead); _efff != nil {
					return _efff
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0073e\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0073e\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}:
				_edagd.BaseTimeUnit = NewCT_TimeUnit()
				if _facg := d.DecodeElement(_edagd.BaseTimeUnit, &_fead); _facg != nil {
					return _facg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}:
				_edagd.MajorUnit = NewCT_AxisUnit()
				if _eeea := d.DecodeElement(_edagd.MajorUnit, &_fead); _eeea != nil {
					return _eeea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}:
				_edagd.MajorTimeUnit = NewCT_TimeUnit()
				if _fafe := d.DecodeElement(_edagd.MajorTimeUnit, &_fead); _fafe != nil {
					return _fafe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}:
				_edagd.MinorUnit = NewCT_AxisUnit()
				if _dccca := d.DecodeElement(_edagd.MinorUnit, &_fead); _dccca != nil {
					return _dccca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}:
				_edagd.MinorTimeUnit = NewCT_TimeUnit()
				if _gebe := d.DecodeElement(_edagd.MinorTimeUnit, &_fead); _gebe != nil {
					return _gebe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_edagd.ExtLst = NewCT_ExtensionList()
				if _eeef := d.DecodeElement(_edagd.ExtLst, &_fead); _eeef != nil {
					return _eeef
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0044\u0061\u0074e\u0041\u0078 \u0025\u0076", _fead.Name)
				if _dadb := d.Skip(); _dadb != nil {
					return _dadb
				}
			}
		case _b.EndElement:
			break _eafa
		case _b.CharData:
		}
	}
	return nil
}

type ST_CrossBetween byte

// ValidateWithPath validates the CT_HPercent and its children, prefixing error messages with path
func (_fbca *CT_HPercent) ValidateWithPath(path string) error {
	if _fbca.ValAttr != nil {
		if _dcgd := _fbca.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dcgd != nil {
			return _dcgd
		}
	}
	return nil
}

// ValidateWithPath validates the CT_HeaderFooter and its children, prefixing error messages with path
func (_gbagc *CT_HeaderFooter) ValidateWithPath(path string) error { return nil }
func NewCT_DispBlanksAs() *CT_DispBlanksAs                         { _affcd := &CT_DispBlanksAs{}; return _affcd }
func NewCT_ExternalData() *CT_ExternalData                         { _aegfd := &CT_ExternalData{}; return _aegfd }
func (_egcgc ST_SecondPieSize) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _egcgc.ST_SecondPieSizePercent != nil {
		e.EncodeToken(_b.CharData(*_egcgc.ST_SecondPieSizePercent))
	}
	if _egcgc.ST_SecondPieSizeUShort != nil {
		e.EncodeToken(_b.CharData(_g.Sprintf("\u0025\u0064", *_egcgc.ST_SecondPieSizeUShort)))
	}
	return e.EncodeToken(_b.EndElement{Name: start.Name})
}
func NewCT_DispUnitsLbl() *CT_DispUnitsLbl { _adcf := &CT_DispUnitsLbl{}; return _adcf }
func (_faaec *CT_RadarStyle) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _abgbd := range start.Attr {
		if _abgbd.Name.Local == "\u0076\u0061\u006c" {
			_faaec.ValAttr.UnmarshalXMLAttr(_abgbd)
			continue
		}
	}
	for {
		_acgae, _bgegf := d.Token()
		if _bgegf != nil {
			return _g.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0052a\u0064a\u0072S\u0074\u0079\u006c\u0065\u003a\u0020\u0025s", _bgegf)
		}
		if _ffcd, _afafc := _acgae.(_b.EndElement); _afafc && _ffcd.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_PlotAreaChoice1 and its children
func (_bfaff *CT_PlotAreaChoice1) Validate() error {
	return _bfaff.ValidateWithPath("\u0043T\u005fP\u006c\u006f\u0074\u0041\u0072e\u0061\u0043h\u006f\u0069\u0063\u0065\u0031")
}
func (_dgcg *CT_DLblChoice) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fagc := start
	switch start.Name {
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
		_dgcg.Delete = NewCT_Boolean()
		if _agff := d.DecodeElement(_dgcg.Delete, &_fagc); _agff != nil {
			return _agff
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
		_dgcg.Layout = NewCT_Layout()
		if _ebga := d.DecodeElement(_dgcg.Layout, &_fagc); _ebga != nil {
			return _ebga
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
		_dgcg.Tx = NewCT_Tx()
		if _eaca := d.DecodeElement(_dgcg.Tx, &_fagc); _eaca != nil {
			return _eaca
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
		_dgcg.NumFmt = NewCT_NumFmt()
		if _afec := d.DecodeElement(_dgcg.NumFmt, &_fagc); _afec != nil {
			return _afec
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
		_dgcg.SpPr = _gfc.NewCT_ShapeProperties()
		if _ggfa := d.DecodeElement(_dgcg.SpPr, &_fagc); _ggfa != nil {
			return _ggfa
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
		_dgcg.TxPr = _gfc.NewCT_TextBody()
		if _caga := d.DecodeElement(_dgcg.TxPr, &_fagc); _caga != nil {
			return _caga
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
		_dgcg.DLblPos = NewCT_DLblPos()
		if _dada := d.DecodeElement(_dgcg.DLblPos, &_fagc); _dada != nil {
			return _dada
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
		_dgcg.ShowLegendKey = NewCT_Boolean()
		if _egcg := d.DecodeElement(_dgcg.ShowLegendKey, &_fagc); _egcg != nil {
			return _egcg
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
		_dgcg.ShowVal = NewCT_Boolean()
		if _dcaba := d.DecodeElement(_dgcg.ShowVal, &_fagc); _dcaba != nil {
			return _dcaba
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
		_dgcg.ShowCatName = NewCT_Boolean()
		if _bbcae := d.DecodeElement(_dgcg.ShowCatName, &_fagc); _bbcae != nil {
			return _bbcae
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
		_dgcg.ShowSerName = NewCT_Boolean()
		if _dbgd := d.DecodeElement(_dgcg.ShowSerName, &_fagc); _dbgd != nil {
			return _dbgd
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
		_dgcg.ShowPercent = NewCT_Boolean()
		if _afg := d.DecodeElement(_dgcg.ShowPercent, &_fagc); _afg != nil {
			return _afg
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
		_dgcg.ShowBubbleSize = NewCT_Boolean()
		if _bbac := d.DecodeElement(_dgcg.ShowBubbleSize, &_fagc); _bbac != nil {
			return _bbac
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
		_dgcg.Separator = new(string)
		if _eecb := d.DecodeElement(_dgcg.Separator, &_fagc); _eecb != nil {
			return _eecb
		}
	default:
		_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044L\u0062\u006c\u0043\u0068\u006f\u0069\u0063\u0065 \u0025\u0076", _fagc.Name)
		if _ebfa := d.Skip(); _ebfa != nil {
			return _ebfa
		}
	}
	return nil
}

// ValidateWithPath validates the CT_RadarSer and its children, prefixing error messages with path
func (_bcbf *CT_RadarSer) ValidateWithPath(path string) error {
	if _ggegf := _bcbf.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _ggegf != nil {
		return _ggegf
	}
	if _gdfde := _bcbf.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _gdfde != nil {
		return _gdfde
	}
	if _bcbf.Tx != nil {
		if _ecfgg := _bcbf.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _ecfgg != nil {
			return _ecfgg
		}
	}
	if _bcbf.SpPr != nil {
		if _fgegg := _bcbf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fgegg != nil {
			return _fgegg
		}
	}
	if _bcbf.Marker != nil {
		if _cdeca := _bcbf.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _cdeca != nil {
			return _cdeca
		}
	}
	for _ggccc, _degcc := range _bcbf.DPt {
		if _ffgad := _degcc.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _ggccc)); _ffgad != nil {
			return _ffgad
		}
	}
	if _bcbf.DLbls != nil {
		if _ebed := _bcbf.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _ebed != nil {
			return _ebed
		}
	}
	if _bcbf.Cat != nil {
		if _edgab := _bcbf.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _edgab != nil {
			return _edgab
		}
	}
	if _bcbf.Val != nil {
		if _afedb := _bcbf.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _afedb != nil {
			return _afedb
		}
	}
	if _bcbf.ExtLst != nil {
		if _fcdf := _bcbf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fcdf != nil {
			return _fcdf
		}
	}
	return nil
}

type CT_CrossBetween struct {

	// Cross Between Value
	ValAttr ST_CrossBetween
}

func (_ece *CT_AxDataSource) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_ece.AxDataSourceChoice.MarshalXML(e, _b.StartElement{})
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_geeg *CT_Line3DChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_geeg.Grouping = NewCT_Grouping()
_ecbe:
	for {
		_afebc, _dcec := d.Token()
		if _dcec != nil {
			return _dcec
		}
		switch _afeg := _afebc.(type) {
		case _b.StartElement:
			switch _afeg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				if _dffe := d.DecodeElement(_geeg.Grouping, &_afeg); _dffe != nil {
					return _dffe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_geeg.VaryColors = NewCT_Boolean()
				if _gfca := d.DecodeElement(_geeg.VaryColors, &_afeg); _gfca != nil {
					return _gfca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_fgeg := NewCT_LineSer()
				if _egdef := d.DecodeElement(_fgeg, &_afeg); _egdef != nil {
					return _egdef
				}
				_geeg.Ser = append(_geeg.Ser, _fgeg)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_geeg.DLbls = NewCT_DLbls()
				if _begb := d.DecodeElement(_geeg.DLbls, &_afeg); _begb != nil {
					return _begb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_geeg.DropLines = NewCT_ChartLines()
				if _adea := d.DecodeElement(_geeg.DropLines, &_afeg); _adea != nil {
					return _adea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}:
				_geeg.GapDepth = NewCT_GapAmount()
				if _becab := d.DecodeElement(_geeg.GapDepth, &_afeg); _becab != nil {
					return _becab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_bddd := NewCT_UnsignedInt()
				if _dgeaa := d.DecodeElement(_bddd, &_afeg); _dgeaa != nil {
					return _dgeaa
				}
				_geeg.AxId = append(_geeg.AxId, _bddd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_geeg.ExtLst = NewCT_ExtensionList()
				if _efee := d.DecodeElement(_geeg.ExtLst, &_afeg); _efee != nil {
					return _efee
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0033\u0044\u0043h\u0061r\u0074\u0020\u0025\u0076", _afeg.Name)
				if _fcae := d.Skip(); _fcae != nil {
					return _fcae
				}
			}
		case _b.EndElement:
			break _ecbe
		case _b.CharData:
		}
	}
	return nil
}
func (_ccebd *CT_Legend) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_gaaff:
	for {
		_cgbc, _cdec := d.Token()
		if _cdec != nil {
			return _cdec
		}
		switch _eaea := _cgbc.(type) {
		case _b.StartElement:
			switch _eaea.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067\u0065\u006e\u0064\u0050\u006fs"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067\u0065\u006e\u0064\u0050\u006fs"}:
				_ccebd.LegendPos = NewCT_LegendPos()
				if _gdbg := d.DecodeElement(_ccebd.LegendPos, &_eaea); _gdbg != nil {
					return _gdbg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079"}:
				_bgfgf := NewCT_LegendEntry()
				if _ggcgc := d.DecodeElement(_bgfgf, &_eaea); _ggcgc != nil {
					return _ggcgc
				}
				_ccebd.LegendEntry = append(_ccebd.LegendEntry, _bgfgf)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_ccebd.Layout = NewCT_Layout()
				if _gdabb := d.DecodeElement(_ccebd.Layout, &_eaea); _gdabb != nil {
					return _gdabb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}:
				_ccebd.Overlay = NewCT_Boolean()
				if _beea := d.DecodeElement(_ccebd.Overlay, &_eaea); _beea != nil {
					return _beea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ccebd.SpPr = _gfc.NewCT_ShapeProperties()
				if _ggaga := d.DecodeElement(_ccebd.SpPr, &_eaea); _ggaga != nil {
					return _ggaga
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_ccebd.TxPr = _gfc.NewCT_TextBody()
				if _bdee := d.DecodeElement(_ccebd.TxPr, &_eaea); _bdee != nil {
					return _bdee
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ccebd.ExtLst = NewCT_ExtensionList()
				if _efgbd := d.DecodeElement(_ccebd.ExtLst, &_eaea); _efgbd != nil {
					return _efgbd
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004c\u0065\u0067e\u006e\u0064 \u0025\u0076", _eaea.Name)
				if _fdfa := d.Skip(); _fdfa != nil {
					return _fdfa
				}
			}
		case _b.EndElement:
			break _gaaff
		case _b.CharData:
		}
	}
	return nil
}
func (_bdfgc *CT_PivotSource) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_dbgg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0061\u006d\u0065"}}
	_gf.AddPreserveSpaceAttr(&_dbgg, _bdfgc.Name)
	e.EncodeElement(_bdfgc.Name, _dbgg)
	_ceadg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0066\u006d\u0074\u0049\u0064"}}
	e.EncodeElement(_bdfgc.FmtId, _ceadg)
	if _bdfgc.ExtLst != nil {
		_dfaf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		for _, _egfdb := range _bdfgc.ExtLst {
			e.EncodeElement(_egfdb, _dfaf)
		}
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_ecaed ST_HoleSize) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _ecaed.ST_HoleSizePercent != nil {
		e.EncodeToken(_b.CharData(*_ecaed.ST_HoleSizePercent))
	}
	if _ecaed.ST_HoleSizeUByte != nil {
		e.EncodeToken(_b.CharData(_g.Sprintf("\u0025\u0064", *_ecaed.ST_HoleSizeUByte)))
	}
	return e.EncodeToken(_b.EndElement{Name: start.Name})
}

type CT_Period struct {

	// Period Value
	ValAttr *uint32
}

func (_aeaca *CT_Layout) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_febd:
	for {
		_ddee, _aceb := d.Token()
		if _aceb != nil {
			return _aceb
		}
		switch _affb := _ddee.(type) {
		case _b.StartElement:
			switch _affb.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006eu\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006eu\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074"}:
				_aeaca.ManualLayout = NewCT_ManualLayout()
				if _becde := d.DecodeElement(_aeaca.ManualLayout, &_affb); _becde != nil {
					return _becde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aeaca.ExtLst = NewCT_ExtensionList()
				if _bagb := d.DecodeElement(_aeaca.ExtLst, &_affb); _bagb != nil {
					return _bagb
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004c\u0061\u0079o\u0075\u0074 \u0025\u0076", _affb.Name)
				if _ddgb := d.Skip(); _ddgb != nil {
					return _ddgb
				}
			}
		case _b.EndElement:
			break _febd
		case _b.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Double and its children
func (_ebcd *CT_Double) Validate() error {
	return _ebcd.ValidateWithPath("\u0043T\u005f\u0044\u006f\u0075\u0062\u006ce")
}

type CT_SecondPieSize struct {

	// Second Pie Size Value
	ValAttr *ST_SecondPieSize
}
type CT_PieChart struct {
	VaryColors *CT_Boolean

	// Pie Chart Series
	Ser []*CT_PieSer

	// Data Labels
	DLbls *CT_DLbls

	// First Slice Angle
	FirstSliceAng *CT_FirstSliceAng

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

// Validate validates the EG_DLblShared and its children
func (_egdgc *EG_DLblShared) Validate() error {
	return _egdgc.ValidateWithPath("\u0045\u0047\u005f\u0044\u004c\u0062\u006c\u0053\u0068\u0061\u0072\u0065\u0064")
}

type CT_AxPos struct {

	// Axis Position Value
	ValAttr ST_AxPos
}

func (_fgegfa ST_TrendlineType) Validate() error { return _fgegfa.ValidateWithPath("") }

// ValidateWithPath validates the CT_Protection and its children, prefixing error messages with path
func (_dfgcd *CT_Protection) ValidateWithPath(path string) error {
	if _dfgcd.ChartObject != nil {
		if _bgcbg := _dfgcd.ChartObject.ValidateWithPath(path + "\u002f\u0043\u0068a\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"); _bgcbg != nil {
			return _bgcbg
		}
	}
	if _dfgcd.Data != nil {
		if _gbbae := _dfgcd.Data.ValidateWithPath(path + "\u002f\u0044\u0061t\u0061"); _gbbae != nil {
			return _gbbae
		}
	}
	if _dfgcd.Formatting != nil {
		if _dgffec := _dfgcd.Formatting.ValidateWithPath(path + "/\u0046\u006f\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"); _dgffec != nil {
			return _dgffec
		}
	}
	if _dfgcd.Selection != nil {
		if _dfgad := _dfgcd.Selection.ValidateWithPath(path + "\u002f\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e"); _dfgad != nil {
			return _dfgad
		}
	}
	if _dfgcd.UserInterface != nil {
		if _fcbed := _dfgcd.UserInterface.ValidateWithPath(path + "\u002f\u0055\u0073\u0065\u0072\u0049\u006e\u0074\u0065r\u0066\u0061\u0063\u0065"); _fcbed != nil {
			return _fcbed
		}
	}
	return nil
}
func (_aagb *CT_Lvl) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _aagb.Pt != nil {
		_cebfg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u0074"}}
		for _, _fdec := range _aagb.Pt {
			e.EncodeElement(_fdec, _cebfg)
		}
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_gecdg *CT_SizeRepresents) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _bceg := range start.Attr {
		if _bceg.Name.Local == "\u0076\u0061\u006c" {
			_gecdg.ValAttr.UnmarshalXMLAttr(_bceg)
			continue
		}
	}
	for {
		_dgef, _dabb := d.Token()
		if _dabb != nil {
			return _g.Errorf("\u0070\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0073: \u0025\u0073", _dabb)
		}
		if _eeabe, _bcbg := _dgef.(_b.EndElement); _bcbg && _eeabe.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Boolean struct {

	// Boolean Value
	ValAttr *bool
}
type CT_TextLanguageID struct {

	// Language Code
	ValAttr string
}

func (_fddead *EG_LineChartShared) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_edafa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
	e.EncodeElement(_fddead.Grouping, _edafa)
	if _fddead.VaryColors != nil {
		_fege := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_fddead.VaryColors, _fege)
	}
	if _fddead.Ser != nil {
		_dfffa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _eccce := range _fddead.Ser {
			e.EncodeElement(_eccce, _dfffa)
		}
	}
	if _fddead.DLbls != nil {
		_eabdef := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_fddead.DLbls, _eabdef)
	}
	if _fddead.DropLines != nil {
		_ccbbec := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_fddead.DropLines, _ccbbec)
	}
	return nil
}
func (_dbdef *CT_Tx) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dbdef.TxChoice = NewCT_TxChoice()
_deecb:
	for {
		_daagaf, _eccaa := d.Token()
		if _eccaa != nil {
			return _eccaa
		}
		switch _gbbg := _daagaf.(type) {
		case _b.StartElement:
			switch _gbbg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_dbdef.TxChoice = NewCT_TxChoice()
				if _gcabf := d.DecodeElement(&_dbdef.TxChoice.StrRef, &_gbbg); _gcabf != nil {
					return _gcabf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}:
				_dbdef.TxChoice = NewCT_TxChoice()
				if _cgfgg := d.DecodeElement(&_dbdef.TxChoice.Rich, &_gbbg); _cgfgg != nil {
					return _cgfgg
				}
			default:
				_df.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006fn \u0043\u0054\u005fT\u0078 \u0025\u0076", _gbbg.Name)
				if _bbdd := d.Skip(); _bbdd != nil {
					return _bbdd
				}
			}
		case _b.EndElement:
			break _deecb
		case _b.CharData:
		}
	}
	return nil
}

type CT_StrVal struct {

	// Index
	IdxAttr uint32

	// Text Value
	V string
}

func (_abga *CT_DateAx) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_cced := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_abga.AxId, _cced)
	_bgbe := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_abga.Scaling, _bgbe)
	if _abga.Delete != nil {
		_gadf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_abga.Delete, _gadf)
	}
	_cgee := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_abga.AxPos, _cgee)
	if _abga.MajorGridlines != nil {
		_cbc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_abga.MajorGridlines, _cbc)
	}
	if _abga.MinorGridlines != nil {
		_ceda := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_abga.MinorGridlines, _ceda)
	}
	if _abga.Title != nil {
		_eddf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_abga.Title, _eddf)
	}
	if _abga.NumFmt != nil {
		_fced := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_abga.NumFmt, _fced)
	}
	if _abga.MajorTickMark != nil {
		_fbdce := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_abga.MajorTickMark, _fbdce)
	}
	if _abga.MinorTickMark != nil {
		_agab := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_abga.MinorTickMark, _agab)
	}
	if _abga.TickLblPos != nil {
		_fbagc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_abga.TickLblPos, _fbagc)
	}
	if _abga.SpPr != nil {
		_beba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_abga.SpPr, _beba)
	}
	if _abga.TxPr != nil {
		_bdgbc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_abga.TxPr, _bdgbc)
	}
	_gcea := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_abga.CrossAx, _gcea)
	if _abga.AxSharedChoice != nil {
		_abga.AxSharedChoice.MarshalXML(e, _b.StartElement{})
	}
	if _abga.Auto != nil {
		_ddc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0075\u0074\u006f"}}
		e.EncodeElement(_abga.Auto, _ddc)
	}
	if _abga.LblOffset != nil {
		_fdff := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"}}
		e.EncodeElement(_abga.LblOffset, _fdff)
	}
	if _abga.BaseTimeUnit != nil {
		_ggab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0061\u0073\u0065\u0054\u0069\u006de\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_abga.BaseTimeUnit, _ggab)
	}
	if _abga.MajorUnit != nil {
		_dfcac := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_abga.MajorUnit, _dfcac)
	}
	if _abga.MajorTimeUnit != nil {
		_edcf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_abga.MajorTimeUnit, _edcf)
	}
	if _abga.MinorUnit != nil {
		_dcgfa := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_abga.MinorUnit, _dcgfa)
	}
	if _abga.MinorTimeUnit != nil {
		_aegf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_abga.MinorTimeUnit, _aegf)
	}
	if _abga.ExtLst != nil {
		_daca := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_abga.ExtLst, _daca)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the EG_LegendEntryData and its children
func (_abfd *EG_LegendEntryData) Validate() error {
	return _abfd.ValidateWithPath("\u0045G\u005fL\u0065\u0067\u0065\u006e\u0064E\u006e\u0074r\u0079\u0044\u0061\u0074\u0061")
}

// Validate validates the CT_SecondPieSize and its children
func (_bcff *CT_SecondPieSize) Validate() error {
	return _bcff.ValidateWithPath("\u0043\u0054_\u0053\u0065\u0063o\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065")
}

var ST_ThicknessPercentPatternRe = _f.MustCompile(ST_ThicknessPercentPattern)

func (_debd *CT_Overlap) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _bdebe := range start.Attr {
		if _bdebe.Name.Local == "\u0076\u0061\u006c" {
			_adff, _egfb := ParseUnionST_Overlap(_bdebe.Value)
			if _egfb != nil {
				return _egfb
			}
			_debd.ValAttr = &_adff
			continue
		}
	}
	for {
		_cgdaa, _ceac := d.Token()
		if _ceac != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070\u003a\u0020%\u0073", _ceac)
		}
		if _afega, _gfdeg := _cgdaa.(_b.EndElement); _gfdeg && _afega.Name == start.Name {
			break
		}
	}
	return nil
}

type EG_AxShared struct {

	// Axis ID
	AxId *CT_UnsignedInt

	// Scaling
	Scaling *CT_Scaling

	// Delete
	Delete *CT_Boolean

	// Axis Position
	AxPos *CT_AxPos

	// Major Gridlines
	MajorGridlines *CT_ChartLines

	// Minor Gridlines
	MinorGridlines *CT_ChartLines

	// Title
	Title *CT_Title

	// Number Format
	NumFmt *CT_NumFmt

	// Major Tick Mark
	MajorTickMark *CT_TickMark

	// Minor Tick Mark
	MinorTickMark *CT_TickMark

	// Tick Label Position
	TickLblPos *CT_TickLblPos
	SpPr       *_gfc.CT_ShapeProperties
	TxPr       *_gfc.CT_TextBody

	// Crossing Axis ID
	CrossAx        *CT_UnsignedInt
	AxSharedChoice *EG_AxSharedChoice
}

func (_dcced *CT_LegendEntryChoice) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_cbee := start
	switch start.Name {
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
		_dcced.Delete = NewCT_Boolean()
		if _efccc := d.DecodeElement(_dcced.Delete, &_cbee); _efccc != nil {
			return _efccc
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
		_dcced.TxPr = _gfc.NewCT_TextBody()
		if _gcbce := d.DecodeElement(_dcced.TxPr, &_cbee); _gcbce != nil {
			return _gcbce
		}
	default:
		_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070o\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006de\u006et \u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _cbee.Name)
		if _fdcgf := d.Skip(); _fdcgf != nil {
			return _fdcgf
		}
	}
	return nil
}
func (_badga *CT_TxChoice) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_bbcfb := start
	switch start.Name {
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
		_badga.StrRef = NewCT_StrRef()
		if _ecfbe := d.DecodeElement(_badga.StrRef, &_bbcfb); _ecfbe != nil {
			return _ecfbe
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}:
		_badga.Rich = _gfc.NewCT_TextBody()
		if _dggba := d.DecodeElement(_badga.Rich, &_bbcfb); _dggba != nil {
			return _dggba
		}
	default:
		_df.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0078\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _bbcfb.Name)
		if _dbcaf := d.Skip(); _dbcaf != nil {
			return _dbcaf
		}
	}
	return nil
}
func (_bacd *CT_ErrBarType) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _cabg := range start.Attr {
		if _cabg.Name.Local == "\u0076\u0061\u006c" {
			_bacd.ValAttr.UnmarshalXMLAttr(_cabg)
			continue
		}
	}
	for {
		_ggcg, _cgb := d.Token()
		if _cgb != nil {
			return _g.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0045r\u0072B\u0061r\u0054\u0079\u0070\u0065\u003a\u0020\u0025s", _cgb)
		}
		if _efcc, _eegbc := _ggcg.(_b.EndElement); _eegbc && _efcc.Name == start.Name {
			break
		}
	}
	return nil
}
func (_effggd *ST_TickMark) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_effggd = 0
	case "\u0063\u0072\u006fs\u0073":
		*_effggd = 1
	case "\u0069\u006e":
		*_effggd = 2
	case "\u006e\u006f\u006e\u0065":
		*_effggd = 3
	case "\u006f\u0075\u0074":
		*_effggd = 4
	}
	return nil
}

// Validate validates the CT_PivotFmts and its children
func (_aefd *CT_PivotFmts) Validate() error {
	return _aefd.ValidateWithPath("\u0043\u0054\u005fP\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073")
}

type CT_ManualLayout struct {

	// Layout Target
	LayoutTarget *CT_LayoutTarget

	// Left Mode
	XMode *CT_LayoutMode

	// Top Mode
	YMode *CT_LayoutMode

	// Width Mode
	WMode *CT_LayoutMode

	// Height Mode
	HMode *CT_LayoutMode

	// Left
	X *CT_Double

	// Top
	Y *CT_Double

	// Width
	W *CT_Double

	// Height
	H *CT_Double

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_fgdce ST_Shape) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_fgdce.String(), start)
}
func NewCT_ScatterStyle() *CT_ScatterStyle { _facf := &CT_ScatterStyle{}; return _facf }
func (_adab *CT_HPercent) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _gfee := range start.Attr {
		if _gfee.Name.Local == "\u0076\u0061\u006c" {
			_ggdd, _fcge := ParseUnionST_HPercent(_gfee.Value)
			if _fcge != nil {
				return _fcge
			}
			_adab.ValAttr = &_ggdd
			continue
		}
	}
	for {
		_ceecd, _bcagb := d.Token()
		if _bcagb != nil {
			return _g.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0020\u0025\u0073", _bcagb)
		}
		if _efdg, _cbgg := _ceecd.(_b.EndElement); _cbgg && _efdg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gdacg ST_LayoutTarget) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_gcfbd := _b.Attr{}
	_gcfbd.Name = name
	switch _gdacg {
	case ST_LayoutTargetUnset:
		_gcfbd.Value = ""
	case ST_LayoutTargetInner:
		_gcfbd.Value = "\u0069\u006e\u006ee\u0072"
	case ST_LayoutTargetOuter:
		_gcfbd.Value = "\u006f\u0075\u0074e\u0072"
	}
	return _gcfbd, nil
}

// Validate validates the CT_Title and its children
func (_daecd *CT_Title) Validate() error {
	return _daecd.ValidateWithPath("\u0043\u0054\u005f\u0054\u0069\u0074\u006c\u0065")
}

// ValidateWithPath validates the CT_PlotAreaChoice and its children, prefixing error messages with path
func (_dcbg *CT_PlotAreaChoice) ValidateWithPath(path string) error {
	if _dcbg.AreaChart != nil {
		if _gecfb := _dcbg.AreaChart.ValidateWithPath(path + "\u002f\u0041\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074"); _gecfb != nil {
			return _gecfb
		}
	}
	if _dcbg.Area3DChart != nil {
		if _ffef := _dcbg.Area3DChart.ValidateWithPath(path + "\u002f\u0041\u0072e\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _ffef != nil {
			return _ffef
		}
	}
	if _dcbg.LineChart != nil {
		if _afbf := _dcbg.LineChart.ValidateWithPath(path + "\u002f\u004c\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074"); _afbf != nil {
			return _afbf
		}
	}
	if _dcbg.Line3DChart != nil {
		if _gbde := _dcbg.Line3DChart.ValidateWithPath(path + "\u002f\u004c\u0069n\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _gbde != nil {
			return _gbde
		}
	}
	if _dcbg.StockChart != nil {
		if _cddac := _dcbg.StockChart.ValidateWithPath(path + "/\u0053\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"); _cddac != nil {
			return _cddac
		}
	}
	if _dcbg.RadarChart != nil {
		if _eefdg := _dcbg.RadarChart.ValidateWithPath(path + "/\u0052\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"); _eefdg != nil {
			return _eefdg
		}
	}
	if _dcbg.ScatterChart != nil {
		if _eecbc := _dcbg.ScatterChart.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"); _eecbc != nil {
			return _eecbc
		}
	}
	if _dcbg.PieChart != nil {
		if _bfcf := _dcbg.PieChart.ValidateWithPath(path + "\u002fP\u0069\u0065\u0043\u0068\u0061\u0072t"); _bfcf != nil {
			return _bfcf
		}
	}
	if _dcbg.Pie3DChart != nil {
		if _dfaa := _dcbg.Pie3DChart.ValidateWithPath(path + "/\u0050\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _dfaa != nil {
			return _dfaa
		}
	}
	if _dcbg.DoughnutChart != nil {
		if _ccdafb := _dcbg.DoughnutChart.ValidateWithPath(path + "\u002f\u0044\u006f\u0075\u0067\u0068\u006e\u0075\u0074C\u0068\u0061\u0072\u0074"); _ccdafb != nil {
			return _ccdafb
		}
	}
	if _dcbg.BarChart != nil {
		if _fagd := _dcbg.BarChart.ValidateWithPath(path + "\u002fB\u0061\u0072\u0043\u0068\u0061\u0072t"); _fagd != nil {
			return _fagd
		}
	}
	if _dcbg.Bar3DChart != nil {
		if _bbfb := _dcbg.Bar3DChart.ValidateWithPath(path + "/\u0042\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _bbfb != nil {
			return _bbfb
		}
	}
	if _dcbg.OfPieChart != nil {
		if _fagdc := _dcbg.OfPieChart.ValidateWithPath(path + "/\u004f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"); _fagdc != nil {
			return _fagdc
		}
	}
	if _dcbg.SurfaceChart != nil {
		if _caag := _dcbg.SurfaceChart.ValidateWithPath(path + "\u002f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"); _caag != nil {
			return _caag
		}
	}
	if _dcbg.Surface3DChart != nil {
		if _dfcae := _dcbg.Surface3DChart.ValidateWithPath(path + "\u002fS\u0075r\u0066\u0061\u0063\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _dfcae != nil {
			return _dfcae
		}
	}
	if _dcbg.BubbleChart != nil {
		if _gadgf := _dcbg.BubbleChart.ValidateWithPath(path + "\u002f\u0042\u0075b\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"); _gadgf != nil {
			return _gadgf
		}
	}
	return nil
}

// ValidateWithPath validates the CT_BuiltInUnit and its children, prefixing error messages with path
func (_bdd *CT_BuiltInUnit) ValidateWithPath(path string) error {
	if _abfg := _bdd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _abfg != nil {
		return _abfg
	}
	return nil
}

type ST_ScatterStyle byte

// ValidateWithPath validates the CT_DTable and its children, prefixing error messages with path
func (_fbge *CT_DTable) ValidateWithPath(path string) error {
	if _fbge.ShowHorzBorder != nil {
		if _cgcd := _fbge.ShowHorzBorder.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0048\u006f\u0072\u007a\u0042\u006f\u0072\u0064\u0065\u0072"); _cgcd != nil {
			return _cgcd
		}
	}
	if _fbge.ShowVertBorder != nil {
		if _ceag := _fbge.ShowVertBorder.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0056\u0065\u0072\u0074\u0042\u006f\u0072\u0064\u0065\u0072"); _ceag != nil {
			return _ceag
		}
	}
	if _fbge.ShowOutline != nil {
		if _bege := _fbge.ShowOutline.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"); _bege != nil {
			return _bege
		}
	}
	if _fbge.ShowKeys != nil {
		if _acfb := _fbge.ShowKeys.ValidateWithPath(path + "\u002fS\u0068\u006f\u0077\u004b\u0065\u0079s"); _acfb != nil {
			return _acfb
		}
	}
	if _fbge.SpPr != nil {
		if _aaaa := _fbge.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _aaaa != nil {
			return _aaaa
		}
	}
	if _fbge.TxPr != nil {
		if _aggad := _fbge.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _aggad != nil {
			return _aggad
		}
	}
	if _fbge.ExtLst != nil {
		if _ecfa := _fbge.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ecfa != nil {
			return _ecfa
		}
	}
	return nil
}
func (_gdgd *CT_BubbleChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_dgbg:
	for {
		_aec, _ggd := d.Token()
		if _ggd != nil {
			return _ggd
		}
		switch _bdg := _aec.(type) {
		case _b.StartElement:
			switch _bdg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_gdgd.VaryColors = NewCT_Boolean()
				if _deb := d.DecodeElement(_gdgd.VaryColors, &_bdg); _deb != nil {
					return _deb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_cea := NewCT_BubbleSer()
				if _ffbb := d.DecodeElement(_cea, &_bdg); _ffbb != nil {
					return _ffbb
				}
				_gdgd.Ser = append(_gdgd.Ser, _cea)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_gdgd.DLbls = NewCT_DLbls()
				if _caab := d.DecodeElement(_gdgd.DLbls, &_bdg); _caab != nil {
					return _caab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}:
				_gdgd.Bubble3D = NewCT_Boolean()
				if _fafa := d.DecodeElement(_gdgd.Bubble3D, &_bdg); _fafa != nil {
					return _fafa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"}:
				_gdgd.BubbleScale = NewCT_BubbleScale()
				if _dgfc := d.DecodeElement(_gdgd.BubbleScale, &_bdg); _dgfc != nil {
					return _dgfc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004e\u0065\u0067\u0042\u0075b\u0062\u006c\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004e\u0065\u0067\u0042\u0075b\u0062\u006c\u0065\u0073"}:
				_gdgd.ShowNegBubbles = NewCT_Boolean()
				if _fbfcg := d.DecodeElement(_gdgd.ShowNegBubbles, &_bdg); _fbfcg != nil {
					return _fbfcg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073"}:
				_gdgd.SizeRepresents = NewCT_SizeRepresents()
				if _acg := d.DecodeElement(_gdgd.SizeRepresents, &_bdg); _acg != nil {
					return _acg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_cbff := NewCT_UnsignedInt()
				if _feed := d.DecodeElement(_cbff, &_bdg); _feed != nil {
					return _feed
				}
				_gdgd.AxId = append(_gdgd.AxId, _cbff)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gdgd.ExtLst = NewCT_ExtensionList()
				if _afac := d.DecodeElement(_gdgd.ExtLst, &_bdg); _afac != nil {
					return _afac
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065\u0043h\u0061r\u0074\u0020\u0025\u0076", _bdg.Name)
				if _bccd := d.Skip(); _bccd != nil {
					return _bccd
				}
			}
		case _b.EndElement:
			break _dgbg
		case _b.CharData:
		}
	}
	return nil
}
func (_cafbg *CT_DispUnits) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_cafbg.DispUnitsChoice.MarshalXML(e, _b.StartElement{})
	if _cafbg.DispUnitsLbl != nil {
		_ggeb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0055\u006e\u0069t\u0073\u004c\u0062\u006c"}}
		e.EncodeElement(_cafbg.DispUnitsLbl, _ggeb)
	}
	if _cafbg.ExtLst != nil {
		_bddfg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cafbg.ExtLst, _bddfg)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

const (
	ST_ErrValTypeUnset      ST_ErrValType = 0
	ST_ErrValTypeCust       ST_ErrValType = 1
	ST_ErrValTypeFixedVal   ST_ErrValType = 2
	ST_ErrValTypePercentage ST_ErrValType = 3
	ST_ErrValTypeStdDev     ST_ErrValType = 4
	ST_ErrValTypeStdErr     ST_ErrValType = 5
)

func (_bbgbf *CT_Scaling) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_gecgb:
	for {
		_eedba, _cggeg := d.Token()
		if _cggeg != nil {
			return _cggeg
		}
		switch _gcbag := _eedba.(type) {
		case _b.StartElement:
			switch _gcbag.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006co\u0067\u0042\u0061\u0073\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006co\u0067\u0042\u0061\u0073\u0065"}:
				_bbgbf.LogBase = NewCT_LogBase()
				if _dadba := d.DecodeElement(_bbgbf.LogBase, &_gcbag); _dadba != nil {
					return _dadba
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"}:
				_bbgbf.Orientation = NewCT_Orientation()
				if _dedbb := d.DecodeElement(_bbgbf.Orientation, &_gcbag); _dedbb != nil {
					return _dedbb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0078"}:
				_bbgbf.Max = NewCT_Double()
				if _aegg := d.DecodeElement(_bbgbf.Max, &_gcbag); _aegg != nil {
					return _aegg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e"}:
				_bbgbf.Min = NewCT_Double()
				if _ggbfc := d.DecodeElement(_bbgbf.Min, &_gcbag); _ggbfc != nil {
					return _ggbfc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bbgbf.ExtLst = NewCT_ExtensionList()
				if _eafe := d.DecodeElement(_bbgbf.ExtLst, &_gcbag); _eafe != nil {
					return _eafe
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fS\u0063\u0061\u006c\u0069\u006e\u0067\u0020\u0025\u0076", _gcbag.Name)
				if _dded := d.Skip(); _dded != nil {
					return _dded
				}
			}
		case _b.EndElement:
			break _gecgb
		case _b.CharData:
		}
	}
	return nil
}
func (_cdbfg *CT_LineChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_cdbfg.Grouping = NewCT_Grouping()
_gffc:
	for {
		_feag, _feefe := d.Token()
		if _feefe != nil {
			return _feefe
		}
		switch _eaaff := _feag.(type) {
		case _b.StartElement:
			switch _eaaff.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				if _egfgg := d.DecodeElement(_cdbfg.Grouping, &_eaaff); _egfgg != nil {
					return _egfgg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_cdbfg.VaryColors = NewCT_Boolean()
				if _accc := d.DecodeElement(_cdbfg.VaryColors, &_eaaff); _accc != nil {
					return _accc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_eecbe := NewCT_LineSer()
				if _dbabc := d.DecodeElement(_eecbe, &_eaaff); _dbabc != nil {
					return _dbabc
				}
				_cdbfg.Ser = append(_cdbfg.Ser, _eecbe)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_cdbfg.DLbls = NewCT_DLbls()
				if _cbeff := d.DecodeElement(_cdbfg.DLbls, &_eaaff); _cbeff != nil {
					return _cbeff
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_cdbfg.DropLines = NewCT_ChartLines()
				if _deaa := d.DecodeElement(_cdbfg.DropLines, &_eaaff); _deaa != nil {
					return _deaa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}:
				_cdbfg.HiLowLines = NewCT_ChartLines()
				if _gbdcc := d.DecodeElement(_cdbfg.HiLowLines, &_eaaff); _gbdcc != nil {
					return _gbdcc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}:
				_cdbfg.UpDownBars = NewCT_UpDownBars()
				if _ddaef := d.DecodeElement(_cdbfg.UpDownBars, &_eaaff); _ddaef != nil {
					return _ddaef
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_cdbfg.Marker = NewCT_Boolean()
				if _fbcc := d.DecodeElement(_cdbfg.Marker, &_eaaff); _fbcc != nil {
					return _fbcc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}:
				_cdbfg.Smooth = NewCT_Boolean()
				if _cfgge := d.DecodeElement(_cdbfg.Smooth, &_eaaff); _cfgge != nil {
					return _cfgge
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_ebecc := NewCT_UnsignedInt()
				if _eadc := d.DecodeElement(_ebecc, &_eaaff); _eadc != nil {
					return _eadc
				}
				_cdbfg.AxId = append(_cdbfg.AxId, _ebecc)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cdbfg.ExtLst = NewCT_ExtensionList()
				if _abgb := d.DecodeElement(_cdbfg.ExtLst, &_eaaff); _abgb != nil {
					return _abgb
				}
			default:
				_df.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_L\u0069\u006ee\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _eaaff.Name)
				if _ccedf := d.Skip(); _ccedf != nil {
					return _ccedf
				}
			}
		case _b.EndElement:
			break _gffc
		case _b.CharData:
		}
	}
	return nil
}
func (_egebd *CT_CatAx) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_egebd.AxId = NewCT_UnsignedInt()
	_egebd.Scaling = NewCT_Scaling()
	_egebd.AxPos = NewCT_AxPos()
	_egebd.CrossAx = NewCT_UnsignedInt()
_agfaf:
	for {
		_gdfd, _cgfd := d.Token()
		if _cgfd != nil {
			return _cgfd
		}
		switch _ccfb := _gdfd.(type) {
		case _b.StartElement:
			switch _ccfb.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _dfde := d.DecodeElement(_egebd.AxId, &_ccfb); _dfde != nil {
					return _dfde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _ecgc := d.DecodeElement(_egebd.Scaling, &_ccfb); _ecgc != nil {
					return _ecgc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_egebd.Delete = NewCT_Boolean()
				if _eebe := d.DecodeElement(_egebd.Delete, &_ccfb); _eebe != nil {
					return _eebe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _efd := d.DecodeElement(_egebd.AxPos, &_ccfb); _efd != nil {
					return _efd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_egebd.MajorGridlines = NewCT_ChartLines()
				if _aadb := d.DecodeElement(_egebd.MajorGridlines, &_ccfb); _aadb != nil {
					return _aadb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_egebd.MinorGridlines = NewCT_ChartLines()
				if _bede := d.DecodeElement(_egebd.MinorGridlines, &_ccfb); _bede != nil {
					return _bede
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_egebd.Title = NewCT_Title()
				if _bag := d.DecodeElement(_egebd.Title, &_ccfb); _bag != nil {
					return _bag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_egebd.NumFmt = NewCT_NumFmt()
				if _gffg := d.DecodeElement(_egebd.NumFmt, &_ccfb); _gffg != nil {
					return _gffg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_egebd.MajorTickMark = NewCT_TickMark()
				if _eaae := d.DecodeElement(_egebd.MajorTickMark, &_ccfb); _eaae != nil {
					return _eaae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_egebd.MinorTickMark = NewCT_TickMark()
				if _cbaf := d.DecodeElement(_egebd.MinorTickMark, &_ccfb); _cbaf != nil {
					return _cbaf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_egebd.TickLblPos = NewCT_TickLblPos()
				if _ebcb := d.DecodeElement(_egebd.TickLblPos, &_ccfb); _ebcb != nil {
					return _ebcb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_egebd.SpPr = _gfc.NewCT_ShapeProperties()
				if _ecce := d.DecodeElement(_egebd.SpPr, &_ccfb); _ecce != nil {
					return _ecce
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_egebd.TxPr = _gfc.NewCT_TextBody()
				if _gbb := d.DecodeElement(_egebd.TxPr, &_ccfb); _gbb != nil {
					return _gbb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _afdbf := d.DecodeElement(_egebd.CrossAx, &_ccfb); _afdbf != nil {
					return _afdbf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_egebd.AxSharedChoice = NewEG_AxSharedChoice()
				if _dgdd := d.DecodeElement(&_egebd.AxSharedChoice.Crosses, &_ccfb); _dgdd != nil {
					return _dgdd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_egebd.AxSharedChoice = NewEG_AxSharedChoice()
				if _dab := d.DecodeElement(&_egebd.AxSharedChoice.CrossesAt, &_ccfb); _dab != nil {
					return _dab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}:
				_egebd.Auto = NewCT_Boolean()
				if _eeda := d.DecodeElement(_egebd.Auto, &_ccfb); _eeda != nil {
					return _eeda
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u0041\u006c\u0067\u006e"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u0041\u006c\u0067\u006e"}:
				_egebd.LblAlgn = NewCT_LblAlgn()
				if _ddde := d.DecodeElement(_egebd.LblAlgn, &_ccfb); _ddde != nil {
					return _ddde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}:
				_egebd.LblOffset = NewCT_LblOffset()
				if _fbeg := d.DecodeElement(_egebd.LblOffset, &_ccfb); _fbeg != nil {
					return _fbeg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}:
				_egebd.TickLblSkip = NewCT_Skip()
				if _decc := d.DecodeElement(_egebd.TickLblSkip, &_ccfb); _decc != nil {
					return _decc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}:
				_egebd.TickMarkSkip = NewCT_Skip()
				if _fgd := d.DecodeElement(_egebd.TickMarkSkip, &_ccfb); _fgd != nil {
					return _fgd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u004c\u0062\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u004c\u0062\u006c"}:
				_egebd.NoMultiLvlLbl = NewCT_Boolean()
				if _beec := d.DecodeElement(_egebd.NoMultiLvlLbl, &_ccfb); _beec != nil {
					return _beec
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_egebd.ExtLst = NewCT_ExtensionList()
				if _gbab := d.DecodeElement(_egebd.ExtLst, &_ccfb); _gbab != nil {
					return _gbab
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0061\u0074\u0041\u0078\u0020\u0025\u0076", _ccfb.Name)
				if _egcb := d.Skip(); _egcb != nil {
					return _egcb
				}
			}
		case _b.EndElement:
			break _agfaf
		case _b.CharData:
		}
	}
	return nil
}

type CT_OfPieType struct {

	// Pie of Pie or Bar of Pie Type Value
	ValAttr ST_OfPieType
}

func NewCT_MultiLvlStrRef() *CT_MultiLvlStrRef { _cgbe := &CT_MultiLvlStrRef{}; return _cgbe }

// Validate validates the CT_Crosses and its children
func (_bbbg *CT_Crosses) Validate() error {
	return _bbbg.ValidateWithPath("\u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0065\u0073")
}
func (_dedda ST_Thickness) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _dedda.ST_ThicknessPercent != nil {
		e.EncodeToken(_b.CharData(*_dedda.ST_ThicknessPercent))
	}
	if _dedda.Uint32 != nil {
		e.EncodeToken(_b.CharData(_g.Sprintf("\u0025\u0064", *_dedda.Uint32)))
	}
	return e.EncodeToken(_b.EndElement{Name: start.Name})
}

// Validate validates the CT_Grouping and its children
func (_eabd *CT_Grouping) Validate() error {
	return _eabd.ValidateWithPath("C\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067")
}

// Validate validates the Group_DLbl and its children
func (_bagfg *Group_DLbl) Validate() error {
	return _bagfg.ValidateWithPath("\u0047\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c")
}

type CT_ErrBarType struct {

	// Error Bar Type Value
	ValAttr ST_ErrBarType
}
type CT_ErrBars struct {

	// Error Bar Direction
	ErrDir *CT_ErrDir

	// Error Bar Type
	ErrBarType *CT_ErrBarType

	// Error Bar Value Type
	ErrValType *CT_ErrValType

	// No End Cap
	NoEndCap *CT_Boolean

	// Plus
	Plus *CT_NumDataSource

	// Minus
	Minus *CT_NumDataSource

	// Error Bar Value
	Val  *CT_Double
	SpPr *_gfc.CT_ShapeProperties

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_ccdab *CT_DepthPercent) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _ccdab.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", *_ccdab.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_Extension struct {

	// Uniform Resource Identifier
	UriAttr *string
	Any     _gf.Any
}

// ValidateWithPath validates the CT_Layout and its children, prefixing error messages with path
func (_dgbca *CT_Layout) ValidateWithPath(path string) error {
	if _dgbca.ManualLayout != nil {
		if _cdbce := _dgbca.ManualLayout.ValidateWithPath(path + "\u002f\u004d\u0061\u006e\u0075\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074"); _cdbce != nil {
			return _cdbce
		}
	}
	if _dgbca.ExtLst != nil {
		if _fabe := _dgbca.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fabe != nil {
			return _fabe
		}
	}
	return nil
}
func (_cdff *CT_DispUnits) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_cdff.DispUnitsChoice = NewCT_DispUnitsChoice()
_abcb:
	for {
		_fgfcf, _efggc := d.Token()
		if _efggc != nil {
			return _efggc
		}
		switch _gadb := _fgfcf.(type) {
		case _b.StartElement:
			switch _gadb.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}:
				_cdff.DispUnitsChoice = NewCT_DispUnitsChoice()
				if _dabg := d.DecodeElement(&_cdff.DispUnitsChoice.CustUnit, &_gadb); _dabg != nil {
					return _dabg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}:
				_cdff.DispUnitsChoice = NewCT_DispUnitsChoice()
				if _gbbd := d.DecodeElement(&_cdff.DispUnitsChoice.BuiltInUnit, &_gadb); _gbbd != nil {
					return _gbbd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c"}:
				_cdff.DispUnitsLbl = NewCT_DispUnitsLbl()
				if _cdab := d.DecodeElement(_cdff.DispUnitsLbl, &_gadb); _cdab != nil {
					return _cdab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cdff.ExtLst = NewCT_ExtensionList()
				if _cadcg := d.DecodeElement(_cdff.ExtLst, &_gadb); _cadcg != nil {
					return _cadcg
				}
			default:
				_df.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_D\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u0020\u0025\u0076", _gadb.Name)
				if _eeaa := d.Skip(); _eeaa != nil {
					return _eeaa
				}
			}
		case _b.EndElement:
			break _abcb
		case _b.CharData:
		}
	}
	return nil
}
func (_daaee *CT_NumRef) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_gdgde:
	for {
		_degec, _eeag := d.Token()
		if _eeag != nil {
			return _eeag
		}
		switch _bfdg := _degec.(type) {
		case _b.StartElement:
			switch _bfdg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}:
				if _aefc := d.DecodeElement(&_daaee.F, &_bfdg); _aefc != nil {
					return _aefc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0043\u0061\u0063\u0068\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0043\u0061\u0063\u0068\u0065"}:
				_daaee.NumCache = NewCT_NumData()
				if _fbfdc := d.DecodeElement(_daaee.NumCache, &_bfdg); _fbfdc != nil {
					return _fbfdc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_daaee.ExtLst = NewCT_ExtensionList()
				if _gefg := d.DecodeElement(_daaee.ExtLst, &_bfdg); _gefg != nil {
					return _gefg
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004e\u0075\u006dR\u0065\u0066 \u0025\u0076", _bfdg.Name)
				if _bfdb := d.Skip(); _bfdb != nil {
					return _bfdb
				}
			}
		case _b.EndElement:
			break _gdgde
		case _b.CharData:
		}
	}
	return nil
}
func (_gaf *CT_BarSer) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_gaf.Idx = NewCT_UnsignedInt()
	_gaf.Order = NewCT_UnsignedInt()
_aac:
	for {
		_cegb, _egbe := d.Token()
		if _egbe != nil {
			return _egbe
		}
		switch _dfd := _cegb.(type) {
		case _b.StartElement:
			switch _dfd.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _gefa := d.DecodeElement(_gaf.Idx, &_dfd); _gefa != nil {
					return _gefa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _cbg := d.DecodeElement(_gaf.Order, &_dfd); _cbg != nil {
					return _cbg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_gaf.Tx = NewCT_SerTx()
				if _fdd := d.DecodeElement(_gaf.Tx, &_dfd); _fdd != nil {
					return _fdd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gaf.SpPr = _gfc.NewCT_ShapeProperties()
				if _ggfb := d.DecodeElement(_gaf.SpPr, &_dfd); _ggfb != nil {
					return _ggfb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}:
				_gaf.InvertIfNegative = NewCT_Boolean()
				if _faf := d.DecodeElement(_gaf.InvertIfNegative, &_dfd); _faf != nil {
					return _faf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_gaf.PictureOptions = NewCT_PictureOptions()
				if _cbbf := d.DecodeElement(_gaf.PictureOptions, &_dfd); _cbbf != nil {
					return _cbbf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_ebd := NewCT_DPt()
				if _ddf := d.DecodeElement(_ebd, &_dfd); _ddf != nil {
					return _ddf
				}
				_gaf.DPt = append(_gaf.DPt, _ebd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_gaf.DLbls = NewCT_DLbls()
				if _dade := d.DecodeElement(_gaf.DLbls, &_dfd); _dade != nil {
					return _dade
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_ddbg := NewCT_Trendline()
				if _ddfb := d.DecodeElement(_ddbg, &_dfd); _ddfb != nil {
					return _ddfb
				}
				_gaf.Trendline = append(_gaf.Trendline, _ddbg)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_gaf.ErrBars = NewCT_ErrBars()
				if _afdb := d.DecodeElement(_gaf.ErrBars, &_dfd); _afdb != nil {
					return _afdb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_gaf.Cat = NewCT_AxDataSource()
				if _edag := d.DecodeElement(_gaf.Cat, &_dfd); _edag != nil {
					return _edag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_gaf.Val = NewCT_NumDataSource()
				if _dcb := d.DecodeElement(_gaf.Val, &_dfd); _dcb != nil {
					return _dcb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}:
				_gaf.Shape = NewCT_Shape()
				if _ccf := d.DecodeElement(_gaf.Shape, &_dfd); _ccf != nil {
					return _ccf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gaf.ExtLst = NewCT_ExtensionList()
				if _cegg := d.DecodeElement(_gaf.ExtLst, &_dfd); _cegg != nil {
					return _cegg
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0042\u0061\u0072S\u0065\u0072 \u0025\u0076", _dfd.Name)
				if _fdb := d.Skip(); _fdb != nil {
					return _fdb
				}
			}
		case _b.EndElement:
			break _aac
		case _b.CharData:
		}
	}
	return nil
}

type Group_DLbls struct {

	// Number Format
	NumFmt *CT_NumFmt
	SpPr   *_gfc.CT_ShapeProperties
	TxPr   *_gfc.CT_TextBody

	// Data Label Position
	DLblPos *CT_DLblPos

	// Show Legend Key
	ShowLegendKey *CT_Boolean

	// Show Value
	ShowVal *CT_Boolean

	// Show Category Name
	ShowCatName *CT_Boolean

	// Show Series Name
	ShowSerName *CT_Boolean

	// Show Percent
	ShowPercent *CT_Boolean

	// Show Bubble Size
	ShowBubbleSize *CT_Boolean

	// Separator
	Separator *string

	// Show Leader Lines
	ShowLeaderLines *CT_Boolean

	// Leader Lines
	LeaderLines *CT_ChartLines
}

func (_dbgcd ST_LayoutTarget) String() string {
	switch _dbgcd {
	case 0:
		return ""
	case 1:
		return "\u0069\u006e\u006ee\u0072"
	case 2:
		return "\u006f\u0075\u0074e\u0072"
	}
	return ""
}
func (_ddece *ST_DispBlanksAs) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_gdadb, _fbffa := d.Token()
	if _fbffa != nil {
		return _fbffa
	}
	if _gggdf, _aabfg := _gdadb.(_b.EndElement); _aabfg && _gggdf.Name == start.Name {
		*_ddece = 1
		return nil
	}
	if _eddgb, _aafe := _gdadb.(_b.CharData); !_aafe {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gdadb)
	} else {
		switch string(_eddgb) {
		case "":
			*_ddece = 0
		case "\u0073\u0070\u0061\u006e":
			*_ddece = 1
		case "\u0067\u0061\u0070":
			*_ddece = 2
		case "\u007a\u0065\u0072\u006f":
			*_ddece = 3
		}
	}
	_gdadb, _fbffa = d.Token()
	if _fbffa != nil {
		return _fbffa
	}
	if _cfbe, _gcggg := _gdadb.(_b.EndElement); _gcggg && _cfbe.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gdadb)
}

type CT_PageSetup struct {

	// Page Size
	PaperSizeAttr *uint32

	// Paper Height
	PaperHeightAttr *string

	// Paper Width
	PaperWidthAttr *string

	// First Page Number
	FirstPageNumberAttr *uint32

	// Orientation
	OrientationAttr ST_PageSetupOrientation

	// Black and White
	BlackAndWhiteAttr *bool

	// Draft
	DraftAttr *bool

	// Use First Page Number
	UseFirstPageNumberAttr *bool

	// Horizontal DPI
	HorizontalDpiAttr *int32

	// Vertical DPI
	VerticalDpiAttr *int32

	// Copies
	CopiesAttr *uint32
}

func (_gagcb *CT_NumDataSource) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_gagcb.NumDataSourceChoice.MarshalXML(e, _b.StartElement{})
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_NumDataSourceChoice struct {
	NumRef *CT_NumRef
	NumLit *CT_NumData
}

func (_bbfda *CT_DLblsChoice) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _bbfda.Delete != nil {
		_dgdgc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_bbfda.Delete, _dgdgc)
	} else if _bbfda.NumFmt != nil {
		_dggf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_bbfda.NumFmt, _dggf)
	} else if _bbfda.SpPr != nil {
		_gbcd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bbfda.SpPr, _gbcd)
	} else if _bbfda.TxPr != nil {
		_ffaa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_bbfda.TxPr, _ffaa)
	} else if _bbfda.DLblPos != nil {
		_dfeb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_bbfda.DLblPos, _dfeb)
	} else if _bbfda.ShowLegendKey != nil {
		_agfff := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_bbfda.ShowLegendKey, _agfff)
	} else if _bbfda.ShowVal != nil {
		_eaeg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_bbfda.ShowVal, _eaeg)
	} else if _bbfda.ShowCatName != nil {
		_cddg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_bbfda.ShowCatName, _cddg)
	} else if _bbfda.ShowSerName != nil {
		_ddfac := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_bbfda.ShowSerName, _ddfac)
	} else if _bbfda.ShowPercent != nil {
		_bgga := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_bbfda.ShowPercent, _bgga)
	} else if _bbfda.ShowBubbleSize != nil {
		_ceeg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_bbfda.ShowBubbleSize, _ceeg)
	} else if _bbfda.Separator != nil {
		_fbcf := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_gf.AddPreserveSpaceAttr(&_fbcf, *_bbfda.Separator)
		e.EncodeElement(_bbfda.Separator, _fbcf)
	} else if _bbfda.ShowLeaderLines != nil {
		_cdfc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004c\u0065\u0061\u0064\u0065\u0072L\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_bbfda.ShowLeaderLines, _cdfc)
	} else if _bbfda.LeaderLines != nil {
		_aggg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_bbfda.LeaderLines, _aggg)
	}
	return nil
}

// Validate validates the CT_PrintSettings and its children
func (_bccbab *CT_PrintSettings) Validate() error {
	return _bccbab.ValidateWithPath("\u0043\u0054_\u0050\u0072\u0069n\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073")
}

// ValidateWithPath validates the CT_Perspective and its children, prefixing error messages with path
func (_dfgag *CT_Perspective) ValidateWithPath(path string) error {
	if _dfgag.ValAttr != nil {
		if *_dfgag.ValAttr < 0 {
			return _g.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_dfgag.ValAttr)
		}
		if *_dfgag.ValAttr > 240 {
			return _g.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003c\u003d\u0020\u0032\u0034\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_dfgag.ValAttr)
		}
	}
	return nil
}
func (_fbdc *CT_ChartLines) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _fbdc.SpPr != nil {
		_gead := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fbdc.SpPr, _gead)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_ggae ST_ErrDir) ValidateWithPath(path string) error {
	switch _ggae {
	case 0, 1, 2:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ggae))
	}
	return nil
}
func (_cedee *ST_DispBlanksAs) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_cedee = 0
	case "\u0073\u0070\u0061\u006e":
		*_cedee = 1
	case "\u0067\u0061\u0070":
		*_cedee = 2
	case "\u007a\u0065\u0072\u006f":
		*_cedee = 3
	}
	return nil
}
func (_ggacf *CT_SizeRepresents) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _ggacf.ValAttr != ST_SizeRepresentsUnset {
		_bfba, _cgaag := _ggacf.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _cgaag != nil {
			return _cgaag
		}
		start.Attr = append(start.Attr, _bfba)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type ST_LegendPos byte

func (_ddaab *ST_AxPos) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_ddaab = 0
	case "\u0062":
		*_ddaab = 1
	case "\u006c":
		*_ddaab = 2
	case "\u0072":
		*_ddaab = 3
	case "\u0074":
		*_ddaab = 4
	}
	return nil
}
func (_dacfe ST_LegendPos) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_dacfe.String(), start)
}
func NewCT_NumDataSourceChoice() *CT_NumDataSourceChoice {
	_fgab := &CT_NumDataSourceChoice{}
	return _fgab
}

// Validate validates the CT_MultiLvlStrData and its children
func (_fafg *CT_MultiLvlStrData) Validate() error {
	return _fafg.ValidateWithPath("\u0043T\u005fM\u0075\u006c\u0074\u0069\u004cv\u006c\u0053t\u0072\u0044\u0061\u0074\u0061")
}
func NewCT_CrossBetween() *CT_CrossBetween {
	_fdbda := &CT_CrossBetween{}
	_fdbda.ValAttr = ST_CrossBetween(1)
	return _fdbda
}
func (_dbfg *CT_LayoutTarget) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _fagcc := range start.Attr {
		if _fagcc.Name.Local == "\u0076\u0061\u006c" {
			_dbfg.ValAttr.UnmarshalXMLAttr(_fagcc)
			continue
		}
	}
	for {
		_cgdag, _gfef := d.Token()
		if _gfef != nil {
			return _g.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074T\u0061\u0072\u0067e\u0074:\u0020\u0025\u0073", _gfef)
		}
		if _abaf, _befe := _cgdag.(_b.EndElement); _befe && _abaf.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_StrData and its children, prefixing error messages with path
func (_afcf *CT_StrData) ValidateWithPath(path string) error {
	if _afcf.PtCount != nil {
		if _gadad := _afcf.PtCount.ValidateWithPath(path + "\u002f\u0050\u0074\u0043\u006f\u0075\u006e\u0074"); _gadad != nil {
			return _gadad
		}
	}
	for _fdafc, _cgdge := range _afcf.Pt {
		if _cgbde := _cgdge.ValidateWithPath(_g.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _fdafc)); _cgbde != nil {
			return _cgbde
		}
	}
	if _afcf.ExtLst != nil {
		if _ccefe := _afcf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ccefe != nil {
			return _ccefe
		}
	}
	return nil
}

// Validate validates the CT_Layout and its children
func (_fecbg *CT_Layout) Validate() error {
	return _fecbg.ValidateWithPath("\u0043T\u005f\u004c\u0061\u0079\u006f\u0075t")
}

type CT_Grouping struct {

	// Grouping Value
	ValAttr ST_Grouping
}

// Validate validates the CT_Lvl and its children
func (_ggef *CT_Lvl) Validate() error {
	return _ggef.ValidateWithPath("\u0043\u0054\u005f\u004c\u0076\u006c")
}

// ValidateWithPath validates the CT_BubbleChart and its children, prefixing error messages with path
func (_eebb *CT_BubbleChart) ValidateWithPath(path string) error {
	if _eebb.VaryColors != nil {
		if _ddg := _eebb.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _ddg != nil {
			return _ddg
		}
	}
	for _ecf, _gbdf := range _eebb.Ser {
		if _ebdf := _gbdf.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _ecf)); _ebdf != nil {
			return _ebdf
		}
	}
	if _eebb.DLbls != nil {
		if _gda := _eebb.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _gda != nil {
			return _gda
		}
	}
	if _eebb.Bubble3D != nil {
		if _dge := _eebb.Bubble3D.ValidateWithPath(path + "\u002fB\u0075\u0062\u0062\u006c\u0065\u0033D"); _dge != nil {
			return _dge
		}
	}
	if _eebb.BubbleScale != nil {
		if _gbad := _eebb.BubbleScale.ValidateWithPath(path + "\u002f\u0042\u0075b\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"); _gbad != nil {
			return _gbad
		}
	}
	if _eebb.ShowNegBubbles != nil {
		if _ccfg := _eebb.ShowNegBubbles.ValidateWithPath(path + "\u002fS\u0068o\u0077\u004e\u0065\u0067\u0042\u0075\u0062\u0062\u006c\u0065\u0073"); _ccfg != nil {
			return _ccfg
		}
	}
	if _eebb.SizeRepresents != nil {
		if _edfd := _eebb.SizeRepresents.ValidateWithPath(path + "\u002fS\u0069z\u0065\u0052\u0065\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0073"); _edfd != nil {
			return _edfd
		}
	}
	for _aad, _debb := range _eebb.AxId {
		if _gbga := _debb.ValidateWithPath(_g.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _aad)); _gbga != nil {
			return _gbga
		}
	}
	if _eebb.ExtLst != nil {
		if _agbb := _eebb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _agbb != nil {
			return _agbb
		}
	}
	return nil
}

// Validate validates the CT_Order and its children
func (_daabf *CT_Order) Validate() error {
	return _daabf.ValidateWithPath("\u0043\u0054\u005f\u004f\u0072\u0064\u0065\u0072")
}
func (_cdef *CT_ScatterChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_edbf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0063\u0061\u0074\u0074\u0065\u0072S\u0074\u0079\u006c\u0065"}}
	e.EncodeElement(_cdef.ScatterStyle, _edbf)
	if _cdef.VaryColors != nil {
		_bfafaf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_cdef.VaryColors, _bfafaf)
	}
	if _cdef.Ser != nil {
		_dggd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _ecgcf := range _cdef.Ser {
			e.EncodeElement(_ecgcf, _dggd)
		}
	}
	if _cdef.DLbls != nil {
		_effa := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_cdef.DLbls, _effa)
	}
	_dffb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _deccb := range _cdef.AxId {
		e.EncodeElement(_deccb, _dffb)
	}
	if _cdef.ExtLst != nil {
		_adcc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cdef.ExtLst, _adcc)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_NumDataSourceChoice and its children, prefixing error messages with path
func (_effda *CT_NumDataSourceChoice) ValidateWithPath(path string) error {
	if _effda.NumRef != nil {
		if _ggcdb := _effda.NumRef.ValidateWithPath(path + "\u002fN\u0075\u006d\u0052\u0065\u0066"); _ggcdb != nil {
			return _ggcdb
		}
	}
	if _effda.NumLit != nil {
		if _bdecb := _effda.NumLit.ValidateWithPath(path + "\u002fN\u0075\u006d\u004c\u0069\u0074"); _bdecb != nil {
			return _bdecb
		}
	}
	return nil
}
func (_agfe *CT_GapAmount) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _agfe.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", *_agfe.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_Layout() *CT_Layout { _ffaaa := &CT_Layout{}; return _ffaaa }

// ST_BubbleScale is a union type
type ST_BubbleScale struct {
	ST_BubbleScalePercent *string
	ST_BubbleScaleUInt    *uint32
}

// ValidateWithPath validates the CT_LineSer and its children, prefixing error messages with path
func (_gfcf *CT_LineSer) ValidateWithPath(path string) error {
	if _geadb := _gfcf.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _geadb != nil {
		return _geadb
	}
	if _aeed := _gfcf.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _aeed != nil {
		return _aeed
	}
	if _gfcf.Tx != nil {
		if _ebgc := _gfcf.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _ebgc != nil {
			return _ebgc
		}
	}
	if _gfcf.SpPr != nil {
		if _gadae := _gfcf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gadae != nil {
			return _gadae
		}
	}
	if _gfcf.Marker != nil {
		if _aacbf := _gfcf.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _aacbf != nil {
			return _aacbf
		}
	}
	for _bdgc, _aaba := range _gfcf.DPt {
		if _ggcea := _aaba.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _bdgc)); _ggcea != nil {
			return _ggcea
		}
	}
	if _gfcf.DLbls != nil {
		if _aggf := _gfcf.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _aggf != nil {
			return _aggf
		}
	}
	for _fgeaa, _fegg := range _gfcf.Trendline {
		if _ffgaa := _fegg.ValidateWithPath(_g.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _fgeaa)); _ffgaa != nil {
			return _ffgaa
		}
	}
	if _gfcf.ErrBars != nil {
		if _ddbga := _gfcf.ErrBars.ValidateWithPath(path + "\u002f\u0045\u0072\u0072\u0042\u0061\u0072\u0073"); _ddbga != nil {
			return _ddbga
		}
	}
	if _gfcf.Cat != nil {
		if _bda := _gfcf.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _bda != nil {
			return _bda
		}
	}
	if _gfcf.Val != nil {
		if _cgddd := _gfcf.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _cgddd != nil {
			return _cgddd
		}
	}
	if _gfcf.Smooth != nil {
		if _caaaa := _gfcf.Smooth.ValidateWithPath(path + "\u002fS\u006d\u006f\u006f\u0074\u0068"); _caaaa != nil {
			return _caaaa
		}
	}
	if _gfcf.ExtLst != nil {
		if _fadf := _gfcf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fadf != nil {
			return _fadf
		}
	}
	return nil
}
func (_ecga *CT_CrossBetween) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_ded, _adgb := _ecga.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
	if _adgb != nil {
		return _adgb
	}
	start.Attr = append(start.Attr, _ded)
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type ST_PictureFormat byte

func NewCT_PageSetup() *CT_PageSetup {
	_cefce := &CT_PageSetup{}
	return _cefce
}
func NewCT_Surface3DChart() *CT_Surface3DChart { _ecfaa := &CT_Surface3DChart{}; return _ecfaa }

// ValidateWithPath validates the CT_BarChart and its children, prefixing error messages with path
func (_cffgc *CT_BarChart) ValidateWithPath(path string) error {
	if _afd := _cffgc.BarDir.ValidateWithPath(path + "\u002fB\u0061\u0072\u0044\u0069\u0072"); _afd != nil {
		return _afd
	}
	if _cffgc.Grouping != nil {
		if _gbgf := _cffgc.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _gbgf != nil {
			return _gbgf
		}
	}
	if _cffgc.VaryColors != nil {
		if _fgbd := _cffgc.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _fgbd != nil {
			return _fgbd
		}
	}
	for _bfga, _ffbc := range _cffgc.Ser {
		if _geafb := _ffbc.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _bfga)); _geafb != nil {
			return _geafb
		}
	}
	if _cffgc.DLbls != nil {
		if _bbbb := _cffgc.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _bbbb != nil {
			return _bbbb
		}
	}
	if _cffgc.GapWidth != nil {
		if _gbgg := _cffgc.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _gbgg != nil {
			return _gbgg
		}
	}
	if _cffgc.Overlap != nil {
		if _bfce := _cffgc.Overlap.ValidateWithPath(path + "\u002f\u004f\u0076\u0065\u0072\u006c\u0061\u0070"); _bfce != nil {
			return _bfce
		}
	}
	for _cbf, _egbg := range _cffgc.SerLines {
		if _eeaf := _egbg.ValidateWithPath(_g.Sprintf("\u0025s\u002fS\u0065\u0072\u004c\u0069\u006e\u0065\u0073\u005b\u0025\u0064\u005d", path, _cbf)); _eeaf != nil {
			return _eeaf
		}
	}
	for _ffgc, _dff := range _cffgc.AxId {
		if _gffa := _dff.ValidateWithPath(_g.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _ffgc)); _gffa != nil {
			return _gffa
		}
	}
	if _cffgc.ExtLst != nil {
		if _cdca := _cffgc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cdca != nil {
			return _cdca
		}
	}
	return nil
}
func (_dfce *ST_DepthPercent) ValidateWithPath(path string) error {
	_gbcb := []string{}
	if _dfce.ST_DepthPercentWithSymbol != nil {
		_gbcb = append(_gbcb, "\u0053T\u005f\u0044\u0065\u0070t\u0068\u0050\u0065\u0072\u0063e\u006et\u0057i\u0074\u0068\u0053\u0079\u006d\u0062\u006fl")
	}
	if _dfce.ST_DepthPercentUShort != nil {
		_gbcb = append(_gbcb, "S\u0054\u005f\u0044\u0065pt\u0068P\u0065\u0072\u0063\u0065\u006et\u0055\u0053\u0068\u006f\u0072\u0074")
	}
	if len(_gbcb) > 1 {
		return _g.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _gbcb)
	}
	return nil
}

type CT_DPt struct {

	// Index
	Idx *CT_UnsignedInt

	// Invert if Negative
	InvertIfNegative *CT_Boolean

	// Marker
	Marker *CT_Marker

	// 3D Bubble
	Bubble3D *CT_Boolean

	// Explosion
	Explosion      *CT_UnsignedInt
	SpPr           *_gfc.CT_ShapeProperties
	PictureOptions *CT_PictureOptions

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_gcgab *ST_MarkerStyle) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_gcgab = 0
	case "\u0063\u0069\u0072\u0063\u006c\u0065":
		*_gcgab = 1
	case "\u0064\u0061\u0073\u0068":
		*_gcgab = 2
	case "\u0064i\u0061\u006d\u006f\u006e\u0064":
		*_gcgab = 3
	case "\u0064\u006f\u0074":
		*_gcgab = 4
	case "\u006e\u006f\u006e\u0065":
		*_gcgab = 5
	case "\u0070i\u0063\u0074\u0075\u0072\u0065":
		*_gcgab = 6
	case "\u0070\u006c\u0075\u0073":
		*_gcgab = 7
	case "\u0073\u0071\u0075\u0061\u0072\u0065":
		*_gcgab = 8
	case "\u0073\u0074\u0061\u0072":
		*_gcgab = 9
	case "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065":
		*_gcgab = 10
	case "\u0078":
		*_gcgab = 11
	case "\u0061\u0075\u0074\u006f":
		*_gcgab = 12
	}
	return nil
}

type CT_UpDownBar struct{ SpPr *_gfc.CT_ShapeProperties }

func NewCT_Bar3DChart() *CT_Bar3DChart {
	_egbf := &CT_Bar3DChart{}
	_egbf.BarDir = NewCT_BarDir()
	return _egbf
}

// ValidateWithPath validates the CT_OfPieType and its children, prefixing error messages with path
func (_fdcd *CT_OfPieType) ValidateWithPath(path string) error {
	if _gfdga := _fdcd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gfdga != nil {
		return _gfdga
	}
	return nil
}

// ValidateWithPath validates the EG_AxShared and its children, prefixing error messages with path
func (_aeebd *EG_AxShared) ValidateWithPath(path string) error {
	if _fcfd := _aeebd.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _fcfd != nil {
		return _fcfd
	}
	if _bfgc := _aeebd.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _bfgc != nil {
		return _bfgc
	}
	if _aeebd.Delete != nil {
		if _cecd := _aeebd.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _cecd != nil {
			return _cecd
		}
	}
	if _gedga := _aeebd.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _gedga != nil {
		return _gedga
	}
	if _aeebd.MajorGridlines != nil {
		if _faccd := _aeebd.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _faccd != nil {
			return _faccd
		}
	}
	if _aeebd.MinorGridlines != nil {
		if _cdfaf := _aeebd.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _cdfaf != nil {
			return _cdfaf
		}
	}
	if _aeebd.Title != nil {
		if _dgdaa := _aeebd.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _dgdaa != nil {
			return _dgdaa
		}
	}
	if _aeebd.NumFmt != nil {
		if _cdece := _aeebd.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _cdece != nil {
			return _cdece
		}
	}
	if _aeebd.MajorTickMark != nil {
		if _eggd := _aeebd.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _eggd != nil {
			return _eggd
		}
	}
	if _aeebd.MinorTickMark != nil {
		if _bgbg := _aeebd.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _bgbg != nil {
			return _bgbg
		}
	}
	if _aeebd.TickLblPos != nil {
		if _efafe := _aeebd.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _efafe != nil {
			return _efafe
		}
	}
	if _aeebd.SpPr != nil {
		if _ecac := _aeebd.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ecac != nil {
			return _ecac
		}
	}
	if _aeebd.TxPr != nil {
		if _cecea := _aeebd.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _cecea != nil {
			return _cecea
		}
	}
	if _bdfa := _aeebd.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _bdfa != nil {
		return _bdfa
	}
	if _aeebd.AxSharedChoice != nil {
		if _ebcde := _aeebd.AxSharedChoice.ValidateWithPath(path + "\u002fA\u0078S\u0068\u0061\u0072\u0065\u0064\u0043\u0068\u006f\u0069\u0063\u0065"); _ebcde != nil {
			return _ebcde
		}
	}
	return nil
}
func (_caee *CT_DLblPos) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_caee.ValAttr = ST_DLblPos(1)
	for _, _cbfa := range start.Attr {
		if _cbfa.Name.Local == "\u0076\u0061\u006c" {
			_caee.ValAttr.UnmarshalXMLAttr(_cbfa)
			continue
		}
	}
	for {
		_bfae, _ggdf := d.Token()
		if _ggdf != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0050\u006f\u0073\u003a\u0020%\u0073", _ggdf)
		}
		if _gdec, _aaf := _bfae.(_b.EndElement); _aaf && _gdec.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_TickMark struct {

	// Tick Mark Value
	ValAttr ST_TickMark
}

func (_eacf *CT_DoughnutChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _eacf.VaryColors != nil {
		_gbcde := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_eacf.VaryColors, _gbcde)
	}
	if _eacf.Ser != nil {
		_bfag := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _ddfaf := range _eacf.Ser {
			e.EncodeElement(_ddfaf, _bfag)
		}
	}
	if _eacf.DLbls != nil {
		_gccc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_eacf.DLbls, _gccc)
	}
	if _eacf.FirstSliceAng != nil {
		_abec := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0066i\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}}
		e.EncodeElement(_eacf.FirstSliceAng, _abec)
	}
	if _eacf.HoleSize != nil {
		_fdg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0068\u006f\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_eacf.HoleSize, _fdg)
	}
	if _eacf.ExtLst != nil {
		_dbad := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_eacf.ExtLst, _dbad)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_ffacb *CT_Protection) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _ffacb.ChartObject != nil {
		_adbccf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0063\u0068\u0061\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"}}
		e.EncodeElement(_ffacb.ChartObject, _adbccf)
	}
	if _ffacb.Data != nil {
		_eafdb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0061\u0074\u0061"}}
		e.EncodeElement(_ffacb.Data, _eafdb)
	}
	if _ffacb.Formatting != nil {
		_dgcge := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0066o\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"}}
		e.EncodeElement(_ffacb.Formatting, _dgcge)
	}
	if _ffacb.Selection != nil {
		_egce := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0073\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e"}}
		e.EncodeElement(_ffacb.Selection, _egce)
	}
	if _ffacb.UserInterface != nil {
		_afafg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0075s\u0065\u0072\u0049\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065"}}
		e.EncodeElement(_ffacb.UserInterface, _afafg)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_afabc *Group_DLbls) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _afabc.NumFmt != nil {
		_fdgea := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_afabc.NumFmt, _fdgea)
	}
	if _afabc.SpPr != nil {
		_beebc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_afabc.SpPr, _beebc)
	}
	if _afabc.TxPr != nil {
		_aegbc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_afabc.TxPr, _aegbc)
	}
	if _afabc.DLblPos != nil {
		_gafcge := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_afabc.DLblPos, _gafcge)
	}
	if _afabc.ShowLegendKey != nil {
		_cdfcec := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_afabc.ShowLegendKey, _cdfcec)
	}
	if _afabc.ShowVal != nil {
		_eabab := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_afabc.ShowVal, _eabab)
	}
	if _afabc.ShowCatName != nil {
		_gdeef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_afabc.ShowCatName, _gdeef)
	}
	if _afabc.ShowSerName != nil {
		_fgeaad := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_afabc.ShowSerName, _fgeaad)
	}
	if _afabc.ShowPercent != nil {
		_befaf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_afabc.ShowPercent, _befaf)
	}
	if _afabc.ShowBubbleSize != nil {
		_gbebd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_afabc.ShowBubbleSize, _gbebd)
	}
	if _afabc.Separator != nil {
		_ecgaad := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_gf.AddPreserveSpaceAttr(&_ecgaad, *_afabc.Separator)
		e.EncodeElement(_afabc.Separator, _ecgaad)
	}
	if _afabc.ShowLeaderLines != nil {
		_begcd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004c\u0065\u0061\u0064\u0065\u0072L\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_afabc.ShowLeaderLines, _begcd)
	}
	if _afabc.LeaderLines != nil {
		_ccagb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_afabc.LeaderLines, _ccagb)
	}
	return nil
}
func (_cadd *CT_Boolean) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _cadd.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0064", _bfeaa(*_cadd.ValAttr))})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_fdfba *CT_PictureOptions) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_afaad:
	for {
		_gfeeb, _dbgc := d.Token()
		if _dbgc != nil {
			return _dbgc
		}
		switch _bbda := _gfeeb.(type) {
		case _b.StartElement:
			switch _bbda.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0046\u0072\u006f\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0046\u0072\u006f\u006e\u0074"}:
				_fdfba.ApplyToFront = NewCT_Boolean()
				if _egcbd := d.DecodeElement(_fdfba.ApplyToFront, &_bbda); _egcbd != nil {
					return _egcbd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0053\u0069\u0064\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0053\u0069\u0064\u0065\u0073"}:
				_fdfba.ApplyToSides = NewCT_Boolean()
				if _dbace := d.DecodeElement(_fdfba.ApplyToSides, &_bbda); _dbace != nil {
					return _dbace
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"}:
				_fdfba.ApplyToEnd = NewCT_Boolean()
				if _gfeec := d.DecodeElement(_fdfba.ApplyToEnd, &_bbda); _gfeec != nil {
					return _gfeec
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074"}:
				_fdfba.PictureFormat = NewCT_PictureFormat()
				if _bbeac := d.DecodeElement(_fdfba.PictureFormat, &_bbda); _bbeac != nil {
					return _bbeac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069c\u0074\u0075\u0072e\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069c\u0074\u0075\u0072e\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074"}:
				_fdfba.PictureStackUnit = NewCT_PictureStackUnit()
				if _bgcb := d.DecodeElement(_fdfba.PictureStackUnit, &_bbda); _bgcb != nil {
					return _bgcb
				}
			default:
				_df.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073\u0020\u0025\u0076", _bbda.Name)
				if _cbeee := d.Skip(); _cbeee != nil {
					return _cbeee
				}
			}
		case _b.EndElement:
			break _afaad
		case _b.CharData:
		}
	}
	return nil
}
func (_fegc *CT_DTable) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_ebceb:
	for {
		_dfeg, _fbcge := d.Token()
		if _fbcge != nil {
			return _fbcge
		}
		switch _aacc := _dfeg.(type) {
		case _b.StartElement:
			switch _aacc.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0048\u006f\u0072\u007a\u0042o\u0072\u0064\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0048\u006f\u0072\u007a\u0042o\u0072\u0064\u0065\u0072"}:
				_fegc.ShowHorzBorder = NewCT_Boolean()
				if _afbd := d.DecodeElement(_fegc.ShowHorzBorder, &_aacc); _afbd != nil {
					return _afbd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0056\u0065\u0072\u0074\u0042o\u0072\u0064\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0056\u0065\u0072\u0074\u0042o\u0072\u0064\u0065\u0072"}:
				_fegc.ShowVertBorder = NewCT_Boolean()
				if _fffe := d.DecodeElement(_fegc.ShowVertBorder, &_aacc); _fffe != nil {
					return _fffe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"}:
				_fegc.ShowOutline = NewCT_Boolean()
				if _aace := d.DecodeElement(_fegc.ShowOutline, &_aacc); _aace != nil {
					return _aace
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004b\u0065\u0079\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004b\u0065\u0079\u0073"}:
				_fegc.ShowKeys = NewCT_Boolean()
				if _fbgff := d.DecodeElement(_fegc.ShowKeys, &_aacc); _fbgff != nil {
					return _fbgff
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fegc.SpPr = _gfc.NewCT_ShapeProperties()
				if _bbdg := d.DecodeElement(_fegc.SpPr, &_aacc); _bbdg != nil {
					return _bbdg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_fegc.TxPr = _gfc.NewCT_TextBody()
				if _bbgac := d.DecodeElement(_fegc.TxPr, &_aacc); _bbgac != nil {
					return _bbgac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fegc.ExtLst = NewCT_ExtensionList()
				if _fdccd := d.DecodeElement(_fegc.ExtLst, &_aacc); _fdccd != nil {
					return _fdccd
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0044\u0054\u0061b\u006c\u0065 \u0025\u0076", _aacc.Name)
				if _fab := d.Skip(); _fab != nil {
					return _fab
				}
			}
		case _b.EndElement:
			break _ebceb
		case _b.CharData:
		}
	}
	return nil
}

// Validate validates the CT_ChartLines and its children
func (_beaf *CT_ChartLines) Validate() error {
	return _beaf.ValidateWithPath("\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u004c\u0069\u006e\u0065\u0073")
}
func (_ecde *ST_GapAmount) ValidateWithPath(path string) error {
	_gffea := []string{}
	if _ecde.ST_GapAmountPercent != nil {
		_gffea = append(_gffea, "\u0053\u0054\u005f\u0047ap\u0041\u006d\u006f\u0075\u006e\u0074\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _ecde.ST_GapAmountUShort != nil {
		_gffea = append(_gffea, "\u0053T\u005fG\u0061\u0070\u0041\u006d\u006fu\u006e\u0074U\u0053\u0068\u006f\u0072\u0074")
	}
	if len(_gffea) > 1 {
		return _g.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _gffea)
	}
	return nil
}

type CT_BarSer struct {

	// Index
	Idx *CT_UnsignedInt

	// Order
	Order *CT_UnsignedInt

	// Series Text
	Tx   *CT_SerTx
	SpPr *_gfc.CT_ShapeProperties

	// Invert if Negative
	InvertIfNegative *CT_Boolean
	PictureOptions   *CT_PictureOptions

	// Data Point
	DPt []*CT_DPt

	// Data Labels
	DLbls *CT_DLbls

	// Trendlines
	Trendline []*CT_Trendline

	// Error Bars
	ErrBars *CT_ErrBars

	// Category Axis Data
	Cat *CT_AxDataSource
	Val *CT_NumDataSource

	// Shape
	Shape *CT_Shape

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

// ValidateWithPath validates the CT_Pie3DChart and its children, prefixing error messages with path
func (_bgacd *CT_Pie3DChart) ValidateWithPath(path string) error {
	if _bgacd.VaryColors != nil {
		if _cbca := _bgacd.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _cbca != nil {
			return _cbca
		}
	}
	for _bacff, _cadee := range _bgacd.Ser {
		if _befef := _cadee.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _bacff)); _befef != nil {
			return _befef
		}
	}
	if _bgacd.DLbls != nil {
		if _cfcbd := _bgacd.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _cfcbd != nil {
			return _cfcbd
		}
	}
	if _bgacd.ExtLst != nil {
		if _dadc := _bgacd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dadc != nil {
			return _dadc
		}
	}
	return nil
}

type CT_ErrDir struct {

	// Error Bar Direction Value
	ValAttr ST_ErrDir
}

// Validate validates the CT_RelId and its children
func (_acgf *CT_RelId) Validate() error {
	return _acgf.ValidateWithPath("\u0043\u0054\u005f\u0052\u0065\u006c\u0049\u0064")
}
func (_dagag ST_TickMark) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_dagag.String(), start)
}

// ValidateWithPath validates the CT_AreaChart and its children, prefixing error messages with path
func (_acb *CT_AreaChart) ValidateWithPath(path string) error {
	if _acb.Grouping != nil {
		if _bea := _acb.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _bea != nil {
			return _bea
		}
	}
	if _acb.VaryColors != nil {
		if _efg := _acb.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _efg != nil {
			return _efg
		}
	}
	for _cdb, _gge := range _acb.Ser {
		if _aea := _gge.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _cdb)); _aea != nil {
			return _aea
		}
	}
	if _acb.DLbls != nil {
		if _dddg := _acb.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _dddg != nil {
			return _dddg
		}
	}
	if _acb.DropLines != nil {
		if _dg := _acb.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _dg != nil {
			return _dg
		}
	}
	for _bae, _fcb := range _acb.AxId {
		if _ffa := _fcb.ValidateWithPath(_g.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _bae)); _ffa != nil {
			return _ffa
		}
	}
	if _acb.ExtLst != nil {
		if _ecb := _acb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ecb != nil {
			return _ecb
		}
	}
	return nil
}
func NewEG_AreaChartShared() *EG_AreaChartShared {
	_ceecde := &EG_AreaChartShared{}
	return _ceecde
}

const ST_BubbleScalePercentPattern = "0\u002a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029|\u0028\u005b\u0031\u002d\u0039\u005d\u005b0-\u0039\u005d\u0029\u007c(\u005b\u0031\u002d\u0032\u005d\u005b\u0030\u002d\u0039][\u0030\u002d9\u005d\u0029\u007c\u0033\u0030\u0030\u0029\u0025"

func NewCT_AxDataSource() *CT_AxDataSource {
	_gace := &CT_AxDataSource{}
	_gace.AxDataSourceChoice = NewCT_AxDataSourceChoice()
	return _gace
}
func (_bgge *CT_LayoutMode) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _dbde := range start.Attr {
		if _dbde.Name.Local == "\u0076\u0061\u006c" {
			_bgge.ValAttr.UnmarshalXMLAttr(_dbde)
			continue
		}
	}
	for {
		_adda, _deea := d.Token()
		if _deea != nil {
			return _g.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u004ca\u0079o\u0075t\u004d\u006f\u0064\u0065\u003a\u0020\u0025s", _deea)
		}
		if _ggddc, _daeg := _adda.(_b.EndElement); _daeg && _ggddc.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_BubbleChart struct {
	VaryColors *CT_Boolean

	// Bubble Chart Series
	Ser []*CT_BubbleSer

	// Data Labels
	DLbls *CT_DLbls

	// 3D Bubble
	Bubble3D *CT_Boolean

	// Bubble Scale
	BubbleScale *CT_BubbleScale

	// Show Negative Bubbles
	ShowNegBubbles *CT_Boolean

	// Size Represents
	SizeRepresents *CT_SizeRepresents

	// Axis ID
	AxId []*CT_UnsignedInt

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func ParseUnionST_LblOffset(s string) (ST_LblOffset, error) {
	if ST_LblOffsetPercentPatternRe.MatchString(s) {
		return ST_LblOffset{ST_LblOffsetPercent: &s}, nil
	}
	_dgcdc, _eacb := _e.ParseUint(s, 10, 16)
	if _eacb != nil {
		return ST_LblOffset{}, _eacb
	}
	_ecfeb := uint16(_dgcdc)
	return ST_LblOffset{ST_LblOffsetUShort: &_ecfeb}, nil
}

// ValidateWithPath validates the CT_PieChart and its children, prefixing error messages with path
func (_gggab *CT_PieChart) ValidateWithPath(path string) error {
	if _gggab.VaryColors != nil {
		if _dced := _gggab.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _dced != nil {
			return _dced
		}
	}
	for _dcbea, _cbbec := range _gggab.Ser {
		if _bfab := _cbbec.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _dcbea)); _bfab != nil {
			return _bfab
		}
	}
	if _gggab.DLbls != nil {
		if _dbedc := _gggab.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _dbedc != nil {
			return _dbedc
		}
	}
	if _gggab.FirstSliceAng != nil {
		if _daabag := _gggab.FirstSliceAng.ValidateWithPath(path + "\u002f\u0046\u0069\u0072\u0073\u0074\u0053\u006c\u0069c\u0065\u0041\u006e\u0067"); _daabag != nil {
			return _daabag
		}
	}
	if _gggab.ExtLst != nil {
		if _aggfc := _gggab.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _aggfc != nil {
			return _aggfc
		}
	}
	return nil
}
func (_fdaggd ST_AxPos) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_fdaggd.String(), start)
}
func NewCT_CustSplit() *CT_CustSplit { _fdde := &CT_CustSplit{}; return _fdde }
func (_eccf *CT_DLblPos) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_cbef, _ggff := _eccf.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
	if _ggff != nil {
		return _ggff
	}
	start.Attr = append(start.Attr, _cbef)
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_gaecae ST_ScatterStyle) Validate() error { return _gaecae.ValidateWithPath("") }
func (_dfac *CT_SurfaceChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _dfac.Wireframe != nil {
		_dbcfd := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0077\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"}}
		e.EncodeElement(_dfac.Wireframe, _dbcfd)
	}
	if _dfac.Ser != nil {
		_gdgbeb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _dgced := range _dfac.Ser {
			e.EncodeElement(_dgced, _gdgbeb)
		}
	}
	if _dfac.BandFmts != nil {
		_dceg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_dfac.BandFmts, _dceg)
	}
	_febgf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _abgec := range _dfac.AxId {
		e.EncodeElement(_abgec, _febgf)
	}
	if _dfac.ExtLst != nil {
		_bagff := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dfac.ExtLst, _bagff)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_aagfa ST_ErrBarType) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_aagfa.String(), start)
}
func NewCT_AreaSer() *CT_AreaSer {
	_gff := &CT_AreaSer{}
	_gff.Idx = NewCT_UnsignedInt()
	_gff.Order = NewCT_UnsignedInt()
	return _gff
}
func NewCT_LegendPos() *CT_LegendPos { _aeab := &CT_LegendPos{}; return _aeab }
func (_bcef *CT_Orientation) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _agbd := range start.Attr {
		if _agbd.Name.Local == "\u0076\u0061\u006c" {
			_bcef.ValAttr.UnmarshalXMLAttr(_agbd)
			continue
		}
	}
	for {
		_gged, _fdgb := d.Token()
		if _fdgb != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fO\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e:\u0020\u0025\u0073", _fdgb)
		}
		if _ecfba, _edgc := _gged.(_b.EndElement); _edgc && _ecfba.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_NumFmt() *CT_NumFmt { _ccdac := &CT_NumFmt{}; return _ccdac }

// ValidateWithPath validates the CT_BarGrouping and its children, prefixing error messages with path
func (_cbb *CT_BarGrouping) ValidateWithPath(path string) error {
	if _ecca := _cbb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ecca != nil {
		return _ecca
	}
	return nil
}

type CT_ExternalData struct {
	IdAttr string

	// Update Automatically
	AutoUpdate *CT_Boolean
}

func (_accb *CT_DLbl) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_cadb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_accb.Idx, _cadb)
	_accb.DLblChoice.MarshalXML(e, _b.StartElement{})
	if _accb.ExtLst != nil {
		_dgcc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_accb.ExtLst, _dgcc)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_AxDataSourceChoice struct {
	MultiLvlStrRef *CT_MultiLvlStrRef
	NumRef         *CT_NumRef
	NumLit         *CT_NumData
	StrRef         *CT_StrRef
	StrLit         *CT_StrData
}

func (_aaaaa ST_DLblPos) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_aaaaa.String(), start)
}

// ST_Thickness is a union type
type ST_Thickness struct {
	ST_ThicknessPercent *string
	Uint32              *uint32
}

// Validate validates the CT_LayoutMode and its children
func (_egag *CT_LayoutMode) Validate() error {
	return _egag.ValidateWithPath("\u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u004d\u006f\u0064\u0065")
}

// Validate validates the CT_UnsignedInt and its children
func (_eacaaa *CT_UnsignedInt) Validate() error {
	return _eacaaa.ValidateWithPath("\u0043\u0054\u005f\u0055\u006e\u0073\u0069\u0067\u006ee\u0064\u0049\u006e\u0074")
}
func (_bbfcg *CT_View3D) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _bbfcg.RotX != nil {
		_bcfg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0072\u006f\u0074\u0058"}}
		e.EncodeElement(_bbfcg.RotX, _bcfg)
	}
	if _bbfcg.HPercent != nil {
		_egdcf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_bbfcg.HPercent, _egdcf)
	}
	if _bbfcg.RotY != nil {
		_aaceeg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0072\u006f\u0074\u0059"}}
		e.EncodeElement(_bbfcg.RotY, _aaceeg)
	}
	if _bbfcg.DepthPercent != nil {
		_adccf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0065\u0070\u0074\u0068\u0050\u0065r\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_bbfcg.DepthPercent, _adccf)
	}
	if _bbfcg.RAngAx != nil {
		_ebddg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0072\u0041\u006e\u0067\u0041\u0078"}}
		e.EncodeElement(_bbfcg.RAngAx, _ebddg)
	}
	if _bbfcg.Perspective != nil {
		_aafae := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_bbfcg.Perspective, _aafae)
	}
	if _bbfcg.ExtLst != nil {
		_fadb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bbfcg.ExtLst, _fadb)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_feafb ST_LayoutMode) String() string {
	switch _feafb {
	case 0:
		return ""
	case 1:
		return "\u0065\u0064\u0067\u0065"
	case 2:
		return "\u0066\u0061\u0063\u0074\u006f\u0072"
	}
	return ""
}
func (_fbfdeg *CT_PieSer) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fbfdeg.Idx = NewCT_UnsignedInt()
	_fbfdeg.Order = NewCT_UnsignedInt()
_bbcc:
	for {
		_agggg, _cedga := d.Token()
		if _cedga != nil {
			return _cedga
		}
		switch _gbfbc := _agggg.(type) {
		case _b.StartElement:
			switch _gbfbc.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _fcedb := d.DecodeElement(_fbfdeg.Idx, &_gbfbc); _fcedb != nil {
					return _fcedb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _aafad := d.DecodeElement(_fbfdeg.Order, &_gbfbc); _aafad != nil {
					return _aafad
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_fbfdeg.Tx = NewCT_SerTx()
				if _faee := d.DecodeElement(_fbfdeg.Tx, &_gbfbc); _faee != nil {
					return _faee
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fbfdeg.SpPr = _gfc.NewCT_ShapeProperties()
				if _gdff := d.DecodeElement(_fbfdeg.SpPr, &_gbfbc); _gdff != nil {
					return _gdff
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}:
				_fbfdeg.Explosion = NewCT_UnsignedInt()
				if _babag := d.DecodeElement(_fbfdeg.Explosion, &_gbfbc); _babag != nil {
					return _babag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_abac := NewCT_DPt()
				if _eagad := d.DecodeElement(_abac, &_gbfbc); _eagad != nil {
					return _eagad
				}
				_fbfdeg.DPt = append(_fbfdeg.DPt, _abac)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_fbfdeg.DLbls = NewCT_DLbls()
				if _gdcf := d.DecodeElement(_fbfdeg.DLbls, &_gbfbc); _gdcf != nil {
					return _gdcf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_fbfdeg.Cat = NewCT_AxDataSource()
				if _ggddcc := d.DecodeElement(_fbfdeg.Cat, &_gbfbc); _ggddcc != nil {
					return _ggddcc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_fbfdeg.Val = NewCT_NumDataSource()
				if _eggea := d.DecodeElement(_fbfdeg.Val, &_gbfbc); _eggea != nil {
					return _eggea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fbfdeg.ExtLst = NewCT_ExtensionList()
				if _gdcbd := d.DecodeElement(_fbfdeg.ExtLst, &_gbfbc); _gdcbd != nil {
					return _gdcbd
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0050\u0069\u0065S\u0065\u0072 \u0025\u0076", _gbfbc.Name)
				if _gabce := d.Skip(); _gabce != nil {
					return _gabce
				}
			}
		case _b.EndElement:
			break _bbcc
		case _b.CharData:
		}
	}
	return nil
}
func (_gaebb *Chart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0063"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063:\u0063\u0068\u0061\u0072\u0074"
	return _gaebb.CT_RelId.MarshalXML(e, start)
}

// Validate validates the CT_BarGrouping and its children
func (_bedaa *CT_BarGrouping) Validate() error {
	return _bedaa.ValidateWithPath("\u0043\u0054\u005f\u0042\u0061\u0072\u0047\u0072\u006fu\u0070\u0069\u006e\u0067")
}
func (_dfab *CT_NumDataSource) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dfab.NumDataSourceChoice = NewCT_NumDataSourceChoice()
_gfgag:
	for {
		_bfgec, _bdac := d.Token()
		if _bdac != nil {
			return _bdac
		}
		switch _dacg := _bfgec.(type) {
		case _b.StartElement:
			switch _dacg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_dfab.NumDataSourceChoice = NewCT_NumDataSourceChoice()
				if _fdaf := d.DecodeElement(&_dfab.NumDataSourceChoice.NumRef, &_dacg); _fdaf != nil {
					return _fdaf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_dfab.NumDataSourceChoice = NewCT_NumDataSourceChoice()
				if _eedbb := d.DecodeElement(&_dfab.NumDataSourceChoice.NumLit, &_dacg); _eedbb != nil {
					return _eedbb
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004e\u0075\u006d\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0020\u0025v", _dacg.Name)
				if _adeb := d.Skip(); _adeb != nil {
					return _adeb
				}
			}
		case _b.EndElement:
			break _gfgag
		case _b.CharData:
		}
	}
	return nil
}

// Validate validates the CT_ErrValType and its children
func (_cafe *CT_ErrValType) Validate() error {
	return _cafe.ValidateWithPath("\u0043\u0054\u005f\u0045\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065")
}
func (_dbeab *EG_SerShared) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_cfgab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_dbeab.Idx, _cfgab)
	_gcgdf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_dbeab.Order, _gcgdf)
	if _dbeab.Tx != nil {
		_edbaf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_dbeab.Tx, _edbaf)
	}
	if _dbeab.SpPr != nil {
		_edagf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_dbeab.SpPr, _edagf)
	}
	return nil
}
func (_acfga *ST_SecondPieSize) ValidateWithPath(path string) error {
	_bgbce := []string{}
	if _acfga.ST_SecondPieSizePercent != nil {
		_bgbce = append(_bgbce, "\u0053\u0054\u005fSe\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _acfga.ST_SecondPieSizeUShort != nil {
		_bgbce = append(_bgbce, "\u0053\u0054\u005f\u0053ec\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065\u0055\u0053\u0068\u006fr\u0074")
	}
	if len(_bgbce) > 1 {
		return _g.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _bgbce)
	}
	return nil
}

// ValidateWithPath validates the CT_CatAx and its children, prefixing error messages with path
func (_acgc *CT_CatAx) ValidateWithPath(path string) error {
	if _gade := _acgc.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _gade != nil {
		return _gade
	}
	if _bcaf := _acgc.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _bcaf != nil {
		return _bcaf
	}
	if _acgc.Delete != nil {
		if _ada := _acgc.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _ada != nil {
			return _ada
		}
	}
	if _fgc := _acgc.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _fgc != nil {
		return _fgc
	}
	if _acgc.MajorGridlines != nil {
		if _fbcg := _acgc.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _fbcg != nil {
			return _fbcg
		}
	}
	if _acgc.MinorGridlines != nil {
		if _cbd := _acgc.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _cbd != nil {
			return _cbd
		}
	}
	if _acgc.Title != nil {
		if _ffgcg := _acgc.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _ffgcg != nil {
			return _ffgcg
		}
	}
	if _acgc.NumFmt != nil {
		if _ceb := _acgc.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _ceb != nil {
			return _ceb
		}
	}
	if _acgc.MajorTickMark != nil {
		if _fbga := _acgc.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _fbga != nil {
			return _fbga
		}
	}
	if _acgc.MinorTickMark != nil {
		if _fgcd := _acgc.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _fgcd != nil {
			return _fgcd
		}
	}
	if _acgc.TickLblPos != nil {
		if _ebge := _acgc.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _ebge != nil {
			return _ebge
		}
	}
	if _acgc.SpPr != nil {
		if _gecf := _acgc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gecf != nil {
			return _gecf
		}
	}
	if _acgc.TxPr != nil {
		if _eead := _acgc.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _eead != nil {
			return _eead
		}
	}
	if _aedcd := _acgc.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _aedcd != nil {
		return _aedcd
	}
	if _acgc.AxSharedChoice != nil {
		if _aeff := _acgc.AxSharedChoice.ValidateWithPath(path + "\u002fA\u0078S\u0068\u0061\u0072\u0065\u0064\u0043\u0068\u006f\u0069\u0063\u0065"); _aeff != nil {
			return _aeff
		}
	}
	if _acgc.Auto != nil {
		if _cbgb := _acgc.Auto.ValidateWithPath(path + "\u002f\u0041\u0075t\u006f"); _cbgb != nil {
			return _cbgb
		}
	}
	if _acgc.LblAlgn != nil {
		if _egfg := _acgc.LblAlgn.ValidateWithPath(path + "\u002f\u004c\u0062\u006c\u0041\u006c\u0067\u006e"); _egfg != nil {
			return _egfg
		}
	}
	if _acgc.LblOffset != nil {
		if _gggd := _acgc.LblOffset.ValidateWithPath(path + "\u002f\u004c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"); _gggd != nil {
			return _gggd
		}
	}
	if _acgc.TickLblSkip != nil {
		if _cgcb := _acgc.TickLblSkip.ValidateWithPath(path + "\u002f\u0054\u0069c\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"); _cgcb != nil {
			return _cgcb
		}
	}
	if _acgc.TickMarkSkip != nil {
		if _fgde := _acgc.TickMarkSkip.ValidateWithPath(path + "\u002f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"); _fgde != nil {
			return _fgde
		}
	}
	if _acgc.NoMultiLvlLbl != nil {
		if _cgfg := _acgc.NoMultiLvlLbl.ValidateWithPath(path + "\u002f\u004e\u006f\u004d\u0075\u006c\u0074\u0069\u004cv\u006c\u004c\u0062\u006c"); _cgfg != nil {
			return _cgfg
		}
	}
	if _acgc.ExtLst != nil {
		if _ecdd := _acgc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ecdd != nil {
			return _ecdd
		}
	}
	return nil
}
func (_aggab ST_PictureFormat) ValidateWithPath(path string) error {
	switch _aggab {
	case 0, 1, 2, 3:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_aggab))
	}
	return nil
}
func (_fbgf *CT_BarDir) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _ffad := range start.Attr {
		if _ffad.Name.Local == "\u0076\u0061\u006c" {
			_fbgf.ValAttr.UnmarshalXMLAttr(_ffad)
			continue
		}
	}
	for {
		_cag, _bee := d.Token()
		if _bee != nil {
			return _g.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0042\u0061\u0072D\u0069\u0072\u003a\u0020\u0025\u0073", _bee)
		}
		if _gae, _afab := _cag.(_b.EndElement); _afab && _gae.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_CatAx and its children
func (_ecccd *CT_CatAx) Validate() error {
	return _ecccd.ValidateWithPath("\u0043\u0054\u005f\u0043\u0061\u0074\u0041\u0078")
}

type ST_TickMark byte

func (_dbge ST_OfPieType) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_dbge.String(), start)
}

// Validate validates the CT_AxDataSourceChoice and its children
func (_bfbc *CT_AxDataSourceChoice) Validate() error {
	return _bfbc.ValidateWithPath("C\u0054\u005f\u0041\u0078Da\u0074a\u0053\u006f\u0075\u0072\u0063e\u0043\u0068\u006f\u0069\u0063\u0065")
}

const ST_SecondPieSizePercentPattern = "\u0030\u002a\u0028\u0028\u005b\u0035\u002d9\u005d\u0029\u007c(\u005b\u0031\u002d\u0039]\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u0031\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0032\u0030\u0030\u0029\u0025"
const (
	ST_LblAlgnUnset ST_LblAlgn = 0
	ST_LblAlgnCtr   ST_LblAlgn = 1
	ST_LblAlgnL     ST_LblAlgn = 2
	ST_LblAlgnR     ST_LblAlgn = 3
)

func (_bddff ST_ErrDir) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_bddff.String(), start)
}
func (_bccab ST_DispBlanksAs) ValidateWithPath(path string) error {
	switch _bccab {
	case 0, 1, 2, 3:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bccab))
	}
	return nil
}
func (_ecbbd *ST_PictureFormat) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_ecbbd = 0
	case "\u0073t\u0072\u0065\u0074\u0063\u0068":
		*_ecbbd = 1
	case "\u0073\u0074\u0061c\u006b":
		*_ecbbd = 2
	case "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065":
		*_ecbbd = 3
	}
	return nil
}
func NewCT_OfPieChart() *CT_OfPieChart {
	_dddd := &CT_OfPieChart{}
	_dddd.OfPieType = NewCT_OfPieType()
	return _dddd
}

// Validate validates the CT_OfPieChart and its children
func (_acccc *CT_OfPieChart) Validate() error {
	return _acccc.ValidateWithPath("\u0043\u0054\u005f\u004f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074")
}

type CT_Perspective struct {

	// Perspective Value
	ValAttr *uint8
}
type CT_MultiLvlStrData struct {
	PtCount *CT_UnsignedInt

	// Level
	Lvl    []*CT_Lvl
	ExtLst *CT_ExtensionList
}

// ValidateWithPath validates the CT_DispUnitsChoice and its children, prefixing error messages with path
func (_bgdd *CT_DispUnitsChoice) ValidateWithPath(path string) error {
	if _bgdd.CustUnit != nil {
		if _gfag := _bgdd.CustUnit.ValidateWithPath(path + "\u002fC\u0075\u0073\u0074\u0055\u006e\u0069t"); _gfag != nil {
			return _gfag
		}
	}
	if _bgdd.BuiltInUnit != nil {
		if _aabc := _bgdd.BuiltInUnit.ValidateWithPath(path + "\u002f\u0042\u0075i\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"); _aabc != nil {
			return _aabc
		}
	}
	return nil
}
func (_fbdd *CT_ScatterStyle) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _efgcc := range start.Attr {
		if _efgcc.Name.Local == "\u0076\u0061\u006c" {
			_fbdd.ValAttr.UnmarshalXMLAttr(_efgcc)
			continue
		}
	}
	for {
		_fedee, _egec := d.Token()
		if _egec != nil {
			return _g.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0053\u0063\u0061\u0074\u0074\u0065r\u0053\u0074\u0079l\u0065:\u0020\u0025\u0073", _egec)
		}
		if _faebc, _egfef := _fedee.(_b.EndElement); _egfef && _faebc.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bebe *CT_ErrBars) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _bebe.ErrDir != nil {
		_ffd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0072\u0072\u0044\u0069\u0072"}}
		e.EncodeElement(_bebe.ErrDir, _ffd)
	}
	_afeb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065r\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_bebe.ErrBarType, _afeb)
	_cbgcd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065r\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_bebe.ErrValType, _cbgcd)
	if _bebe.NoEndCap != nil {
		_cbbb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u006f\u0045\u006e\u0064\u0043\u0061\u0070"}}
		e.EncodeElement(_bebe.NoEndCap, _cbbb)
	}
	if _bebe.Plus != nil {
		_ddeg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u006c\u0075\u0073"}}
		e.EncodeElement(_bebe.Plus, _ddeg)
	}
	if _bebe.Minus != nil {
		_agag := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006d\u0069\u006e\u0075\u0073"}}
		e.EncodeElement(_bebe.Minus, _agag)
	}
	if _bebe.Val != nil {
		_gfec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_bebe.Val, _gfec)
	}
	if _bebe.SpPr != nil {
		_eedae := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bebe.SpPr, _eedae)
	}
	if _bebe.ExtLst != nil {
		_gadgb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bebe.ExtLst, _gadgb)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_TrendlineLbl and its children
func (_efeba *CT_TrendlineLbl) Validate() error {
	return _efeba.ValidateWithPath("\u0043T\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c")
}
func NewCT_MultiLvlStrData() *CT_MultiLvlStrData { _ggffe := &CT_MultiLvlStrData{}; return _ggffe }
func NewCT_BubbleChart() *CT_BubbleChart         { _gefc := &CT_BubbleChart{}; return _gefc }
func (_cdfea *CT_PlotAreaChoice1) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_aaee := start
	switch start.Name {
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}:
		_cdfea.ValAx = NewCT_ValAx()
		if _gagde := d.DecodeElement(_cdfea.ValAx, &_aaee); _gagde != nil {
			return _gagde
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}:
		_cdfea.CatAx = NewCT_CatAx()
		if _bdccb := d.DecodeElement(_cdfea.CatAx, &_aaee); _bdccb != nil {
			return _bdccb
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}:
		_cdfea.DateAx = NewCT_DateAx()
		if _fdac := d.DecodeElement(_cdfea.DateAx, &_aaee); _fdac != nil {
			return _fdac
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}:
		_cdfea.SerAx = NewCT_SerAx()
		if _dceff := d.DecodeElement(_cdfea.SerAx, &_aaee); _dceff != nil {
			return _dceff
		}
	default:
		_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072e\u0061\u0043\u0068\u006f\u0069\u0063\u0065\u0031\u0020\u0025\u0076", _aaee.Name)
		if _ceggg := d.Skip(); _ceggg != nil {
			return _ceggg
		}
	}
	return nil
}
func (_beff *CT_Order) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _ageea := range start.Attr {
		if _ageea.Name.Local == "\u0076\u0061\u006c" {
			_cedgg, _dcca := _e.ParseUint(_ageea.Value, 10, 8)
			if _dcca != nil {
				return _dcca
			}
			_bddb := uint8(_cedgg)
			_beff.ValAttr = &_bddb
			continue
		}
	}
	for {
		_fdfag, _gabcde := d.Token()
		if _gabcde != nil {
			return _g.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fO\u0072\u0064\u0065\u0072: \u0025\u0073", _gabcde)
		}
		if _cega, _fdcac := _fdfag.(_b.EndElement); _fdcac && _cega.Name == start.Name {
			break
		}
	}
	return nil
}
func ParseUnionST_Overlap(s string) (ST_Overlap, error) {
	if ST_OverlapPercentPatternRe.MatchString(s) {
		return ST_Overlap{ST_OverlapPercent: &s}, nil
	}
	_gabbc, _feaabf := _e.ParseInt(s, 10, 8)
	if _feaabf != nil {
		return ST_Overlap{}, _feaabf
	}
	_adade := int8(_gabbc)
	return ST_Overlap{ST_OverlapByte: &_adade}, nil
}
func (_cgba *CT_ExtensionList) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _cgba.Ext != nil {
		_eefa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065x\u0074"}}
		for _, _dgad := range _cgba.Ext {
			e.EncodeElement(_dgad, _eefa)
		}
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_adfg *CT_Period) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _adfg.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", *_adfg.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_Order() *CT_Order { _baaab := &CT_Order{}; return _baaab }
func (_eeeg *CT_PivotFmts) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_acdfe:
	for {
		_fdbgf, _fdfbe := d.Token()
		if _fdfbe != nil {
			return _fdfbe
		}
		switch _ggegc := _fdbgf.(type) {
		case _b.StartElement:
			switch _ggegc.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074"}:
				_ddfcd := NewCT_PivotFmt()
				if _cacee := d.DecodeElement(_ddfcd, &_ggegc); _cacee != nil {
					return _cacee
				}
				_eeeg.PivotFmt = append(_eeeg.PivotFmt, _ddfcd)
			default:
				_df.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_P\u0069\u0076o\u0074\u0046\u006d\u0074\u0073\u0020\u0025\u0076", _ggegc.Name)
				if _bfbg := d.Skip(); _bfbg != nil {
					return _bfbg
				}
			}
		case _b.EndElement:
			break _acdfe
		case _b.CharData:
		}
	}
	return nil
}
func NewCT_UpDownBar() *CT_UpDownBar { _cgcdb := &CT_UpDownBar{}; return _cgcdb }
func (_baeaf *ST_OfPieType) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_baeaf = 0
	case "\u0070\u0069\u0065":
		*_baeaf = 1
	case "\u0062\u0061\u0072":
		*_baeaf = 2
	}
	return nil
}
func (_dcge *ST_BubbleScale) ValidateWithPath(path string) error {
	_cecc := []string{}
	if _dcge.ST_BubbleScalePercent != nil {
		_cecc = append(_cecc, "S\u0054\u005f\u0042\u0075bb\u006ce\u0053\u0063\u0061\u006c\u0065P\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _dcge.ST_BubbleScaleUInt != nil {
		_cecc = append(_cecc, "\u0053T\u005fB\u0075\u0062\u0062\u006c\u0065S\u0063\u0061l\u0065\u0055\u0049\u006e\u0074")
	}
	if len(_cecc) > 1 {
		return _g.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _cecc)
	}
	return nil
}
func ParseUnionST_BubbleScale(s string) (ST_BubbleScale, error) {
	if ST_BubbleScalePercentPatternRe.MatchString(s) {
		return ST_BubbleScale{ST_BubbleScalePercent: &s}, nil
	}
	_ffgef, _bceaf := _e.ParseUint(s, 10, 32)
	if _bceaf != nil {
		return ST_BubbleScale{}, _bceaf
	}
	_fbfbb := uint32(_ffgef)
	return ST_BubbleScale{ST_BubbleScaleUInt: &_fbfbb}, nil
}
func NewCT_PictureOptions() *CT_PictureOptions { _eeac := &CT_PictureOptions{}; return _eeac }
func (_fgfcg *CT_MarkerStyle) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fgfcg.ValAttr = ST_MarkerStyle(1)
	for _, _egfde := range start.Attr {
		if _egfde.Name.Local == "\u0076\u0061\u006c" {
			_fgfcg.ValAttr.UnmarshalXMLAttr(_egfde)
			continue
		}
	}
	for {
		_fgcab, _daaga := d.Token()
		if _daaga != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fM\u0061\u0072\u006b\u0065\u0072\u0053\u0074\u0079\u006c\u0065:\u0020\u0025\u0073", _daaga)
		}
		if _cace, _ddbeb := _fgcab.(_b.EndElement); _ddbeb && _cace.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_StrVal and its children, prefixing error messages with path
func (_bdgbf *CT_StrVal) ValidateWithPath(path string) error { return nil }
func (_babc *CT_AxisUnit) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_babc.ValAttr = 0 + 1
	for _, _ede := range start.Attr {
		if _ede.Name.Local == "\u0076\u0061\u006c" {
			_gce, _eab := _e.ParseFloat(_ede.Value, 64)
			if _eab != nil {
				return _eab
			}
			_babc.ValAttr = _gce
			continue
		}
	}
	for {
		_fdag, _baa := d.Token()
		if _baa != nil {
			return _g.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0041\u0078\u0069\u0073\u0055\u006e\u0069\u0074\u003a\u0020\u0025\u0073", _baa)
		}
		if _fdae, _aff := _fdag.(_b.EndElement); _aff && _fdae.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bada *CT_CustSplit) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _bada.SecondPiePt != nil {
		_ccae := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0050\u0074"}}
		for _, _cebf := range _bada.SecondPiePt {
			e.EncodeElement(_cebf, _ccae)
		}
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_PlotArea() *CT_PlotArea { _dabe := &CT_PlotArea{}; return _dabe }
func (_dacfd ST_CrossBetween) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_becfa := _b.Attr{}
	_becfa.Name = name
	switch _dacfd {
	case ST_CrossBetweenUnset:
		_becfa.Value = ""
	case ST_CrossBetweenBetween:
		_becfa.Value = "\u0062e\u0074\u0077\u0065\u0065\u006e"
	case ST_CrossBetweenMidCat:
		_becfa.Value = "\u006d\u0069\u0064\u0043\u0061\u0074"
	}
	return _becfa, nil
}
func (_caea *CT_RadarSer) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_caea.Idx = NewCT_UnsignedInt()
	_caea.Order = NewCT_UnsignedInt()
_cggcd:
	for {
		_feggc, _beecd := d.Token()
		if _beecd != nil {
			return _beecd
		}
		switch _egee := _feggc.(type) {
		case _b.StartElement:
			switch _egee.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _ecag := d.DecodeElement(_caea.Idx, &_egee); _ecag != nil {
					return _ecag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _eebbg := d.DecodeElement(_caea.Order, &_egee); _eebbg != nil {
					return _eebbg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_caea.Tx = NewCT_SerTx()
				if _facae := d.DecodeElement(_caea.Tx, &_egee); _facae != nil {
					return _facae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_caea.SpPr = _gfc.NewCT_ShapeProperties()
				if _bafc := d.DecodeElement(_caea.SpPr, &_egee); _bafc != nil {
					return _bafc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_caea.Marker = NewCT_Marker()
				if _gdcaa := d.DecodeElement(_caea.Marker, &_egee); _gdcaa != nil {
					return _gdcaa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_gbbfg := NewCT_DPt()
				if _affdf := d.DecodeElement(_gbbfg, &_egee); _affdf != nil {
					return _affdf
				}
				_caea.DPt = append(_caea.DPt, _gbbfg)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_caea.DLbls = NewCT_DLbls()
				if _fabbf := d.DecodeElement(_caea.DLbls, &_egee); _fabbf != nil {
					return _fabbf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_caea.Cat = NewCT_AxDataSource()
				if _bage := d.DecodeElement(_caea.Cat, &_egee); _bage != nil {
					return _bage
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_caea.Val = NewCT_NumDataSource()
				if _dfbc := d.DecodeElement(_caea.Val, &_egee); _dfbc != nil {
					return _dfbc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_caea.ExtLst = NewCT_ExtensionList()
				if _beddc := d.DecodeElement(_caea.ExtLst, &_egee); _beddc != nil {
					return _beddc
				}
			default:
				_df.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0065\u0072\u0020\u0025\u0076", _egee.Name)
				if _ddbfe := d.Skip(); _ddbfe != nil {
					return _ddbfe
				}
			}
		case _b.EndElement:
			break _cggcd
		case _b.CharData:
		}
	}
	return nil
}

type CT_RadarStyle struct {

	// Radar Style Value
	ValAttr ST_RadarStyle
}

func NewCT_StrRef() *CT_StrRef { _efga := &CT_StrRef{}; return _efga }

// ValidateWithPath validates the EG_BarChartShared and its children, prefixing error messages with path
func (_cfgeb *EG_BarChartShared) ValidateWithPath(path string) error {
	if _dgdce := _cfgeb.BarDir.ValidateWithPath(path + "\u002fB\u0061\u0072\u0044\u0069\u0072"); _dgdce != nil {
		return _dgdce
	}
	if _cfgeb.Grouping != nil {
		if _edcc := _cfgeb.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _edcc != nil {
			return _edcc
		}
	}
	if _cfgeb.VaryColors != nil {
		if _aeagg := _cfgeb.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _aeagg != nil {
			return _aeagg
		}
	}
	for _fddeae, _ebfeb := range _cfgeb.Ser {
		if _caead := _ebfeb.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _fddeae)); _caead != nil {
			return _caead
		}
	}
	if _cfgeb.DLbls != nil {
		if _geegb := _cfgeb.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _geegb != nil {
			return _geegb
		}
	}
	return nil
}
func (_acfa *CT_ChartSpace) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_acfa.Chart = NewCT_Chart()
_cefc:
	for {
		_egd, _gagc := d.Token()
		if _gagc != nil {
			return _gagc
		}
		switch _daab := _egd.(type) {
		case _b.StartElement:
			switch _daab.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}:
				_acfa.Date1904 = NewCT_Boolean()
				if _fed := d.DecodeElement(_acfa.Date1904, &_daab); _fed != nil {
					return _fed
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}:
				_acfa.Lang = NewCT_TextLanguageID()
				if _eddd := d.DecodeElement(_acfa.Lang, &_daab); _eddd != nil {
					return _eddd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}:
				_acfa.RoundedCorners = NewCT_Boolean()
				if _agfac := d.DecodeElement(_acfa.RoundedCorners, &_daab); _agfac != nil {
					return _agfac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}:
				_acfa.Style = NewCT_Style()
				if _fgbf := d.DecodeElement(_acfa.Style, &_daab); _fgbf != nil {
					return _fgbf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}:
				_acfa.ClrMapOvr = _gfc.NewCT_ColorMapping()
				if _gdeb := d.DecodeElement(_acfa.ClrMapOvr, &_daab); _gdeb != nil {
					return _gdeb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}:
				_acfa.PivotSource = NewCT_PivotSource()
				if _ddabc := d.DecodeElement(_acfa.PivotSource, &_daab); _ddabc != nil {
					return _ddabc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}:
				_acfa.Protection = NewCT_Protection()
				if _afe := d.DecodeElement(_acfa.Protection, &_daab); _afe != nil {
					return _afe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}:
				if _dbcc := d.DecodeElement(_acfa.Chart, &_daab); _dbcc != nil {
					return _dbcc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_acfa.SpPr = _gfc.NewCT_ShapeProperties()
				if _dgafa := d.DecodeElement(_acfa.SpPr, &_daab); _dgafa != nil {
					return _dgafa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_acfa.TxPr = _gfc.NewCT_TextBody()
				if _ccde := d.DecodeElement(_acfa.TxPr, &_daab); _ccde != nil {
					return _ccde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}:
				_acfa.ExternalData = NewCT_ExternalData()
				if _dfda := d.DecodeElement(_acfa.ExternalData, &_daab); _dfda != nil {
					return _dfda
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}:
				_acfa.PrintSettings = NewCT_PrintSettings()
				if _acda := d.DecodeElement(_acfa.PrintSettings, &_daab); _acda != nil {
					return _acda
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}:
				_acfa.UserShapes = NewCT_RelId()
				if _cagf := d.DecodeElement(_acfa.UserShapes, &_daab); _cagf != nil {
					return _cagf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_acfa.ExtLst = NewCT_ExtensionList()
				if _bbca := d.DecodeElement(_acfa.ExtLst, &_daab); _bbca != nil {
					return _bbca
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043h\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065 \u0025\u0076", _daab.Name)
				if _feea := d.Skip(); _feea != nil {
					return _feea
				}
			}
		case _b.EndElement:
			break _cefc
		case _b.CharData:
		}
	}
	return nil
}
func (_fbgc *CT_RadarChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fbgc.RadarStyle = NewCT_RadarStyle()
_dgbe:
	for {
		_bafd, _gfgce := d.Token()
		if _gfgce != nil {
			return _gfgce
		}
		switch _fcfgf := _bafd.(type) {
		case _b.StartElement:
			switch _fcfgf.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"}:
				if _abgdca := d.DecodeElement(_fbgc.RadarStyle, &_fcfgf); _abgdca != nil {
					return _abgdca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_fbgc.VaryColors = NewCT_Boolean()
				if _fdgf := d.DecodeElement(_fbgc.VaryColors, &_fcfgf); _fdgf != nil {
					return _fdgf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_fdeeg := NewCT_RadarSer()
				if _befca := d.DecodeElement(_fdeeg, &_fcfgf); _befca != nil {
					return _befca
				}
				_fbgc.Ser = append(_fbgc.Ser, _fdeeg)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_fbgc.DLbls = NewCT_DLbls()
				if _afeba := d.DecodeElement(_fbgc.DLbls, &_fcfgf); _afeba != nil {
					return _afeba
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_bedb := NewCT_UnsignedInt()
				if _bbgc := d.DecodeElement(_bedb, &_fcfgf); _bbgc != nil {
					return _bbgc
				}
				_fbgc.AxId = append(_fbgc.AxId, _bedb)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fbgc.ExtLst = NewCT_ExtensionList()
				if _cccg := d.DecodeElement(_fbgc.ExtLst, &_fcfgf); _cccg != nil {
					return _cccg
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052a\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _fcfgf.Name)
				if _cdcf := d.Skip(); _cdcf != nil {
					return _cdcf
				}
			}
		case _b.EndElement:
			break _dgbe
		case _b.CharData:
		}
	}
	return nil
}
func (_dgaag *ST_BuiltInUnit) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_dgaag = 0
	case "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073":
		*_dgaag = 1
	case "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s":
		*_dgaag = 2
	case "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
		*_dgaag = 3
	case "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
		*_dgaag = 4
	case "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_dgaag = 5
	case "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_dgaag = 6
	case "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_dgaag = 7
	case "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_dgaag = 8
	case "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es":
		*_dgaag = 9
	}
	return nil
}
func (_ccga *CT_Lvl) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_babae:
	for {
		_ddbf, _fgaf := d.Token()
		if _fgaf != nil {
			return _fgaf
		}
		switch _bggd := _ddbf.(type) {
		case _b.StartElement:
			switch _bggd.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}:
				_gdfgc := NewCT_StrVal()
				if _dbce := d.DecodeElement(_gdfgc, &_bggd); _dbce != nil {
					return _dbce
				}
				_ccga.Pt = append(_ccga.Pt, _gdfgc)
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0076\u006c\u0020\u0025\u0076", _bggd.Name)
				if _fccg := d.Skip(); _fccg != nil {
					return _fccg
				}
			}
		case _b.EndElement:
			break _babae
		case _b.CharData:
		}
	}
	return nil
}
func NewCT_Extension() *CT_Extension { _agac := &CT_Extension{}; return _agac }
func (_faffc ST_ErrBarType) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_bfaea := _b.Attr{}
	_bfaea.Name = name
	switch _faffc {
	case ST_ErrBarTypeUnset:
		_bfaea.Value = ""
	case ST_ErrBarTypeBoth:
		_bfaea.Value = "\u0062\u006f\u0074\u0068"
	case ST_ErrBarTypeMinus:
		_bfaea.Value = "\u006d\u0069\u006eu\u0073"
	case ST_ErrBarTypePlus:
		_bfaea.Value = "\u0070\u006c\u0075\u0073"
	}
	return _bfaea, nil
}

// ValidateWithPath validates the CT_DispUnitsLbl and its children, prefixing error messages with path
func (_cdbba *CT_DispUnitsLbl) ValidateWithPath(path string) error {
	if _cdbba.Layout != nil {
		if _eccd := _cdbba.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _eccd != nil {
			return _eccd
		}
	}
	if _cdbba.Tx != nil {
		if _gdfg := _cdbba.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _gdfg != nil {
			return _gdfg
		}
	}
	if _cdbba.SpPr != nil {
		if _gdee := _cdbba.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gdee != nil {
			return _gdee
		}
	}
	if _cdbba.TxPr != nil {
		if _bce := _cdbba.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _bce != nil {
			return _bce
		}
	}
	return nil
}

const (
	ST_LegendPosUnset ST_LegendPos = 0
	ST_LegendPosB     ST_LegendPos = 1
	ST_LegendPosTr    ST_LegendPos = 2
	ST_LegendPosL     ST_LegendPos = 3
	ST_LegendPosR     ST_LegendPos = 4
	ST_LegendPosT     ST_LegendPos = 5
)

func (_bcgb *ST_ScatterStyle) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_aaadd, _dfgbd := d.Token()
	if _dfgbd != nil {
		return _dfgbd
	}
	if _bccafb, _gcbfd := _aaadd.(_b.EndElement); _gcbfd && _bccafb.Name == start.Name {
		*_bcgb = 1
		return nil
	}
	if _begec, _ffabg := _aaadd.(_b.CharData); !_ffabg {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _aaadd)
	} else {
		switch string(_begec) {
		case "":
			*_bcgb = 0
		case "\u006e\u006f\u006e\u0065":
			*_bcgb = 1
		case "\u006c\u0069\u006e\u0065":
			*_bcgb = 2
		case "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072":
			*_bcgb = 3
		case "\u006d\u0061\u0072\u006b\u0065\u0072":
			*_bcgb = 4
		case "\u0073\u006d\u006f\u006f\u0074\u0068":
			*_bcgb = 5
		case "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072":
			*_bcgb = 6
		}
	}
	_aaadd, _dfgbd = d.Token()
	if _dfgbd != nil {
		return _dfgbd
	}
	if _gcae, _gfdfd := _aaadd.(_b.EndElement); _gfdfd && _gcae.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _aaadd)
}
func (_cagfe ST_BarGrouping) ValidateWithPath(path string) error {
	switch _cagfe {
	case 0, 1, 2, 3, 4:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cagfe))
	}
	return nil
}
func (_fceb *CT_ExtensionList) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_adbc:
	for {
		_ebbac, _eegbg := d.Token()
		if _eegbg != nil {
			return _eegbg
		}
		switch _edca := _ebbac.(type) {
		case _b.StartElement:
			switch _edca.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074"}:
				_afaa := NewCT_Extension()
				if _beca := d.DecodeElement(_afaa, &_edca); _beca != nil {
					return _beca
				}
				_fceb.Ext = append(_fceb.Ext, _afaa)
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0045\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074\u0020\u0025v", _edca.Name)
				if _gbccg := d.Skip(); _gbccg != nil {
					return _gbccg
				}
			}
		case _b.EndElement:
			break _adbc
		case _b.CharData:
		}
	}
	return nil
}
func (_dbbbf *ST_Thickness) Validate() error { return _dbbbf.ValidateWithPath("") }

// Validate validates the CT_NumDataSourceChoice and its children
func (_cfed *CT_NumDataSourceChoice) Validate() error {
	return _cfed.ValidateWithPath("\u0043\u0054\u005f\u004eum\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0043\u0068\u006f\u0069c\u0065")
}
func NewEG_LineChartShared() *EG_LineChartShared {
	_dcdgg := &EG_LineChartShared{}
	_dcdgg.Grouping = NewCT_Grouping()
	return _dcdgg
}
func (_cfdfa ST_PageSetupOrientation) Validate() error { return _cfdfa.ValidateWithPath("") }

// ValidateWithPath validates the CT_LegendEntry and its children, prefixing error messages with path
func (_ddfc *CT_LegendEntry) ValidateWithPath(path string) error {
	if _aade := _ddfc.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _aade != nil {
		return _aade
	}
	if _dcbc := _ddfc.LegendEntryChoice.ValidateWithPath(path + "\u002fL\u0065g\u0065\u006e\u0064\u0045\u006et\u0072\u0079C\u0068\u006f\u0069\u0063\u0065"); _dcbc != nil {
		return _dcbc
	}
	if _ddfc.ExtLst != nil {
		if _fbfde := _ddfc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fbfde != nil {
			return _fbfde
		}
	}
	return nil
}
func (_dcgbe *Group_DLbl) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _dcgbe.Layout != nil {
		_fffffg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_dcgbe.Layout, _fffffg)
	}
	if _dcgbe.Tx != nil {
		_dgbaf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_dcgbe.Tx, _dgbaf)
	}
	if _dcgbe.NumFmt != nil {
		_dbfdg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_dcgbe.NumFmt, _dbfdg)
	}
	if _dcgbe.SpPr != nil {
		_ffaec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_dcgbe.SpPr, _ffaec)
	}
	if _dcgbe.TxPr != nil {
		_baedf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_dcgbe.TxPr, _baedf)
	}
	if _dcgbe.DLblPos != nil {
		_bccaf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_dcgbe.DLblPos, _bccaf)
	}
	if _dcgbe.ShowLegendKey != nil {
		_dgggd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_dcgbe.ShowLegendKey, _dgggd)
	}
	if _dcgbe.ShowVal != nil {
		_edfbb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_dcgbe.ShowVal, _edfbb)
	}
	if _dcgbe.ShowCatName != nil {
		_fccege := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_dcgbe.ShowCatName, _fccege)
	}
	if _dcgbe.ShowSerName != nil {
		_bgcgb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_dcgbe.ShowSerName, _bgcgb)
	}
	if _dcgbe.ShowPercent != nil {
		_edbba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_dcgbe.ShowPercent, _edbba)
	}
	if _dcgbe.ShowBubbleSize != nil {
		_bdebd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_dcgbe.ShowBubbleSize, _bdebd)
	}
	if _dcgbe.Separator != nil {
		_dega := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_gf.AddPreserveSpaceAttr(&_dega, *_dcgbe.Separator)
		e.EncodeElement(_dcgbe.Separator, _dega)
	}
	return nil
}
func (_ffeeb ST_LblOffset) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _ffeeb.ST_LblOffsetPercent != nil {
		e.EncodeToken(_b.CharData(*_ffeeb.ST_LblOffsetPercent))
	}
	if _ffeeb.ST_LblOffsetUShort != nil {
		e.EncodeToken(_b.CharData(_g.Sprintf("\u0025\u0064", *_ffeeb.ST_LblOffsetUShort)))
	}
	return e.EncodeToken(_b.EndElement{Name: start.Name})
}

// ValidateWithPath validates the CT_NumDataSource and its children, prefixing error messages with path
func (_aeeg *CT_NumDataSource) ValidateWithPath(path string) error {
	if _fecf := _aeeg.NumDataSourceChoice.ValidateWithPath(path + "/\u004eu\u006d\u0044\u0061\u0074\u0061\u0053\u006f\u0075r\u0063\u0065\u0043\u0068oi\u0063\u0065"); _fecf != nil {
		return _fecf
	}
	return nil
}
func (_dbfc *UserShapes) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dbfc.CT_Drawing = *_c.NewCT_Drawing()
	for {
		_befddf, _dfebdb := d.Token()
		if _dfebdb != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0055\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073\u003a\u0020%\u0073", _dfebdb)
		}
		if _cccf, _bgddc := _befddf.(_b.EndElement); _bgddc && _cccf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_egbdac ST_Crosses) ValidateWithPath(path string) error {
	switch _egbdac {
	case 0, 1, 2, 3:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_egbdac))
	}
	return nil
}

type CT_TimeUnit struct {

	// Time Unit Value
	ValAttr ST_TimeUnit
}

func NewCT_SizeRepresents() *CT_SizeRepresents { _bfbdc := &CT_SizeRepresents{}; return _bfbdc }
func (_bfaed ST_BarGrouping) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_faaaf := _b.Attr{}
	_faaaf.Name = name
	switch _bfaed {
	case ST_BarGroupingUnset:
		_faaaf.Value = ""
	case ST_BarGroupingPercentStacked:
		_faaaf.Value = "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case ST_BarGroupingClustered:
		_faaaf.Value = "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d"
	case ST_BarGroupingStandard:
		_faaaf.Value = "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case ST_BarGroupingStacked:
		_faaaf.Value = "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return _faaaf, nil
}

// Validate validates the CT_LineChart and its children
func (_bcgfc *CT_LineChart) Validate() error {
	return _bcgfc.ValidateWithPath("\u0043\u0054\u005fL\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074")
}
func (_dgffe *CT_Period) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _bdae := range start.Attr {
		if _bdae.Name.Local == "\u0076\u0061\u006c" {
			_cgbca, _fbcb := _e.ParseUint(_bdae.Value, 10, 32)
			if _fbcb != nil {
				return _fbcb
			}
			_geecc := uint32(_cgbca)
			_dgffe.ValAttr = &_geecc
			continue
		}
	}
	for {
		_aeaee, _bbef := d.Token()
		if _bbef != nil {
			return _g.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0050\u0065\u0072i\u006f\u0064\u003a\u0020\u0025\u0073", _bbef)
		}
		if _afbdef, _adec := _aeaee.(_b.EndElement); _adec && _afbdef.Name == start.Name {
			break
		}
	}
	return nil
}
func (_edfe *CT_Layout) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _edfe.ManualLayout != nil {
		_cgaa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006d\u0061\u006e\u0075\u0061\u006c\u004ca\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_edfe.ManualLayout, _cgaa)
	}
	if _edfe.ExtLst != nil {
		_adce := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_edfe.ExtLst, _adce)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_AreaSer and its children, prefixing error messages with path
func (_gfe *CT_AreaSer) ValidateWithPath(path string) error {
	if _aae := _gfe.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _aae != nil {
		return _aae
	}
	if _dgc := _gfe.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _dgc != nil {
		return _dgc
	}
	if _gfe.Tx != nil {
		if _dcg := _gfe.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _dcg != nil {
			return _dcg
		}
	}
	if _gfe.SpPr != nil {
		if _egf := _gfe.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _egf != nil {
			return _egf
		}
	}
	if _gfe.PictureOptions != nil {
		if _fec := _gfe.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _fec != nil {
			return _fec
		}
	}
	for _cdg, _abc := range _gfe.DPt {
		if _cb := _abc.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _cdg)); _cb != nil {
			return _cb
		}
	}
	if _gfe.DLbls != nil {
		if _agg := _gfe.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _agg != nil {
			return _agg
		}
	}
	for _agf, _aga := range _gfe.Trendline {
		if _gffe := _aga.ValidateWithPath(_g.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _agf)); _gffe != nil {
			return _gffe
		}
	}
	for _bfe, _ceg := range _gfe.ErrBars {
		if _dee := _ceg.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0045\u0072\u0072\u0042\u0061\u0072s\u005b\u0025\u0064\u005d", path, _bfe)); _dee != nil {
			return _dee
		}
	}
	if _gfe.Cat != nil {
		if _ffb := _gfe.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _ffb != nil {
			return _ffb
		}
	}
	if _gfe.Val != nil {
		if _cda := _gfe.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _cda != nil {
			return _cda
		}
	}
	if _gfe.ExtLst != nil {
		if _edd := _gfe.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _edd != nil {
			return _edd
		}
	}
	return nil
}

// Validate validates the CT_MultiLvlStrRef and its children
func (_ffbdb *CT_MultiLvlStrRef) Validate() error {
	return _ffbdb.ValidateWithPath("\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066")
}

// ValidateWithPath validates the CT_PageMargins and its children, prefixing error messages with path
func (_cegff *CT_PageMargins) ValidateWithPath(path string) error { return nil }
func (_dfdg *CT_PivotFmt) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dfdg.Idx = NewCT_UnsignedInt()
_eegdb:
	for {
		_bgag, _acbb := d.Token()
		if _acbb != nil {
			return _acbb
		}
		switch _dgafd := _bgag.(type) {
		case _b.StartElement:
			switch _dgafd.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _bgea := d.DecodeElement(_dfdg.Idx, &_dgafd); _bgea != nil {
					return _bgea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_dfdg.SpPr = _gfc.NewCT_ShapeProperties()
				if _ddffc := d.DecodeElement(_dfdg.SpPr, &_dgafd); _ddffc != nil {
					return _ddffc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_dfdg.TxPr = _gfc.NewCT_TextBody()
				if _dgbf := d.DecodeElement(_dfdg.TxPr, &_dgafd); _dgbf != nil {
					return _dgbf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_dfdg.Marker = NewCT_Marker()
				if _eagf := d.DecodeElement(_dfdg.Marker, &_dgafd); _eagf != nil {
					return _eagf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}:
				_dfdg.DLbl = NewCT_DLbl()
				if _fddca := d.DecodeElement(_dfdg.DLbl, &_dgafd); _fddca != nil {
					return _fddca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dfdg.ExtLst = NewCT_ExtensionList()
				if _aced := d.DecodeElement(_dfdg.ExtLst, &_dgafd); _aced != nil {
					return _aced
				}
			default:
				_df.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0020\u0025\u0076", _dgafd.Name)
				if _ffggb := d.Skip(); _ffggb != nil {
					return _ffggb
				}
			}
		case _b.EndElement:
			break _eegdb
		case _b.CharData:
		}
	}
	return nil
}
func (_def *CT_PivotFmts) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _def.PivotFmt != nil {
		_gcbb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074"}}
		for _, _gcef := range _def.PivotFmt {
			e.EncodeElement(_gcef, _gcbb)
		}
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_aaac *CT_SurfaceSer) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_bbeff := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_aaac.Idx, _bbeff)
	_befdc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_aaac.Order, _befdc)
	if _aaac.Tx != nil {
		_eacdf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_aaac.Tx, _eacdf)
	}
	if _aaac.SpPr != nil {
		_dgeda := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_aaac.SpPr, _dgeda)
	}
	if _aaac.Cat != nil {
		_ecda := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_aaac.Cat, _ecda)
	}
	if _aaac.Val != nil {
		_adaec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_aaac.Val, _adaec)
	}
	if _aaac.ExtLst != nil {
		_aacea := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aaac.ExtLst, _aacea)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Line3DChart and its children
func (_bedae *CT_Line3DChart) Validate() error {
	return _bedae.ValidateWithPath("\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0033\u0044C\u0068\u0061\u0072\u0074")
}
func NewEG_AxShared() *EG_AxShared {
	_ddce := &EG_AxShared{}
	_ddce.AxId = NewCT_UnsignedInt()
	_ddce.Scaling = NewCT_Scaling()
	_ddce.AxPos = NewCT_AxPos()
	_ddce.CrossAx = NewCT_UnsignedInt()
	return _ddce
}

// ValidateWithPath validates the EG_AreaChartShared and its children, prefixing error messages with path
func (_efcf *EG_AreaChartShared) ValidateWithPath(path string) error {
	if _efcf.Grouping != nil {
		if _dadbb := _efcf.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _dadbb != nil {
			return _dadbb
		}
	}
	if _efcf.VaryColors != nil {
		if _cabbb := _efcf.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _cabbb != nil {
			return _cabbb
		}
	}
	for _beeg, _fefdd := range _efcf.Ser {
		if _gffba := _fefdd.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _beeg)); _gffba != nil {
			return _gffba
		}
	}
	if _efcf.DLbls != nil {
		if _cgdbf := _efcf.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _cgdbf != nil {
			return _cgdbf
		}
	}
	if _efcf.DropLines != nil {
		if _afbcc := _efcf.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _afbcc != nil {
			return _afbcc
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ErrDir and its children, prefixing error messages with path
func (_gfecf *CT_ErrDir) ValidateWithPath(path string) error {
	if _gfecf.ValAttr == ST_ErrDirUnset {
		return _g.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _cegf := _gfecf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cegf != nil {
		return _cegf
	}
	return nil
}
func (_afbc *CT_DLbl) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_afbc.Idx = NewCT_UnsignedInt()
	_afbc.DLblChoice = NewCT_DLblChoice()
_aee:
	for {
		_ggcc, _bdgb := d.Token()
		if _bdgb != nil {
			return _bdgb
		}
		switch _fceg := _ggcc.(type) {
		case _b.StartElement:
			switch _fceg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _gdabg := d.DecodeElement(_afbc.Idx, &_fceg); _gdabg != nil {
					return _gdabg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				if _afbc.DLblChoice == nil {
					_afbc.DLblChoice = NewCT_DLblChoice()
				}
				if _aead := d.DecodeElement(&_afbc.DLblChoice.Delete, &_fceg); _aead != nil {
					return _aead
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				if _afbc.DLblChoice == nil {
					_afbc.DLblChoice = NewCT_DLblChoice()
				}
				if _ffga := d.DecodeElement(&_afbc.DLblChoice.Layout, &_fceg); _ffga != nil {
					return _ffga
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				if _afbc.DLblChoice == nil {
					_afbc.DLblChoice = NewCT_DLblChoice()
				}
				if _cagc := d.DecodeElement(&_afbc.DLblChoice.Tx, &_fceg); _cagc != nil {
					return _cagc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				if _afbc.DLblChoice == nil {
					_afbc.DLblChoice = NewCT_DLblChoice()
				}
				if _cggce := d.DecodeElement(&_afbc.DLblChoice.NumFmt, &_fceg); _cggce != nil {
					return _cggce
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				if _afbc.DLblChoice == nil {
					_afbc.DLblChoice = NewCT_DLblChoice()
				}
				if _gfbc := d.DecodeElement(&_afbc.DLblChoice.SpPr, &_fceg); _gfbc != nil {
					return _gfbc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				if _afbc.DLblChoice == nil {
					_afbc.DLblChoice = NewCT_DLblChoice()
				}
				if _gcegd := d.DecodeElement(&_afbc.DLblChoice.TxPr, &_fceg); _gcegd != nil {
					return _gcegd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				if _afbc.DLblChoice == nil {
					_afbc.DLblChoice = NewCT_DLblChoice()
				}
				if _acag := d.DecodeElement(&_afbc.DLblChoice.DLblPos, &_fceg); _acag != nil {
					return _acag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				if _afbc.DLblChoice == nil {
					_afbc.DLblChoice = NewCT_DLblChoice()
				}
				if _gdb := d.DecodeElement(&_afbc.DLblChoice.ShowLegendKey, &_fceg); _gdb != nil {
					return _gdb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				if _afbc.DLblChoice == nil {
					_afbc.DLblChoice = NewCT_DLblChoice()
				}
				if _egdf := d.DecodeElement(&_afbc.DLblChoice.ShowVal, &_fceg); _egdf != nil {
					return _egdf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				if _afbc.DLblChoice == nil {
					_afbc.DLblChoice = NewCT_DLblChoice()
				}
				if _abcdd := d.DecodeElement(&_afbc.DLblChoice.ShowCatName, &_fceg); _abcdd != nil {
					return _abcdd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				if _afbc.DLblChoice == nil {
					_afbc.DLblChoice = NewCT_DLblChoice()
				}
				if _aebe := d.DecodeElement(&_afbc.DLblChoice.ShowSerName, &_fceg); _aebe != nil {
					return _aebe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				if _afbc.DLblChoice == nil {
					_afbc.DLblChoice = NewCT_DLblChoice()
				}
				if _egge := d.DecodeElement(&_afbc.DLblChoice.ShowPercent, &_fceg); _egge != nil {
					return _egge
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				if _afbc.DLblChoice == nil {
					_afbc.DLblChoice = NewCT_DLblChoice()
				}
				if _cdbd := d.DecodeElement(&_afbc.DLblChoice.ShowBubbleSize, &_fceg); _cdbd != nil {
					return _cdbd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				if _afbc.DLblChoice == nil {
					_afbc.DLblChoice = NewCT_DLblChoice()
				}
				if _eggc := d.DecodeElement(&_afbc.DLblChoice.Separator, &_fceg); _eggc != nil {
					return _eggc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_afbc.ExtLst = NewCT_ExtensionList()
				if _dcgb := d.DecodeElement(_afbc.ExtLst, &_fceg); _dcgb != nil {
					return _dcgb
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069p\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u0044\u004c\u0062\u006c\u0020\u0025\u0076", _fceg.Name)
				if _bfafa := d.Skip(); _bfafa != nil {
					return _bfafa
				}
			}
		case _b.EndElement:
			break _aee
		case _b.CharData:
		}
	}
	return nil
}

type CT_LayoutMode struct {

	// Layout Mode Value
	ValAttr ST_LayoutMode
}

// Validate validates the CT_PieSer and its children
func (_gegae *CT_PieSer) Validate() error {
	return _gegae.ValidateWithPath("\u0043T\u005f\u0050\u0069\u0065\u0053\u0065r")
}
func (_dcea *CT_Perspective) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _dcea.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", *_dcea.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_AxDataSourceChoice() *CT_AxDataSourceChoice { _gef := &CT_AxDataSourceChoice{}; return _gef }

// ValidateWithPath validates the CT_LayoutTarget and its children, prefixing error messages with path
func (_faad *CT_LayoutTarget) ValidateWithPath(path string) error {
	if _bfbf := _faad.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bfbf != nil {
		return _bfbf
	}
	return nil
}

// Validate validates the EG_AxSharedChoice and its children
func (_cgcca *EG_AxSharedChoice) Validate() error {
	return _cgcca.ValidateWithPath("\u0045\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064\u0043h\u006f\u0069\u0063\u0065")
}
func (_aaffdd *ST_TrendlineType) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_aaffdd = 0
	case "\u0065\u0078\u0070":
		*_aaffdd = 1
	case "\u006c\u0069\u006e\u0065\u0061\u0072":
		*_aaffdd = 2
	case "\u006c\u006f\u0067":
		*_aaffdd = 3
	case "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g":
		*_aaffdd = 4
	case "\u0070\u006f\u006c\u0079":
		*_aaffdd = 5
	case "\u0070\u006f\u0077e\u0072":
		*_aaffdd = 6
	}
	return nil
}

// Validate validates the EG_AxShared and its children
func (_ebdeg *EG_AxShared) Validate() error {
	return _ebdeg.ValidateWithPath("E\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064")
}
func (_cfdff *CT_StrVal) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0069\u0064\u0078"}, Value: _g.Sprintf("\u0025\u0076", _cfdff.IdxAttr)})
	e.EncodeToken(start)
	_fbdeg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076"}}
	_gf.AddPreserveSpaceAttr(&_fbdeg, _cfdff.V)
	e.EncodeElement(_cfdff.V, _fbdeg)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

const (
	ST_ScatterStyleUnset        ST_ScatterStyle = 0
	ST_ScatterStyleNone         ST_ScatterStyle = 1
	ST_ScatterStyleLine         ST_ScatterStyle = 2
	ST_ScatterStyleLineMarker   ST_ScatterStyle = 3
	ST_ScatterStyleMarker       ST_ScatterStyle = 4
	ST_ScatterStyleSmooth       ST_ScatterStyle = 5
	ST_ScatterStyleSmoothMarker ST_ScatterStyle = 6
)

type CT_BubbleSer struct {

	// Index
	Idx *CT_UnsignedInt

	// Order
	Order *CT_UnsignedInt

	// Series Text
	Tx   *CT_SerTx
	SpPr *_gfc.CT_ShapeProperties

	// Invert if Negative
	InvertIfNegative *CT_Boolean

	// Data Point
	DPt []*CT_DPt

	// Data Labels
	DLbls     *CT_DLbls
	Trendline []*CT_Trendline

	// Error Bars
	ErrBars []*CT_ErrBars

	// X Values
	XVal *CT_AxDataSource

	// Y Values
	YVal *CT_NumDataSource

	// Bubble Size
	BubbleSize *CT_NumDataSource

	// 3D Bubble
	Bubble3D *CT_Boolean

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}
type ST_Shape byte

// Validate validates the CT_Period and its children
func (_gdbd *CT_Period) Validate() error {
	return _gdbd.ValidateWithPath("\u0043T\u005f\u0050\u0065\u0072\u0069\u006fd")
}
func (_dageb ST_ErrBarType) Validate() error { return _dageb.ValidateWithPath("") }
func (_agfbb *CT_Marker) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _agfbb.Symbol != nil {
		_caec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0079\u006d\u0062\u006f\u006c"}}
		e.EncodeElement(_agfbb.Symbol, _caec)
	}
	if _agfbb.Size != nil {
		_afgg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0069\u007a\u0065"}}
		e.EncodeElement(_agfbb.Size, _afgg)
	}
	if _agfbb.SpPr != nil {
		_fdee := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_agfbb.SpPr, _fdee)
	}
	if _agfbb.ExtLst != nil {
		_ddffe := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_agfbb.ExtLst, _ddffe)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type EG_SurfaceChartShared struct {

	// Wireframe
	Wireframe *CT_Boolean

	// Surface Chart Series
	Ser []*CT_SurfaceSer

	// Band Formats
	BandFmts *CT_BandFmts
}

func NewCT_StockChart() *CT_StockChart { _accab := &CT_StockChart{}; return _accab }

// ValidateWithPath validates the CT_StrRef and its children, prefixing error messages with path
func (_efgfa *CT_StrRef) ValidateWithPath(path string) error {
	if _efgfa.StrCache != nil {
		if _cgfgf := _efgfa.StrCache.ValidateWithPath(path + "\u002fS\u0074\u0072\u0043\u0061\u0063\u0068e"); _cgfgf != nil {
			return _cgfgf
		}
	}
	if _efgfa.ExtLst != nil {
		if _dfdc := _efgfa.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dfdc != nil {
			return _dfdc
		}
	}
	return nil
}
func (_beaec ST_Crosses) Validate() error { return _beaec.ValidateWithPath("") }
func NewCT_BarGrouping() *CT_BarGrouping  { _bedd := &CT_BarGrouping{}; return _bedd }

// ValidateWithPath validates the EG_LegendEntryData and its children, prefixing error messages with path
func (_effgg *EG_LegendEntryData) ValidateWithPath(path string) error {
	if _effgg.TxPr != nil {
		if _fefa := _effgg.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _fefa != nil {
			return _fefa
		}
	}
	return nil
}

type CT_MarkerStyle struct {

	// Marker Style Value
	ValAttr ST_MarkerStyle
}

func (_abff *CT_SerTxChoice) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_cadf := start
	switch start.Name {
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
		_abff.StrRef = NewCT_StrRef()
		if _fgbg := d.DecodeElement(_abff.StrRef, &_cadf); _fgbg != nil {
			return _fgbg
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
		_abff.V = new(string)
		if _aebfd := d.DecodeElement(_abff.V, &_cadf); _aebfd != nil {
			return _aebfd
		}
	default:
		_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078\u0043\u0068o\u0069c\u0065\u0020\u0025\u0076", _cadf.Name)
		if _agdag := d.Skip(); _agdag != nil {
			return _agdag
		}
	}
	return nil
}
func (_cdgee ST_TrendlineType) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_cdgee.String(), start)
}
func (_ffgag *EG_BarChartShared) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_ffgag.BarDir = NewCT_BarDir()
_efgfg:
	for {
		_bbgg, _eebc := d.Token()
		if _eebc != nil {
			return _eebc
		}
		switch _edebdg := _bbgg.(type) {
		case _b.StartElement:
			switch _edebdg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}:
				if _aebea := d.DecodeElement(_ffgag.BarDir, &_edebdg); _aebea != nil {
					return _aebea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_ffgag.Grouping = NewCT_BarGrouping()
				if _gabd := d.DecodeElement(_ffgag.Grouping, &_edebdg); _gabd != nil {
					return _gabd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_ffgag.VaryColors = NewCT_Boolean()
				if _gaecc := d.DecodeElement(_ffgag.VaryColors, &_edebdg); _gaecc != nil {
					return _gaecc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_bcege := NewCT_BarSer()
				if _egabd := d.DecodeElement(_bcege, &_edebdg); _egabd != nil {
					return _egabd
				}
				_ffgag.Ser = append(_ffgag.Ser, _bcege)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ffgag.DLbls = NewCT_DLbls()
				if _fcbcc := d.DecodeElement(_ffgag.DLbls, &_edebdg); _fcbcc != nil {
					return _fcbcc
				}
			default:
				_df.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _edebdg.Name)
				if _bgeef := d.Skip(); _bgeef != nil {
					return _bgeef
				}
			}
		case _b.EndElement:
			break _efgfg
		case _b.CharData:
		}
	}
	return nil
}
func (_ccefa *CT_ValAx) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_gedba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_ccefa.AxId, _gedba)
	_ccbfc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_ccefa.Scaling, _ccbfc)
	if _ccefa.Delete != nil {
		_cdccg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_ccefa.Delete, _cdccg)
	}
	_bdcgc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_ccefa.AxPos, _bdcgc)
	if _ccefa.MajorGridlines != nil {
		_ddca := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_ccefa.MajorGridlines, _ddca)
	}
	if _ccefa.MinorGridlines != nil {
		_gcdb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_ccefa.MinorGridlines, _gcdb)
	}
	if _ccefa.Title != nil {
		_fdbab := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_ccefa.Title, _fdbab)
	}
	if _ccefa.NumFmt != nil {
		_bceef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_ccefa.NumFmt, _bceef)
	}
	if _ccefa.MajorTickMark != nil {
		_fdcea := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_ccefa.MajorTickMark, _fdcea)
	}
	if _ccefa.MinorTickMark != nil {
		_ececf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_ccefa.MinorTickMark, _ececf)
	}
	if _ccefa.TickLblPos != nil {
		_edbae := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_ccefa.TickLblPos, _edbae)
	}
	if _ccefa.SpPr != nil {
		_adefb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ccefa.SpPr, _adefb)
	}
	if _ccefa.TxPr != nil {
		_eagaf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_ccefa.TxPr, _eagaf)
	}
	_bgdfc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_ccefa.CrossAx, _bgdfc)
	if _ccefa.AxSharedChoice != nil {
		_ccefa.AxSharedChoice.MarshalXML(e, _b.StartElement{})
	}
	if _ccefa.CrossBetween != nil {
		_adcgd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0063\u0072\u006f\u0073\u0073\u0042\u0065t\u0077\u0065\u0065\u006e"}}
		e.EncodeElement(_ccefa.CrossBetween, _adcgd)
	}
	if _ccefa.MajorUnit != nil {
		_gede := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_ccefa.MajorUnit, _gede)
	}
	if _ccefa.MinorUnit != nil {
		_acfgd := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_ccefa.MinorUnit, _acfgd)
	}
	if _ccefa.DispUnits != nil {
		_gbfbaaa := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0064\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073"}}
		e.EncodeElement(_ccefa.DispUnits, _gbfbaaa)
	}
	if _ccefa.ExtLst != nil {
		_ebeee := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ccefa.ExtLst, _ebeee)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_Chart struct {
	Title *CT_Title

	// Auto Title Is Deleted
	AutoTitleDeleted *CT_Boolean

	// Pivot Formats
	PivotFmts *CT_PivotFmts

	// View In 3D
	View3D *CT_View3D

	// Floor
	Floor *CT_Surface

	// Side Wall
	SideWall *CT_Surface

	// Back Wall
	BackWall *CT_Surface

	// Plot Area
	PlotArea *CT_PlotArea

	// Legend
	Legend *CT_Legend

	// Plot Visible Only
	PlotVisOnly *CT_Boolean

	// Display Blanks As
	DispBlanksAs *CT_DispBlanksAs

	// Show Data Labels over Maximum
	ShowDLblsOverMax *CT_Boolean

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_dbabef ST_LayoutTarget) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_dbabef.String(), start)
}

// ValidateWithPath validates the CT_TxChoice and its children, prefixing error messages with path
func (_dfcbg *CT_TxChoice) ValidateWithPath(path string) error {
	if _dfcbg.StrRef != nil {
		if _ecdg := _dfcbg.StrRef.ValidateWithPath(path + "\u002fS\u0074\u0072\u0052\u0065\u0066"); _ecdg != nil {
			return _ecdg
		}
	}
	if _dfcbg.Rich != nil {
		if _dfbfc := _dfcbg.Rich.ValidateWithPath(path + "\u002f\u0052\u0069c\u0068"); _dfbfc != nil {
			return _dfbfc
		}
	}
	return nil
}
func NewCT_TxChoice() *CT_TxChoice { _defb := &CT_TxChoice{}; return _defb }
func (_cecag *CT_PlotArea) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_cagagg:
	for {
		_daaf, _cbggc := d.Token()
		if _cbggc != nil {
			return _cbggc
		}
		switch _aabaf := _daaf.(type) {
		case _b.StartElement:
			switch _aabaf.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_cecag.Layout = NewCT_Layout()
				if _beggc := d.DecodeElement(_cecag.Layout, &_aabaf); _beggc != nil {
					return _beggc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}:
				_gafd := NewCT_PlotAreaChoice()
				if _eecgd := d.DecodeElement(&_gafd.AreaChart, &_aabaf); _eecgd != nil {
					return _eecgd
				}
				_cecag.PlotAreaChoice = append(_cecag.PlotAreaChoice, _gafd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_bfbe := NewCT_PlotAreaChoice()
				if _dgec := d.DecodeElement(&_bfbe.Area3DChart, &_aabaf); _dgec != nil {
					return _dgec
				}
				_cecag.PlotAreaChoice = append(_cecag.PlotAreaChoice, _bfbe)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}:
				_cgac := NewCT_PlotAreaChoice()
				if _bead := d.DecodeElement(&_cgac.LineChart, &_aabaf); _bead != nil {
					return _bead
				}
				_cecag.PlotAreaChoice = append(_cecag.PlotAreaChoice, _cgac)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_cgcac := NewCT_PlotAreaChoice()
				if _abaed := d.DecodeElement(&_cgcac.Line3DChart, &_aabaf); _abaed != nil {
					return _abaed
				}
				_cecag.PlotAreaChoice = append(_cecag.PlotAreaChoice, _cgcac)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}:
				_faddd := NewCT_PlotAreaChoice()
				if _ccgad := d.DecodeElement(&_faddd.StockChart, &_aabaf); _ccgad != nil {
					return _ccgad
				}
				_cecag.PlotAreaChoice = append(_cecag.PlotAreaChoice, _faddd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_abbe := NewCT_PlotAreaChoice()
				if _ddgeg := d.DecodeElement(&_abbe.RadarChart, &_aabaf); _ddgeg != nil {
					return _ddgeg
				}
				_cecag.PlotAreaChoice = append(_cecag.PlotAreaChoice, _abbe)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_fdcacc := NewCT_PlotAreaChoice()
				if _fbdgf := d.DecodeElement(&_fdcacc.ScatterChart, &_aabaf); _fbdgf != nil {
					return _fbdgf
				}
				_cecag.PlotAreaChoice = append(_cecag.PlotAreaChoice, _fdcacc)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_faef := NewCT_PlotAreaChoice()
				if _eedf := d.DecodeElement(&_faef.PieChart, &_aabaf); _eedf != nil {
					return _eedf
				}
				_cecag.PlotAreaChoice = append(_cecag.PlotAreaChoice, _faef)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_efad := NewCT_PlotAreaChoice()
				if _cdgbf := d.DecodeElement(&_efad.Pie3DChart, &_aabaf); _cdgbf != nil {
					return _cdgbf
				}
				_cecag.PlotAreaChoice = append(_cecag.PlotAreaChoice, _efad)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}:
				_fbcbd := NewCT_PlotAreaChoice()
				if _fdba := d.DecodeElement(&_fbcbd.DoughnutChart, &_aabaf); _fdba != nil {
					return _fdba
				}
				_cecag.PlotAreaChoice = append(_cecag.PlotAreaChoice, _fbcbd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_bgeed := NewCT_PlotAreaChoice()
				if _acaea := d.DecodeElement(&_bgeed.BarChart, &_aabaf); _acaea != nil {
					return _acaea
				}
				_cecag.PlotAreaChoice = append(_cecag.PlotAreaChoice, _bgeed)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_bbdae := NewCT_PlotAreaChoice()
				if _ggda := d.DecodeElement(&_bbdae.Bar3DChart, &_aabaf); _ggda != nil {
					return _ggda
				}
				_cecag.PlotAreaChoice = append(_cecag.PlotAreaChoice, _bbdae)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_bccbf := NewCT_PlotAreaChoice()
				if _eabaf := d.DecodeElement(&_bccbf.OfPieChart, &_aabaf); _eabaf != nil {
					return _eabaf
				}
				_cecag.PlotAreaChoice = append(_cecag.PlotAreaChoice, _bccbf)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_beedd := NewCT_PlotAreaChoice()
				if _cfca := d.DecodeElement(&_beedd.SurfaceChart, &_aabaf); _cfca != nil {
					return _cfca
				}
				_cecag.PlotAreaChoice = append(_cecag.PlotAreaChoice, _beedd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}:
				_egac := NewCT_PlotAreaChoice()
				if _efbd := d.DecodeElement(&_egac.Surface3DChart, &_aabaf); _efbd != nil {
					return _efbd
				}
				_cecag.PlotAreaChoice = append(_cecag.PlotAreaChoice, _egac)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_adcdf := NewCT_PlotAreaChoice()
				if _gcceb := d.DecodeElement(&_adcdf.BubbleChart, &_aabaf); _gcceb != nil {
					return _gcceb
				}
				_cecag.PlotAreaChoice = append(_cecag.PlotAreaChoice, _adcdf)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}:
				_fafdd := NewCT_PlotAreaChoice1()
				if _eefded := d.DecodeElement(&_fafdd.ValAx, &_aabaf); _eefded != nil {
					return _eefded
				}
				_cecag.PlotAreaChoice1 = append(_cecag.PlotAreaChoice1, _fafdd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}:
				_aefgg := NewCT_PlotAreaChoice1()
				if _egae := d.DecodeElement(&_aefgg.CatAx, &_aabaf); _egae != nil {
					return _egae
				}
				_cecag.PlotAreaChoice1 = append(_cecag.PlotAreaChoice1, _aefgg)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}:
				_cffce := NewCT_PlotAreaChoice1()
				if _bcgc := d.DecodeElement(&_cffce.DateAx, &_aabaf); _bcgc != nil {
					return _bcgc
				}
				_cecag.PlotAreaChoice1 = append(_cecag.PlotAreaChoice1, _cffce)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}:
				_gedcg := NewCT_PlotAreaChoice1()
				if _bbaed := d.DecodeElement(&_gedcg.SerAx, &_aabaf); _bbaed != nil {
					return _bbaed
				}
				_cecag.PlotAreaChoice1 = append(_cecag.PlotAreaChoice1, _gedcg)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0054\u0061\u0062\u006c\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0054\u0061\u0062\u006c\u0065"}:
				_cecag.DTable = NewCT_DTable()
				if _bdce := d.DecodeElement(_cecag.DTable, &_aabaf); _bdce != nil {
					return _bdce
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cecag.SpPr = _gfc.NewCT_ShapeProperties()
				if _edgac := d.DecodeElement(_cecag.SpPr, &_aabaf); _edgac != nil {
					return _edgac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cecag.ExtLst = NewCT_ExtensionList()
				if _fbfg := d.DecodeElement(_cecag.ExtLst, &_aabaf); _fbfg != nil {
					return _fbfg
				}
			default:
				_df.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061\u0020\u0025\u0076", _aabaf.Name)
				if _fggba := d.Skip(); _fggba != nil {
					return _fggba
				}
			}
		case _b.EndElement:
			break _cagagg
		case _b.CharData:
		}
	}
	return nil
}

const (
	ST_PictureFormatUnset      ST_PictureFormat = 0
	ST_PictureFormatStretch    ST_PictureFormat = 1
	ST_PictureFormatStack      ST_PictureFormat = 2
	ST_PictureFormatStackScale ST_PictureFormat = 3
)

type CT_Marker struct {

	// Symbol
	Symbol *CT_MarkerStyle

	// Size
	Size *CT_MarkerSize
	SpPr *_gfc.CT_ShapeProperties

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

// ValidateWithPath validates the CT_ErrBarType and its children, prefixing error messages with path
func (_fcbee *CT_ErrBarType) ValidateWithPath(path string) error {
	if _gdfb := _fcbee.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gdfb != nil {
		return _gdfb
	}
	return nil
}
func (_ebag *CT_UnsignedInt) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _cbeg := range start.Attr {
		if _cbeg.Name.Local == "\u0076\u0061\u006c" {
			_aefaa, _eegg := _e.ParseUint(_cbeg.Value, 10, 32)
			if _eegg != nil {
				return _eegg
			}
			_ebag.ValAttr = uint32(_aefaa)
			continue
		}
	}
	for {
		_dafdc, _aaagf := d.Token()
		if _aaagf != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fU\u006e\u0073\u0069\u0067\u006e\u0065\u0064\u0049\u006e\u0074:\u0020\u0025\u0073", _aaagf)
		}
		if _gffaa, _edec := _dafdc.(_b.EndElement); _edec && _gffaa.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_ChartSpace() *CT_ChartSpace {
	_cgeb := &CT_ChartSpace{}
	_cgeb.Chart = NewCT_Chart()
	return _cgeb
}
func (_cffd ST_ErrBarType) String() string {
	switch _cffd {
	case 0:
		return ""
	case 1:
		return "\u0062\u006f\u0074\u0068"
	case 2:
		return "\u006d\u0069\u006eu\u0073"
	case 3:
		return "\u0070\u006c\u0075\u0073"
	}
	return ""
}

// ST_GapAmount is a union type
type ST_GapAmount struct {
	ST_GapAmountPercent *string
	ST_GapAmountUShort  *uint16
}

func (_feeaa *CT_PieChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_abda:
	for {
		_edeb, _adfgf := d.Token()
		if _adfgf != nil {
			return _adfgf
		}
		switch _ageg := _edeb.(type) {
		case _b.StartElement:
			switch _ageg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_feeaa.VaryColors = NewCT_Boolean()
				if _fbgba := d.DecodeElement(_feeaa.VaryColors, &_ageg); _fbgba != nil {
					return _fbgba
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_acefe := NewCT_PieSer()
				if _bgee := d.DecodeElement(_acefe, &_ageg); _bgee != nil {
					return _bgee
				}
				_feeaa.Ser = append(_feeaa.Ser, _acefe)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_feeaa.DLbls = NewCT_DLbls()
				if _aabdd := d.DecodeElement(_feeaa.DLbls, &_ageg); _aabdd != nil {
					return _aabdd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}:
				_feeaa.FirstSliceAng = NewCT_FirstSliceAng()
				if _acad := d.DecodeElement(_feeaa.FirstSliceAng, &_ageg); _acad != nil {
					return _acad
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_feeaa.ExtLst = NewCT_ExtensionList()
				if _bgfgd := d.DecodeElement(_feeaa.ExtLst, &_ageg); _bgfgd != nil {
					return _bgfgd
				}
			default:
				_df.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _ageg.Name)
				if _cccc := d.Skip(); _cccc != nil {
					return _cccc
				}
			}
		case _b.EndElement:
			break _abda
		case _b.CharData:
		}
	}
	return nil
}
func (_baag ST_ErrValType) ValidateWithPath(path string) error {
	switch _baag {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_baag))
	}
	return nil
}

// ValidateWithPath validates the CT_Orientation and its children, prefixing error messages with path
func (_bdeb *CT_Orientation) ValidateWithPath(path string) error {
	if _gcba := _bdeb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gcba != nil {
		return _gcba
	}
	return nil
}

// Validate validates the CT_LayoutTarget and its children
func (_fbgea *CT_LayoutTarget) Validate() error {
	return _fbgea.ValidateWithPath("\u0043T\u005fL\u0061\u0079\u006f\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074")
}
func (_dafc *CT_Overlap) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _dafc.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", *_dafc.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_LblAlgn() *CT_LblAlgn { _effg := &CT_LblAlgn{}; _effg.ValAttr = ST_LblAlgn(1); return _effg }

type CT_OfPieChart struct {

	// Pie of Pie or Bar of Pie Type
	OfPieType  *CT_OfPieType
	VaryColors *CT_Boolean

	// Pie Chart Series
	Ser []*CT_PieSer

	// Data Labels
	DLbls *CT_DLbls

	// Gap Width
	GapWidth *CT_GapAmount

	// Split Type
	SplitType *CT_SplitType

	// Split Position
	SplitPos *CT_Double

	// Custom Split
	CustSplit *CT_CustSplit

	// Second Pie Size
	SecondPieSize *CT_SecondPieSize
	SerLines      []*CT_ChartLines

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_ggdga ST_PageSetupOrientation) ValidateWithPath(path string) error {
	switch _ggdga {
	case 0, 1, 2, 3:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ggdga))
	}
	return nil
}
func (_edggad ST_LayoutMode) Validate() error { return _edggad.ValidateWithPath("") }
func (_gageb ST_RadarStyle) ValidateWithPath(path string) error {
	switch _gageb {
	case 0, 1, 2, 3:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gageb))
	}
	return nil
}

// ValidateWithPath validates the Group_DLbl and its children, prefixing error messages with path
func (_baaf *Group_DLbl) ValidateWithPath(path string) error {
	if _baaf.Layout != nil {
		if _cede := _baaf.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _cede != nil {
			return _cede
		}
	}
	if _baaf.Tx != nil {
		if _dage := _baaf.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _dage != nil {
			return _dage
		}
	}
	if _baaf.NumFmt != nil {
		if _ccabg := _baaf.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _ccabg != nil {
			return _ccabg
		}
	}
	if _baaf.SpPr != nil {
		if _aedeb := _baaf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _aedeb != nil {
			return _aedeb
		}
	}
	if _baaf.TxPr != nil {
		if _ddcfe := _baaf.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _ddcfe != nil {
			return _ddcfe
		}
	}
	if _baaf.DLblPos != nil {
		if _fbgg := _baaf.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _fbgg != nil {
			return _fbgg
		}
	}
	if _baaf.ShowLegendKey != nil {
		if _bddec := _baaf.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _bddec != nil {
			return _bddec
		}
	}
	if _baaf.ShowVal != nil {
		if _dgfb := _baaf.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _dgfb != nil {
			return _dgfb
		}
	}
	if _baaf.ShowCatName != nil {
		if _defg := _baaf.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _defg != nil {
			return _defg
		}
	}
	if _baaf.ShowSerName != nil {
		if _ebca := _baaf.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _ebca != nil {
			return _ebca
		}
	}
	if _baaf.ShowPercent != nil {
		if _cdeff := _baaf.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _cdeff != nil {
			return _cdeff
		}
	}
	if _baaf.ShowBubbleSize != nil {
		if _eggcg := _baaf.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _eggcg != nil {
			return _eggcg
		}
	}
	return nil
}
func (_bdgcab ST_PictureFormat) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_ffdb := _b.Attr{}
	_ffdb.Name = name
	switch _bdgcab {
	case ST_PictureFormatUnset:
		_ffdb.Value = ""
	case ST_PictureFormatStretch:
		_ffdb.Value = "\u0073t\u0072\u0065\u0074\u0063\u0068"
	case ST_PictureFormatStack:
		_ffdb.Value = "\u0073\u0074\u0061c\u006b"
	case ST_PictureFormatStackScale:
		_ffdb.Value = "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065"
	}
	return _ffdb, nil
}
func (_bedeff ST_SecondPieSize) String() string {
	if _bedeff.ST_SecondPieSizePercent != nil {
		return _g.Sprintf("\u0025\u0076", *_bedeff.ST_SecondPieSizePercent)
	}
	if _bedeff.ST_SecondPieSizeUShort != nil {
		return _g.Sprintf("\u0025\u0076", *_bedeff.ST_SecondPieSizeUShort)
	}
	return ""
}
func (_dbgb *CT_ExternalData) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _fbbe := range start.Attr {
		if _fbbe.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _fbbe.Name.Local == "\u0069\u0064" || _fbbe.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _fbbe.Name.Local == "\u0069\u0064" {
			_gegf := _fbbe.Value
			_dbgb.IdAttr = _gegf
			continue
		}
	}
_gcedg:
	for {
		_ffadg, _gebg := d.Token()
		if _gebg != nil {
			return _gebg
		}
		switch _badb := _ffadg.(type) {
		case _b.StartElement:
			switch _badb.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"}:
				_dbgb.AutoUpdate = NewCT_Boolean()
				if _gcfc := d.DecodeElement(_dbgb.AutoUpdate, &_badb); _gcfc != nil {
					return _gcfc
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0045\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _badb.Name)
				if _bgddb := d.Skip(); _bgddb != nil {
					return _bgddb
				}
			}
		case _b.EndElement:
			break _gcedg
		case _b.CharData:
		}
	}
	return nil
}
func (_cbcg *CT_TickLblPos) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _cbbcg := range start.Attr {
		if _cbbcg.Name.Local == "\u0076\u0061\u006c" {
			_cbcg.ValAttr.UnmarshalXMLAttr(_cbbcg)
			continue
		}
	}
	for {
		_aeeda, _egagd := d.Token()
		if _egagd != nil {
			return _g.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0054i\u0063k\u004cb\u006c\u0050\u006f\u0073\u003a\u0020\u0025s", _egagd)
		}
		if _edbcd, _bedef := _aeeda.(_b.EndElement); _bedef && _edbcd.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_TrendlineType and its children
func (_fgaa *CT_TrendlineType) Validate() error {
	return _fgaa.ValidateWithPath("\u0043\u0054_\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065")
}

type CT_RelId struct{ IdAttr string }

func NewCT_GapAmount() *CT_GapAmount {
	_dcbd := &CT_GapAmount{}
	return _dcbd
}
func NewCT_DLblChoice() *CT_DLblChoice { _bgd := &CT_DLblChoice{}; return _bgd }

// Validate validates the CT_LogBase and its children
func (_dbdce *CT_LogBase) Validate() error {
	return _dbdce.ValidateWithPath("\u0043\u0054\u005f\u004c\u006f\u0067\u0042\u0061\u0073\u0065")
}

// ValidateWithPath validates the CT_Marker and its children, prefixing error messages with path
func (_gagfa *CT_Marker) ValidateWithPath(path string) error {
	if _gagfa.Symbol != nil {
		if _cddb := _gagfa.Symbol.ValidateWithPath(path + "\u002fS\u0079\u006d\u0062\u006f\u006c"); _cddb != nil {
			return _cddb
		}
	}
	if _gagfa.Size != nil {
		if _bdgcc := _gagfa.Size.ValidateWithPath(path + "\u002f\u0053\u0069z\u0065"); _bdgcc != nil {
			return _bdgcc
		}
	}
	if _gagfa.SpPr != nil {
		if _gcbd := _gagfa.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gcbd != nil {
			return _gcbd
		}
	}
	if _gagfa.ExtLst != nil {
		if _dgeba := _gagfa.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dgeba != nil {
			return _dgeba
		}
	}
	return nil
}

// Validate validates the CT_StrData and its children
func (_ebbf *CT_StrData) Validate() error {
	return _ebbf.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u0072\u0044\u0061\u0074\u0061")
}

// Validate validates the CT_RotY and its children
func (_cabgg *CT_RotY) Validate() error {
	return _cabgg.ValidateWithPath("\u0043T\u005f\u0052\u006f\u0074\u0059")
}

// ValidateWithPath validates the CT_DoughnutChart and its children, prefixing error messages with path
func (_fdda *CT_DoughnutChart) ValidateWithPath(path string) error {
	if _fdda.VaryColors != nil {
		if _aadg := _fdda.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _aadg != nil {
			return _aadg
		}
	}
	for _affd, _cgaf := range _fdda.Ser {
		if _aacg := _cgaf.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _affd)); _aacg != nil {
			return _aacg
		}
	}
	if _fdda.DLbls != nil {
		if _ddfeb := _fdda.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _ddfeb != nil {
			return _ddfeb
		}
	}
	if _fdda.FirstSliceAng != nil {
		if _abgf := _fdda.FirstSliceAng.ValidateWithPath(path + "\u002f\u0046\u0069\u0072\u0073\u0074\u0053\u006c\u0069c\u0065\u0041\u006e\u0067"); _abgf != nil {
			return _abgf
		}
	}
	if _fdda.HoleSize != nil {
		if _dbca := _fdda.HoleSize.ValidateWithPath(path + "\u002fH\u006f\u006c\u0065\u0053\u0069\u007ae"); _dbca != nil {
			return _dbca
		}
	}
	if _fdda.ExtLst != nil {
		if _dgbd := _fdda.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dgbd != nil {
			return _dgbd
		}
	}
	return nil
}

const (
	ST_LayoutTargetUnset ST_LayoutTarget = 0
	ST_LayoutTargetInner ST_LayoutTarget = 1
	ST_LayoutTargetOuter ST_LayoutTarget = 2
)

func NewCT_Perspective() *CT_Perspective { _egea := &CT_Perspective{}; return _egea }
func NewCT_Chart() *CT_Chart             { _fgea := &CT_Chart{}; _fgea.PlotArea = NewCT_PlotArea(); return _fgea }
func (_debcf *CT_ExternalData) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0072\u003a\u0069\u0064"}, Value: _g.Sprintf("\u0025\u0076", _debcf.IdAttr)})
	e.EncodeToken(start)
	if _debcf.AutoUpdate != nil {
		_bdfg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061u\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"}}
		e.EncodeElement(_debcf.AutoUpdate, _bdfg)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_Lvl and its children, prefixing error messages with path
func (_dcccce *CT_Lvl) ValidateWithPath(path string) error {
	for _dcdg, _bdec := range _dcccce.Pt {
		if _bbbfe := _bdec.ValidateWithPath(_g.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _dcdg)); _bbbfe != nil {
			return _bbbfe
		}
	}
	return nil
}

type ST_SizeRepresents byte

func (_gabgf *ST_LblAlgn) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_bdece, _fdgeb := d.Token()
	if _fdgeb != nil {
		return _fdgeb
	}
	if _dbcac, _edgaa := _bdece.(_b.EndElement); _edgaa && _dbcac.Name == start.Name {
		*_gabgf = 1
		return nil
	}
	if _aeabbc, _affcf := _bdece.(_b.CharData); !_affcf {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bdece)
	} else {
		switch string(_aeabbc) {
		case "":
			*_gabgf = 0
		case "\u0063\u0074\u0072":
			*_gabgf = 1
		case "\u006c":
			*_gabgf = 2
		case "\u0072":
			*_gabgf = 3
		}
	}
	_bdece, _fdgeb = d.Token()
	if _fdgeb != nil {
		return _fdgeb
	}
	if _aadcc, _fcdec := _bdece.(_b.EndElement); _fcdec && _aadcc.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bdece)
}
func (_bdcee *CT_RadarStyle) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _bdcee.ValAttr != ST_RadarStyleUnset {
		_acdfga, _gbgce := _bdcee.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _gbgce != nil {
			return _gbgce
		}
		start.Attr = append(start.Attr, _acdfga)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_gfgaf ST_CrossBetween) String() string {
	switch _gfgaf {
	case 0:
		return ""
	case 1:
		return "\u0062e\u0074\u0077\u0065\u0065\u006e"
	case 2:
		return "\u006d\u0069\u0064\u0043\u0061\u0074"
	}
	return ""
}

// ValidateWithPath validates the CT_Scaling and its children, prefixing error messages with path
func (_ccbf *CT_Scaling) ValidateWithPath(path string) error {
	if _ccbf.LogBase != nil {
		if _aacge := _ccbf.LogBase.ValidateWithPath(path + "\u002f\u004c\u006f\u0067\u0042\u0061\u0073\u0065"); _aacge != nil {
			return _aacge
		}
	}
	if _ccbf.Orientation != nil {
		if _fdgg := _ccbf.Orientation.ValidateWithPath(path + "\u002f\u004f\u0072i\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"); _fdgg != nil {
			return _fdgg
		}
	}
	if _ccbf.Max != nil {
		if _ccfaf := _ccbf.Max.ValidateWithPath(path + "\u002f\u004d\u0061\u0078"); _ccfaf != nil {
			return _ccfaf
		}
	}
	if _ccbf.Min != nil {
		if _cbcad := _ccbf.Min.ValidateWithPath(path + "\u002f\u004d\u0069\u006e"); _cbcad != nil {
			return _cbcad
		}
	}
	if _ccbf.ExtLst != nil {
		if _bbagb := _ccbf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bbagb != nil {
			return _bbagb
		}
	}
	return nil
}
func (_ceggb ST_ErrDir) String() string {
	switch _ceggb {
	case 0:
		return ""
	case 1:
		return "\u0078"
	case 2:
		return "\u0079"
	}
	return ""
}

var ST_LblOffsetPercentPatternRe = _f.MustCompile(ST_LblOffsetPercentPattern)

func (_ddbc *CT_TimeUnit) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _ffcb := range start.Attr {
		if _ffcb.Name.Local == "\u0076\u0061\u006c" {
			_ddbc.ValAttr.UnmarshalXMLAttr(_ffcb)
			continue
		}
	}
	for {
		_gcgdg, _cgbcc := d.Token()
		if _cgbcc != nil {
			return _g.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074\u003a\u0020\u0025\u0073", _cgbcc)
		}
		if _afea, _bgafb := _gcgdg.(_b.EndElement); _bgafb && _afea.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ggfff ST_GapAmount) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _ggfff.ST_GapAmountPercent != nil {
		e.EncodeToken(_b.CharData(*_ggfff.ST_GapAmountPercent))
	}
	if _ggfff.ST_GapAmountUShort != nil {
		e.EncodeToken(_b.CharData(_g.Sprintf("\u0025\u0064", *_ggfff.ST_GapAmountUShort)))
	}
	return e.EncodeToken(_b.EndElement{Name: start.Name})
}

// Validate validates the CT_CrossBetween and its children
func (_baba *CT_CrossBetween) Validate() error {
	return _baba.ValidateWithPath("\u0043T\u005fC\u0072\u006f\u0073\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e")
}

type ST_TrendlineType byte

// ValidateWithPath validates the CT_Trendline and its children, prefixing error messages with path
func (_gdebb *CT_Trendline) ValidateWithPath(path string) error {
	if _gdebb.SpPr != nil {
		if _agbac := _gdebb.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _agbac != nil {
			return _agbac
		}
	}
	if _agbed := _gdebb.TrendlineType.ValidateWithPath(path + "\u002f\u0054\u0072\u0065\u006e\u0064\u006c\u0069\u006ee\u0054\u0079\u0070\u0065"); _agbed != nil {
		return _agbed
	}
	if _gdebb.Order != nil {
		if _gabg := _gdebb.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _gabg != nil {
			return _gabg
		}
	}
	if _gdebb.Period != nil {
		if _fffcg := _gdebb.Period.ValidateWithPath(path + "\u002fP\u0065\u0072\u0069\u006f\u0064"); _fffcg != nil {
			return _fffcg
		}
	}
	if _gdebb.Forward != nil {
		if _gcdc := _gdebb.Forward.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0077\u0061\u0072\u0064"); _gcdc != nil {
			return _gcdc
		}
	}
	if _gdebb.Backward != nil {
		if _dabed := _gdebb.Backward.ValidateWithPath(path + "\u002fB\u0061\u0063\u006b\u0077\u0061\u0072d"); _dabed != nil {
			return _dabed
		}
	}
	if _gdebb.Intercept != nil {
		if _eecee := _gdebb.Intercept.ValidateWithPath(path + "\u002f\u0049\u006e\u0074\u0065\u0072\u0063\u0065\u0070\u0074"); _eecee != nil {
			return _eecee
		}
	}
	if _gdebb.DispRSqr != nil {
		if _efade := _gdebb.DispRSqr.ValidateWithPath(path + "\u002fD\u0069\u0073\u0070\u0052\u0053\u0071r"); _efade != nil {
			return _efade
		}
	}
	if _gdebb.DispEq != nil {
		if _bdcff := _gdebb.DispEq.ValidateWithPath(path + "\u002fD\u0069\u0073\u0070\u0045\u0071"); _bdcff != nil {
			return _bdcff
		}
	}
	if _gdebb.TrendlineLbl != nil {
		if _gfgaa := _gdebb.TrendlineLbl.ValidateWithPath(path + "\u002f\u0054\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c"); _gfgaa != nil {
			return _gfgaa
		}
	}
	if _gdebb.ExtLst != nil {
		if _dagb := _gdebb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dagb != nil {
			return _dagb
		}
	}
	return nil
}
func (_ccfa *CT_Protection) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_bbdeb:
	for {
		_bdeed, _egfc := d.Token()
		if _egfc != nil {
			return _egfc
		}
		switch _ddfef := _bdeed.(type) {
		case _b.StartElement:
			switch _ddfef.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "c\u0068\u0061\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "c\u0068\u0061\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"}:
				_ccfa.ChartObject = NewCT_Boolean()
				if _dcfe := d.DecodeElement(_ccfa.ChartObject, &_ddfef); _dcfe != nil {
					return _dcfe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0061"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0061"}:
				_ccfa.Data = NewCT_Boolean()
				if _cbda := d.DecodeElement(_ccfa.Data, &_ddfef); _cbda != nil {
					return _cbda
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"}:
				_ccfa.Formatting = NewCT_Boolean()
				if _dceag := d.DecodeElement(_ccfa.Formatting, &_ddfef); _dceag != nil {
					return _dceag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u006c\u0065\u0063\u0074\u0069\u006fn"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u006c\u0065\u0063\u0074\u0069\u006fn"}:
				_ccfa.Selection = NewCT_Boolean()
				if _dffdf := d.DecodeElement(_ccfa.Selection, &_ddfef); _dffdf != nil {
					return _dffdf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0049\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0049\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065"}:
				_ccfa.UserInterface = NewCT_Boolean()
				if _ceege := d.DecodeElement(_ccfa.UserInterface, &_ddfef); _ceege != nil {
					return _ceege
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050r\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e \u0025\u0076", _ddfef.Name)
				if _adede := d.Skip(); _adede != nil {
					return _adede
				}
			}
		case _b.EndElement:
			break _bbdeb
		case _b.CharData:
		}
	}
	return nil
}
func (_ebcdf ST_BarDir) Validate() error { return _ebcdf.ValidateWithPath("") }

// Validate validates the CT_OfPieType and its children
func (_cbfeg *CT_OfPieType) Validate() error {
	return _cbfeg.ValidateWithPath("\u0043\u0054\u005fO\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065")
}

// Validate validates the CT_Style and its children
func (_fcebf *CT_Style) Validate() error {
	return _fcebf.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065")
}
func (_ddga *CT_LineSer) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_ddga.Idx = NewCT_UnsignedInt()
	_ddga.Order = NewCT_UnsignedInt()
_fbdbg:
	for {
		_affec, _ffgea := d.Token()
		if _ffgea != nil {
			return _ffgea
		}
		switch _cbbc := _affec.(type) {
		case _b.StartElement:
			switch _cbbc.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _gfdb := d.DecodeElement(_ddga.Idx, &_cbbc); _gfdb != nil {
					return _gfdb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _cbfbe := d.DecodeElement(_ddga.Order, &_cbbc); _cbfbe != nil {
					return _cbfbe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_ddga.Tx = NewCT_SerTx()
				if _degcg := d.DecodeElement(_ddga.Tx, &_cbbc); _degcg != nil {
					return _degcg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ddga.SpPr = _gfc.NewCT_ShapeProperties()
				if _fgdgg := d.DecodeElement(_ddga.SpPr, &_cbbc); _fgdgg != nil {
					return _fgdgg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_ddga.Marker = NewCT_Marker()
				if _cfd := d.DecodeElement(_ddga.Marker, &_cbbc); _cfd != nil {
					return _cfd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_fbaf := NewCT_DPt()
				if _eedaa := d.DecodeElement(_fbaf, &_cbbc); _eedaa != nil {
					return _eedaa
				}
				_ddga.DPt = append(_ddga.DPt, _fbaf)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ddga.DLbls = NewCT_DLbls()
				if _eeae := d.DecodeElement(_ddga.DLbls, &_cbbc); _eeae != nil {
					return _eeae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_aceec := NewCT_Trendline()
				if _gccg := d.DecodeElement(_aceec, &_cbbc); _gccg != nil {
					return _gccg
				}
				_ddga.Trendline = append(_ddga.Trendline, _aceec)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_ddga.ErrBars = NewCT_ErrBars()
				if _cfbb := d.DecodeElement(_ddga.ErrBars, &_cbbc); _cfbb != nil {
					return _cfbb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_ddga.Cat = NewCT_AxDataSource()
				if _fgfb := d.DecodeElement(_ddga.Cat, &_cbbc); _fgfb != nil {
					return _fgfb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_ddga.Val = NewCT_NumDataSource()
				if _ggga := d.DecodeElement(_ddga.Val, &_cbbc); _ggga != nil {
					return _ggga
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}:
				_ddga.Smooth = NewCT_Boolean()
				if _cdcba := d.DecodeElement(_ddga.Smooth, &_cbbc); _cdcba != nil {
					return _cdcba
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ddga.ExtLst = NewCT_ExtensionList()
				if _bcdgg := d.DecodeElement(_ddga.ExtLst, &_cbbc); _bcdgg != nil {
					return _bcdgg
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fL\u0069\u006e\u0065\u0053\u0065\u0072\u0020\u0025\u0076", _cbbc.Name)
				if _befeg := d.Skip(); _befeg != nil {
					return _befeg
				}
			}
		case _b.EndElement:
			break _fbdbg
		case _b.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Shape and its children
func (_ebdfa *CT_Shape) Validate() error {
	return _ebdfa.ValidateWithPath("\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065")
}

// Validate validates the CT_MarkerSize and its children
func (_fcdc *CT_MarkerSize) Validate() error {
	return _fcdc.ValidateWithPath("\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072\u0053\u0069\u007a\u0065")
}

// ValidateWithPath validates the CT_SizeRepresents and its children, prefixing error messages with path
func (_cbcf *CT_SizeRepresents) ValidateWithPath(path string) error {
	if _ddffb := _cbcf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ddffb != nil {
		return _ddffb
	}
	return nil
}
func (_efcde *CT_PlotArea) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _efcde.Layout != nil {
		_deff := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_efcde.Layout, _deff)
	}
	for _, _bgcc := range _efcde.PlotAreaChoice {
		_bgcc.MarshalXML(e, _b.StartElement{})
	}
	if _efcde.PlotAreaChoice1 != nil {
		for _, _cadga := range _efcde.PlotAreaChoice1 {
			_cadga.MarshalXML(e, _b.StartElement{})
		}
	}
	if _efcde.DTable != nil {
		_befefe := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0054\u0061\u0062\u006c\u0065"}}
		e.EncodeElement(_efcde.DTable, _befefe)
	}
	if _efcde.SpPr != nil {
		_dcdb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_efcde.SpPr, _dcdb)
	}
	if _efcde.ExtLst != nil {
		_gcd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_efcde.ExtLst, _gcd)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewChartSpace() *ChartSpace {
	_edebd := &ChartSpace{}
	_edebd.CT_ChartSpace = *NewCT_ChartSpace()
	return _edebd
}

// Validate validates the CT_DepthPercent and its children
func (_dgde *CT_DepthPercent) Validate() error {
	return _dgde.ValidateWithPath("\u0043T\u005fD\u0065\u0070\u0074\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
}
func NewCT_RotY() *CT_RotY { _bace := &CT_RotY{}; return _bace }

// Validate validates the CT_Extension and its children
func (_cdbf *CT_Extension) Validate() error {
	return _cdbf.ValidateWithPath("\u0043\u0054\u005fE\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e")
}

// ValidateWithPath validates the CT_ExternalData and its children, prefixing error messages with path
func (_eccg *CT_ExternalData) ValidateWithPath(path string) error {
	if _eccg.AutoUpdate != nil {
		if _abgfa := _eccg.AutoUpdate.ValidateWithPath(path + "/\u0041\u0075\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"); _abgfa != nil {
			return _abgfa
		}
	}
	return nil
}

type CT_AreaChart struct {

	// Grouping
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean

	// Area Chart Series
	Ser []*CT_AreaSer

	// Data Labels
	DLbls *CT_DLbls

	// Drop Lines
	DropLines *CT_ChartLines

	// Axis ID
	AxId []*CT_UnsignedInt

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func NewCT_SurfaceChart() *CT_SurfaceChart { _agbe := &CT_SurfaceChart{}; return _agbe }

type CT_SerTxChoice struct {
	StrRef *CT_StrRef
	V      *string
}

func (_debgd *CT_Thickness) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _geedf := range start.Attr {
		if _geedf.Name.Local == "\u0076\u0061\u006c" {
			_fdbef, _cgagb := ParseUnionST_Thickness(_geedf.Value)
			if _cgagb != nil {
				return _cgagb
			}
			_debgd.ValAttr = _fdbef
			continue
		}
	}
	for {
		_cddbf, _eacdfe := d.Token()
		if _eacdfe != nil {
			return _g.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0068i\u0063\u006b\u006e\u0065\u0073\u0073\u003a\u0020\u0025\u0073", _eacdfe)
		}
		if _dbabd, _efffd := _cddbf.(_b.EndElement); _efffd && _dbabd.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_PlotAreaChoice and its children
func (_abdcg *CT_PlotAreaChoice) Validate() error {
	return _abdcg.ValidateWithPath("\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061\u0043h\u006f\u0069\u0063\u0065")
}

// ValidateWithPath validates the CT_UpDownBar and its children, prefixing error messages with path
func (_dfcc *CT_UpDownBar) ValidateWithPath(path string) error {
	if _dfcc.SpPr != nil {
		if _beabc := _dfcc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _beabc != nil {
			return _beabc
		}
	}
	return nil
}
func (_gbcce *CT_HeaderFooter) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _gbcce.AlignWithMarginsAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0061\u006ci\u0067\u006e\u0057i\u0074\u0068\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}, Value: _g.Sprintf("\u0025\u0064", _bfeaa(*_gbcce.AlignWithMarginsAttr))})
	}
	if _gbcce.DifferentOddEvenAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0064\u0069f\u0066\u0065\u0072e\u006e\u0074\u004f\u0064\u0064\u0045\u0076\u0065\u006e"}, Value: _g.Sprintf("\u0025\u0064", _bfeaa(*_gbcce.DifferentOddEvenAttr))})
	}
	if _gbcce.DifferentFirstAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074F\u0069\u0072\u0073\u0074"}, Value: _g.Sprintf("\u0025\u0064", _bfeaa(*_gbcce.DifferentFirstAttr))})
	}
	e.EncodeToken(start)
	if _gbcce.OddHeader != nil {
		_dadbd := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006f\u0064\u0064\u0048\u0065\u0061\u0064\u0065\u0072"}}
		_gf.AddPreserveSpaceAttr(&_dadbd, *_gbcce.OddHeader)
		e.EncodeElement(_gbcce.OddHeader, _dadbd)
	}
	if _gbcce.OddFooter != nil {
		_bbdge := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006f\u0064\u0064\u0046\u006f\u006f\u0074\u0065\u0072"}}
		_gf.AddPreserveSpaceAttr(&_bbdge, *_gbcce.OddFooter)
		e.EncodeElement(_gbcce.OddFooter, _bbdge)
	}
	if _gbcce.EvenHeader != nil {
		_aeadc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065v\u0065\u006e\u0048\u0065\u0061\u0064\u0065\u0072"}}
		_gf.AddPreserveSpaceAttr(&_aeadc, *_gbcce.EvenHeader)
		e.EncodeElement(_gbcce.EvenHeader, _aeadc)
	}
	if _gbcce.EvenFooter != nil {
		_gbfba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065v\u0065\u006e\u0046\u006f\u006f\u0074\u0065\u0072"}}
		_gf.AddPreserveSpaceAttr(&_gbfba, *_gbcce.EvenFooter)
		e.EncodeElement(_gbcce.EvenFooter, _gbfba)
	}
	if _gbcce.FirstHeader != nil {
		_bgfe := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0066\u0069\u0072\u0073\u0074\u0048\u0065\u0061\u0064\u0065\u0072"}}
		_gf.AddPreserveSpaceAttr(&_bgfe, *_gbcce.FirstHeader)
		e.EncodeElement(_gbcce.FirstHeader, _bgfe)
	}
	if _gbcce.FirstFooter != nil {
		_cbge := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0066\u0069\u0072\u0073\u0074\u0046\u006f\u006f\u0074\u0065\u0072"}}
		_gf.AddPreserveSpaceAttr(&_cbge, *_gbcce.FirstFooter)
		e.EncodeElement(_gbcce.FirstFooter, _cbge)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_cfecg *CT_Line3DChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_gdad := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
	e.EncodeElement(_cfecg.Grouping, _gdad)
	if _cfecg.VaryColors != nil {
		_aebf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_cfecg.VaryColors, _aebf)
	}
	if _cfecg.Ser != nil {
		_cagge := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _gdcce := range _cfecg.Ser {
			e.EncodeElement(_gdcce, _cagge)
		}
	}
	if _cfecg.DLbls != nil {
		_eeff := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_cfecg.DLbls, _eeff)
	}
	if _cfecg.DropLines != nil {
		_egga := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_cfecg.DropLines, _egga)
	}
	if _cfecg.GapDepth != nil {
		_eebbe := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}}
		e.EncodeElement(_cfecg.GapDepth, _eebbe)
	}
	_deba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _eafae := range _cfecg.AxId {
		e.EncodeElement(_eafae, _deba)
	}
	if _cfecg.ExtLst != nil {
		_ggcgg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cfecg.ExtLst, _ggcgg)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

const ST_DepthPercentWithSymbolPattern = "\u0030\u002a\u0028\u0028\u005b\u0032\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u005b\u0031\u002d9\u005d\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u0031\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d)\u007c\u0032\u0030\u0030\u0030)\u0025"

func (_feeadd *ST_LblOffset) Validate() error { return _feeadd.ValidateWithPath("") }
func (_baeb *UserShapes) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0063"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063\u003a\u0075s\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"
	return _baeb.CT_Drawing.MarshalXML(e, start)
}
func (_cbcga ST_AxPos) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_abab := _b.Attr{}
	_abab.Name = name
	switch _cbcga {
	case ST_AxPosUnset:
		_abab.Value = ""
	case ST_AxPosB:
		_abab.Value = "\u0062"
	case ST_AxPosL:
		_abab.Value = "\u006c"
	case ST_AxPosR:
		_abab.Value = "\u0072"
	case ST_AxPosT:
		_abab.Value = "\u0074"
	}
	return _abab, nil
}

type CT_Surface struct {

	// Thickness
	Thickness *CT_Thickness
	SpPr      *_gfc.CT_ShapeProperties

	// Picture Options
	PictureOptions *CT_PictureOptions

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func NewCT_SerTx() *CT_SerTx {
	_efce := &CT_SerTx{}
	_efce.SerTxChoice = NewCT_SerTxChoice()
	return _efce
}

// ValidateWithPath validates the CT_DLbls and its children, prefixing error messages with path
func (_aeg *CT_DLbls) ValidateWithPath(path string) error {
	for _adfd, _febg := range _aeg.DLbl {
		if _ggeg := _febg.ValidateWithPath(_g.Sprintf("%\u0073\u002f\u0044\u004c\u0062\u006c\u005b\u0025\u0064\u005d", path, _adfd)); _ggeg != nil {
			return _ggeg
		}
	}
	if _aba := _aeg.DLblsChoice.ValidateWithPath(path + "\u002f\u0044\u004cb\u006c\u0073\u0043\u0068\u006f\u0069\u0063\u0065"); _aba != nil {
		return _aba
	}
	if _aeg.ExtLst != nil {
		if _edfg := _aeg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _edfg != nil {
			return _edfg
		}
	}
	return nil
}

// Validate validates the CT_PageSetup and its children
func (_dcga *CT_PageSetup) Validate() error {
	return _dcga.ValidateWithPath("\u0043\u0054\u005fP\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070")
}
func NewCT_DTable() *CT_DTable { _bccb := &CT_DTable{}; return _bccb }
func NewCT_Style() *CT_Style {
	_fgcgb := &CT_Style{}
	_fgcgb.ValAttr = 1
	return _fgcgb
}
func (_fcgdgc *EG_SerShared) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fcgdgc.Idx = NewCT_UnsignedInt()
	_fcgdgc.Order = NewCT_UnsignedInt()
_fgegf:
	for {
		_egca, _aaege := d.Token()
		if _aaege != nil {
			return _aaege
		}
		switch _caggc := _egca.(type) {
		case _b.StartElement:
			switch _caggc.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _aeaf := d.DecodeElement(_fcgdgc.Idx, &_caggc); _aeaf != nil {
					return _aeaf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _dcaag := d.DecodeElement(_fcgdgc.Order, &_caggc); _dcaag != nil {
					return _dcaag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_fcgdgc.Tx = NewCT_SerTx()
				if _faeff := d.DecodeElement(_fcgdgc.Tx, &_caggc); _faeff != nil {
					return _faeff
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fcgdgc.SpPr = _gfc.NewCT_ShapeProperties()
				if _bfgdg := d.DecodeElement(_fcgdgc.SpPr, &_caggc); _bfgdg != nil {
					return _bfgdg
				}
			default:
				_df.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047_S\u0065\u0072S\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _caggc.Name)
				if _aabda := d.Skip(); _aabda != nil {
					return _aabda
				}
			}
		case _b.EndElement:
			break _fgegf
		case _b.CharData:
		}
	}
	return nil
}

type CT_UnsignedInt struct {

	// Integer Value
	ValAttr uint32
}

// ValidateWithPath validates the CT_MultiLvlStrRef and its children, prefixing error messages with path
func (_fbec *CT_MultiLvlStrRef) ValidateWithPath(path string) error {
	if _fbec.MultiLvlStrCache != nil {
		if _fafdb := _fbec.MultiLvlStrCache.ValidateWithPath(path + "\u002f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053\u0074\u0072C\u0061\u0063\u0068\u0065"); _fafdb != nil {
			return _fafdb
		}
	}
	if _fbec.ExtLst != nil {
		if _efgf := _fbec.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _efgf != nil {
			return _efgf
		}
	}
	return nil
}

type CT_PivotSource struct {

	// Pivot Name
	Name string

	// Format ID
	FmtId *CT_UnsignedInt

	// Chart Extensibility
	ExtLst []*CT_ExtensionList
}

func (_eegc *CT_NumVal) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0069\u0064\u0078"}, Value: _g.Sprintf("\u0025\u0076", _eegc.IdxAttr)})
	if _eegc.FormatCodeAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}, Value: _g.Sprintf("\u0025\u0076", *_eegc.FormatCodeAttr)})
	}
	e.EncodeToken(start)
	_ffba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076"}}
	_gf.AddPreserveSpaceAttr(&_ffba, _eegc.V)
	e.EncodeElement(_eegc.V, _ffba)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Overlap and its children
func (_aebae *CT_Overlap) Validate() error {
	return _aebae.ValidateWithPath("\u0043\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070")
}

// ST_LblOffset is a union type
type ST_LblOffset struct {
	ST_LblOffsetPercent *string
	ST_LblOffsetUShort  *uint16
}

func NewEG_SurfaceChartShared() *EG_SurfaceChartShared {
	_ebfg := &EG_SurfaceChartShared{}
	return _ebfg
}
func (_eeee *CT_UpDownBars) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_affad:
	for {
		_dggdd, _eaegcb := d.Token()
		if _eaegcb != nil {
			return _eaegcb
		}
		switch _ccecfg := _dggdd.(type) {
		case _b.StartElement:
			switch _ccecfg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_eeee.GapWidth = NewCT_GapAmount()
				if _dbcde := d.DecodeElement(_eeee.GapWidth, &_ccecfg); _dbcde != nil {
					return _dbcde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0042\u0061\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0042\u0061\u0072\u0073"}:
				_eeee.UpBars = NewCT_UpDownBar()
				if _geggf := d.DecodeElement(_eeee.UpBars, &_ccecfg); _geggf != nil {
					return _geggf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}:
				_eeee.DownBars = NewCT_UpDownBar()
				if _edadf := d.DecodeElement(_eeee.DownBars, &_ccecfg); _edadf != nil {
					return _edadf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_eeee.ExtLst = NewCT_ExtensionList()
				if _edbac := d.DecodeElement(_eeee.ExtLst, &_ccecfg); _edbac != nil {
					return _edbac
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0055p\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073 \u0025\u0076", _ccecfg.Name)
				if _bgafd := d.Skip(); _bgafd != nil {
					return _bgafd
				}
			}
		case _b.EndElement:
			break _affad
		case _b.CharData:
		}
	}
	return nil
}
func (_bbccf *CT_TxChoice) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _bbccf.StrRef != nil {
		_gcaab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_bbccf.StrRef, _gcaab)
	} else if _bbccf.Rich != nil {
		_fdgbc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0072\u0069\u0063\u0068"}}
		e.EncodeElement(_bbccf.Rich, _fdgbc)
	}
	return nil
}

type CT_Lvl struct {

	// String Point
	Pt []*CT_StrVal
}

// Validate validates the CT_HoleSize and its children
func (_fdge *CT_HoleSize) Validate() error {
	return _fdge.ValidateWithPath("C\u0054\u005f\u0048\u006f\u006c\u0065\u0053\u0069\u007a\u0065")
}
func (_bedbb *CT_SurfaceChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_gddge:
	for {
		_cadda, _ecefa := d.Token()
		if _ecefa != nil {
			return _ecefa
		}
		switch _fdggg := _cadda.(type) {
		case _b.StartElement:
			switch _fdggg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}:
				_bedbb.Wireframe = NewCT_Boolean()
				if _geabb := d.DecodeElement(_bedbb.Wireframe, &_fdggg); _geabb != nil {
					return _geabb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ffgac := NewCT_SurfaceSer()
				if _eeaff := d.DecodeElement(_ffgac, &_fdggg); _eeaff != nil {
					return _eeaff
				}
				_bedbb.Ser = append(_bedbb.Ser, _ffgac)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}:
				_bedbb.BandFmts = NewCT_BandFmts()
				if _ebede := d.DecodeElement(_bedbb.BandFmts, &_fdggg); _ebede != nil {
					return _ebede
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_aggdb := NewCT_UnsignedInt()
				if _gaefd := d.DecodeElement(_aggdb, &_fdggg); _gaefd != nil {
					return _gaefd
				}
				_bedbb.AxId = append(_bedbb.AxId, _aggdb)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bedbb.ExtLst = NewCT_ExtensionList()
				if _abgg := d.DecodeElement(_bedbb.ExtLst, &_fdggg); _abgg != nil {
					return _abgg
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _fdggg.Name)
				if _ebgee := d.Skip(); _ebgee != nil {
					return _ebgee
				}
			}
		case _b.EndElement:
			break _gddge
		case _b.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_AxDataSourceChoice and its children, prefixing error messages with path
func (_ecbf *CT_AxDataSourceChoice) ValidateWithPath(path string) error {
	if _ecbf.MultiLvlStrRef != nil {
		if _aedc := _ecbf.MultiLvlStrRef.ValidateWithPath(path + "\u002fM\u0075l\u0074\u0069\u004c\u0076\u006c\u0053\u0074\u0072\u0052\u0065\u0066"); _aedc != nil {
			return _aedc
		}
	}
	if _ecbf.NumRef != nil {
		if _fae := _ecbf.NumRef.ValidateWithPath(path + "\u002fN\u0075\u006d\u0052\u0065\u0066"); _fae != nil {
			return _fae
		}
	}
	if _ecbf.NumLit != nil {
		if _eef := _ecbf.NumLit.ValidateWithPath(path + "\u002fN\u0075\u006d\u004c\u0069\u0074"); _eef != nil {
			return _eef
		}
	}
	if _ecbf.StrRef != nil {
		if _cbe := _ecbf.StrRef.ValidateWithPath(path + "\u002fS\u0074\u0072\u0052\u0065\u0066"); _cbe != nil {
			return _cbe
		}
	}
	if _ecbf.StrLit != nil {
		if _gab := _ecbf.StrLit.ValidateWithPath(path + "\u002fS\u0074\u0072\u004c\u0069\u0074"); _gab != nil {
			return _gab
		}
	}
	return nil
}

type CT_DispUnitsChoice struct {
	CustUnit    *CT_Double
	BuiltInUnit *CT_BuiltInUnit
}

func (_egcffef *ST_Crosses) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_cbeea, _egfaf := d.Token()
	if _egfaf != nil {
		return _egfaf
	}
	if _fbgaed, _eegac := _cbeea.(_b.EndElement); _eegac && _fbgaed.Name == start.Name {
		*_egcffef = 1
		return nil
	}
	if _gacf, _daffag := _cbeea.(_b.CharData); !_daffag {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cbeea)
	} else {
		switch string(_gacf) {
		case "":
			*_egcffef = 0
		case "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f":
			*_egcffef = 1
		case "\u006d\u0061\u0078":
			*_egcffef = 2
		case "\u006d\u0069\u006e":
			*_egcffef = 3
		}
	}
	_cbeea, _egfaf = d.Token()
	if _egfaf != nil {
		return _egfaf
	}
	if _aabad, _ecbgb := _cbeea.(_b.EndElement); _ecbgb && _aabad.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cbeea)
}
func NewCT_Skip() *CT_Skip { _eaaea := &CT_Skip{}; _eaaea.ValAttr = 1; return _eaaea }

// ValidateWithPath validates the EG_AxSharedChoice and its children, prefixing error messages with path
func (_bbbda *EG_AxSharedChoice) ValidateWithPath(path string) error {
	if _bbbda.Crosses != nil {
		if _ccba := _bbbda.Crosses.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0065\u0073"); _ccba != nil {
			return _ccba
		}
	}
	if _bbbda.CrossesAt != nil {
		if _eedfb := _bbbda.CrossesAt.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0065\u0073\u0041\u0074"); _eedfb != nil {
			return _eedfb
		}
	}
	return nil
}

// Validate validates the CT_LegendEntryChoice and its children
func (_dcbdg *CT_LegendEntryChoice) Validate() error {
	return _dcbdg.ValidateWithPath("C\u0054_\u004c\u0065\u0067\u0065\u006e\u0064\u0045\u006et\u0072\u0079\u0043\u0068oi\u0063\u0065")
}

type ST_RadarStyle byte

func (_gfbgc ST_SplitType) ValidateWithPath(path string) error {
	switch _gfbgc {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gfbgc))
	}
	return nil
}
func (_gecb *ST_DLblPos) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_aaaca, _efcb := d.Token()
	if _efcb != nil {
		return _efcb
	}
	if _aaffd, _edcfg := _aaaca.(_b.EndElement); _edcfg && _aaffd.Name == start.Name {
		*_gecb = 1
		return nil
	}
	if _deggc, _eccda := _aaaca.(_b.CharData); !_eccda {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _aaaca)
	} else {
		switch string(_deggc) {
		case "":
			*_gecb = 0
		case "\u0062e\u0073\u0074\u0046\u0069\u0074":
			*_gecb = 1
		case "\u0062":
			*_gecb = 2
		case "\u0063\u0074\u0072":
			*_gecb = 3
		case "\u0069\u006e\u0042\u0061\u0073\u0065":
			*_gecb = 4
		case "\u0069\u006e\u0045n\u0064":
			*_gecb = 5
		case "\u006c":
			*_gecb = 6
		case "\u006f\u0075\u0074\u0045\u006e\u0064":
			*_gecb = 7
		case "\u0072":
			*_gecb = 8
		case "\u0074":
			*_gecb = 9
		}
	}
	_aaaca, _efcb = d.Token()
	if _efcb != nil {
		return _efcb
	}
	if _ecbfe, _gedge := _aaaca.(_b.EndElement); _gedge && _ecbfe.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _aaaca)
}
func (_cbcd *CT_PrintSettings) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_aecd:
	for {
		_ccdeeg, _bcae := d.Token()
		if _bcae != nil {
			return _bcae
		}
		switch _dceab := _ccdeeg.(type) {
		case _b.StartElement:
			switch _dceab.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0065\u0061d\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0065\u0061d\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072"}:
				_cbcd.HeaderFooter = NewCT_HeaderFooter()
				if _fbce := d.DecodeElement(_cbcd.HeaderFooter, &_dceab); _fbce != nil {
					return _fbce
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}:
				_cbcd.PageMargins = NewCT_PageMargins()
				if _becbad := d.DecodeElement(_cbcd.PageMargins, &_dceab); _becbad != nil {
					return _becbad
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070a\u0067\u0065\u0053\u0065\u0074\u0075p"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070a\u0067\u0065\u0053\u0065\u0074\u0075p"}:
				_cbcd.PageSetup = NewCT_PageSetup()
				if _bagd := d.DecodeElement(_cbcd.PageSetup, &_dceab); _bagd != nil {
					return _bagd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067a\u0063\u0079\u0044\u0072\u0061\u0077\u0069\u006e\u0067\u0048\u0046"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067a\u0063\u0079\u0044\u0072\u0061\u0077\u0069\u006e\u0067\u0048\u0046"}:
				_cbcd.LegacyDrawingHF = NewCT_RelId()
				if _gfegb := d.DecodeElement(_cbcd.LegacyDrawingHF, &_dceab); _gfegb != nil {
					return _gfegb
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u0020\u0025v", _dceab.Name)
				if _cefa := d.Skip(); _cefa != nil {
					return _cefa
				}
			}
		case _b.EndElement:
			break _aecd
		case _b.CharData:
		}
	}
	return nil
}
func NewCT_UnsignedInt() *CT_UnsignedInt { _cegee := &CT_UnsignedInt{}; return _cegee }

type CT_SurfaceSer struct {

	// Index
	Idx *CT_UnsignedInt

	// Order
	Order *CT_UnsignedInt

	// Series Text
	Tx   *CT_SerTx
	SpPr *_gfc.CT_ShapeProperties

	// Category Axis Data
	Cat *CT_AxDataSource
	Val *CT_NumDataSource

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_baga *CT_DispUnitsLbl) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_bdfee:
	for {
		_geed, _bccc := d.Token()
		if _bccc != nil {
			return _bccc
		}
		switch _feaf := _geed.(type) {
		case _b.StartElement:
			switch _feaf.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_baga.Layout = NewCT_Layout()
				if _gfeb := d.DecodeElement(_baga.Layout, &_feaf); _gfeb != nil {
					return _gfeb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_baga.Tx = NewCT_Tx()
				if _cdce := d.DecodeElement(_baga.Tx, &_feaf); _cdce != nil {
					return _cdce
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_baga.SpPr = _gfc.NewCT_ShapeProperties()
				if _dgcd := d.DecodeElement(_baga.SpPr, &_feaf); _dgcd != nil {
					return _dgcd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_baga.TxPr = _gfc.NewCT_TextBody()
				if _acefd := d.DecodeElement(_baga.TxPr, &_feaf); _acefd != nil {
					return _acefd
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c\u0020\u0025\u0076", _feaf.Name)
				if _gcce := d.Skip(); _gcce != nil {
					return _gcce
				}
			}
		case _b.EndElement:
			break _bdfee
		case _b.CharData:
		}
	}
	return nil
}
func (_fagg *CT_TrendlineLbl) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_agaba:
	for {
		_dadca, _cbcaca := d.Token()
		if _cbcaca != nil {
			return _cbcaca
		}
		switch _ebefd := _dadca.(type) {
		case _b.StartElement:
			switch _ebefd.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_fagg.Layout = NewCT_Layout()
				if _fbea := d.DecodeElement(_fagg.Layout, &_ebefd); _fbea != nil {
					return _fbea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_fagg.Tx = NewCT_Tx()
				if _bddda := d.DecodeElement(_fagg.Tx, &_ebefd); _bddda != nil {
					return _bddda
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_fagg.NumFmt = NewCT_NumFmt()
				if _ggabf := d.DecodeElement(_fagg.NumFmt, &_ebefd); _ggabf != nil {
					return _ggabf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fagg.SpPr = _gfc.NewCT_ShapeProperties()
				if _agead := d.DecodeElement(_fagg.SpPr, &_ebefd); _agead != nil {
					return _agead
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_fagg.TxPr = _gfc.NewCT_TextBody()
				if _fffdb := d.DecodeElement(_fagg.TxPr, &_ebefd); _fffdb != nil {
					return _fffdb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fagg.ExtLst = NewCT_ExtensionList()
				if _fccb := d.DecodeElement(_fagg.ExtLst, &_ebefd); _fccb != nil {
					return _fccb
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c\u0020\u0025\u0076", _ebefd.Name)
				if _aadeb := d.Skip(); _aadeb != nil {
					return _aadeb
				}
			}
		case _b.EndElement:
			break _agaba
		case _b.CharData:
		}
	}
	return nil
}
func NewCT_TimeUnit() *CT_TimeUnit { _bfcd := &CT_TimeUnit{}; return _bfcd }
func NewCT_BubbleScale() *CT_BubbleScale {
	_bef := &CT_BubbleScale{}
	return _bef
}
func (_fgdaa *CT_PivotSource) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fgdaa.FmtId = NewCT_UnsignedInt()
_bgcbb:
	for {
		_egeaa, _abcae := d.Token()
		if _abcae != nil {
			return _abcae
		}
		switch _aacgc := _egeaa.(type) {
		case _b.StartElement:
			switch _aacgc.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}:
				if _gdccd := d.DecodeElement(&_fgdaa.Name, &_aacgc); _gdccd != nil {
					return _gdccd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006d\u0074I\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006d\u0074I\u0064"}:
				if _faea := d.DecodeElement(_fgdaa.FmtId, &_aacgc); _faea != nil {
					return _faea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cbfd := NewCT_ExtensionList()
				if _eegaf := d.DecodeElement(_cbfd, &_aacgc); _eegaf != nil {
					return _eegaf
				}
				_fgdaa.ExtLst = append(_fgdaa.ExtLst, _cbfd)
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0053\u006fu\u0072c\u0065\u0020\u0025\u0076", _aacgc.Name)
				if _aceeg := d.Skip(); _aceeg != nil {
					return _aceeg
				}
			}
		case _b.EndElement:
			break _bgcbb
		case _b.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PrintSettings and its children, prefixing error messages with path
func (_edge *CT_PrintSettings) ValidateWithPath(path string) error {
	if _edge.HeaderFooter != nil {
		if _effe := _edge.HeaderFooter.ValidateWithPath(path + "\u002f\u0048\u0065\u0061\u0064\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072"); _effe != nil {
			return _effe
		}
	}
	if _edge.PageMargins != nil {
		if _ccbb := _edge.PageMargins.ValidateWithPath(path + "\u002f\u0050\u0061g\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"); _ccbb != nil {
			return _ccbb
		}
	}
	if _edge.PageSetup != nil {
		if _afdbe := _edge.PageSetup.ValidateWithPath(path + "\u002f\u0050\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070"); _afdbe != nil {
			return _afdbe
		}
	}
	if _edge.LegacyDrawingHF != nil {
		if _deccc := _edge.LegacyDrawingHF.ValidateWithPath(path + "\u002f\u004ce\u0067\u0061\u0063y\u0044\u0072\u0061\u0077\u0069\u006e\u0067\u0048\u0046"); _deccc != nil {
			return _deccc
		}
	}
	return nil
}

// Validate validates the CT_FirstSliceAng and its children
func (_fafc *CT_FirstSliceAng) Validate() error {
	return _fafc.ValidateWithPath("\u0043\u0054_\u0046\u0069\u0072s\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067")
}

// Validate validates the CT_Tx and its children
func (_cefcf *CT_Tx) Validate() error { return _cefcf.ValidateWithPath("\u0043\u0054\u005fT\u0078") }
func (_eagde ST_LblOffset) String() string {
	if _eagde.ST_LblOffsetPercent != nil {
		return _g.Sprintf("\u0025\u0076", *_eagde.ST_LblOffsetPercent)
	}
	if _eagde.ST_LblOffsetUShort != nil {
		return _g.Sprintf("\u0025\u0076", *_eagde.ST_LblOffsetUShort)
	}
	return ""
}

type CT_Protection struct {

	// Chart Object
	ChartObject *CT_Boolean

	// Data Cannot Be Changed
	Data *CT_Boolean

	// Formatting
	Formatting *CT_Boolean

	// Selection
	Selection *CT_Boolean

	// User Interface
	UserInterface *CT_Boolean
}

func (_debe *ST_LayoutMode) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_baede, _cacga := d.Token()
	if _cacga != nil {
		return _cacga
	}
	if _bcfb, _ggbg := _baede.(_b.EndElement); _ggbg && _bcfb.Name == start.Name {
		*_debe = 1
		return nil
	}
	if _bgcbe, _feebd := _baede.(_b.CharData); !_feebd {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _baede)
	} else {
		switch string(_bgcbe) {
		case "":
			*_debe = 0
		case "\u0065\u0064\u0067\u0065":
			*_debe = 1
		case "\u0066\u0061\u0063\u0074\u006f\u0072":
			*_debe = 2
		}
	}
	_baede, _cacga = d.Token()
	if _cacga != nil {
		return _cacga
	}
	if _dfgcda, _fbgeg := _baede.(_b.EndElement); _fbgeg && _dfgcda.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _baede)
}

// ValidateWithPath validates the CT_RotY and its children, prefixing error messages with path
func (_eafga *CT_RotY) ValidateWithPath(path string) error {
	if _eafga.ValAttr != nil {
		if *_eafga.ValAttr < 0 {
			return _g.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_eafga.ValAttr)
		}
		if *_eafga.ValAttr > 360 {
			return _g.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003c\u003d\u0020\u0033\u0036\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_eafga.ValAttr)
		}
	}
	return nil
}
func NewCT_SecondPieSize() *CT_SecondPieSize { _edgf := &CT_SecondPieSize{}; return _edgf }

type CT_PictureOptions struct {

	// Apply To Front
	ApplyToFront *CT_Boolean

	// Apply To Sides
	ApplyToSides *CT_Boolean

	// Apply to End
	ApplyToEnd *CT_Boolean

	// Picture Format
	PictureFormat *CT_PictureFormat

	// Picture Stack Unit
	PictureStackUnit *CT_PictureStackUnit
}

func (_gfgfg ST_DLblPos) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_dcbee := _b.Attr{}
	_dcbee.Name = name
	switch _gfgfg {
	case ST_DLblPosUnset:
		_dcbee.Value = ""
	case ST_DLblPosBestFit:
		_dcbee.Value = "\u0062e\u0073\u0074\u0046\u0069\u0074"
	case ST_DLblPosB:
		_dcbee.Value = "\u0062"
	case ST_DLblPosCtr:
		_dcbee.Value = "\u0063\u0074\u0072"
	case ST_DLblPosInBase:
		_dcbee.Value = "\u0069\u006e\u0042\u0061\u0073\u0065"
	case ST_DLblPosInEnd:
		_dcbee.Value = "\u0069\u006e\u0045n\u0064"
	case ST_DLblPosL:
		_dcbee.Value = "\u006c"
	case ST_DLblPosOutEnd:
		_dcbee.Value = "\u006f\u0075\u0074\u0045\u006e\u0064"
	case ST_DLblPosR:
		_dcbee.Value = "\u0072"
	case ST_DLblPosT:
		_dcbee.Value = "\u0074"
	}
	return _dcbee, nil
}

// Validate validates the CT_DLblsChoice and its children
func (_gbaag *CT_DLblsChoice) Validate() error {
	return _gbaag.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073\u0043h\u006f\u0069\u0063\u0065")
}
func (_dcgde *CT_Legend) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _dcgde.LegendPos != nil {
		_ggde := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006c\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073"}}
		e.EncodeElement(_dcgde.LegendPos, _ggde)
	}
	if _dcgde.LegendEntry != nil {
		_bgfd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079"}}
		for _, _gfed := range _dcgde.LegendEntry {
			e.EncodeElement(_gfed, _bgfd)
		}
	}
	if _dcgde.Layout != nil {
		_bbdf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_dcgde.Layout, _bbdf)
	}
	if _dcgde.Overlay != nil {
		_gdcg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0076\u0065\u0072\u006c\u0061y"}}
		e.EncodeElement(_dcgde.Overlay, _gdcg)
	}
	if _dcgde.SpPr != nil {
		_dfebfd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_dcgde.SpPr, _dfebfd)
	}
	if _dcgde.TxPr != nil {
		_gbbde := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_dcgde.TxPr, _gbbde)
	}
	if _dcgde.ExtLst != nil {
		_aaaac := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dcgde.ExtLst, _aaaac)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_ceee *CT_PictureFormat) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_ceee.ValAttr = ST_PictureFormat(1)
	for _, _bbbcb := range start.Attr {
		if _bbbcb.Name.Local == "\u0076\u0061\u006c" {
			_ceee.ValAttr.UnmarshalXMLAttr(_bbbcb)
			continue
		}
	}
	for {
		_gebdc, _egdgg := d.Token()
		if _egdgg != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0050\u0069\u0063\u0074u\u0072e\u0046\u006f\u0072\u006d\u0061\u0074\u003a \u0025\u0073", _egdgg)
		}
		if _bdcf, _ggbb := _gebdc.(_b.EndElement); _ggbb && _bdcf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fcccb ST_MarkerStyle) String() string {
	switch _fcccb {
	case 0:
		return ""
	case 1:
		return "\u0063\u0069\u0072\u0063\u006c\u0065"
	case 2:
		return "\u0064\u0061\u0073\u0068"
	case 3:
		return "\u0064i\u0061\u006d\u006f\u006e\u0064"
	case 4:
		return "\u0064\u006f\u0074"
	case 5:
		return "\u006e\u006f\u006e\u0065"
	case 6:
		return "\u0070i\u0063\u0074\u0075\u0072\u0065"
	case 7:
		return "\u0070\u006c\u0075\u0073"
	case 8:
		return "\u0073\u0071\u0075\u0061\u0072\u0065"
	case 9:
		return "\u0073\u0074\u0061\u0072"
	case 10:
		return "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065"
	case 11:
		return "\u0078"
	case 12:
		return "\u0061\u0075\u0074\u006f"
	}
	return ""
}

const (
	ST_BarGroupingUnset          ST_BarGrouping = 0
	ST_BarGroupingPercentStacked ST_BarGrouping = 1
	ST_BarGroupingClustered      ST_BarGrouping = 2
	ST_BarGroupingStandard       ST_BarGrouping = 3
	ST_BarGroupingStacked        ST_BarGrouping = 4
)

// Validate validates the ChartSpace and its children
func (_dfcdb *ChartSpace) Validate() error {
	return _dfcdb.ValidateWithPath("\u0043\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065")
}
func (_debcgg *ST_TickLblPos) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_debcgg = 0
	case "\u0068\u0069\u0067\u0068":
		*_debcgg = 1
	case "\u006c\u006f\u0077":
		*_debcgg = 2
	case "\u006e\u0065\u0078\u0074\u0054\u006f":
		*_debcgg = 3
	case "\u006e\u006f\u006e\u0065":
		*_debcgg = 4
	}
	return nil
}
func (_aafd ST_LegendPos) String() string {
	switch _aafd {
	case 0:
		return ""
	case 1:
		return "\u0062"
	case 2:
		return "\u0074\u0072"
	case 3:
		return "\u006c"
	case 4:
		return "\u0072"
	case 5:
		return "\u0074"
	}
	return ""
}

// Validate validates the CT_SurfaceSer and its children
func (_ccbcg *CT_SurfaceSer) Validate() error {
	return _ccbcg.ValidateWithPath("\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0053\u0065\u0072")
}
func (_fcage ST_TickLblPos) Validate() error { return _fcage.ValidateWithPath("") }

// ValidateWithPath validates the CT_Overlap and its children, prefixing error messages with path
func (_eaed *CT_Overlap) ValidateWithPath(path string) error {
	if _eaed.ValAttr != nil {
		if _gebbc := _eaed.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gebbc != nil {
			return _gebbc
		}
	}
	return nil
}
func (_aafgdc *ST_OfPieType) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_faga, _eabaa := d.Token()
	if _eabaa != nil {
		return _eabaa
	}
	if _gdfee, _facab := _faga.(_b.EndElement); _facab && _gdfee.Name == start.Name {
		*_aafgdc = 1
		return nil
	}
	if _ecfgdb, _dbggg := _faga.(_b.CharData); !_dbggg {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _faga)
	} else {
		switch string(_ecfgdb) {
		case "":
			*_aafgdc = 0
		case "\u0070\u0069\u0065":
			*_aafgdc = 1
		case "\u0062\u0061\u0072":
			*_aafgdc = 2
		}
	}
	_faga, _eabaa = d.Token()
	if _eabaa != nil {
		return _eabaa
	}
	if _addcd, _ecbdb := _faga.(_b.EndElement); _ecbdb && _addcd.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _faga)
}

// ValidateWithPath validates the CT_DLbl and its children, prefixing error messages with path
func (_bagc *CT_DLbl) ValidateWithPath(path string) error {
	if _bcd := _bagc.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _bcd != nil {
		return _bcd
	}
	if _fga := _bagc.DLblChoice.ValidateWithPath(path + "/\u0044\u004c\u0062\u006c\u0043\u0068\u006f\u0069\u0063\u0065"); _fga != nil {
		return _fga
	}
	if _bagc.ExtLst != nil {
		if _becg := _bagc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _becg != nil {
			return _becg
		}
	}
	return nil
}

// Validate validates the CT_LblOffset and its children
func (_affa *CT_LblOffset) Validate() error {
	return _affa.ValidateWithPath("\u0043\u0054\u005fL\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074")
}

// Validate validates the CT_PlotArea and its children
func (_cffbf *CT_PlotArea) Validate() error {
	return _cffbf.ValidateWithPath("C\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061")
}

// Validate validates the CT_NumVal and its children
func (_cfaae *CT_NumVal) Validate() error {
	return _cfaae.ValidateWithPath("\u0043T\u005f\u004e\u0075\u006d\u0056\u0061l")
}
func (_edfef *CT_NumData) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_ddadd:
	for {
		_ageb, _dgbdg := d.Token()
		if _dgbdg != nil {
			return _dgbdg
		}
		switch _ebaea := _ageb.(type) {
		case _b.StartElement:
			switch _ebaea.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}:
				_edfef.FormatCode = new(string)
				if _cfggd := d.DecodeElement(_edfef.FormatCode, &_ebaea); _cfggd != nil {
					return _cfggd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}:
				_edfef.PtCount = NewCT_UnsignedInt()
				if _gebd := d.DecodeElement(_edfef.PtCount, &_ebaea); _gebd != nil {
					return _gebd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}:
				_cebg := NewCT_NumVal()
				if _facb := d.DecodeElement(_cebg, &_ebaea); _facb != nil {
					return _facb
				}
				_edfef.Pt = append(_edfef.Pt, _cebg)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_edfef.ExtLst = NewCT_ExtensionList()
				if _dddbd := d.DecodeElement(_edfef.ExtLst, &_ebaea); _dddbd != nil {
					return _dddbd
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fN\u0075\u006d\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _ebaea.Name)
				if _bcf := d.Skip(); _bcf != nil {
					return _bcf
				}
			}
		case _b.EndElement:
			break _ddadd
		case _b.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Skip and its children
func (_debcg *CT_Skip) Validate() error {
	return _debcg.ValidateWithPath("\u0043T\u005f\u0053\u006b\u0069\u0070")
}
func (_gcbeg *ST_Orientation) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_gcbeg = 0
	case "\u006d\u0061\u0078\u004d\u0069\u006e":
		*_gcbeg = 1
	case "\u006d\u0069\u006e\u004d\u0061\u0078":
		*_gcbeg = 2
	}
	return nil
}

// Validate validates the CT_Chart and its children
func (_eegb *CT_Chart) Validate() error {
	return _eegb.ValidateWithPath("\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074")
}
func (_ggddcce *ST_SizeRepresents) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_ggddcce = 0
	case "\u0061\u0072\u0065\u0061":
		*_ggddcce = 1
	case "\u0077":
		*_ggddcce = 2
	}
	return nil
}
func NewCT_LineSer() *CT_LineSer {
	_cead := &CT_LineSer{}
	_cead.Idx = NewCT_UnsignedInt()
	_cead.Order = NewCT_UnsignedInt()
	return _cead
}
func NewCT_RelId() *CT_RelId           { _eddad := &CT_RelId{}; return _eddad }
func NewCT_RadarStyle() *CT_RadarStyle { _efgcf := &CT_RadarStyle{}; return _efgcf }
func (_eba *CT_BubbleScale) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _eba.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", *_eba.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_ebfdb *CT_RadarSer) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_bbbcc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_ebfdb.Idx, _bbbcc)
	_egba := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_ebfdb.Order, _egba)
	if _ebfdb.Tx != nil {
		_cfgd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_ebfdb.Tx, _cfgd)
	}
	if _ebfdb.SpPr != nil {
		_cddgg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ebfdb.SpPr, _cddgg)
	}
	if _ebfdb.Marker != nil {
		_fabg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_ebfdb.Marker, _fabg)
	}
	if _ebfdb.DPt != nil {
		_fdbdc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _dcefbe := range _ebfdb.DPt {
			e.EncodeElement(_dcefbe, _fdbdc)
		}
	}
	if _ebfdb.DLbls != nil {
		_acbba := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_ebfdb.DLbls, _acbba)
	}
	if _ebfdb.Cat != nil {
		_fdgd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_ebfdb.Cat, _fdgd)
	}
	if _ebfdb.Val != nil {
		_decbb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_ebfdb.Val, _decbb)
	}
	if _ebfdb.ExtLst != nil {
		_faaf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ebfdb.ExtLst, _faaf)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

const ST_ThicknessPercentPattern = "\u0028[\u0030\u002d\u0039\u005d\u002b\u0029%"

func (_fbgdd ST_OfPieType) Validate() error { return _fbgdd.ValidateWithPath("") }
func (_eae *CT_BandFmts) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _eae.BandFmt != nil {
		_fecb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0062\u0061\u006e\u0064\u0046\u006dt"}}
		for _, _fbgb := range _eae.BandFmt {
			e.EncodeElement(_fbgb, _fecb)
		}
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_fcegef ST_Shape) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_dfdeaf := _b.Attr{}
	_dfdeaf.Name = name
	switch _fcegef {
	case ST_ShapeUnset:
		_dfdeaf.Value = ""
	case ST_ShapeCone:
		_dfdeaf.Value = "\u0063\u006f\u006e\u0065"
	case ST_ShapeConeToMax:
		_dfdeaf.Value = "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x"
	case ST_ShapeBox:
		_dfdeaf.Value = "\u0062\u006f\u0078"
	case ST_ShapeCylinder:
		_dfdeaf.Value = "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072"
	case ST_ShapePyramid:
		_dfdeaf.Value = "\u0070y\u0072\u0061\u006d\u0069\u0064"
	case ST_ShapePyramidToMax:
		_dfdeaf.Value = "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078"
	}
	return _dfdeaf, nil
}

type CT_StrRef struct {

	// Formula
	F string

	// String Cache
	StrCache *CT_StrData
	ExtLst   *CT_ExtensionList
}

func (_egfa *CT_LblAlgn) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_egfa.ValAttr = ST_LblAlgn(1)
	for _, _acae := range start.Attr {
		if _acae.Name.Local == "\u0076\u0061\u006c" {
			_egfa.ValAttr.UnmarshalXMLAttr(_acae)
			continue
		}
	}
	for {
		_cfee, _gecgc := d.Token()
		if _gecgc != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004c\u0062\u006c\u0041\u006c\u0067\u006e\u003a\u0020%\u0073", _gecgc)
		}
		if _aafb, _aaad := _cfee.(_b.EndElement); _aaad && _aafb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cabdb *EG_AxSharedChoice) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_cebaf := start
	switch start.Name {
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
		_cabdb.Crosses = NewCT_Crosses()
		if _bfcgc := d.DecodeElement(_cabdb.Crosses, &_cebaf); _bfcgc != nil {
			return _bfcgc
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
		_cabdb.CrossesAt = NewCT_Double()
		if _ddbd := d.DecodeElement(_cabdb.CrossesAt, &_cebaf); _ddbd != nil {
			return _ddbd
		}
	default:
		_df.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _cebaf.Name)
		if _agdbg := d.Skip(); _agdbg != nil {
			return _agdbg
		}
	}
	return nil
}

// Validate validates the CT_RadarChart and its children
func (_gbfcb *CT_RadarChart) Validate() error {
	return _gbfcb.ValidateWithPath("\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074")
}
func (_bebc *CT_CatAx) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_gggf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_bebc.AxId, _gggf)
	_dce := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_bebc.Scaling, _dce)
	if _bebc.Delete != nil {
		_gfgc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_bebc.Delete, _gfgc)
	}
	_ggaf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_bebc.AxPos, _ggaf)
	if _bebc.MajorGridlines != nil {
		_dfe := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_bebc.MajorGridlines, _dfe)
	}
	if _bebc.MinorGridlines != nil {
		_ecbc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_bebc.MinorGridlines, _ecbc)
	}
	if _bebc.Title != nil {
		_fddd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_bebc.Title, _fddd)
	}
	if _bebc.NumFmt != nil {
		_fbgfg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_bebc.NumFmt, _fbgfg)
	}
	if _bebc.MajorTickMark != nil {
		_aedg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_bebc.MajorTickMark, _aedg)
	}
	if _bebc.MinorTickMark != nil {
		_cagd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_bebc.MinorTickMark, _cagd)
	}
	if _bebc.TickLblPos != nil {
		_baeg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_bebc.TickLblPos, _baeg)
	}
	if _bebc.SpPr != nil {
		_cfaa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bebc.SpPr, _cfaa)
	}
	if _bebc.TxPr != nil {
		_affc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_bebc.TxPr, _affc)
	}
	_ebc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_bebc.CrossAx, _ebc)
	if _bebc.AxSharedChoice != nil {
		_bebc.AxSharedChoice.MarshalXML(e, _b.StartElement{})
	}
	if _bebc.Auto != nil {
		_ecd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0075\u0074\u006f"}}
		e.EncodeElement(_bebc.Auto, _ecd)
	}
	if _bebc.LblAlgn != nil {
		_ggbe := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006c\u0062\u006c\u0041\u006c\u0067n"}}
		e.EncodeElement(_bebc.LblAlgn, _ggbe)
	}
	if _bebc.LblOffset != nil {
		_fdca := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"}}
		e.EncodeElement(_bebc.LblOffset, _fdca)
	}
	if _bebc.TickLblSkip != nil {
		_gabeg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_bebc.TickLblSkip, _gabeg)
	}
	if _bebc.TickMarkSkip != nil {
		_edbc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004d\u0061\u0072k\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_bebc.TickMarkSkip, _edbc)
	}
	if _bebc.NoMultiLvlLbl != nil {
		_gegg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006eo\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u004c\u0062\u006c"}}
		e.EncodeElement(_bebc.NoMultiLvlLbl, _gegg)
	}
	if _bebc.ExtLst != nil {
		_bega := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bebc.ExtLst, _bega)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_Title() *CT_Title { _dcbeb := &CT_Title{}; return _dcbeb }
func (_egcbf *CT_HeaderFooter) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _gadab := range start.Attr {
		if _gadab.Name.Local == "\u0061\u006ci\u0067\u006e\u0057i\u0074\u0068\u004d\u0061\u0072\u0067\u0069\u006e\u0073" {
			_edddb, _bcaa := _e.ParseBool(_gadab.Value)
			if _bcaa != nil {
				return _bcaa
			}
			_egcbf.AlignWithMarginsAttr = &_edddb
			continue
		}
		if _gadab.Name.Local == "\u0064\u0069f\u0066\u0065\u0072e\u006e\u0074\u004f\u0064\u0064\u0045\u0076\u0065\u006e" {
			_geec, _abgff := _e.ParseBool(_gadab.Value)
			if _abgff != nil {
				return _abgff
			}
			_egcbf.DifferentOddEvenAttr = &_geec
			continue
		}
		if _gadab.Name.Local == "\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074F\u0069\u0072\u0073\u0074" {
			_afbde, _eaaeg := _e.ParseBool(_gadab.Value)
			if _eaaeg != nil {
				return _eaaeg
			}
			_egcbf.DifferentFirstAttr = &_afbde
			continue
		}
	}
_dagg:
	for {
		_ffbef, _ggac := d.Token()
		if _ggac != nil {
			return _ggac
		}
		switch _ecfea := _ffbef.(type) {
		case _b.StartElement:
			switch _ecfea.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0048\u0065\u0061\u0064\u0065r"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0048\u0065\u0061\u0064\u0065r"}:
				_egcbf.OddHeader = new(string)
				if _bgaa := d.DecodeElement(_egcbf.OddHeader, &_ecfea); _bgaa != nil {
					return _bgaa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0046\u006f\u006f\u0074\u0065r"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0046\u006f\u006f\u0074\u0065r"}:
				_egcbf.OddFooter = new(string)
				if _bgec := d.DecodeElement(_egcbf.OddFooter, &_ecfea); _bgec != nil {
					return _bgec
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0048\u0065\u0061\u0064\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0048\u0065\u0061\u0064\u0065\u0072"}:
				_egcbf.EvenHeader = new(string)
				if _bgdf := d.DecodeElement(_egcbf.EvenHeader, &_ecfea); _bgdf != nil {
					return _bgdf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0046\u006f\u006f\u0074\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0046\u006f\u006f\u0074\u0065\u0072"}:
				_egcbf.EvenFooter = new(string)
				if _cfad := d.DecodeElement(_egcbf.EvenFooter, &_ecfea); _cfad != nil {
					return _cfad
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0048\u0065\u0061\u0064\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0048\u0065\u0061\u0064\u0065\u0072"}:
				_egcbf.FirstHeader = new(string)
				if _dbcb := d.DecodeElement(_egcbf.FirstHeader, &_ecfea); _dbcb != nil {
					return _dbcb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0046\u006f\u006f\u0074\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0046\u006f\u006f\u0074\u0065\u0072"}:
				_egcbf.FirstFooter = new(string)
				if _gaga := d.DecodeElement(_egcbf.FirstFooter, &_ecfea); _gaga != nil {
					return _gaga
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0048\u0065\u0061d\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072\u0020\u0025\u0076", _ecfea.Name)
				if _cgfdf := d.Skip(); _cgfdf != nil {
					return _cgfdf
				}
			}
		case _b.EndElement:
			break _dagg
		case _b.CharData:
		}
	}
	return nil
}
func (_efgaa ST_LayoutMode) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_cedad := _b.Attr{}
	_cedad.Name = name
	switch _efgaa {
	case ST_LayoutModeUnset:
		_cedad.Value = ""
	case ST_LayoutModeEdge:
		_cedad.Value = "\u0065\u0064\u0067\u0065"
	case ST_LayoutModeFactor:
		_cedad.Value = "\u0066\u0061\u0063\u0074\u006f\u0072"
	}
	return _cedad, nil
}

// Validate validates the CT_DispUnits and its children
func (_gecg *CT_DispUnits) Validate() error {
	return _gecg.ValidateWithPath("\u0043\u0054\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073")
}
func NewGroup_DLbls() *Group_DLbls { _dfadc := &Group_DLbls{}; return _dfadc }
func (_fffffb *ST_TrendlineType) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fggda, _dfdee := d.Token()
	if _dfdee != nil {
		return _dfdee
	}
	if _abbba, _defdf := _fggda.(_b.EndElement); _defdf && _abbba.Name == start.Name {
		*_fffffb = 1
		return nil
	}
	if _ceced, _gffad := _fggda.(_b.CharData); !_gffad {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fggda)
	} else {
		switch string(_ceced) {
		case "":
			*_fffffb = 0
		case "\u0065\u0078\u0070":
			*_fffffb = 1
		case "\u006c\u0069\u006e\u0065\u0061\u0072":
			*_fffffb = 2
		case "\u006c\u006f\u0067":
			*_fffffb = 3
		case "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g":
			*_fffffb = 4
		case "\u0070\u006f\u006c\u0079":
			*_fffffb = 5
		case "\u0070\u006f\u0077e\u0072":
			*_fffffb = 6
		}
	}
	_fggda, _dfdee = d.Token()
	if _dfdee != nil {
		return _dfdee
	}
	if _befga, _bfafg := _fggda.(_b.EndElement); _bfafg && _befga.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fggda)
}

type CT_PictureStackUnit struct {

	// Picture Stack Unit
	ValAttr float64
}

// Validate validates the CT_SizeRepresents and its children
func (_eagefg *CT_SizeRepresents) Validate() error {
	return _eagefg.ValidateWithPath("\u0043\u0054\u005f\u0053\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073")
}
func (_bedbf *CT_Surface) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _bedbf.Thickness != nil {
		_aabce := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0074\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073"}}
		e.EncodeElement(_bedbf.Thickness, _aabce)
	}
	if _bedbf.SpPr != nil {
		_eecga := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bedbf.SpPr, _eecga)
	}
	if _bedbf.PictureOptions != nil {
		_dcgac := _b.StartElement{Name: _b.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_bedbf.PictureOptions, _dcgac)
	}
	if _bedbf.ExtLst != nil {
		_cegba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bedbf.ExtLst, _cegba)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_BubbleScale and its children, prefixing error messages with path
func (_gagb *CT_BubbleScale) ValidateWithPath(path string) error {
	if _gagb.ValAttr != nil {
		if _cffa := _gagb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cffa != nil {
			return _cffa
		}
	}
	return nil
}

const (
	ST_RadarStyleUnset    ST_RadarStyle = 0
	ST_RadarStyleStandard ST_RadarStyle = 1
	ST_RadarStyleMarker   ST_RadarStyle = 2
	ST_RadarStyleFilled   ST_RadarStyle = 3
)

type CT_BandFmts struct {

	// Band Format
	BandFmt []*CT_BandFmt
}

func (_ccb *CT_BubbleSer) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_ccb.Idx = NewCT_UnsignedInt()
	_ccb.Order = NewCT_UnsignedInt()
_cbfe:
	for {
		_eaeb, _bfde := d.Token()
		if _bfde != nil {
			return _bfde
		}
		switch _fcf := _eaeb.(type) {
		case _b.StartElement:
			switch _fcf.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _feae := d.DecodeElement(_ccb.Idx, &_fcf); _feae != nil {
					return _feae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _cbec := d.DecodeElement(_ccb.Order, &_fcf); _cbec != nil {
					return _cbec
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_ccb.Tx = NewCT_SerTx()
				if _aebb := d.DecodeElement(_ccb.Tx, &_fcf); _aebb != nil {
					return _aebb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ccb.SpPr = _gfc.NewCT_ShapeProperties()
				if _bccg := d.DecodeElement(_ccb.SpPr, &_fcf); _bccg != nil {
					return _bccg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}:
				_ccb.InvertIfNegative = NewCT_Boolean()
				if _bca := d.DecodeElement(_ccb.InvertIfNegative, &_fcf); _bca != nil {
					return _bca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_efgg := NewCT_DPt()
				if _bbga := d.DecodeElement(_efgg, &_fcf); _bbga != nil {
					return _bbga
				}
				_ccb.DPt = append(_ccb.DPt, _efgg)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ccb.DLbls = NewCT_DLbls()
				if _fca := d.DecodeElement(_ccb.DLbls, &_fcf); _fca != nil {
					return _fca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_cfcb := NewCT_Trendline()
				if _ggg := d.DecodeElement(_cfcb, &_fcf); _ggg != nil {
					return _ggg
				}
				_ccb.Trendline = append(_ccb.Trendline, _cfcb)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_bcag := NewCT_ErrBars()
				if _daa := d.DecodeElement(_bcag, &_fcf); _daa != nil {
					return _daa
				}
				_ccb.ErrBars = append(_ccb.ErrBars, _bcag)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}:
				_ccb.XVal = NewCT_AxDataSource()
				if _debg := d.DecodeElement(_ccb.XVal, &_fcf); _debg != nil {
					return _debg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}:
				_ccb.YVal = NewCT_NumDataSource()
				if _egaa := d.DecodeElement(_ccb.YVal, &_fcf); _egaa != nil {
					return _egaa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}:
				_ccb.BubbleSize = NewCT_NumDataSource()
				if _eca := d.DecodeElement(_ccb.BubbleSize, &_fcf); _eca != nil {
					return _eca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}:
				_ccb.Bubble3D = NewCT_Boolean()
				if _cfb := d.DecodeElement(_ccb.Bubble3D, &_fcf); _cfb != nil {
					return _cfb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ccb.ExtLst = NewCT_ExtensionList()
				if _aada := d.DecodeElement(_ccb.ExtLst, &_fcf); _aada != nil {
					return _aada
				}
			default:
				_df.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_B\u0075\u0062b\u006c\u0065\u0053\u0065\u0072\u0020\u0025\u0076", _fcf.Name)
				if _bbfdf := d.Skip(); _bbfdf != nil {
					return _bbfdf
				}
			}
		case _b.EndElement:
			break _cbfe
		case _b.CharData:
		}
	}
	return nil
}

type ChartSpace struct{ CT_ChartSpace }

// ValidateWithPath validates the CT_SerTx and its children, prefixing error messages with path
func (_gafa *CT_SerTx) ValidateWithPath(path string) error {
	if _gbaagb := _gafa.SerTxChoice.ValidateWithPath(path + "\u002f\u0053\u0065r\u0054\u0078\u0043\u0068\u006f\u0069\u0063\u0065"); _gbaagb != nil {
		return _gbaagb
	}
	return nil
}

// Validate validates the CT_Orientation and its children
func (_fgegb *CT_Orientation) Validate() error {
	return _fgegb.ValidateWithPath("\u0043\u0054\u005f\u004f\u0072\u0069\u0065\u006e\u0074a\u0074\u0069\u006f\u006e")
}
func (_fac *CT_Bar3DChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_gdg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0044\u0069\u0072"}}
	e.EncodeElement(_fac.BarDir, _gdg)
	if _fac.Grouping != nil {
		_aedd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_fac.Grouping, _aedd)
	}
	if _fac.VaryColors != nil {
		_cde := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_fac.VaryColors, _cde)
	}
	if _fac.Ser != nil {
		_ged := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _afa := range _fac.Ser {
			e.EncodeElement(_afa, _ged)
		}
	}
	if _fac.DLbls != nil {
		_acd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_fac.DLbls, _acd)
	}
	if _fac.GapWidth != nil {
		_cef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_fac.GapWidth, _cef)
	}
	if _fac.GapDepth != nil {
		_dcc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}}
		e.EncodeElement(_fac.GapDepth, _dcc)
	}
	if _fac.Shape != nil {
		_ceed := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0068\u0061\u0070\u0065"}}
		e.EncodeElement(_fac.Shape, _ceed)
	}
	_ddab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _ccc := range _fac.AxId {
		e.EncodeElement(_ccc, _ddab)
	}
	if _fac.ExtLst != nil {
		_bbfd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fac.ExtLst, _bbfd)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

const (
	ST_ShapeUnset        ST_Shape = 0
	ST_ShapeCone         ST_Shape = 1
	ST_ShapeConeToMax    ST_Shape = 2
	ST_ShapeBox          ST_Shape = 3
	ST_ShapeCylinder     ST_Shape = 4
	ST_ShapePyramid      ST_Shape = 5
	ST_ShapePyramidToMax ST_Shape = 6
)

type CT_PivotFmts struct {

	// Pivot Format
	PivotFmt []*CT_PivotFmt
}

func (_dbee ST_ErrValType) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_faba := _b.Attr{}
	_faba.Name = name
	switch _dbee {
	case ST_ErrValTypeUnset:
		_faba.Value = ""
	case ST_ErrValTypeCust:
		_faba.Value = "\u0063\u0075\u0073\u0074"
	case ST_ErrValTypeFixedVal:
		_faba.Value = "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c"
	case ST_ErrValTypePercentage:
		_faba.Value = "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065"
	case ST_ErrValTypeStdDev:
		_faba.Value = "\u0073\u0074\u0064\u0044\u0065\u0076"
	case ST_ErrValTypeStdErr:
		_faba.Value = "\u0073\u0074\u0064\u0045\u0072\u0072"
	}
	return _faba, nil
}

// Validate validates the CT_LblAlgn and its children
func (_bbee *CT_LblAlgn) Validate() error {
	return _bbee.ValidateWithPath("\u0043\u0054\u005f\u004c\u0062\u006c\u0041\u006c\u0067\u006e")
}
func (_ebcdd *CT_StrVal) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _fbfgc := range start.Attr {
		if _fbfgc.Name.Local == "\u0069\u0064\u0078" {
			_afafgg, _bdde := _e.ParseUint(_fbfgc.Value, 10, 32)
			if _bdde != nil {
				return _bdde
			}
			_ebcdd.IdxAttr = uint32(_afafgg)
			continue
		}
	}
_egdee:
	for {
		_gecac, _agega := d.Token()
		if _agega != nil {
			return _agega
		}
		switch _adgdc := _gecac.(type) {
		case _b.StartElement:
			switch _adgdc.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				if _eacfg := d.DecodeElement(&_ebcdd.V, &_adgdc); _eacfg != nil {
					return _eacfg
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0053\u0074\u0072V\u0061\u006c \u0025\u0076", _adgdc.Name)
				if _fdegb := d.Skip(); _fdegb != nil {
					return _fdegb
				}
			}
		case _b.EndElement:
			break _egdee
		case _b.CharData:
		}
	}
	return nil
}

// Validate validates the CT_NumRef and its children
func (_bggcc *CT_NumRef) Validate() error {
	return _bggcc.ValidateWithPath("\u0043T\u005f\u004e\u0075\u006d\u0052\u0065f")
}
func (_fcbf *Chart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fcbf.CT_RelId = *NewCT_RelId()
	for _, _cagcb := range start.Attr {
		if _cagcb.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _cagcb.Name.Local == "\u0069\u0064" || _cagcb.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _cagcb.Name.Local == "\u0069\u0064" {
			_fcbbb := _cagcb.Value
			_fcbf.IdAttr = _fcbbb
			continue
		}
	}
	for {
		_ceadb, _aeffc := d.Token()
		if _aeffc != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0068\u0061\u0072t\u003a\u0020\u0025\u0073", _aeffc)
		}
		if _cegad, _eafac := _ceadb.(_b.EndElement); _eafac && _cegad.Name == start.Name {
			break
		}
	}
	return nil
}

const (
	ST_AxPosUnset ST_AxPos = 0
	ST_AxPosB     ST_AxPos = 1
	ST_AxPosL     ST_AxPos = 2
	ST_AxPosR     ST_AxPos = 3
	ST_AxPosT     ST_AxPos = 4
)

// ValidateWithPath validates the CT_NumRef and its children, prefixing error messages with path
func (_fdefd *CT_NumRef) ValidateWithPath(path string) error {
	if _fdefd.NumCache != nil {
		if _aafa := _fdefd.NumCache.ValidateWithPath(path + "\u002fN\u0075\u006d\u0043\u0061\u0063\u0068e"); _aafa != nil {
			return _aafa
		}
	}
	if _fdefd.ExtLst != nil {
		if _adcg := _fdefd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _adcg != nil {
			return _adcg
		}
	}
	return nil
}

// Validate validates the CT_StrRef and its children
func (_acbf *CT_StrRef) Validate() error {
	return _acbf.ValidateWithPath("\u0043T\u005f\u0053\u0074\u0072\u0052\u0065f")
}

// ValidateWithPath validates the CT_SplitType and its children, prefixing error messages with path
func (_fdaaf *CT_SplitType) ValidateWithPath(path string) error {
	if _dbdd := _fdaaf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dbdd != nil {
		return _dbdd
	}
	return nil
}
func NewCT_DateAx() *CT_DateAx {
	_ecbd := &CT_DateAx{}
	_ecbd.AxId = NewCT_UnsignedInt()
	_ecbd.Scaling = NewCT_Scaling()
	_ecbd.AxPos = NewCT_AxPos()
	_ecbd.CrossAx = NewCT_UnsignedInt()
	return _ecbd
}

// ValidateWithPath validates the CT_PivotSource and its children, prefixing error messages with path
func (_fccf *CT_PivotSource) ValidateWithPath(path string) error {
	if _fffg := _fccf.FmtId.ValidateWithPath(path + "\u002f\u0046\u006d\u0074\u0049\u0064"); _fffg != nil {
		return _fffg
	}
	for _edbd, _baeda := range _fccf.ExtLst {
		if _cabb := _baeda.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _edbd)); _cabb != nil {
			return _cabb
		}
	}
	return nil
}
func (_beafc ST_ErrBarType) ValidateWithPath(path string) error {
	switch _beafc {
	case 0, 1, 2, 3:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_beafc))
	}
	return nil
}
func NewCT_BuiltInUnit() *CT_BuiltInUnit { _eceb := &CT_BuiltInUnit{}; return _eceb }

// ValidateWithPath validates the EG_DLblShared and its children, prefixing error messages with path
func (_ffae *EG_DLblShared) ValidateWithPath(path string) error {
	if _ffae.NumFmt != nil {
		if _cggeb := _ffae.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _cggeb != nil {
			return _cggeb
		}
	}
	if _ffae.SpPr != nil {
		if _aefb := _ffae.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _aefb != nil {
			return _aefb
		}
	}
	if _ffae.TxPr != nil {
		if _gegc := _ffae.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _gegc != nil {
			return _gegc
		}
	}
	if _ffae.DLblPos != nil {
		if _dceae := _ffae.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _dceae != nil {
			return _dceae
		}
	}
	if _ffae.ShowLegendKey != nil {
		if _cfbcb := _ffae.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _cfbcb != nil {
			return _cfbcb
		}
	}
	if _ffae.ShowVal != nil {
		if _gfeed := _ffae.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _gfeed != nil {
			return _gfeed
		}
	}
	if _ffae.ShowCatName != nil {
		if _eaeaf := _ffae.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _eaeaf != nil {
			return _eaeaf
		}
	}
	if _ffae.ShowSerName != nil {
		if _efcgg := _ffae.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _efcgg != nil {
			return _efcgg
		}
	}
	if _ffae.ShowPercent != nil {
		if _geded := _ffae.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _geded != nil {
			return _geded
		}
	}
	if _ffae.ShowBubbleSize != nil {
		if _ebgb := _ffae.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _ebgb != nil {
			return _ebgb
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ErrValType and its children, prefixing error messages with path
func (_fgda *CT_ErrValType) ValidateWithPath(path string) error {
	if _gabb := _fgda.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gabb != nil {
		return _gabb
	}
	return nil
}
func NewCT_SplitType() *CT_SplitType {
	_bfdde := &CT_SplitType{}
	return _bfdde
}
func (_acea *CT_Grouping) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _acea.ValAttr != ST_GroupingUnset {
		_bdb, _fegb := _acea.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _fegb != nil {
			return _fegb
		}
		start.Attr = append(start.Attr, _bdb)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the EG_SerShared and its children
func (_debf *EG_SerShared) Validate() error {
	return _debf.ValidateWithPath("\u0045\u0047\u005fS\u0065\u0072\u0053\u0068\u0061\u0072\u0065\u0064")
}
func (_ccff ST_BubbleScale) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _ccff.ST_BubbleScalePercent != nil {
		e.EncodeToken(_b.CharData(*_ccff.ST_BubbleScalePercent))
	}
	if _ccff.ST_BubbleScaleUInt != nil {
		e.EncodeToken(_b.CharData(_g.Sprintf("\u0025\u0064", *_ccff.ST_BubbleScaleUInt)))
	}
	return e.EncodeToken(_b.EndElement{Name: start.Name})
}

type CT_NumRef struct {

	// Formula
	F string

	// Number Cache
	NumCache *CT_NumData
	ExtLst   *CT_ExtensionList
}

func (_baae ST_Grouping) Validate() error { return _baae.ValidateWithPath("") }
func NewCT_PivotFmt() *CT_PivotFmt {
	_fggd := &CT_PivotFmt{}
	_fggd.Idx = NewCT_UnsignedInt()
	return _fggd
}
func (_eaac *CT_Skip) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", _eaac.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_SerTxChoice() *CT_SerTxChoice { _cbdee := &CT_SerTxChoice{}; return _cbdee }
func (_fdef *CT_HoleSize) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _fdef.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", *_fdef.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_bedg *ST_Crosses) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_bedg = 0
	case "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f":
		*_bedg = 1
	case "\u006d\u0061\u0078":
		*_bedg = 2
	case "\u006d\u0069\u006e":
		*_bedg = 3
	}
	return nil
}

type ST_PageSetupOrientation byte

func (_cgfc ST_ErrValType) Validate() error { return _cgfc.ValidateWithPath("") }
func (_febba *ST_BuiltInUnit) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_efegf, _bdgf := d.Token()
	if _bdgf != nil {
		return _bdgf
	}
	if _fagcg, _efgba := _efegf.(_b.EndElement); _efgba && _fagcg.Name == start.Name {
		*_febba = 1
		return nil
	}
	if _fgcfa, _ebafe := _efegf.(_b.CharData); !_ebafe {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _efegf)
	} else {
		switch string(_fgcfa) {
		case "":
			*_febba = 0
		case "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073":
			*_febba = 1
		case "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s":
			*_febba = 2
		case "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
			*_febba = 3
		case "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
			*_febba = 4
		case "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_febba = 5
		case "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_febba = 6
		case "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_febba = 7
		case "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_febba = 8
		case "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es":
			*_febba = 9
		}
	}
	_efegf, _bdgf = d.Token()
	if _bdgf != nil {
		return _bdgf
	}
	if _badab, _edacg := _efegf.(_b.EndElement); _edacg && _badab.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _efegf)
}

// Validate validates the CT_SerTx and its children
func (_bbefd *CT_SerTx) Validate() error {
	return _bbefd.ValidateWithPath("\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078")
}
func (_bdgca *ST_GapAmount) Validate() error { return _bdgca.ValidateWithPath("") }
func (_egdca *CT_ScatterSer) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_egdca.Idx = NewCT_UnsignedInt()
	_egdca.Order = NewCT_UnsignedInt()
_dgggb:
	for {
		_fcaeb, _fecbe := d.Token()
		if _fecbe != nil {
			return _fecbe
		}
		switch _cgeg := _fcaeb.(type) {
		case _b.StartElement:
			switch _cgeg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _eaeeb := d.DecodeElement(_egdca.Idx, &_cgeg); _eaeeb != nil {
					return _eaeeb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _gbcca := d.DecodeElement(_egdca.Order, &_cgeg); _gbcca != nil {
					return _gbcca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_egdca.Tx = NewCT_SerTx()
				if _aggc := d.DecodeElement(_egdca.Tx, &_cgeg); _aggc != nil {
					return _aggc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_egdca.SpPr = _gfc.NewCT_ShapeProperties()
				if _aefgge := d.DecodeElement(_egdca.SpPr, &_cgeg); _aefgge != nil {
					return _aefgge
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_egdca.Marker = NewCT_Marker()
				if _agcff := d.DecodeElement(_egdca.Marker, &_cgeg); _agcff != nil {
					return _agcff
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_ecfgd := NewCT_DPt()
				if _cegab := d.DecodeElement(_ecfgd, &_cgeg); _cegab != nil {
					return _cegab
				}
				_egdca.DPt = append(_egdca.DPt, _ecfgd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_egdca.DLbls = NewCT_DLbls()
				if _agafg := d.DecodeElement(_egdca.DLbls, &_cgeg); _agafg != nil {
					return _agafg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_dcfed := NewCT_Trendline()
				if _feafg := d.DecodeElement(_dcfed, &_cgeg); _feafg != nil {
					return _feafg
				}
				_egdca.Trendline = append(_egdca.Trendline, _dcfed)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_egcfd := NewCT_ErrBars()
				if _geega := d.DecodeElement(_egcfd, &_cgeg); _geega != nil {
					return _geega
				}
				_egdca.ErrBars = append(_egdca.ErrBars, _egcfd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}:
				_egdca.XVal = NewCT_AxDataSource()
				if _gfgcb := d.DecodeElement(_egdca.XVal, &_cgeg); _gfgcb != nil {
					return _gfgcb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}:
				_egdca.YVal = NewCT_NumDataSource()
				if _bgdb := d.DecodeElement(_egdca.YVal, &_cgeg); _bgdb != nil {
					return _bgdb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}:
				_egdca.Smooth = NewCT_Boolean()
				if _abge := d.DecodeElement(_egdca.Smooth, &_cgeg); _abge != nil {
					return _abge
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_egdca.ExtLst = NewCT_ExtensionList()
				if _fgeb := d.DecodeElement(_egdca.ExtLst, &_cgeg); _fgeb != nil {
					return _fgeb
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053c\u0061\u0074\u0074\u0065\u0072\u0053\u0065\u0072 \u0025\u0076", _cgeg.Name)
				if _fcgae := d.Skip(); _fcgae != nil {
					return _fcgae
				}
			}
		case _b.EndElement:
			break _dgggb
		case _b.CharData:
		}
	}
	return nil
}

const (
	ST_OrientationUnset  ST_Orientation = 0
	ST_OrientationMaxMin ST_Orientation = 1
	ST_OrientationMinMax ST_Orientation = 2
)

// ValidateWithPath validates the CT_View3D and its children, prefixing error messages with path
func (_efffc *CT_View3D) ValidateWithPath(path string) error {
	if _efffc.RotX != nil {
		if _dcgaf := _efffc.RotX.ValidateWithPath(path + "\u002f\u0052\u006ft\u0058"); _dcgaf != nil {
			return _dcgaf
		}
	}
	if _efffc.HPercent != nil {
		if _edbe := _efffc.HPercent.ValidateWithPath(path + "\u002fH\u0050\u0065\u0072\u0063\u0065\u006et"); _edbe != nil {
			return _edbe
		}
	}
	if _efffc.RotY != nil {
		if _gggb := _efffc.RotY.ValidateWithPath(path + "\u002f\u0052\u006ft\u0059"); _gggb != nil {
			return _gggb
		}
	}
	if _efffc.DepthPercent != nil {
		if _fabd := _efffc.DepthPercent.ValidateWithPath(path + "\u002f\u0044\u0065\u0070\u0074\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _fabd != nil {
			return _fabd
		}
	}
	if _efffc.RAngAx != nil {
		if _ffbfa := _efffc.RAngAx.ValidateWithPath(path + "\u002fR\u0041\u006e\u0067\u0041\u0078"); _ffbfa != nil {
			return _ffbfa
		}
	}
	if _efffc.Perspective != nil {
		if _ecbb := _efffc.Perspective.ValidateWithPath(path + "\u002f\u0050\u0065r\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"); _ecbb != nil {
			return _ecbb
		}
	}
	if _efffc.ExtLst != nil {
		if _fdgefbd := _efffc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fdgefbd != nil {
			return _fdgefbd
		}
	}
	return nil
}

type Group_DLbl struct {

	// Layout
	Layout *CT_Layout
	Tx     *CT_Tx

	// Number Format
	NumFmt *CT_NumFmt
	SpPr   *_gfc.CT_ShapeProperties
	TxPr   *_gfc.CT_TextBody

	// Data Label Position
	DLblPos *CT_DLblPos

	// Show Legend Key
	ShowLegendKey *CT_Boolean

	// Show Value
	ShowVal *CT_Boolean

	// Show Category Name
	ShowCatName *CT_Boolean

	// Show Series Name
	ShowSerName *CT_Boolean

	// Show Percent
	ShowPercent *CT_Boolean

	// Show Bubble Size
	ShowBubbleSize *CT_Boolean

	// Separator
	Separator *string
}

func (_fgdgf *CT_StockChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_dbga := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
	for _, _badbd := range _fgdgf.Ser {
		e.EncodeElement(_badbd, _dbga)
	}
	if _fgdgf.DLbls != nil {
		_aebab := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_fgdgf.DLbls, _aebab)
	}
	if _fgdgf.DropLines != nil {
		_gacge := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_fgdgf.DropLines, _gacge)
	}
	if _fgdgf.HiLowLines != nil {
		_gbbcb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0068i\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_fgdgf.HiLowLines, _gbbcb)
	}
	if _fgdgf.UpDownBars != nil {
		_gcfa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0075p\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_fgdgf.UpDownBars, _gcfa)
	}
	_agbag := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _eeefg := range _fgdgf.AxId {
		e.EncodeElement(_eeefg, _agbag)
	}
	if _fgdgf.ExtLst != nil {
		_faebcc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fgdgf.ExtLst, _faebcc)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_BandFmts and its children
func (_bgf *CT_BandFmts) Validate() error {
	return _bgf.ValidateWithPath("C\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074\u0073")
}
func (_gbadg *CT_TickMark) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _gbadg.ValAttr != ST_TickMarkUnset {
		_ggadee, _bfbeb := _gbadg.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _bfbeb != nil {
			return _bfbeb
		}
		start.Attr = append(start.Attr, _ggadee)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_ceebe ST_BarGrouping) Validate() error { return _ceebe.ValidateWithPath("") }
func (_ddfbb *CT_SerAx) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_dffeb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_ddfbb.AxId, _dffeb)
	_abbfg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_ddfbb.Scaling, _abbfg)
	if _ddfbb.Delete != nil {
		_bdbf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_ddfbb.Delete, _bdbf)
	}
	_bfbce := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_ddfbb.AxPos, _bfbce)
	if _ddfbb.MajorGridlines != nil {
		_fffc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_ddfbb.MajorGridlines, _fffc)
	}
	if _ddfbb.MinorGridlines != nil {
		_dadg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_ddfbb.MinorGridlines, _dadg)
	}
	if _ddfbb.Title != nil {
		_acdb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_ddfbb.Title, _acdb)
	}
	if _ddfbb.NumFmt != nil {
		_fbddg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_ddfbb.NumFmt, _fbddg)
	}
	if _ddfbb.MajorTickMark != nil {
		_afdg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_ddfbb.MajorTickMark, _afdg)
	}
	if _ddfbb.MinorTickMark != nil {
		_bbage := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_ddfbb.MinorTickMark, _bbage)
	}
	if _ddfbb.TickLblPos != nil {
		_adgg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_ddfbb.TickLblPos, _adgg)
	}
	if _ddfbb.SpPr != nil {
		_gfac := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ddfbb.SpPr, _gfac)
	}
	if _ddfbb.TxPr != nil {
		_fbac := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_ddfbb.TxPr, _fbac)
	}
	_ccdd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_ddfbb.CrossAx, _ccdd)
	if _ddfbb.AxSharedChoice != nil {
		_ddfbb.AxSharedChoice.MarshalXML(e, _b.StartElement{})
	}
	if _ddfbb.TickLblSkip != nil {
		_bebfc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_ddfbb.TickLblSkip, _bebfc)
	}
	if _ddfbb.TickMarkSkip != nil {
		_fdcga := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004d\u0061\u0072k\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_ddfbb.TickMarkSkip, _fdcga)
	}
	if _ddfbb.ExtLst != nil {
		_cfag := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ddfbb.ExtLst, _cfag)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

const ST_HoleSizePercentPattern = "\u0030\u002a\u0028\u005b\u0031\u002d\u0039\u005d\u007c\u0028\u005b1\u002d\u0038\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c9\u0030\u0029\u0025"

func NewCT_ErrBarType() *CT_ErrBarType { _acage := &CT_ErrBarType{}; return _acage }
func (_cbfgg ST_HPercent) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _cbfgg.ST_HPercentWithSymbol != nil {
		e.EncodeToken(_b.CharData(*_cbfgg.ST_HPercentWithSymbol))
	}
	if _cbfgg.ST_HPercentUShort != nil {
		e.EncodeToken(_b.CharData(_g.Sprintf("\u0025\u0064", *_cbfgg.ST_HPercentUShort)))
	}
	return e.EncodeToken(_b.EndElement{Name: start.Name})
}
func (_babfe *ST_CrossBetween) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_gedcac, _gebae := d.Token()
	if _gebae != nil {
		return _gebae
	}
	if _adgfbe, _cbbfb := _gedcac.(_b.EndElement); _cbbfb && _adgfbe.Name == start.Name {
		*_babfe = 1
		return nil
	}
	if _egaeb, _cggee := _gedcac.(_b.CharData); !_cggee {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gedcac)
	} else {
		switch string(_egaeb) {
		case "":
			*_babfe = 0
		case "\u0062e\u0074\u0077\u0065\u0065\u006e":
			*_babfe = 1
		case "\u006d\u0069\u0064\u0043\u0061\u0074":
			*_babfe = 2
		}
	}
	_gedcac, _gebae = d.Token()
	if _gebae != nil {
		return _gebae
	}
	if _cadfe, _gbdb := _gedcac.(_b.EndElement); _gbdb && _cadfe.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gedcac)
}
func NewCT_Trendline() *CT_Trendline {
	_bgabd := &CT_Trendline{}
	_bgabd.TrendlineType = NewCT_TrendlineType()
	return _bgabd
}
func NewCT_PictureStackUnit() *CT_PictureStackUnit {
	_ffee := &CT_PictureStackUnit{}
	_ffee.ValAttr = 0 + 1
	return _ffee
}

// ValidateWithPath validates the CT_RadarChart and its children, prefixing error messages with path
func (_bfaffb *CT_RadarChart) ValidateWithPath(path string) error {
	if _aggdg := _bfaffb.RadarStyle.ValidateWithPath(path + "/\u0052\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"); _aggdg != nil {
		return _aggdg
	}
	if _bfaffb.VaryColors != nil {
		if _baddc := _bfaffb.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _baddc != nil {
			return _baddc
		}
	}
	for _cadcf, _bagf := range _bfaffb.Ser {
		if _bcee := _bagf.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _cadcf)); _bcee != nil {
			return _bcee
		}
	}
	if _bfaffb.DLbls != nil {
		if _cgbd := _bfaffb.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _cgbd != nil {
			return _cgbd
		}
	}
	for _eafaa, _efdf := range _bfaffb.AxId {
		if _cadgaf := _efdf.ValidateWithPath(_g.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _eafaa)); _cadgaf != nil {
			return _cadgaf
		}
	}
	if _bfaffb.ExtLst != nil {
		if _abagg := _bfaffb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _abagg != nil {
			return _abagg
		}
	}
	return nil
}
func (_abfcb *CT_Thickness) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", _abfcb.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_BuiltInUnit and its children
func (_feg *CT_BuiltInUnit) Validate() error {
	return _feg.ValidateWithPath("\u0043\u0054\u005f\u0042\u0075\u0069\u006c\u0074\u0049n\u0055\u006e\u0069\u0074")
}

// Validate validates the Group_DLbls and its children
func (_febdd *Group_DLbls) Validate() error {
	return _febdd.ValidateWithPath("G\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c\u0073")
}

// ValidateWithPath validates the CT_SerTxChoice and its children, prefixing error messages with path
func (_abbg *CT_SerTxChoice) ValidateWithPath(path string) error {
	if _abbg.StrRef != nil {
		if _bcbca := _abbg.StrRef.ValidateWithPath(path + "\u002fS\u0074\u0072\u0052\u0065\u0066"); _bcbca != nil {
			return _bcbca
		}
	}
	return nil
}
func (_ffgaaf ST_LblAlgn) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_accf := _b.Attr{}
	_accf.Name = name
	switch _ffgaaf {
	case ST_LblAlgnUnset:
		_accf.Value = ""
	case ST_LblAlgnCtr:
		_accf.Value = "\u0063\u0074\u0072"
	case ST_LblAlgnL:
		_accf.Value = "\u006c"
	case ST_LblAlgnR:
		_accf.Value = "\u0072"
	}
	return _accf, nil
}
func NewCT_PlotAreaChoice1() *CT_PlotAreaChoice1 {
	_abcef := &CT_PlotAreaChoice1{}
	return _abcef
}
func (_ebbdg ST_ErrValType) String() string {
	switch _ebbdg {
	case 0:
		return ""
	case 1:
		return "\u0063\u0075\u0073\u0074"
	case 2:
		return "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c"
	case 3:
		return "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065"
	case 4:
		return "\u0073\u0074\u0064\u0044\u0065\u0076"
	case 5:
		return "\u0073\u0074\u0064\u0045\u0072\u0072"
	}
	return ""
}

type CT_ExtensionList struct {

	// Extension
	Ext []*CT_Extension
}

// Validate validates the CT_UpDownBars and its children
func (_fgfee *CT_UpDownBars) Validate() error {
	return _fgfee.ValidateWithPath("\u0043\u0054\u005f\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073")
}

// ValidateWithPath validates the CT_Tx and its children, prefixing error messages with path
func (_gdfdbc *CT_Tx) ValidateWithPath(path string) error {
	if _dedec := _gdfdbc.TxChoice.ValidateWithPath(path + "\u002fT\u0078\u0043\u0068\u006f\u0069\u0063e"); _dedec != nil {
		return _dedec
	}
	return nil
}
func (_cffe *CT_BandFmt) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_cffe.Idx = NewCT_UnsignedInt()
_fcga:
	for {
		_fge, _cba := d.Token()
		if _cba != nil {
			return _cba
		}
		switch _cffeb := _fge.(type) {
		case _b.StartElement:
			switch _cffeb.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _cce := d.DecodeElement(_cffe.Idx, &_cffeb); _cce != nil {
					return _cce
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cffe.SpPr = _gfc.NewCT_ShapeProperties()
				if _cee := d.DecodeElement(_cffe.SpPr, &_cffeb); _cee != nil {
					return _cee
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fB\u0061\u006e\u0064\u0046\u006d\u0074\u0020\u0025\u0076", _cffeb.Name)
				if _dgaf := d.Skip(); _dgaf != nil {
					return _dgaf
				}
			}
		case _b.EndElement:
			break _fcga
		case _b.CharData:
		}
	}
	return nil
}

type CT_SerAx struct {

	// Axis ID
	AxId *CT_UnsignedInt

	// Scaling
	Scaling *CT_Scaling

	// Delete
	Delete *CT_Boolean

	// Axis Position
	AxPos *CT_AxPos

	// Major Gridlines
	MajorGridlines *CT_ChartLines

	// Minor Gridlines
	MinorGridlines *CT_ChartLines

	// Title
	Title *CT_Title

	// Number Format
	NumFmt *CT_NumFmt

	// Major Tick Mark
	MajorTickMark *CT_TickMark

	// Minor Tick Mark
	MinorTickMark *CT_TickMark

	// Tick Label Position
	TickLblPos *CT_TickLblPos
	SpPr       *_gfc.CT_ShapeProperties
	TxPr       *_gfc.CT_TextBody

	// Crossing Axis ID
	CrossAx        *CT_UnsignedInt
	AxSharedChoice *EG_AxSharedChoice

	// Tick Label Skip
	TickLblSkip  *CT_Skip
	TickMarkSkip *CT_Skip

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_fcba ST_DispBlanksAs) Validate() error { return _fcba.ValidateWithPath("") }

// Validate validates the CT_SurfaceChart and its children
func (_eagff *CT_SurfaceChart) Validate() error {
	return _eagff.ValidateWithPath("\u0043T\u005fS\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074")
}

// Validate validates the CT_Scaling and its children
func (_cfdb *CT_Scaling) Validate() error {
	return _cfdb.ValidateWithPath("\u0043\u0054\u005f\u0053\u0063\u0061\u006c\u0069\u006e\u0067")
}
func (_gaaaa ST_LayoutTarget) Validate() error { return _gaaaa.ValidateWithPath("") }

// ValidateWithPath validates the CT_TimeUnit and its children, prefixing error messages with path
func (_ddac *CT_TimeUnit) ValidateWithPath(path string) error {
	if _bfeag := _ddac.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bfeag != nil {
		return _bfeag
	}
	return nil
}

// ValidateWithPath validates the CT_TextLanguageID and its children, prefixing error messages with path
func (_aagd *CT_TextLanguageID) ValidateWithPath(path string) error { return nil }

type CT_Thickness struct{ ValAttr ST_Thickness }

func NewGroup_DLbl() *Group_DLbl { _adbee := &Group_DLbl{}; return _adbee }

type CT_PrintSettings struct {

	// Header and Footer
	HeaderFooter *CT_HeaderFooter

	// Page Margins
	PageMargins *CT_PageMargins

	// Page Setup
	PageSetup *CT_PageSetup

	// Legacy Drawing for Headers and Footers
	LegacyDrawingHF *CT_RelId
}

func (_gbbb *CT_Title) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_bafg:
	for {
		_abdaf, _dbddc := d.Token()
		if _dbddc != nil {
			return _dbddc
		}
		switch _gddfd := _abdaf.(type) {
		case _b.StartElement:
			switch _gddfd.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_gbbb.Tx = NewCT_Tx()
				if _cdebe := d.DecodeElement(_gbbb.Tx, &_gddfd); _cdebe != nil {
					return _cdebe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_gbbb.Layout = NewCT_Layout()
				if _cgbdc := d.DecodeElement(_gbbb.Layout, &_gddfd); _cgbdc != nil {
					return _cgbdc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}:
				_gbbb.Overlay = NewCT_Boolean()
				if _dbea := d.DecodeElement(_gbbb.Overlay, &_gddfd); _dbea != nil {
					return _dbea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gbbb.SpPr = _gfc.NewCT_ShapeProperties()
				if _baca := d.DecodeElement(_gbbb.SpPr, &_gddfd); _baca != nil {
					return _baca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_gbbb.TxPr = _gfc.NewCT_TextBody()
				if _fdbc := d.DecodeElement(_gbbb.TxPr, &_gddfd); _fdbc != nil {
					return _fdbc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gbbb.ExtLst = NewCT_ExtensionList()
				if _efaf := d.DecodeElement(_gbbb.ExtLst, &_gddfd); _efaf != nil {
					return _efaf
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0069\u0074\u006c\u0065\u0020\u0025\u0076", _gddfd.Name)
				if _ggebc := d.Skip(); _ggebc != nil {
					return _ggebc
				}
			}
		case _b.EndElement:
			break _bafg
		case _b.CharData:
		}
	}
	return nil
}

type CT_DLblsChoice struct {
	Delete *CT_Boolean

	// Number Format
	NumFmt *CT_NumFmt
	SpPr   *_gfc.CT_ShapeProperties
	TxPr   *_gfc.CT_TextBody

	// Data Label Position
	DLblPos *CT_DLblPos

	// Show Legend Key
	ShowLegendKey *CT_Boolean

	// Show Value
	ShowVal *CT_Boolean

	// Show Category Name
	ShowCatName *CT_Boolean

	// Show Series Name
	ShowSerName *CT_Boolean

	// Show Percent
	ShowPercent *CT_Boolean

	// Show Bubble Size
	ShowBubbleSize *CT_Boolean

	// Separator
	Separator *string

	// Show Leader Lines
	ShowLeaderLines *CT_Boolean

	// Leader Lines
	LeaderLines *CT_ChartLines
}

// Validate validates the EG_PieChartShared and its children
func (_fabc *EG_PieChartShared) Validate() error {
	return _fabc.ValidateWithPath("\u0045\u0047\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064")
}

const (
	ST_BarDirUnset ST_BarDir = 0
	ST_BarDirBar   ST_BarDir = 1
	ST_BarDirCol   ST_BarDir = 2
)

func (_eda *CT_Area3DChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_be:
	for {
		_ege, _ge := d.Token()
		if _ge != nil {
			return _ge
		}
		switch _dd := _ege.(type) {
		case _b.StartElement:
			switch _dd.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_eda.Grouping = NewCT_Grouping()
				if _af := d.DecodeElement(_eda.Grouping, &_dd); _af != nil {
					return _af
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_eda.VaryColors = NewCT_Boolean()
				if _bg := d.DecodeElement(_eda.VaryColors, &_dd); _bg != nil {
					return _bg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_gd := NewCT_AreaSer()
				if _cff := d.DecodeElement(_gd, &_dd); _cff != nil {
					return _cff
				}
				_eda.Ser = append(_eda.Ser, _gd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_eda.DLbls = NewCT_DLbls()
				if _fda := d.DecodeElement(_eda.DLbls, &_dd); _fda != nil {
					return _fda
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_eda.DropLines = NewCT_ChartLines()
				if _fdc := d.DecodeElement(_eda.DropLines, &_dd); _fdc != nil {
					return _fdc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}:
				_eda.GapDepth = NewCT_GapAmount()
				if _bgg := d.DecodeElement(_eda.GapDepth, &_dd); _bgg != nil {
					return _bgg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_gg := NewCT_UnsignedInt()
				if _fb := d.DecodeElement(_gg, &_dd); _fb != nil {
					return _fb
				}
				_eda.AxId = append(_eda.AxId, _gg)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_eda.ExtLst = NewCT_ExtensionList()
				if _dda := d.DecodeElement(_eda.ExtLst, &_dd); _dda != nil {
					return _dda
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0033\u0044\u0043h\u0061r\u0074\u0020\u0025\u0076", _dd.Name)
				if _aef := d.Skip(); _aef != nil {
					return _aef
				}
			}
		case _b.EndElement:
			break _be
		case _b.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Period and its children, prefixing error messages with path
func (_cgecc *CT_Period) ValidateWithPath(path string) error {
	if _cgecc.ValAttr != nil {
		if *_cgecc.ValAttr < 2 {
			return _g.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_cgecc.ValAttr)
		}
	}
	return nil
}

type ST_TickLblPos byte

// ValidateWithPath validates the UserShapes and its children, prefixing error messages with path
func (_acba *UserShapes) ValidateWithPath(path string) error {
	if _afgfb := _acba.CT_Drawing.ValidateWithPath(path); _afgfb != nil {
		return _afgfb
	}
	return nil
}
func (_bfgea ST_BarGrouping) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_bfgea.String(), start)
}

// ValidateWithPath validates the CT_SerAx and its children, prefixing error messages with path
func (_cefag *CT_SerAx) ValidateWithPath(path string) error {
	if _bbba := _cefag.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _bbba != nil {
		return _bbba
	}
	if _agdea := _cefag.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _agdea != nil {
		return _agdea
	}
	if _cefag.Delete != nil {
		if _faabc := _cefag.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _faabc != nil {
			return _faabc
		}
	}
	if _bdfd := _cefag.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _bdfd != nil {
		return _bdfd
	}
	if _cefag.MajorGridlines != nil {
		if _bdcg := _cefag.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _bdcg != nil {
			return _bdcg
		}
	}
	if _cefag.MinorGridlines != nil {
		if _cacg := _cefag.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _cacg != nil {
			return _cacg
		}
	}
	if _cefag.Title != nil {
		if _agfg := _cefag.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _agfg != nil {
			return _agfg
		}
	}
	if _cefag.NumFmt != nil {
		if _deac := _cefag.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _deac != nil {
			return _deac
		}
	}
	if _cefag.MajorTickMark != nil {
		if _geeda := _cefag.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _geeda != nil {
			return _geeda
		}
	}
	if _cefag.MinorTickMark != nil {
		if _gafdd := _cefag.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _gafdd != nil {
			return _gafdd
		}
	}
	if _cefag.TickLblPos != nil {
		if _afcbf := _cefag.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _afcbf != nil {
			return _afcbf
		}
	}
	if _cefag.SpPr != nil {
		if _efae := _cefag.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _efae != nil {
			return _efae
		}
	}
	if _cefag.TxPr != nil {
		if _agdb := _cefag.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _agdb != nil {
			return _agdb
		}
	}
	if _eeeb := _cefag.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _eeeb != nil {
		return _eeeb
	}
	if _cefag.AxSharedChoice != nil {
		if _fbcgf := _cefag.AxSharedChoice.ValidateWithPath(path + "\u002fA\u0078S\u0068\u0061\u0072\u0065\u0064\u0043\u0068\u006f\u0069\u0063\u0065"); _fbcgf != nil {
			return _fbcgf
		}
	}
	if _cefag.TickLblSkip != nil {
		if _abgdg := _cefag.TickLblSkip.ValidateWithPath(path + "\u002f\u0054\u0069c\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"); _abgdg != nil {
			return _abgdg
		}
	}
	if _cefag.TickMarkSkip != nil {
		if _fbeeb := _cefag.TickMarkSkip.ValidateWithPath(path + "\u002f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"); _fbeeb != nil {
			return _fbeeb
		}
	}
	if _cefag.ExtLst != nil {
		if _badf := _cefag.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _badf != nil {
			return _badf
		}
	}
	return nil
}
func NewCT_NumVal() *CT_NumVal                   { _dddab := &CT_NumVal{}; return _dddab }
func NewCT_DispUnitsChoice() *CT_DispUnitsChoice { _fbegd := &CT_DispUnitsChoice{}; return _fbegd }
func (_ceafa *ST_SplitType) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fggc, _agbef := d.Token()
	if _agbef != nil {
		return _agbef
	}
	if _bcfd, _edadg := _fggc.(_b.EndElement); _edadg && _bcfd.Name == start.Name {
		*_ceafa = 1
		return nil
	}
	if _fgdag, _cceaa := _fggc.(_b.CharData); !_cceaa {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fggc)
	} else {
		switch string(_fgdag) {
		case "":
			*_ceafa = 0
		case "\u0061\u0075\u0074\u006f":
			*_ceafa = 1
		case "\u0063\u0075\u0073\u0074":
			*_ceafa = 2
		case "\u0070e\u0072\u0063\u0065\u006e\u0074":
			*_ceafa = 3
		case "\u0070\u006f\u0073":
			*_ceafa = 4
		case "\u0076\u0061\u006c":
			*_ceafa = 5
		}
	}
	_fggc, _agbef = d.Token()
	if _agbef != nil {
		return _agbef
	}
	if _bddgf, _bgbda := _fggc.(_b.EndElement); _bgbda && _bddgf.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fggc)
}
func (_bebab *CT_Title) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _bebab.Tx != nil {
		_bacdf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_bebab.Tx, _bacdf)
	}
	if _bebab.Layout != nil {
		_cgbb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_bebab.Layout, _cgbb)
	}
	if _bebab.Overlay != nil {
		_ffdf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0076\u0065\u0072\u006c\u0061y"}}
		e.EncodeElement(_bebab.Overlay, _ffdf)
	}
	if _bebab.SpPr != nil {
		_cadde := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bebab.SpPr, _cadde)
	}
	if _bebab.TxPr != nil {
		_abbbc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_bebab.TxPr, _abbbc)
	}
	if _bebab.ExtLst != nil {
		_egaga := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bebab.ExtLst, _egaga)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_Double struct {

	// Floating Point Value
	ValAttr float64
}
type CT_MultiLvlStrRef struct {

	// Formula
	F string

	// Multi Level String Cache
	MultiLvlStrCache *CT_MultiLvlStrData
	ExtLst           *CT_ExtensionList
}

// Validate validates the CT_ValAx and its children
func (_dabeb *CT_ValAx) Validate() error {
	return _dabeb.ValidateWithPath("\u0043\u0054\u005f\u0056\u0061\u006c\u0041\u0078")
}

type CT_View3D struct {

	// X Rotation
	RotX *CT_RotX

	// Height Percent
	HPercent *CT_HPercent

	// Y Rotation
	RotY *CT_RotY

	// Depth Percent
	DepthPercent *CT_DepthPercent

	// Right Angle Axes
	RAngAx *CT_Boolean

	// Perspective
	Perspective *CT_Perspective

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_dcadf ST_BubbleScale) String() string {
	if _dcadf.ST_BubbleScalePercent != nil {
		return _g.Sprintf("\u0025\u0076", *_dcadf.ST_BubbleScalePercent)
	}
	if _dcadf.ST_BubbleScaleUInt != nil {
		return _g.Sprintf("\u0025\u0076", *_dcadf.ST_BubbleScaleUInt)
	}
	return ""
}
func (_eecg *CT_PictureFormat) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_fddge, _efeec := _eecg.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
	if _efeec != nil {
		return _efeec
	}
	start.Attr = append(start.Attr, _fddge)
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type EG_PieChartShared struct {
	VaryColors *CT_Boolean

	// Pie Chart Series
	Ser []*CT_PieSer

	// Data Labels
	DLbls *CT_DLbls
}

func (_edgfd ST_GapAmount) String() string {
	if _edgfd.ST_GapAmountPercent != nil {
		return _g.Sprintf("\u0025\u0076", *_edgfd.ST_GapAmountPercent)
	}
	if _edgfd.ST_GapAmountUShort != nil {
		return _g.Sprintf("\u0025\u0076", *_edgfd.ST_GapAmountUShort)
	}
	return ""
}
func NewCT_FirstSliceAng() *CT_FirstSliceAng { _ecfb := &CT_FirstSliceAng{}; return _ecfb }
func (_aadcd ST_BarGrouping) String() string {
	switch _aadcd {
	case 0:
		return ""
	case 1:
		return "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case 2:
		return "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d"
	case 3:
		return "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case 4:
		return "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return ""
}

// Validate validates the CT_AreaChart and its children
func (_edb *CT_AreaChart) Validate() error {
	return _edb.ValidateWithPath("\u0043\u0054\u005fA\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074")
}

// ValidateWithPath validates the CT_Double and its children, prefixing error messages with path
func (_dbbb *CT_Double) ValidateWithPath(path string) error { return nil }

type CT_TrendlineLbl struct {

	// Layout
	Layout *CT_Layout
	Tx     *CT_Tx

	// Number Format
	NumFmt *CT_NumFmt
	SpPr   *_gfc.CT_ShapeProperties
	TxPr   *_gfc.CT_TextBody

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_accd ST_Grouping) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_accd.String(), start)
}
func NewCT_Lvl() *CT_Lvl { _bbad := &CT_Lvl{}; return _bbad }
func NewCT_LegendEntryChoice() *CT_LegendEntryChoice {
	_ceffe := &CT_LegendEntryChoice{}
	return _ceffe
}
func (_efbe *CT_LogBase) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", _efbe.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_aeadcb ST_TickMark) String() string {
	switch _aeadcb {
	case 0:
		return ""
	case 1:
		return "\u0063\u0072\u006fs\u0073"
	case 2:
		return "\u0069\u006e"
	case 3:
		return "\u006e\u006f\u006e\u0065"
	case 4:
		return "\u006f\u0075\u0074"
	}
	return ""
}
func (_ecffe *CT_UnsignedInt) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", _ecffe.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_bga *CT_CrossBetween) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_bga.ValAttr = ST_CrossBetween(1)
	for _, _efgc := range start.Attr {
		if _efgc.Name.Local == "\u0076\u0061\u006c" {
			_bga.ValAttr.UnmarshalXMLAttr(_efgc)
			continue
		}
	}
	for {
		_fddb, _adef := d.Token()
		if _adef != nil {
			return _g.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0042e\u0074\u0077\u0065e\u006e:\u0020\u0025\u0073", _adef)
		}
		if _dfadd, _fbdb := _fddb.(_b.EndElement); _fbdb && _dfadd.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_Scaling() *CT_Scaling           { _fcfc := &CT_Scaling{}; return _fcfc }
func (_dcgbc ST_TimeUnit) Validate() error { return _dcgbc.ValidateWithPath("") }
func (_ebbcac ST_BarDir) String() string {
	switch _ebbcac {
	case 0:
		return ""
	case 1:
		return "\u0062\u0061\u0072"
	case 2:
		return "\u0063\u006f\u006c"
	}
	return ""
}
func (_feafce *ST_DLblPos) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_feafce = 0
	case "\u0062e\u0073\u0074\u0046\u0069\u0074":
		*_feafce = 1
	case "\u0062":
		*_feafce = 2
	case "\u0063\u0074\u0072":
		*_feafce = 3
	case "\u0069\u006e\u0042\u0061\u0073\u0065":
		*_feafce = 4
	case "\u0069\u006e\u0045n\u0064":
		*_feafce = 5
	case "\u006c":
		*_feafce = 6
	case "\u006f\u0075\u0074\u0045\u006e\u0064":
		*_feafce = 7
	case "\u0072":
		*_feafce = 8
	case "\u0074":
		*_feafce = 9
	}
	return nil
}
func (_afcdc *CT_StrData) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_ddbea:
	for {
		_efcab, _egdff := d.Token()
		if _egdff != nil {
			return _egdff
		}
		switch _aecde := _efcab.(type) {
		case _b.StartElement:
			switch _aecde.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}:
				_afcdc.PtCount = NewCT_UnsignedInt()
				if _faabg := d.DecodeElement(_afcdc.PtCount, &_aecde); _faabg != nil {
					return _faabg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}:
				_geca := NewCT_StrVal()
				if _cege := d.DecodeElement(_geca, &_aecde); _cege != nil {
					return _cege
				}
				_afcdc.Pt = append(_afcdc.Pt, _geca)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_afcdc.ExtLst = NewCT_ExtensionList()
				if _dacac := d.DecodeElement(_afcdc.ExtLst, &_aecde); _dacac != nil {
					return _dacac
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fS\u0074\u0072\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _aecde.Name)
				if _fdcf := d.Skip(); _fdcf != nil {
					return _fdcf
				}
			}
		case _b.EndElement:
			break _ddbea
		case _b.CharData:
		}
	}
	return nil
}

// Validate validates the CT_ExtensionList and its children
func (_dddbe *CT_ExtensionList) Validate() error {
	return _dddbe.ValidateWithPath("\u0043\u0054_\u0045\u0078\u0074e\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074")
}
func (_cbad *Group_DLbl) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_dabab:
	for {
		_feda, _ccdf := d.Token()
		if _ccdf != nil {
			return _ccdf
		}
		switch _agffe := _feda.(type) {
		case _b.StartElement:
			switch _agffe.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_cbad.Layout = NewCT_Layout()
				if _beggec := d.DecodeElement(_cbad.Layout, &_agffe); _beggec != nil {
					return _beggec
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_cbad.Tx = NewCT_Tx()
				if _agfef := d.DecodeElement(_cbad.Tx, &_agffe); _agfef != nil {
					return _agfef
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_cbad.NumFmt = NewCT_NumFmt()
				if _cbefa := d.DecodeElement(_cbad.NumFmt, &_agffe); _cbefa != nil {
					return _cbefa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cbad.SpPr = _gfc.NewCT_ShapeProperties()
				if _adfec := d.DecodeElement(_cbad.SpPr, &_agffe); _adfec != nil {
					return _adfec
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_cbad.TxPr = _gfc.NewCT_TextBody()
				if _dfcdec := d.DecodeElement(_cbad.TxPr, &_agffe); _dfcdec != nil {
					return _dfcdec
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_cbad.DLblPos = NewCT_DLblPos()
				if _bgfed := d.DecodeElement(_cbad.DLblPos, &_agffe); _bgfed != nil {
					return _bgfed
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_cbad.ShowLegendKey = NewCT_Boolean()
				if _fdeda := d.DecodeElement(_cbad.ShowLegendKey, &_agffe); _fdeda != nil {
					return _fdeda
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_cbad.ShowVal = NewCT_Boolean()
				if _gceef := d.DecodeElement(_cbad.ShowVal, &_agffe); _gceef != nil {
					return _gceef
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_cbad.ShowCatName = NewCT_Boolean()
				if _bcabdec := d.DecodeElement(_cbad.ShowCatName, &_agffe); _bcabdec != nil {
					return _bcabdec
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_cbad.ShowSerName = NewCT_Boolean()
				if _bbbfg := d.DecodeElement(_cbad.ShowSerName, &_agffe); _bbbfg != nil {
					return _bbbfg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_cbad.ShowPercent = NewCT_Boolean()
				if _dffae := d.DecodeElement(_cbad.ShowPercent, &_agffe); _dffae != nil {
					return _dffae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_cbad.ShowBubbleSize = NewCT_Boolean()
				if _edgcg := d.DecodeElement(_cbad.ShowBubbleSize, &_agffe); _edgcg != nil {
					return _edgcg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_cbad.Separator = new(string)
				if _cbfee := d.DecodeElement(_cbad.Separator, &_agffe); _cbfee != nil {
					return _cbfee
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0047\u0072\u006fu\u0070\u005f\u0044\u004c\u0062\u006c\u0020\u0025\u0076", _agffe.Name)
				if _dgcdd := d.Skip(); _dgcdd != nil {
					return _dgcdd
				}
			}
		case _b.EndElement:
			break _dabab
		case _b.CharData:
		}
	}
	return nil
}

const (
	ST_GroupingUnset          ST_Grouping = 0
	ST_GroupingPercentStacked ST_Grouping = 1
	ST_GroupingStandard       ST_Grouping = 2
	ST_GroupingStacked        ST_Grouping = 3
)

func (_degae ST_SplitType) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_fgbeb := _b.Attr{}
	_fgbeb.Name = name
	switch _degae {
	case ST_SplitTypeUnset:
		_fgbeb.Value = ""
	case ST_SplitTypeAuto:
		_fgbeb.Value = "\u0061\u0075\u0074\u006f"
	case ST_SplitTypeCust:
		_fgbeb.Value = "\u0063\u0075\u0073\u0074"
	case ST_SplitTypePercent:
		_fgbeb.Value = "\u0070e\u0072\u0063\u0065\u006e\u0074"
	case ST_SplitTypePos:
		_fgbeb.Value = "\u0070\u006f\u0073"
	case ST_SplitTypeVal:
		_fgbeb.Value = "\u0076\u0061\u006c"
	}
	return _fgbeb, nil
}
func NewCT_Grouping() *CT_Grouping {
	_gffbc := &CT_Grouping{}
	return _gffbc
}

// Validate validates the CT_LineSer and its children
func (_fgdd *CT_LineSer) Validate() error {
	return _fgdd.ValidateWithPath("\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0053\u0065\u0072")
}
func NewCT_ErrValType() *CT_ErrValType { _adcfe := &CT_ErrValType{}; return _adcfe }
func (_cadfd ST_AxPos) ValidateWithPath(path string) error {
	switch _cadfd {
	case 0, 1, 2, 3, 4:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cadfd))
	}
	return nil
}

type CT_NumData struct {

	// Format Code
	FormatCode *string

	// Point Count
	PtCount *CT_UnsignedInt

	// Numeric Point
	Pt     []*CT_NumVal
	ExtLst *CT_ExtensionList
}

func NewCT_LayoutTarget() *CT_LayoutTarget { _gfdg := &CT_LayoutTarget{}; return _gfdg }

type CT_SurfaceChart struct {

	// Wireframe
	Wireframe *CT_Boolean

	// Surface Chart Series
	Ser []*CT_SurfaceSer

	// Band Formats
	BandFmts *CT_BandFmts

	// Axis ID
	AxId []*CT_UnsignedInt

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_ddff *CT_DLblsChoice) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dgedd := start
	switch start.Name {
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
		_ddff.Delete = NewCT_Boolean()
		if _aggd := d.DecodeElement(_ddff.Delete, &_dgedd); _aggd != nil {
			return _aggd
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
		_ddff.NumFmt = NewCT_NumFmt()
		if _fggb := d.DecodeElement(_ddff.NumFmt, &_dgedd); _fggb != nil {
			return _fggb
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
		_ddff.SpPr = _gfc.NewCT_ShapeProperties()
		if _gaca := d.DecodeElement(_ddff.SpPr, &_dgedd); _gaca != nil {
			return _gaca
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
		_ddff.TxPr = _gfc.NewCT_TextBody()
		if _fcbg := d.DecodeElement(_ddff.TxPr, &_dgedd); _fcbg != nil {
			return _fcbg
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
		_ddff.DLblPos = NewCT_DLblPos()
		if _ccdee := d.DecodeElement(_ddff.DLblPos, &_dgedd); _ccdee != nil {
			return _ccdee
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
		_ddff.ShowLegendKey = NewCT_Boolean()
		if _afgb := d.DecodeElement(_ddff.ShowLegendKey, &_dgedd); _afgb != nil {
			return _afgb
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
		_ddff.ShowVal = NewCT_Boolean()
		if _faff := d.DecodeElement(_ddff.ShowVal, &_dgedd); _faff != nil {
			return _faff
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
		_ddff.ShowCatName = NewCT_Boolean()
		if _gece := d.DecodeElement(_ddff.ShowCatName, &_dgedd); _gece != nil {
			return _gece
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
		_ddff.ShowSerName = NewCT_Boolean()
		if _bfea := d.DecodeElement(_ddff.ShowSerName, &_dgedd); _bfea != nil {
			return _bfea
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
		_ddff.ShowPercent = NewCT_Boolean()
		if _beef := d.DecodeElement(_ddff.ShowPercent, &_dgedd); _beef != nil {
			return _beef
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
		_ddff.ShowBubbleSize = NewCT_Boolean()
		if _baef := d.DecodeElement(_ddff.ShowBubbleSize, &_dgedd); _baef != nil {
			return _baef
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
		_ddff.Separator = new(string)
		if _ccca := d.DecodeElement(_ddff.Separator, &_dgedd); _ccca != nil {
			return _ccca
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
		_ddff.ShowLeaderLines = NewCT_Boolean()
		if _ebae := d.DecodeElement(_ddff.ShowLeaderLines, &_dgedd); _ebae != nil {
			return _ebae
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
		_ddff.LeaderLines = NewCT_ChartLines()
		if _fcege := d.DecodeElement(_ddff.LeaderLines, &_dgedd); _fcege != nil {
			return _fcege
		}
	default:
		_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073\u0043\u0068o\u0069c\u0065\u0020\u0025\u0076", _dgedd.Name)
		if _afda := d.Skip(); _afda != nil {
			return _afda
		}
	}
	return nil
}
func (_eegd *CT_BubbleSer) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_cdcb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_eegd.Idx, _cdcb)
	_bbg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_eegd.Order, _bbg)
	if _eegd.Tx != nil {
		_bdgd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_eegd.Tx, _bdgd)
	}
	if _eegd.SpPr != nil {
		_cbbe := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_eegd.SpPr, _cbbe)
	}
	if _eegd.InvertIfNegative != nil {
		_dcbe := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0069n\u0076\u0065\u0072\u0074\u0049f\u004e\u0065g\u0061\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_eegd.InvertIfNegative, _dcbe)
	}
	if _eegd.DPt != nil {
		_ega := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _cgdc := range _eegd.DPt {
			e.EncodeElement(_cgdc, _ega)
		}
	}
	if _eegd.DLbls != nil {
		_gbfbb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_eegd.DLbls, _gbfbb)
	}
	if _eegd.Trendline != nil {
		_fgfc := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _dbae := range _eegd.Trendline {
			e.EncodeElement(_dbae, _fgfc)
		}
	}
	if _eegd.ErrBars != nil {
		_agfc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		for _, _efcd := range _eegd.ErrBars {
			e.EncodeElement(_efcd, _agfc)
		}
	}
	if _eegd.XVal != nil {
		_eefd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0078\u0056\u0061\u006c"}}
		e.EncodeElement(_eegd.XVal, _eefd)
	}
	if _eegd.YVal != nil {
		_gcbg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0079\u0056\u0061\u006c"}}
		e.EncodeElement(_eegd.YVal, _gcbg)
	}
	if _eegd.BubbleSize != nil {
		_abcde := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062u\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_eegd.BubbleSize, _abcde)
	}
	if _eegd.Bubble3D != nil {
		_eebg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}}
		e.EncodeElement(_eegd.Bubble3D, _eebg)
	}
	if _eegd.ExtLst != nil {
		_gfff := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_eegd.ExtLst, _gfff)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_Thickness() *CT_Thickness { _dbaf := &CT_Thickness{}; return _dbaf }
func (_bfaaa ST_Orientation) String() string {
	switch _bfaaa {
	case 0:
		return ""
	case 1:
		return "\u006d\u0061\u0078\u004d\u0069\u006e"
	case 2:
		return "\u006d\u0069\u006e\u004d\u0061\u0078"
	}
	return ""
}
func (_adabf ST_PictureFormat) String() string {
	switch _adabf {
	case 0:
		return ""
	case 1:
		return "\u0073t\u0072\u0065\u0074\u0063\u0068"
	case 2:
		return "\u0073\u0074\u0061c\u006b"
	case 3:
		return "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065"
	}
	return ""
}
func (_fcbea *CT_Double) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _aafg := range start.Attr {
		if _aafg.Name.Local == "\u0076\u0061\u006c" {
			_cfbge, _ebbd := _e.ParseFloat(_aafg.Value, 64)
			if _ebbd != nil {
				return _ebbd
			}
			_fcbea.ValAttr = _cfbge
			continue
		}
	}
	for {
		_abbb, _efcgf := d.Token()
		if _efcgf != nil {
			return _g.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0044\u006f\u0075b\u006c\u0065\u003a\u0020\u0025\u0073", _efcgf)
		}
		if _dag, _fbfba := _abbb.(_b.EndElement); _fbfba && _dag.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_CrossBetween and its children, prefixing error messages with path
func (_egef *CT_CrossBetween) ValidateWithPath(path string) error {
	if _egef.ValAttr == ST_CrossBetweenUnset {
		return _g.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _cggc := _egef.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cggc != nil {
		return _cggc
	}
	return nil
}

type CT_Trendline struct {

	// Trendline Name
	Name *string
	SpPr *_gfc.CT_ShapeProperties

	// Trendline Type
	TrendlineType *CT_TrendlineType

	// Polynomial Trendline Order
	Order *CT_Order

	// Period
	Period *CT_Period

	// Forward
	Forward *CT_Double

	// Backward
	Backward *CT_Double

	// Intercept
	Intercept *CT_Double

	// Display R Squared Value
	DispRSqr *CT_Boolean

	// Display Equation
	DispEq *CT_Boolean

	// Trendline Label
	TrendlineLbl *CT_TrendlineLbl

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

// ValidateWithPath validates the EG_SerShared and its children, prefixing error messages with path
func (_gagcg *EG_SerShared) ValidateWithPath(path string) error {
	if _agae := _gagcg.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _agae != nil {
		return _agae
	}
	if _fgbfd := _gagcg.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _fgbfd != nil {
		return _fgbfd
	}
	if _gagcg.Tx != nil {
		if _dggddc := _gagcg.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _dggddc != nil {
			return _dggddc
		}
	}
	if _gagcg.SpPr != nil {
		if _abecg := _gagcg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _abecg != nil {
			return _abecg
		}
	}
	return nil
}
func NewCT_HPercent() *CT_HPercent { _ceff := &CT_HPercent{}; return _ceff }

type EG_BarChartShared struct {

	// Bar Direction
	BarDir *CT_BarDir

	// Bar Grouping
	Grouping   *CT_BarGrouping
	VaryColors *CT_Boolean

	// Bar Chart Series
	Ser []*CT_BarSer

	// Data Labels
	DLbls *CT_DLbls
}

func NewCT_Legend() *CT_Legend { _faag := &CT_Legend{}; return _faag }

type CT_Tx struct{ TxChoice *CT_TxChoice }

func NewEG_PieChartShared() *EG_PieChartShared { _bgfeg := &EG_PieChartShared{}; return _bgfeg }

type CT_DTable struct {

	// Show Horizontal Border
	ShowHorzBorder *CT_Boolean

	// Show Vertical Border
	ShowVertBorder *CT_Boolean

	// Show Outline Border
	ShowOutline *CT_Boolean

	// Show Legend Keys
	ShowKeys *CT_Boolean
	SpPr     *_gfc.CT_ShapeProperties

	// Text Properties
	TxPr *_gfc.CT_TextBody

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}
type CT_AxisUnit struct {

	// Major Unit Value
	ValAttr float64
}

// ValidateWithPath validates the CT_LegendPos and its children, prefixing error messages with path
func (_bgaf *CT_LegendPos) ValidateWithPath(path string) error {
	if _egaag := _bgaf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _egaag != nil {
		return _egaag
	}
	return nil
}

type CT_CustSplit struct {

	// Second Pie Point
	SecondPiePt []*CT_UnsignedInt
}
type CT_Orientation struct {

	// Orientation Value
	ValAttr ST_Orientation
}

func (_daeac *ST_SizeRepresents) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_edagdf, _aefcc := d.Token()
	if _aefcc != nil {
		return _aefcc
	}
	if _defd, _abcce := _edagdf.(_b.EndElement); _abcce && _defd.Name == start.Name {
		*_daeac = 1
		return nil
	}
	if _ggagb, _abfec := _edagdf.(_b.CharData); !_abfec {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _edagdf)
	} else {
		switch string(_ggagb) {
		case "":
			*_daeac = 0
		case "\u0061\u0072\u0065\u0061":
			*_daeac = 1
		case "\u0077":
			*_daeac = 2
		}
	}
	_edagdf, _aefcc = d.Token()
	if _aefcc != nil {
		return _aefcc
	}
	if _fffef, _dcfedd := _edagdf.(_b.EndElement); _dcfedd && _fffef.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _edagdf)
}

// ValidateWithPath validates the EG_PieChartShared and its children, prefixing error messages with path
func (_cbfaa *EG_PieChartShared) ValidateWithPath(path string) error {
	if _cbfaa.VaryColors != nil {
		if _daeb := _cbfaa.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _daeb != nil {
			return _daeb
		}
	}
	for _afedd, _gbgga := range _cbfaa.Ser {
		if _dgdga := _gbgga.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _afedd)); _dgdga != nil {
			return _dgdga
		}
	}
	if _cbfaa.DLbls != nil {
		if _cfeacc := _cbfaa.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _cfeacc != nil {
			return _cfeacc
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Crosses and its children, prefixing error messages with path
func (_abfb *CT_Crosses) ValidateWithPath(path string) error {
	if _abfb.ValAttr == ST_CrossesUnset {
		return _g.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _acgca := _abfb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _acgca != nil {
		return _acgca
	}
	return nil
}
func (_aebfc *CT_StrRef) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_dbgbc:
	for {
		_deeb, _fegf := d.Token()
		if _fegf != nil {
			return _fegf
		}
		switch _gbacd := _deeb.(type) {
		case _b.StartElement:
			switch _gbacd.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}:
				if _aafgd := d.DecodeElement(&_aebfc.F, &_gbacd); _aafgd != nil {
					return _aafgd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}:
				_aebfc.StrCache = NewCT_StrData()
				if _afecg := d.DecodeElement(_aebfc.StrCache, &_gbacd); _afecg != nil {
					return _afecg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aebfc.ExtLst = NewCT_ExtensionList()
				if _egegd := d.DecodeElement(_aebfc.ExtLst, &_gbacd); _egegd != nil {
					return _egegd
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0053\u0074\u0072R\u0065\u0066 \u0025\u0076", _gbacd.Name)
				if _ceaf := d.Skip(); _ceaf != nil {
					return _ceaf
				}
			}
		case _b.EndElement:
			break _dbgbc
		case _b.CharData:
		}
	}
	return nil
}
func (_fegbg *CT_LegendEntryChoice) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _fegbg.Delete != nil {
		_fbffg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_fegbg.Delete, _fbffg)
	} else if _fegbg.TxPr != nil {
		_dabf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_fegbg.TxPr, _dabf)
	}
	return nil
}
func (_bfee *CT_Pie3DChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_ddbee:
	for {
		_bgege, _dedf := d.Token()
		if _dedf != nil {
			return _dedf
		}
		switch _abaga := _bgege.(type) {
		case _b.StartElement:
			switch _abaga.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_bfee.VaryColors = NewCT_Boolean()
				if _fcac := d.DecodeElement(_bfee.VaryColors, &_abaga); _fcac != nil {
					return _fcac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_cfdc := NewCT_PieSer()
				if _abdg := d.DecodeElement(_cfdc, &_abaga); _abdg != nil {
					return _abdg
				}
				_bfee.Ser = append(_bfee.Ser, _cfdc)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_bfee.DLbls = NewCT_DLbls()
				if _ggfbd := d.DecodeElement(_bfee.DLbls, &_abaga); _ggfbd != nil {
					return _ggfbd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bfee.ExtLst = NewCT_ExtensionList()
				if _cfac := d.DecodeElement(_bfee.ExtLst, &_abaga); _cfac != nil {
					return _cfac
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050i\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _abaga.Name)
				if _cgfe := d.Skip(); _cgfe != nil {
					return _cgfe
				}
			}
		case _b.EndElement:
			break _ddbee
		case _b.CharData:
		}
	}
	return nil
}

type ST_Orientation byte

// Validate validates the CT_AreaSer and its children
func (_ffg *CT_AreaSer) Validate() error {
	return _ffg.ValidateWithPath("\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0053\u0065\u0072")
}
func (_dfgaf ST_LblAlgn) Validate() error { return _dfgaf.ValidateWithPath("") }
func NewCT_Overlap() *CT_Overlap {
	_cgcbbc := &CT_Overlap{}
	return _cgcbbc
}
func (_fdcc *CT_AreaSer) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_ab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_fdcc.Idx, _ab)
	_agea := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_fdcc.Order, _agea)
	if _fdcc.Tx != nil {
		_efa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_fdcc.Tx, _efa)
	}
	if _fdcc.SpPr != nil {
		_bbb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fdcc.SpPr, _bbb)
	}
	if _fdcc.PictureOptions != nil {
		_gbc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_fdcc.PictureOptions, _gbc)
	}
	if _fdcc.DPt != nil {
		_agd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _bc := range _fdcc.DPt {
			e.EncodeElement(_bc, _agd)
		}
	}
	if _fdcc.DLbls != nil {
		_aged := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_fdcc.DLbls, _aged)
	}
	if _fdcc.Trendline != nil {
		_egb := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _dgd := range _fdcc.Trendline {
			e.EncodeElement(_dgd, _egb)
		}
	}
	if _fdcc.ErrBars != nil {
		_fff := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		for _, _da := range _fdcc.ErrBars {
			e.EncodeElement(_da, _fff)
		}
	}
	if _fdcc.Cat != nil {
		_bcg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_fdcc.Cat, _bcg)
	}
	if _fdcc.Val != nil {
		_geg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_fdcc.Val, _geg)
	}
	if _fdcc.ExtLst != nil {
		_deg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fdcc.ExtLst, _deg)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_ebbbd *ST_BarGrouping) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_ebbbd = 0
	case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
		*_ebbbd = 1
	case "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d":
		*_ebbbd = 2
	case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
		*_ebbbd = 3
	case "\u0073t\u0061\u0063\u006b\u0065\u0064":
		*_ebbbd = 4
	}
	return nil
}
func (_fgcgg *CT_TrendlineType) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _fgcgg.ValAttr != ST_TrendlineTypeUnset {
		_gbeb, _efde := _fgcgg.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _efde != nil {
			return _efde
		}
		start.Attr = append(start.Attr, _gbeb)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_fgeaf *CT_NumRef) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_deeg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0066"}}
	_gf.AddPreserveSpaceAttr(&_deeg, _fgeaf.F)
	e.EncodeElement(_fgeaf.F, _deeg)
	if _fgeaf.NumCache != nil {
		_edggb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0043\u0061\u0063\u0068\u0065"}}
		e.EncodeElement(_fgeaf.NumCache, _edggb)
	}
	if _fgeaf.ExtLst != nil {
		_baed := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fgeaf.ExtLst, _baed)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_BarChart() *CT_BarChart             { _dbc := &CT_BarChart{}; _dbc.BarDir = NewCT_BarDir(); return _dbc }
func NewCT_TextLanguageID() *CT_TextLanguageID { _fedf := &CT_TextLanguageID{}; return _fedf }
func (_cceced ST_ScatterStyle) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_aece := _b.Attr{}
	_aece.Name = name
	switch _cceced {
	case ST_ScatterStyleUnset:
		_aece.Value = ""
	case ST_ScatterStyleNone:
		_aece.Value = "\u006e\u006f\u006e\u0065"
	case ST_ScatterStyleLine:
		_aece.Value = "\u006c\u0069\u006e\u0065"
	case ST_ScatterStyleLineMarker:
		_aece.Value = "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072"
	case ST_ScatterStyleMarker:
		_aece.Value = "\u006d\u0061\u0072\u006b\u0065\u0072"
	case ST_ScatterStyleSmooth:
		_aece.Value = "\u0073\u006d\u006f\u006f\u0074\u0068"
	case ST_ScatterStyleSmoothMarker:
		_aece.Value = "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072"
	}
	return _aece, nil
}
func NewCT_TickMark() *CT_TickMark { _cgaagg := &CT_TickMark{}; return _cgaagg }
func NewCT_ScatterChart() *CT_ScatterChart {
	_ffgbe := &CT_ScatterChart{}
	_ffgbe.ScatterStyle = NewCT_ScatterStyle()
	return _ffgbe
}
func (_cbbbd *CT_StrData) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _cbbbd.PtCount != nil {
		_dgfabc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0070\u0074\u0043\u006f\u0075\u006et"}}
		e.EncodeElement(_cbbbd.PtCount, _dgfabc)
	}
	if _cbbbd.Pt != nil {
		_adgdb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u0074"}}
		for _, _bgbcc := range _cbbbd.Pt {
			e.EncodeElement(_bgbcc, _adgdb)
		}
	}
	if _cbbbd.ExtLst != nil {
		_feafc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cbbbd.ExtLst, _feafc)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_fbbd *CT_MarkerSize) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _fbbd.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", *_fbbd.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_PivotFmt and its children
func (_efab *CT_PivotFmt) Validate() error {
	return _efab.ValidateWithPath("C\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074")
}

// ValidateWithPath validates the CT_AxisUnit and its children, prefixing error messages with path
func (_edff *CT_AxisUnit) ValidateWithPath(path string) error {
	if _edff.ValAttr <= 0 {
		return _g.Errorf("\u0025\u0073\u002fm.\u0056\u0061\u006c\u0041\u0074\u0074\u0072\u0020\u006du\u0073t\u0020b\u0065 \u003e\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _edff.ValAttr)
	}
	return nil
}

type ST_MarkerStyle byte

// ValidateWithPath validates the CT_LayoutMode and its children, prefixing error messages with path
func (_feacb *CT_LayoutMode) ValidateWithPath(path string) error {
	if _adbcc := _feacb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _adbcc != nil {
		return _adbcc
	}
	return nil
}

type CT_ChartLines struct {
	SpPr *_gfc.CT_ShapeProperties
}

var ST_HPercentWithSymbolPatternRe = _f.MustCompile(ST_HPercentWithSymbolPattern)

func (_bfbge ST_MarkerStyle) ValidateWithPath(path string) error {
	switch _bfbge {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bfbge))
	}
	return nil
}
func (_babf *CT_BarGrouping) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _eee := range start.Attr {
		if _eee.Name.Local == "\u0076\u0061\u006c" {
			_babf.ValAttr.UnmarshalXMLAttr(_eee)
			continue
		}
	}
	for {
		_bfaf, _fgbb := d.Token()
		if _fgbb != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fB\u0061\u0072\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067:\u0020\u0025\u0073", _fgbb)
		}
		if _egg, _fce := _bfaf.(_b.EndElement); _fce && _egg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bdbg *EG_AxShared) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_bdbg.AxId = NewCT_UnsignedInt()
	_bdbg.Scaling = NewCT_Scaling()
	_bdbg.AxPos = NewCT_AxPos()
	_bdbg.CrossAx = NewCT_UnsignedInt()
_ddfcg:
	for {
		_gcbae, _eabbf := d.Token()
		if _eabbf != nil {
			return _eabbf
		}
		switch _cffca := _gcbae.(type) {
		case _b.StartElement:
			switch _cffca.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _fccgf := d.DecodeElement(_bdbg.AxId, &_cffca); _fccgf != nil {
					return _fccgf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _efcfd := d.DecodeElement(_bdbg.Scaling, &_cffca); _efcfd != nil {
					return _efcfd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_bdbg.Delete = NewCT_Boolean()
				if _fdbeb := d.DecodeElement(_bdbg.Delete, &_cffca); _fdbeb != nil {
					return _fdbeb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _ccdacf := d.DecodeElement(_bdbg.AxPos, &_cffca); _ccdacf != nil {
					return _ccdacf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_bdbg.MajorGridlines = NewCT_ChartLines()
				if _eabae := d.DecodeElement(_bdbg.MajorGridlines, &_cffca); _eabae != nil {
					return _eabae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_bdbg.MinorGridlines = NewCT_ChartLines()
				if _fcgdg := d.DecodeElement(_bdbg.MinorGridlines, &_cffca); _fcgdg != nil {
					return _fcgdg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_bdbg.Title = NewCT_Title()
				if _fgge := d.DecodeElement(_bdbg.Title, &_cffca); _fgge != nil {
					return _fgge
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_bdbg.NumFmt = NewCT_NumFmt()
				if _fbdca := d.DecodeElement(_bdbg.NumFmt, &_cffca); _fbdca != nil {
					return _fbdca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_bdbg.MajorTickMark = NewCT_TickMark()
				if _abbbcb := d.DecodeElement(_bdbg.MajorTickMark, &_cffca); _abbbcb != nil {
					return _abbbcb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_bdbg.MinorTickMark = NewCT_TickMark()
				if _bbedg := d.DecodeElement(_bdbg.MinorTickMark, &_cffca); _bbedg != nil {
					return _bbedg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_bdbg.TickLblPos = NewCT_TickLblPos()
				if _dafg := d.DecodeElement(_bdbg.TickLblPos, &_cffca); _dafg != nil {
					return _dafg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_bdbg.SpPr = _gfc.NewCT_ShapeProperties()
				if _aabg := d.DecodeElement(_bdbg.SpPr, &_cffca); _aabg != nil {
					return _aabg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_bdbg.TxPr = _gfc.NewCT_TextBody()
				if _adfgfb := d.DecodeElement(_bdbg.TxPr, &_cffca); _adfgfb != nil {
					return _adfgfb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _gfbd := d.DecodeElement(_bdbg.CrossAx, &_cffca); _gfbd != nil {
					return _gfbd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_bdbg.AxSharedChoice = NewEG_AxSharedChoice()
				if _afgf := d.DecodeElement(&_bdbg.AxSharedChoice.Crosses, &_cffca); _afgf != nil {
					return _afgf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_bdbg.AxSharedChoice = NewEG_AxSharedChoice()
				if _eaace := d.DecodeElement(&_bdbg.AxSharedChoice.CrossesAt, &_cffca); _eaace != nil {
					return _eaace
				}
			default:
				_df.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _cffca.Name)
				if _gdada := d.Skip(); _gdada != nil {
					return _gdada
				}
			}
		case _b.EndElement:
			break _ddfcg
		case _b.CharData:
		}
	}
	return nil
}

type CT_MarkerSize struct {

	// Marker Size Value
	ValAttr *uint8
}

func NewCT_Period() *CT_Period { _cecad := &CT_Period{}; return _cecad }

type CT_AreaSer struct {

	// Index
	Idx *CT_UnsignedInt

	// Order
	Order *CT_UnsignedInt

	// Series Text
	Tx             *CT_SerTx
	SpPr           *_gfc.CT_ShapeProperties
	PictureOptions *CT_PictureOptions

	// Data Point
	DPt []*CT_DPt

	// Data Labels
	DLbls     *CT_DLbls
	Trendline []*CT_Trendline

	// Error Bars
	ErrBars []*CT_ErrBars

	// Category Axis Data
	Cat *CT_AxDataSource

	// Values
	Val *CT_NumDataSource

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_egcge ST_ErrDir) Validate() error { return _egcge.ValidateWithPath("") }

type ST_BarDir byte

// Validate validates the CT_DispUnitsChoice and its children
func (_cbfb *CT_DispUnitsChoice) Validate() error {
	return _cbfb.ValidateWithPath("\u0043T\u005fD\u0069\u0073\u0070\u0055\u006ei\u0074\u0073C\u0068\u006f\u0069\u0063\u0065")
}

// ValidateWithPath validates the CT_PivotFmts and its children, prefixing error messages with path
func (_ccfda *CT_PivotFmts) ValidateWithPath(path string) error {
	for _acfcf, _egab := range _ccfda.PivotFmt {
		if _ggdfe := _egab.ValidateWithPath(_g.Sprintf("\u0025s\u002fP\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u005b\u0025\u0064\u005d", path, _acfcf)); _ggdfe != nil {
			return _ggdfe
		}
	}
	return nil
}
func (_dacb *ST_ErrBarType) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_dacb = 0
	case "\u0062\u006f\u0074\u0068":
		*_dacb = 1
	case "\u006d\u0069\u006eu\u0073":
		*_dacb = 2
	case "\u0070\u006c\u0075\u0073":
		*_dacb = 3
	}
	return nil
}

// Validate validates the CT_DLblChoice and its children
func (_cgda *CT_DLblChoice) Validate() error {
	return _cgda.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0043\u0068\u006f\u0069\u0063\u0065")
}

// ValidateWithPath validates the CT_Shape and its children, prefixing error messages with path
func (_dcfb *CT_Shape) ValidateWithPath(path string) error {
	if _dcfba := _dcfb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dcfba != nil {
		return _dcfba
	}
	return nil
}
func (_bfeee *EG_SurfaceChartShared) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _bfeee.Wireframe != nil {
		_gfdbb := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0077\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"}}
		e.EncodeElement(_bfeee.Wireframe, _gfdbb)
	}
	if _bfeee.Ser != nil {
		_dgaa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _ebbag := range _bfeee.Ser {
			e.EncodeElement(_ebbag, _dgaa)
		}
	}
	if _bfeee.BandFmts != nil {
		_fecg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_bfeee.BandFmts, _fecg)
	}
	return nil
}

var ST_SecondPieSizePercentPatternRe = _f.MustCompile(ST_SecondPieSizePercentPattern)

func (_cbgefd ST_Shape) Validate() error { return _cbgefd.ValidateWithPath("") }
func (_aacf *CT_ErrBars) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_aacf.ErrBarType = NewCT_ErrBarType()
	_aacf.ErrValType = NewCT_ErrValType()
_fggf:
	for {
		_aegc, _ceegc := d.Token()
		if _ceegc != nil {
			return _ceegc
		}
		switch _fagce := _aegc.(type) {
		case _b.StartElement:
			switch _fagce.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0044\u0069\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0044\u0069\u0072"}:
				_aacf.ErrDir = NewCT_ErrDir()
				if _egbgd := d.DecodeElement(_aacf.ErrDir, &_fagce); _egbgd != nil {
					return _egbgd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"}:
				if _fafba := d.DecodeElement(_aacf.ErrBarType, &_fagce); _fafba != nil {
					return _fafba
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"}:
				if _deab := d.DecodeElement(_aacf.ErrValType, &_fagce); _deab != nil {
					return _deab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u0045\u006e\u0064\u0043\u0061\u0070"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u0045\u006e\u0064\u0043\u0061\u0070"}:
				_aacf.NoEndCap = NewCT_Boolean()
				if _daee := d.DecodeElement(_aacf.NoEndCap, &_fagce); _daee != nil {
					return _daee
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u0075\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u0075\u0073"}:
				_aacf.Plus = NewCT_NumDataSource()
				if _fbcff := d.DecodeElement(_aacf.Plus, &_fagce); _fbcff != nil {
					return _fbcff
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006eu\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006eu\u0073"}:
				_aacf.Minus = NewCT_NumDataSource()
				if _begg := d.DecodeElement(_aacf.Minus, &_fagce); _begg != nil {
					return _begg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_aacf.Val = NewCT_Double()
				if _cgcc := d.DecodeElement(_aacf.Val, &_fagce); _cgcc != nil {
					return _cgcc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_aacf.SpPr = _gfc.NewCT_ShapeProperties()
				if _gagdd := d.DecodeElement(_aacf.SpPr, &_fagce); _gagdd != nil {
					return _gagdd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aacf.ExtLst = NewCT_ExtensionList()
				if _fede := d.DecodeElement(_aacf.ExtLst, &_fagce); _fede != nil {
					return _fede
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fE\u0072\u0072\u0042\u0061\u0072\u0073\u0020\u0025\u0076", _fagce.Name)
				if _bacf := d.Skip(); _bacf != nil {
					return _bacf
				}
			}
		case _b.EndElement:
			break _fggf
		case _b.CharData:
		}
	}
	return nil
}
func (_bbgdg *ST_ErrDir) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_ddgde, _dgbec := d.Token()
	if _dgbec != nil {
		return _dgbec
	}
	if _gcbcf, _gfefa := _ddgde.(_b.EndElement); _gfefa && _gcbcf.Name == start.Name {
		*_bbgdg = 1
		return nil
	}
	if _gegffa, _cbbeb := _ddgde.(_b.CharData); !_cbbeb {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ddgde)
	} else {
		switch string(_gegffa) {
		case "":
			*_bbgdg = 0
		case "\u0078":
			*_bbgdg = 1
		case "\u0079":
			*_bbgdg = 2
		}
	}
	_ddgde, _dgbec = d.Token()
	if _dgbec != nil {
		return _dgbec
	}
	if _dbfgc, _affcc := _ddgde.(_b.EndElement); _affcc && _dbfgc.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ddgde)
}

type CT_ValAx struct {

	// Axis ID
	AxId *CT_UnsignedInt

	// Scaling
	Scaling *CT_Scaling

	// Delete
	Delete *CT_Boolean

	// Axis Position
	AxPos *CT_AxPos

	// Major Gridlines
	MajorGridlines *CT_ChartLines

	// Minor Gridlines
	MinorGridlines *CT_ChartLines

	// Title
	Title *CT_Title

	// Number Format
	NumFmt *CT_NumFmt

	// Major Tick Mark
	MajorTickMark *CT_TickMark

	// Minor Tick Mark
	MinorTickMark *CT_TickMark

	// Tick Label Position
	TickLblPos *CT_TickLblPos
	SpPr       *_gfc.CT_ShapeProperties
	TxPr       *_gfc.CT_TextBody

	// Crossing Axis ID
	CrossAx        *CT_UnsignedInt
	AxSharedChoice *EG_AxSharedChoice

	// Cross Between
	CrossBetween *CT_CrossBetween

	// Major Unit
	MajorUnit *CT_AxisUnit

	// Minor Unit
	MinorUnit *CT_AxisUnit

	// Display Units
	DispUnits *CT_DispUnits

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_gbbaed ST_Orientation) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_dcfc := _b.Attr{}
	_dcfc.Name = name
	switch _gbbaed {
	case ST_OrientationUnset:
		_dcfc.Value = ""
	case ST_OrientationMaxMin:
		_dcfc.Value = "\u006d\u0061\u0078\u004d\u0069\u006e"
	case ST_OrientationMinMax:
		_dcfc.Value = "\u006d\u0069\u006e\u004d\u0061\u0078"
	}
	return _dcfc, nil
}
func (_ceegf ST_DispBlanksAs) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_gafffe := _b.Attr{}
	_gafffe.Name = name
	switch _ceegf {
	case ST_DispBlanksAsUnset:
		_gafffe.Value = ""
	case ST_DispBlanksAsSpan:
		_gafffe.Value = "\u0073\u0070\u0061\u006e"
	case ST_DispBlanksAsGap:
		_gafffe.Value = "\u0067\u0061\u0070"
	case ST_DispBlanksAsZero:
		_gafffe.Value = "\u007a\u0065\u0072\u006f"
	}
	return _gafffe, nil
}
func (_fcdgd ST_Shape) ValidateWithPath(path string) error {
	switch _fcdgd {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fcdgd))
	}
	return nil
}
func (_befae *CT_TextLanguageID) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _fcgaec := range start.Attr {
		if _fcgaec.Name.Local == "\u0076\u0061\u006c" {
			_bcbagg := _fcgaec.Value
			_befae.ValAttr = _bcbagg
			continue
		}
	}
	for {
		_eaegc, _efeg := d.Token()
		if _efeg != nil {
			return _g.Errorf("\u0070\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0065\u0078\u0074\u004c\u0061\u006e\u0067\u0075\u0061\u0067\u0065\u0049\u0044: \u0025\u0073", _efeg)
		}
		if _edab, _ebdcg := _eaegc.(_b.EndElement); _ebdcg && _edab.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_PictureOptions and its children
func (_eccdd *CT_PictureOptions) Validate() error {
	return _eccdd.ValidateWithPath("\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073")
}
func (_agda *CT_SerTx) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_agda.SerTxChoice.MarshalXML(e, _b.StartElement{})
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_cafg ST_Orientation) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_cafg.String(), start)
}
func (_bfddb ST_DispBlanksAs) String() string {
	switch _bfddb {
	case 0:
		return ""
	case 1:
		return "\u0073\u0070\u0061\u006e"
	case 2:
		return "\u0067\u0061\u0070"
	case 3:
		return "\u007a\u0065\u0072\u006f"
	}
	return ""
}

const (
	ST_SizeRepresentsUnset ST_SizeRepresents = 0
	ST_SizeRepresentsArea  ST_SizeRepresents = 1
	ST_SizeRepresentsW     ST_SizeRepresents = 2
)

func NewCT_DLbls() *CT_DLbls {
	_ecaf := &CT_DLbls{}
	_ecaf.DLblsChoice = NewCT_DLblsChoice()
	return _ecaf
}

// ST_DepthPercent is a union type
type ST_DepthPercent struct {
	ST_DepthPercentWithSymbol *string
	ST_DepthPercentUShort     *uint16
}

func (_agabg *CT_NumFmt) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _cbgf := range start.Attr {
		if _cbgf.Name.Local == "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065" {
			_gfebg := _cbgf.Value
			_agabg.FormatCodeAttr = _gfebg
			continue
		}
		if _cbgf.Name.Local == "\u0073\u006f\u0075r\u0063\u0065\u004c\u0069\u006e\u006b\u0065\u0064" {
			_gcfcc, _fdgef := _e.ParseBool(_cbgf.Value)
			if _fdgef != nil {
				return _fdgef
			}
			_agabg.SourceLinkedAttr = &_gcfcc
			continue
		}
	}
	for {
		_afbb, _eaega := d.Token()
		if _eaega != nil {
			return _g.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u004e\u0075\u006dF\u006d\u0074\u003a\u0020\u0025\u0073", _eaega)
		}
		if _dggg, _fcdd := _afbb.(_b.EndElement); _fcdd && _dggg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fcbge ST_Crosses) String() string {
	switch _fcbge {
	case 0:
		return ""
	case 1:
		return "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f"
	case 2:
		return "\u006d\u0061\u0078"
	case 3:
		return "\u006d\u0069\u006e"
	}
	return ""
}
func (_bgbbd ST_HPercent) String() string {
	if _bgbbd.ST_HPercentWithSymbol != nil {
		return _g.Sprintf("\u0025\u0076", *_bgbbd.ST_HPercentWithSymbol)
	}
	if _bgbbd.ST_HPercentUShort != nil {
		return _g.Sprintf("\u0025\u0076", *_bgbbd.ST_HPercentUShort)
	}
	return ""
}

const (
	ST_DLblPosUnset   ST_DLblPos = 0
	ST_DLblPosBestFit ST_DLblPos = 1
	ST_DLblPosB       ST_DLblPos = 2
	ST_DLblPosCtr     ST_DLblPos = 3
	ST_DLblPosInBase  ST_DLblPos = 4
	ST_DLblPosInEnd   ST_DLblPos = 5
	ST_DLblPosL       ST_DLblPos = 6
	ST_DLblPosOutEnd  ST_DLblPos = 7
	ST_DLblPosR       ST_DLblPos = 8
	ST_DLblPosT       ST_DLblPos = 9
)

func (_dcbdd *CT_Shape) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _ebedf := range start.Attr {
		if _ebedf.Name.Local == "\u0076\u0061\u006c" {
			_dcbdd.ValAttr.UnmarshalXMLAttr(_ebedf)
			continue
		}
	}
	for {
		_aaff, _edged := d.Token()
		if _edged != nil {
			return _g.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fS\u0068\u0061\u0070\u0065: \u0025\u0073", _edged)
		}
		if _fagb, _eagb := _aaff.(_b.EndElement); _eagb && _fagb.Name == start.Name {
			break
		}
	}
	return nil
}

type ST_Crosses byte

var ST_HoleSizePercentPatternRe = _f.MustCompile(ST_HoleSizePercentPattern)

// ValidateWithPath validates the CT_TrendlineLbl and its children, prefixing error messages with path
func (_adfgd *CT_TrendlineLbl) ValidateWithPath(path string) error {
	if _adfgd.Layout != nil {
		if _abaab := _adfgd.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _abaab != nil {
			return _abaab
		}
	}
	if _adfgd.Tx != nil {
		if _ccaa := _adfgd.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _ccaa != nil {
			return _ccaa
		}
	}
	if _adfgd.NumFmt != nil {
		if _aecf := _adfgd.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _aecf != nil {
			return _aecf
		}
	}
	if _adfgd.SpPr != nil {
		if _bcdbb := _adfgd.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _bcdbb != nil {
			return _bcdbb
		}
	}
	if _adfgd.TxPr != nil {
		if _gdfbf := _adfgd.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _gdfbf != nil {
			return _gdfbf
		}
	}
	if _adfgd.ExtLst != nil {
		if _cgdf := _adfgd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cgdf != nil {
			return _cgdf
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Boolean and its children, prefixing error messages with path
func (_agb *CT_Boolean) ValidateWithPath(path string) error { return nil }

type CT_DLblPos struct {

	// Data Label Position Value
	ValAttr ST_DLblPos
}

func (_bbec ST_SizeRepresents) String() string {
	switch _bbec {
	case 0:
		return ""
	case 1:
		return "\u0061\u0072\u0065\u0061"
	case 2:
		return "\u0077"
	}
	return ""
}
func NewCT_PivotFmts() *CT_PivotFmts { _gbea := &CT_PivotFmts{}; return _gbea }
func (_eedb *CT_DepthPercent) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _cafb := range start.Attr {
		if _cafb.Name.Local == "\u0076\u0061\u006c" {
			_gcgd, _bbce := ParseUnionST_DepthPercent(_cafb.Value)
			if _bbce != nil {
				return _bbce
			}
			_eedb.ValAttr = &_gcgd
			continue
		}
	}
	for {
		_cgfb, _fbde := d.Token()
		if _fbde != nil {
			return _g.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0044\u0065\u0070\u0074\u0068\u0050e\u0072\u0063\u0065n\u0074:\u0020\u0025\u0073", _fbde)
		}
		if _bgcg, _dcaf := _cgfb.(_b.EndElement); _dcaf && _bgcg.Name == start.Name {
			break
		}
	}
	return nil
}

type EG_AreaChartShared struct {

	// Grouping
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean

	// Area Chart Series
	Ser []*CT_AreaSer

	// Data Labels
	DLbls *CT_DLbls

	// Drop Lines
	DropLines *CT_ChartLines
}

func (_afcdd *ST_LayoutTarget) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_afcdd = 0
	case "\u0069\u006e\u006ee\u0072":
		*_afcdd = 1
	case "\u006f\u0075\u0074e\u0072":
		*_afcdd = 2
	}
	return nil
}
func NewCT_DispUnits() *CT_DispUnits {
	_dgdae := &CT_DispUnits{}
	_dgdae.DispUnitsChoice = NewCT_DispUnitsChoice()
	return _dgdae
}
func (_egff *CT_LayoutTarget) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _egff.ValAttr != ST_LayoutTargetUnset {
		_cccag, _edcga := _egff.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _edcga != nil {
			return _edcga
		}
		start.Attr = append(start.Attr, _cccag)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_CatAx() *CT_CatAx {
	_dgfa := &CT_CatAx{}
	_dgfa.AxId = NewCT_UnsignedInt()
	_dgfa.Scaling = NewCT_Scaling()
	_dgfa.AxPos = NewCT_AxPos()
	_dgfa.CrossAx = NewCT_UnsignedInt()
	return _dgfa
}

// Validate validates the CT_BarSer and its children
func (_feeb *CT_BarSer) Validate() error {
	return _feeb.ValidateWithPath("\u0043T\u005f\u0042\u0061\u0072\u0053\u0065r")
}

const (
	ST_LayoutModeUnset  ST_LayoutMode = 0
	ST_LayoutModeEdge   ST_LayoutMode = 1
	ST_LayoutModeFactor ST_LayoutMode = 2
)

func (_ccbc *CT_NumFmt) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}, Value: _g.Sprintf("\u0025\u0076", _ccbc.FormatCodeAttr)})
	if _ccbc.SourceLinkedAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0073\u006f\u0075r\u0063\u0065\u004c\u0069\u006e\u006b\u0065\u0064"}, Value: _g.Sprintf("\u0025\u0064", _bfeaa(*_ccbc.SourceLinkedAttr))})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_dagcd ST_BuiltInUnit) Validate() error { return _dagcd.ValidateWithPath("") }
func (_eagef *CT_LineChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_fedea := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
	e.EncodeElement(_eagef.Grouping, _fedea)
	if _eagef.VaryColors != nil {
		_dcef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_eagef.VaryColors, _dcef)
	}
	if _eagef.Ser != nil {
		_cbddd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _fffbg := range _eagef.Ser {
			e.EncodeElement(_fffbg, _cbddd)
		}
	}
	if _eagef.DLbls != nil {
		_gedb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_eagef.DLbls, _gedb)
	}
	if _eagef.DropLines != nil {
		_beecc := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_eagef.DropLines, _beecc)
	}
	if _eagef.HiLowLines != nil {
		_bfbdd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0068i\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_eagef.HiLowLines, _bfbdd)
	}
	if _eagef.UpDownBars != nil {
		_bebb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0075p\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_eagef.UpDownBars, _bebb)
	}
	if _eagef.Marker != nil {
		_dcde := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_eagef.Marker, _dcde)
	}
	if _eagef.Smooth != nil {
		_geab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u006d\u006f\u006f\u0074\u0068"}}
		e.EncodeElement(_eagef.Smooth, _geab)
	}
	_edbb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _fffbge := range _eagef.AxId {
		e.EncodeElement(_fffbge, _edbb)
	}
	if _eagef.ExtLst != nil {
		_dfdea := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_eagef.ExtLst, _dfdea)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

var ST_DepthPercentWithSymbolPatternRe = _f.MustCompile(ST_DepthPercentWithSymbolPattern)

// ValidateWithPath validates the CT_TrendlineType and its children, prefixing error messages with path
func (_adead *CT_TrendlineType) ValidateWithPath(path string) error {
	if _fcegf := _adead.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fcegf != nil {
		return _fcegf
	}
	return nil
}
func (_bgbab ST_Orientation) Validate() error { return _bgbab.ValidateWithPath("") }
func (_bcceg *ST_LayoutMode) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_bcceg = 0
	case "\u0065\u0064\u0067\u0065":
		*_bcceg = 1
	case "\u0066\u0061\u0063\u0074\u006f\u0072":
		*_bcceg = 2
	}
	return nil
}
func (_fdfdd ST_LayoutMode) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_fdfdd.String(), start)
}
func (_aeaa ST_LayoutTarget) ValidateWithPath(path string) error {
	switch _aeaa {
	case 0, 1, 2:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_aeaa))
	}
	return nil
}
func NewCT_SerAx() *CT_SerAx {
	_ddaf := &CT_SerAx{}
	_ddaf.AxId = NewCT_UnsignedInt()
	_ddaf.Scaling = NewCT_Scaling()
	_ddaf.AxPos = NewCT_AxPos()
	_ddaf.CrossAx = NewCT_UnsignedInt()
	return _ddaf
}

type CT_SplitType struct {

	// Split Type Value
	ValAttr ST_SplitType
}

func (_bgdff ST_ScatterStyle) String() string {
	switch _bgdff {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u006c\u0069\u006e\u0065"
	case 3:
		return "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072"
	case 4:
		return "\u006d\u0061\u0072\u006b\u0065\u0072"
	case 5:
		return "\u0073\u006d\u006f\u006f\u0074\u0068"
	case 6:
		return "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072"
	}
	return ""
}
func (_edddef *CT_RotX) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _edddef.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", *_edddef.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_BandFmt struct {
	Idx  *CT_UnsignedInt
	SpPr *_gfc.CT_ShapeProperties
}
type EG_LineChartShared struct {

	// Grouping
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_LineSer

	// Data Labels
	DLbls *CT_DLbls

	// Drop Lines
	DropLines *CT_ChartLines
}

func (_gfbg ST_SizeRepresents) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_bfbdb := _b.Attr{}
	_bfbdb.Name = name
	switch _gfbg {
	case ST_SizeRepresentsUnset:
		_bfbdb.Value = ""
	case ST_SizeRepresentsArea:
		_bfbdb.Value = "\u0061\u0072\u0065\u0061"
	case ST_SizeRepresentsW:
		_bfbdb.Value = "\u0077"
	}
	return _bfbdb, nil
}
func (_fcfg *CT_PieChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _fcfg.VaryColors != nil {
		_bfec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_fcfg.VaryColors, _bfec)
	}
	if _fcfg.Ser != nil {
		_ccdae := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _degf := range _fcfg.Ser {
			e.EncodeElement(_degf, _ccdae)
		}
	}
	if _fcfg.DLbls != nil {
		_adfe := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_fcfg.DLbls, _adfe)
	}
	if _fcfg.FirstSliceAng != nil {
		_bbeb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0066i\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}}
		e.EncodeElement(_fcfg.FirstSliceAng, _bbeb)
	}
	if _fcfg.ExtLst != nil {
		_ggcef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fcfg.ExtLst, _ggcef)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_ChartSpace struct {

	// 1904 Date System
	Date1904 *CT_Boolean

	// Editing Language
	Lang *CT_TextLanguageID

	// Rounded Corners
	RoundedCorners *CT_Boolean

	// Style
	Style *CT_Style

	// Color Map Override
	ClrMapOvr *_gfc.CT_ColorMapping

	// Pivot Source
	PivotSource *CT_PivotSource

	// Protection
	Protection *CT_Protection

	// Chart
	Chart *CT_Chart

	// Shape Properties
	SpPr *_gfc.CT_ShapeProperties
	TxPr *_gfc.CT_TextBody

	// External Data Relationship
	ExternalData *CT_ExternalData

	// Print Settings
	PrintSettings *CT_PrintSettings

	// Reference to Chart Drawing Part
	UserShapes *CT_RelId

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

// ValidateWithPath validates the CT_ScatterStyle and its children, prefixing error messages with path
func (_begee *CT_ScatterStyle) ValidateWithPath(path string) error {
	if _bgff := _begee.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bgff != nil {
		return _bgff
	}
	return nil
}

// ValidateWithPath validates the CT_PlotArea and its children, prefixing error messages with path
func (_gddg *CT_PlotArea) ValidateWithPath(path string) error {
	if _gddg.Layout != nil {
		if _gacea := _gddg.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _gacea != nil {
			return _gacea
		}
	}
	for _fffff, _fgbdg := range _gddg.PlotAreaChoice {
		if _bfbga := _fgbdg.ValidateWithPath(_g.Sprintf("%\u0073\u002f\u0050\u006cot\u0041r\u0065\u0061\u0043\u0068\u006fi\u0063\u0065\u005b\u0025\u0064\u005d", path, _fffff)); _bfbga != nil {
			return _bfbga
		}
	}
	for _dbfd, _cdge := range _gddg.PlotAreaChoice1 {
		if _bdfba := _cdge.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0050lo\u0074\u0041\u0072\u0065\u0061\u0043\u0068\u006f\u0069\u0063\u0065\u0031\u005b\u0025d\u005d", path, _dbfd)); _bdfba != nil {
			return _bdfba
		}
	}
	if _gddg.DTable != nil {
		if _daabg := _gddg.DTable.ValidateWithPath(path + "\u002fD\u0054\u0061\u0062\u006c\u0065"); _daabg != nil {
			return _daabg
		}
	}
	if _gddg.SpPr != nil {
		if _aaeg := _gddg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _aaeg != nil {
			return _aaeg
		}
	}
	if _gddg.ExtLst != nil {
		if _eabea := _gddg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _eabea != nil {
			return _eabea
		}
	}
	return nil
}

type CT_DoughnutChart struct {
	VaryColors *CT_Boolean

	// Pie Chart Series
	Ser []*CT_PieSer

	// Data Labels
	DLbls *CT_DLbls

	// First Slice Angle
	FirstSliceAng *CT_FirstSliceAng

	// Hole Size
	HoleSize *CT_HoleSize

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_eefff *CT_RotX) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _facac := range start.Attr {
		if _facac.Name.Local == "\u0076\u0061\u006c" {
			_cdcac, _geda := _e.ParseInt(_facac.Value, 10, 8)
			if _geda != nil {
				return _geda
			}
			_ecfgf := int8(_cdcac)
			_eefff.ValAttr = &_ecfgf
			continue
		}
	}
	for {
		_cdgef, _deggd := d.Token()
		if _deggd != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0052\u006f\u0074\u0058\u003a\u0020\u0025\u0073", _deggd)
		}
		if _fdce, _adge := _cdgef.(_b.EndElement); _adge && _fdce.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_BandFmt() *CT_BandFmt { _baf := &CT_BandFmt{}; _baf.Idx = NewCT_UnsignedInt(); return _baf }

type CT_BarDir struct {

	// Bar Direction Value
	ValAttr ST_BarDir
}

func (_ccbd *CT_DispBlanksAs) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _dgcfc := range start.Attr {
		if _dgcfc.Name.Local == "\u0076\u0061\u006c" {
			_ccbd.ValAttr.UnmarshalXMLAttr(_dgcfc)
			continue
		}
	}
	for {
		_fega, _cfga := d.Token()
		if _cfga != nil {
			return _g.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0044\u0069\u0073\u0070\u0042\u006ca\u006e\u006b\u0073A\u0073:\u0020\u0025\u0073", _cfga)
		}
		if _fcdg, _ccgg := _fega.(_b.EndElement); _ccgg && _fcdg.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_ManualLayout() *CT_ManualLayout { _bdda := &CT_ManualLayout{}; return _bdda }
func (_cegcg *ST_BarDir) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_acffc, _egeba := d.Token()
	if _egeba != nil {
		return _egeba
	}
	if _dbccf, _dgebe := _acffc.(_b.EndElement); _dgebe && _dbccf.Name == start.Name {
		*_cegcg = 1
		return nil
	}
	if _gfeba, _gcbaa := _acffc.(_b.CharData); !_gcbaa {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _acffc)
	} else {
		switch string(_gfeba) {
		case "":
			*_cegcg = 0
		case "\u0062\u0061\u0072":
			*_cegcg = 1
		case "\u0063\u006f\u006c":
			*_cegcg = 2
		}
	}
	_acffc, _egeba = d.Token()
	if _egeba != nil {
		return _egeba
	}
	if _efgd, _effac := _acffc.(_b.EndElement); _effac && _efgd.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _acffc)
}
func (_dfed ST_Crosses) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_dfed.String(), start)
}
func (_beee *CT_Chart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _beee.Title != nil {
		_gbff := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_beee.Title, _gbff)
	}
	if _beee.AutoTitleDeleted != nil {
		_bddf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0061u\u0074\u006f\u0054\u0069\u0074l\u0065\u0044e\u006c\u0065\u0074\u0065\u0064"}}
		e.EncodeElement(_beee.AutoTitleDeleted, _bddf)
	}
	if _beee.PivotFmts != nil {
		_acge := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_beee.PivotFmts, _acge)
	}
	if _beee.View3D != nil {
		_eebbc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076\u0069\u0065\u0077\u0033\u0044"}}
		e.EncodeElement(_beee.View3D, _eebbc)
	}
	if _beee.Floor != nil {
		_aeac := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0066\u006c\u006f\u006f\u0072"}}
		e.EncodeElement(_beee.Floor, _aeac)
	}
	if _beee.SideWall != nil {
		_beab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0069\u0064\u0065\u0057\u0061\u006c\u006c"}}
		e.EncodeElement(_beee.SideWall, _beab)
	}
	if _beee.BackWall != nil {
		_bebf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0061\u0063\u006b\u0057\u0061\u006c\u006c"}}
		e.EncodeElement(_beee.BackWall, _bebf)
	}
	_gcgfb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u006c\u006f\u0074\u0041\u0072\u0065\u0061"}}
	e.EncodeElement(_beee.PlotArea, _gcgfb)
	if _beee.Legend != nil {
		_abbc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0065\u0067\u0065\u006e\u0064"}}
		e.EncodeElement(_beee.Legend, _abbc)
	}
	if _beee.PlotVisOnly != nil {
		_fdbg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u006c\u006f\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"}}
		e.EncodeElement(_beee.PlotVisOnly, _fdbg)
	}
	if _beee.DispBlanksAs != nil {
		_gfb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0042\u006c\u0061n\u006b\u0073\u0041\u0073"}}
		e.EncodeElement(_beee.DispBlanksAs, _gfb)
	}
	if _beee.ShowDLblsOverMax != nil {
		_acec := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073h\u006f\u0077\u0044\u004c\u0062l\u0073\u004fv\u0065\u0072\u004d\u0061\u0078"}}
		e.EncodeElement(_beee.ShowDLblsOverMax, _acec)
	}
	if _beee.ExtLst != nil {
		_dfca := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_beee.ExtLst, _dfca)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_bgcfd *EG_AreaChartShared) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _bgcfd.Grouping != nil {
		_dfcce := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_bgcfd.Grouping, _dfcce)
	}
	if _bgcfd.VaryColors != nil {
		_gefce := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_bgcfd.VaryColors, _gefce)
	}
	if _bgcfd.Ser != nil {
		_febf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _efafg := range _bgcfd.Ser {
			e.EncodeElement(_efafg, _febf)
		}
	}
	if _bgcfd.DLbls != nil {
		_aacbc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_bgcfd.DLbls, _aacbc)
	}
	if _bgcfd.DropLines != nil {
		_eabb := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_bgcfd.DropLines, _eabb)
	}
	return nil
}
func NewCT_RadarSer() *CT_RadarSer {
	_cbeab := &CT_RadarSer{}
	_cbeab.Idx = NewCT_UnsignedInt()
	_cbeab.Order = NewCT_UnsignedInt()
	return _cbeab
}
func (_bcfab *ST_TickLblPos) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_aega, _faddb := d.Token()
	if _faddb != nil {
		return _faddb
	}
	if _edede, _bfaee := _aega.(_b.EndElement); _bfaee && _edede.Name == start.Name {
		*_bcfab = 1
		return nil
	}
	if _dgdf, _fbbac := _aega.(_b.CharData); !_fbbac {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _aega)
	} else {
		switch string(_dgdf) {
		case "":
			*_bcfab = 0
		case "\u0068\u0069\u0067\u0068":
			*_bcfab = 1
		case "\u006c\u006f\u0077":
			*_bcfab = 2
		case "\u006e\u0065\u0078\u0074\u0054\u006f":
			*_bcfab = 3
		case "\u006e\u006f\u006e\u0065":
			*_bcfab = 4
		}
	}
	_aega, _faddb = d.Token()
	if _faddb != nil {
		return _faddb
	}
	if _gegdc, _egefc := _aega.(_b.EndElement); _egefc && _gegdc.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _aega)
}
func (_feada *CT_PictureOptions) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _feada.ApplyToFront != nil {
		_cgfddb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0070\u0070\u006c\u0079\u0054\u006fF\u0072\u006f\u006e\u0074"}}
		e.EncodeElement(_feada.ApplyToFront, _cgfddb)
	}
	if _feada.ApplyToSides != nil {
		_dcfd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0070\u0070\u006c\u0079\u0054\u006fS\u0069\u0064\u0065\u0073"}}
		e.EncodeElement(_feada.ApplyToSides, _dcfd)
	}
	if _feada.ApplyToEnd != nil {
		_cedc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061p\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"}}
		e.EncodeElement(_feada.ApplyToEnd, _cedc)
	}
	if _feada.PictureFormat != nil {
		_dfbf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0070i\u0063\u0074\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074"}}
		e.EncodeElement(_feada.PictureFormat, _dfbf)
	}
	if _feada.PictureStackUnit != nil {
		_egfdg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0070i\u0063\u0074\u0075\u0072\u0065S\u0074\u0061c\u006b\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_feada.PictureStackUnit, _egfdg)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Pie3DChart and its children
func (_dbdgd *CT_Pie3DChart) Validate() error {
	return _dbdgd.ValidateWithPath("\u0043\u0054\u005f\u0050\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074")
}
func NewCT_Line3DChart() *CT_Line3DChart {
	_cdfe := &CT_Line3DChart{}
	_cdfe.Grouping = NewCT_Grouping()
	return _cdfe
}

// ValidateWithPath validates the CT_SurfaceSer and its children, prefixing error messages with path
func (_fgdafb *CT_SurfaceSer) ValidateWithPath(path string) error {
	if _geedae := _fgdafb.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _geedae != nil {
		return _geedae
	}
	if _fcggc := _fgdafb.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _fcggc != nil {
		return _fcggc
	}
	if _fgdafb.Tx != nil {
		if _degecf := _fgdafb.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _degecf != nil {
			return _degecf
		}
	}
	if _fgdafb.SpPr != nil {
		if _eddea := _fgdafb.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _eddea != nil {
			return _eddea
		}
	}
	if _fgdafb.Cat != nil {
		if _gfdf := _fgdafb.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _gfdf != nil {
			return _gfdf
		}
	}
	if _fgdafb.Val != nil {
		if _ebdd := _fgdafb.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _ebdd != nil {
			return _ebdd
		}
	}
	if _fgdafb.ExtLst != nil {
		if _eabafb := _fgdafb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _eabafb != nil {
			return _eabafb
		}
	}
	return nil
}
func NewCT_BarDir() *CT_BarDir {
	_bfac := &CT_BarDir{}
	return _bfac
}
func (_fbfb *CT_AxisUnit) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", _fbfb.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_aaacb *ST_Orientation) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_aggcg, _cgdcb := d.Token()
	if _cgdcb != nil {
		return _cgdcb
	}
	if _edgbb, _caceee := _aggcg.(_b.EndElement); _caceee && _edgbb.Name == start.Name {
		*_aaacb = 1
		return nil
	}
	if _gebad, _eacgc := _aggcg.(_b.CharData); !_eacgc {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _aggcg)
	} else {
		switch string(_gebad) {
		case "":
			*_aaacb = 0
		case "\u006d\u0061\u0078\u004d\u0069\u006e":
			*_aaacb = 1
		case "\u006d\u0069\u006e\u004d\u0061\u0078":
			*_aaacb = 2
		}
	}
	_aggcg, _cgdcb = d.Token()
	if _cgdcb != nil {
		return _cgdcb
	}
	if _dcgag, _dcebe := _aggcg.(_b.EndElement); _dcebe && _dcgag.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _aggcg)
}
func (_faebd *ST_BarGrouping) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_ebff, _eacg := d.Token()
	if _eacg != nil {
		return _eacg
	}
	if _bdeeg, _bdccbd := _ebff.(_b.EndElement); _bdccbd && _bdeeg.Name == start.Name {
		*_faebd = 1
		return nil
	}
	if _bcafdc, _gddgf := _ebff.(_b.CharData); !_gddgf {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ebff)
	} else {
		switch string(_bcafdc) {
		case "":
			*_faebd = 0
		case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
			*_faebd = 1
		case "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d":
			*_faebd = 2
		case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
			*_faebd = 3
		case "\u0073t\u0061\u0063\u006b\u0065\u0064":
			*_faebd = 4
		}
	}
	_ebff, _eacg = d.Token()
	if _eacg != nil {
		return _eacg
	}
	if _cbdfd, _dceea := _ebff.(_b.EndElement); _dceea && _cbdfd.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ebff)
}

// Validate validates the CT_HPercent and its children
func (_daea *CT_HPercent) Validate() error {
	return _daea.ValidateWithPath("C\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
}
func (_ccgff *ST_Grouping) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_ccgff = 0
	case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
		*_ccgff = 1
	case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
		*_ccgff = 2
	case "\u0073t\u0061\u0063\u006b\u0065\u0064":
		*_ccgff = 3
	}
	return nil
}

// Validate validates the CT_TextLanguageID and its children
func (_cdacg *CT_TextLanguageID) Validate() error {
	return _cdacg.ValidateWithPath("\u0043\u0054\u005f\u0054\u0065\u0078\u0074\u004c\u0061\u006e\u0067\u0075a\u0067\u0065\u0049\u0044")
}
func ParseUnionST_Thickness(s string) (ST_Thickness, error) {
	if ST_ThicknessPercentPatternRe.MatchString(s) {
		return ST_Thickness{ST_ThicknessPercent: &s}, nil
	}
	_eebbb, _ceafb := _e.ParseUint(s, 10, 32)
	if _ceafb != nil {
		return ST_Thickness{}, _ceafb
	}
	_edgbc := uint32(_eebbb)
	return ST_Thickness{Uint32: &_edgbc}, nil
}
func (_eddcae *EG_LegendEntryData) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _eddcae.TxPr != nil {
		_adcgg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_eddcae.TxPr, _adcgg)
	}
	return nil
}

const (
	ST_TickLblPosUnset  ST_TickLblPos = 0
	ST_TickLblPosHigh   ST_TickLblPos = 1
	ST_TickLblPosLow    ST_TickLblPos = 2
	ST_TickLblPosNextTo ST_TickLblPos = 3
	ST_TickLblPosNone   ST_TickLblPos = 4
)

// Validate validates the CT_DispBlanksAs and its children
func (_abfe *CT_DispBlanksAs) Validate() error {
	return _abfe.ValidateWithPath("\u0043T\u005fD\u0069\u0073\u0070\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073")
}
func (_bbfe *CT_MarkerSize) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _eefc := range start.Attr {
		if _eefc.Name.Local == "\u0076\u0061\u006c" {
			_agdefa, _egfd := _e.ParseUint(_eefc.Value, 10, 8)
			if _egfd != nil {
				return _egfd
			}
			_gebf := uint8(_agdefa)
			_bbfe.ValAttr = &_gebf
			continue
		}
	}
	for {
		_bdff, _cgca := d.Token()
		if _cgca != nil {
			return _g.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u004da\u0072k\u0065r\u0053\u0069\u007a\u0065\u003a\u0020\u0025s", _cgca)
		}
		if _bcdb, _eaebc := _bdff.(_b.EndElement); _eaebc && _bcdb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cabd *CT_Order) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _cabd.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", *_cabd.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_LegendEntryChoice struct {
	Delete *CT_Boolean
	TxPr   *_gfc.CT_TextBody
}

func (_fdcgc *CT_Shape) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _fdcgc.ValAttr != ST_ShapeUnset {
		_abfa, _bgef := _fdcgc.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _bgef != nil {
			return _bgef
		}
		start.Attr = append(start.Attr, _abfa)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type Any interface {
	MarshalXML(_cbbbe *_b.Encoder, _gdcdb _b.StartElement) error
	UnmarshalXML(_bbge *_b.Decoder, _fgae _b.StartElement) error
}

// Validate validates the CT_PictureStackUnit and its children
func (_eaeab *CT_PictureStackUnit) Validate() error {
	return _eaeab.ValidateWithPath("\u0043\u0054\u005f\u0050ic\u0074\u0075\u0072\u0065\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074")
}

type UserShapes struct{ _c.CT_Drawing }

// ValidateWithPath validates the CT_RadarStyle and its children, prefixing error messages with path
func (_afaae *CT_RadarStyle) ValidateWithPath(path string) error {
	if _gfda := _afaae.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gfda != nil {
		return _gfda
	}
	return nil
}
func (_dfaff *CT_Surface) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_dbda:
	for {
		_fedd, _gfbf := d.Token()
		if _gfbf != nil {
			return _gfbf
		}
		switch _adga := _fedd.(type) {
		case _b.StartElement:
			switch _adga.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074h\u0069\u0063\u006b\u006e\u0065\u0073s"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074h\u0069\u0063\u006b\u006e\u0065\u0073s"}:
				_dfaff.Thickness = NewCT_Thickness()
				if _aaceg := d.DecodeElement(_dfaff.Thickness, &_adga); _aaceg != nil {
					return _aaceg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_dfaff.SpPr = _gfc.NewCT_ShapeProperties()
				if _cdfff := d.DecodeElement(_dfaff.SpPr, &_adga); _cdfff != nil {
					return _cdfff
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_dfaff.PictureOptions = NewCT_PictureOptions()
				if _efaee := d.DecodeElement(_dfaff.PictureOptions, &_adga); _efaee != nil {
					return _efaee
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dfaff.ExtLst = NewCT_ExtensionList()
				if _aegb := d.DecodeElement(_dfaff.ExtLst, &_adga); _aegb != nil {
					return _aegb
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fS\u0075\u0072\u0066\u0061\u0063\u0065\u0020\u0025\u0076", _adga.Name)
				if _gffeb := d.Skip(); _gffeb != nil {
					return _gffeb
				}
			}
		case _b.EndElement:
			break _dbda
		case _b.CharData:
		}
	}
	return nil
}

// Validate validates the CT_ManualLayout and its children
func (_fbee *CT_ManualLayout) Validate() error {
	return _fbee.ValidateWithPath("\u0043T\u005fM\u0061\u006e\u0075\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074")
}
func (_fceag ST_AxPos) Validate() error { return _fceag.ValidateWithPath("") }
func (_ecedg *CT_UpDownBar) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _ecedg.SpPr != nil {
		_gfebga := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ecedg.SpPr, _gfebga)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ST_Overlap is a union type
type ST_Overlap struct {
	ST_OverlapPercent *string
	ST_OverlapByte    *int8
}

func (_acedd ST_SplitType) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_acedd.String(), start)
}
func (_bcfe ST_Overlap) String() string {
	if _bcfe.ST_OverlapPercent != nil {
		return _g.Sprintf("\u0025\u0076", *_bcfe.ST_OverlapPercent)
	}
	if _bcfe.ST_OverlapByte != nil {
		return _g.Sprintf("\u0025\u0076", *_bcfe.ST_OverlapByte)
	}
	return ""
}
func (_cgebd *CT_ValAx) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_cgebd.AxId = NewCT_UnsignedInt()
	_cgebd.Scaling = NewCT_Scaling()
	_cgebd.AxPos = NewCT_AxPos()
	_cgebd.CrossAx = NewCT_UnsignedInt()
_fgfgd:
	for {
		_adedg, _adebf := d.Token()
		if _adebf != nil {
			return _adebf
		}
		switch _begag := _adedg.(type) {
		case _b.StartElement:
			switch _begag.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _cfacd := d.DecodeElement(_cgebd.AxId, &_begag); _cfacd != nil {
					return _cfacd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _eeaga := d.DecodeElement(_cgebd.Scaling, &_begag); _eeaga != nil {
					return _eeaga
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_cgebd.Delete = NewCT_Boolean()
				if _fcegfb := d.DecodeElement(_cgebd.Delete, &_begag); _fcegfb != nil {
					return _fcegfb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _cdgc := d.DecodeElement(_cgebd.AxPos, &_begag); _cdgc != nil {
					return _cdgc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_cgebd.MajorGridlines = NewCT_ChartLines()
				if _ecgaa := d.DecodeElement(_cgebd.MajorGridlines, &_begag); _ecgaa != nil {
					return _ecgaa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_cgebd.MinorGridlines = NewCT_ChartLines()
				if _fgega := d.DecodeElement(_cgebd.MinorGridlines, &_begag); _fgega != nil {
					return _fgega
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_cgebd.Title = NewCT_Title()
				if _cdfad := d.DecodeElement(_cgebd.Title, &_begag); _cdfad != nil {
					return _cdfad
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_cgebd.NumFmt = NewCT_NumFmt()
				if _geccac := d.DecodeElement(_cgebd.NumFmt, &_begag); _geccac != nil {
					return _geccac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_cgebd.MajorTickMark = NewCT_TickMark()
				if _eagd := d.DecodeElement(_cgebd.MajorTickMark, &_begag); _eagd != nil {
					return _eagd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_cgebd.MinorTickMark = NewCT_TickMark()
				if _fdaad := d.DecodeElement(_cgebd.MinorTickMark, &_begag); _fdaad != nil {
					return _fdaad
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_cgebd.TickLblPos = NewCT_TickLblPos()
				if _gacb := d.DecodeElement(_cgebd.TickLblPos, &_begag); _gacb != nil {
					return _gacb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cgebd.SpPr = _gfc.NewCT_ShapeProperties()
				if _ggfaa := d.DecodeElement(_cgebd.SpPr, &_begag); _ggfaa != nil {
					return _ggfaa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_cgebd.TxPr = _gfc.NewCT_TextBody()
				if _ecgad := d.DecodeElement(_cgebd.TxPr, &_begag); _ecgad != nil {
					return _ecgad
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _dbgbg := d.DecodeElement(_cgebd.CrossAx, &_begag); _dbgbg != nil {
					return _dbgbg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_cgebd.AxSharedChoice = NewEG_AxSharedChoice()
				if _fgad := d.DecodeElement(&_cgebd.AxSharedChoice.Crosses, &_begag); _fgad != nil {
					return _fgad
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_cgebd.AxSharedChoice = NewEG_AxSharedChoice()
				if _dfccc := d.DecodeElement(&_cgebd.AxSharedChoice.CrossesAt, &_begag); _dfccc != nil {
					return _dfccc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0072\u006fs\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0072\u006fs\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e"}:
				_cgebd.CrossBetween = NewCT_CrossBetween()
				if _egda := d.DecodeElement(_cgebd.CrossBetween, &_begag); _egda != nil {
					return _egda
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}:
				_cgebd.MajorUnit = NewCT_AxisUnit()
				if _dccf := d.DecodeElement(_cgebd.MajorUnit, &_begag); _dccf != nil {
					return _dccf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}:
				_cgebd.MinorUnit = NewCT_AxisUnit()
				if _feaab := d.DecodeElement(_cgebd.MinorUnit, &_begag); _feaab != nil {
					return _feaab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064i\u0073\u0070\u0055\u006e\u0069\u0074s"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064i\u0073\u0070\u0055\u006e\u0069\u0074s"}:
				_cgebd.DispUnits = NewCT_DispUnits()
				if _gfeca := d.DecodeElement(_cgebd.DispUnits, &_begag); _gfeca != nil {
					return _gfeca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cgebd.ExtLst = NewCT_ExtensionList()
				if _cdgcc := d.DecodeElement(_cgebd.ExtLst, &_begag); _cdgcc != nil {
					return _cdgcc
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0056\u0061\u006c\u0041\u0078\u0020\u0025\u0076", _begag.Name)
				if _aabag := d.Skip(); _aabag != nil {
					return _aabag
				}
			}
		case _b.EndElement:
			break _fgfgd
		case _b.CharData:
		}
	}
	return nil
}
func (_gafbf ST_PictureFormat) Validate() error { return _gafbf.ValidateWithPath("") }
func NewCT_TickLblPos() *CT_TickLblPos {
	_cgdcg := &CT_TickLblPos{}
	return _cgdcg
}

// Validate validates the CT_Surface and its children
func (_deaea *CT_Surface) Validate() error {
	return _deaea.ValidateWithPath("\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065")
}
func (_fcff *CT_FirstSliceAng) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _fcff.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", *_fcff.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ST_HPercent is a union type
type ST_HPercent struct {
	ST_HPercentWithSymbol *string
	ST_HPercentUShort     *uint16
}
type CT_Legend struct {

	// Legend Position
	LegendPos *CT_LegendPos

	// Legend Entry
	LegendEntry []*CT_LegendEntry

	// Layout
	Layout *CT_Layout

	// Overlay
	Overlay *CT_Boolean
	SpPr    *_gfc.CT_ShapeProperties
	TxPr    *_gfc.CT_TextBody

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_fdgad ST_TickLblPos) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_bbbag := _b.Attr{}
	_bbbag.Name = name
	switch _fdgad {
	case ST_TickLblPosUnset:
		_bbbag.Value = ""
	case ST_TickLblPosHigh:
		_bbbag.Value = "\u0068\u0069\u0067\u0068"
	case ST_TickLblPosLow:
		_bbbag.Value = "\u006c\u006f\u0077"
	case ST_TickLblPosNextTo:
		_bbbag.Value = "\u006e\u0065\u0078\u0074\u0054\u006f"
	case ST_TickLblPosNone:
		_bbbag.Value = "\u006e\u006f\u006e\u0065"
	}
	return _bbbag, nil
}

type CT_Bar3DChart struct {

	// Bar Direction
	BarDir *CT_BarDir

	// Bar Grouping
	Grouping   *CT_BarGrouping
	VaryColors *CT_Boolean

	// Bar Chart Series
	Ser []*CT_BarSer

	// Data Labels
	DLbls *CT_DLbls

	// Gap Width
	GapWidth *CT_GapAmount

	// Gap Depth
	GapDepth *CT_GapAmount
	Shape    *CT_Shape

	// Axis ID
	AxId []*CT_UnsignedInt

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_dgcfb ST_BuiltInUnit) String() string {
	switch _dgcfb {
	case 0:
		return ""
	case 1:
		return "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073"
	case 2:
		return "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s"
	case 3:
		return "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case 4:
		return "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case 5:
		return "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 6:
		return "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 7:
		return "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 8:
		return "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 9:
		return "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es"
	}
	return ""
}

// Validate validates the CT_AxisUnit and its children
func (_bfcb *CT_AxisUnit) Validate() error {
	return _bfcb.ValidateWithPath("C\u0054\u005f\u0041\u0078\u0069\u0073\u0055\u006e\u0069\u0074")
}
func (_ageeg *CT_BuiltInUnit) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _ageeg.ValAttr != ST_BuiltInUnitUnset {
		_gdab, _beg := _ageeg.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _beg != nil {
			return _beg
		}
		start.Attr = append(start.Attr, _gdab)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_gbbe *CT_SecondPieSize) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _dfbb := range start.Attr {
		if _dfbb.Name.Local == "\u0076\u0061\u006c" {
			_eccab, _fcbbf := ParseUnionST_SecondPieSize(_dfbb.Value)
			if _fcbbf != nil {
				return _fcbbf
			}
			_gbbe.ValAttr = &_eccab
			continue
		}
	}
	for {
		_aaab, _agfbf := d.Token()
		if _agfbf != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0065\u0063\u006fn\u0064P\u0069\u0065\u0053\u0069\u007a\u0065\u003a \u0025\u0073", _agfbf)
		}
		if _bbcdb, _aadc := _aaab.(_b.EndElement); _aadc && _bbcdb.Name == start.Name {
			break
		}
	}
	return nil
}

const (
	ST_CrossBetweenUnset   ST_CrossBetween = 0
	ST_CrossBetweenBetween ST_CrossBetween = 1
	ST_CrossBetweenMidCat  ST_CrossBetween = 2
)

func (_gceb ST_Crosses) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_bebfa := _b.Attr{}
	_bebfa.Name = name
	switch _gceb {
	case ST_CrossesUnset:
		_bebfa.Value = ""
	case ST_CrossesAutoZero:
		_bebfa.Value = "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f"
	case ST_CrossesMax:
		_bebfa.Value = "\u006d\u0061\u0078"
	case ST_CrossesMin:
		_bebfa.Value = "\u006d\u0069\u006e"
	}
	return _bebfa, nil
}
func NewCT_DPt() *CT_DPt { _fdfc := &CT_DPt{}; _fdfc.Idx = NewCT_UnsignedInt(); return _fdfc }

// ValidateWithPath validates the CT_SecondPieSize and its children, prefixing error messages with path
func (_cdga *CT_SecondPieSize) ValidateWithPath(path string) error {
	if _cdga.ValAttr != nil {
		if _aeaccb := _cdga.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _aeaccb != nil {
			return _aeaccb
		}
	}
	return nil
}
func (_cfdd *CT_NumDataSourceChoice) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_baee := start
	switch start.Name {
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
		_cfdd.NumRef = NewCT_NumRef()
		if _eddde := d.DecodeElement(_cfdd.NumRef, &_baee); _eddde != nil {
			return _eddde
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
		_cfdd.NumLit = NewCT_NumData()
		if _cbbfg := d.DecodeElement(_cfdd.NumLit, &_baee); _cbbfg != nil {
			return _cbbfg
		}
	default:
		_df.Log.Debug("\u0073\u006b\u0069\u0070p\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u004e\u0075\u006d\u0044a\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _baee.Name)
		if _bcagba := d.Skip(); _bcagba != nil {
			return _bcagba
		}
	}
	return nil
}

type CT_GapAmount struct {

	// Gap Size Value
	ValAttr *ST_GapAmount
}

func (_afdad *EG_LineChartShared) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_afdad.Grouping = NewCT_Grouping()
_eggdg:
	for {
		_aefbc, _gdcfe := d.Token()
		if _gdcfe != nil {
			return _gdcfe
		}
		switch _bdbgg := _aefbc.(type) {
		case _b.StartElement:
			switch _bdbgg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				if _eagee := d.DecodeElement(_afdad.Grouping, &_bdbgg); _eagee != nil {
					return _eagee
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_afdad.VaryColors = NewCT_Boolean()
				if _dabdg := d.DecodeElement(_afdad.VaryColors, &_bdbgg); _dabdg != nil {
					return _dabdg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_fdegg := NewCT_LineSer()
				if _fefbc := d.DecodeElement(_fdegg, &_bdbgg); _fefbc != nil {
					return _fefbc
				}
				_afdad.Ser = append(_afdad.Ser, _fdegg)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_afdad.DLbls = NewCT_DLbls()
				if _abafe := d.DecodeElement(_afdad.DLbls, &_bdbgg); _abafe != nil {
					return _abafe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_afdad.DropLines = NewCT_ChartLines()
				if _egbbb := d.DecodeElement(_afdad.DropLines, &_bdbgg); _egbbb != nil {
					return _egbbb
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u004c\u0069\u006e\u0065\u0043\u0068a\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _bdbgg.Name)
				if _edgcf := d.Skip(); _edgcf != nil {
					return _edgcf
				}
			}
		case _b.EndElement:
			break _eggdg
		case _b.CharData:
		}
	}
	return nil
}

type CT_AxDataSource struct{ AxDataSourceChoice *CT_AxDataSourceChoice }

// ValidateWithPath validates the CT_DPt and its children, prefixing error messages with path
func (_dadaa *CT_DPt) ValidateWithPath(path string) error {
	if _gcbc := _dadaa.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _gcbc != nil {
		return _gcbc
	}
	if _dadaa.InvertIfNegative != nil {
		if _badg := _dadaa.InvertIfNegative.ValidateWithPath(path + "\u002f\u0049\u006e\u0076\u0065\u0072\u0074\u0049\u0066\u004e\u0065\u0067a\u0074\u0069\u0076\u0065"); _badg != nil {
			return _badg
		}
	}
	if _dadaa.Marker != nil {
		if _edfbe := _dadaa.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _edfbe != nil {
			return _edfbe
		}
	}
	if _dadaa.Bubble3D != nil {
		if _baab := _dadaa.Bubble3D.ValidateWithPath(path + "\u002fB\u0075\u0062\u0062\u006c\u0065\u0033D"); _baab != nil {
			return _baab
		}
	}
	if _dadaa.Explosion != nil {
		if _eggcf := _dadaa.Explosion.ValidateWithPath(path + "\u002f\u0045\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"); _eggcf != nil {
			return _eggcf
		}
	}
	if _dadaa.SpPr != nil {
		if _ccfbb := _dadaa.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ccfbb != nil {
			return _ccfbb
		}
	}
	if _dadaa.PictureOptions != nil {
		if _eageg := _dadaa.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _eageg != nil {
			return _eageg
		}
	}
	if _dadaa.ExtLst != nil {
		if _cggcg := _dadaa.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cggcg != nil {
			return _cggcg
		}
	}
	return nil
}

// Validate validates the CT_BarChart and its children
func (_eccc *CT_BarChart) Validate() error {
	return _eccc.ValidateWithPath("C\u0054\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074")
}

// Validate validates the CT_BubbleSer and its children
func (_dbabe *CT_BubbleSer) Validate() error {
	return _dbabe.ValidateWithPath("\u0043\u0054\u005fB\u0075\u0062\u0062\u006c\u0065\u0053\u0065\u0072")
}

type CT_DispUnitsLbl struct {

	// Layout
	Layout *CT_Layout
	Tx     *CT_Tx
	SpPr   *_gfc.CT_ShapeProperties
	TxPr   *_gfc.CT_TextBody
}

func (_ceagca *ST_AxPos) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_ccebf, _ecgd := d.Token()
	if _ecgd != nil {
		return _ecgd
	}
	if _dbfdf, _dagebf := _ccebf.(_b.EndElement); _dagebf && _dbfdf.Name == start.Name {
		*_ceagca = 1
		return nil
	}
	if _abaff, _cefagc := _ccebf.(_b.CharData); !_cefagc {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ccebf)
	} else {
		switch string(_abaff) {
		case "":
			*_ceagca = 0
		case "\u0062":
			*_ceagca = 1
		case "\u006c":
			*_ceagca = 2
		case "\u0072":
			*_ceagca = 3
		case "\u0074":
			*_ceagca = 4
		}
	}
	_ccebf, _ecgd = d.Token()
	if _ecgd != nil {
		return _ecgd
	}
	if _gdce, _ccaec := _ccebf.(_b.EndElement); _ccaec && _gdce.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ccebf)
}
func (_gdac *CT_TickLblPos) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _gdac.ValAttr != ST_TickLblPosUnset {
		_bdbd, _fcdge := _gdac.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _fcdge != nil {
			return _fcdge
		}
		start.Attr = append(start.Attr, _bdbd)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_cbed *CT_TextLanguageID) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", _cbed.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_ScatterStyle and its children
func (_abadc *CT_ScatterStyle) Validate() error {
	return _abadc.ValidateWithPath("\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065")
}
func NewCT_ErrDir() *CT_ErrDir {
	_ffbd := &CT_ErrDir{}
	_ffbd.ValAttr = ST_ErrDir(1)
	return _ffbd
}
func (_ebce *CT_DPt) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_ggag := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_ebce.Idx, _ggag)
	if _ebce.InvertIfNegative != nil {
		_eefb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0069n\u0076\u0065\u0072\u0074\u0049f\u004e\u0065g\u0061\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_ebce.InvertIfNegative, _eefb)
	}
	if _ebce.Marker != nil {
		_ggdg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_ebce.Marker, _ggdg)
	}
	if _ebce.Bubble3D != nil {
		_ffge := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}}
		e.EncodeElement(_ebce.Bubble3D, _ffge)
	}
	if _ebce.Explosion != nil {
		_fddc := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0065\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"}}
		e.EncodeElement(_ebce.Explosion, _fddc)
	}
	if _ebce.SpPr != nil {
		_fdaa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ebce.SpPr, _fdaa)
	}
	if _ebce.PictureOptions != nil {
		_fcda := _b.StartElement{Name: _b.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_ebce.PictureOptions, _fcda)
	}
	if _ebce.ExtLst != nil {
		_faa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ebce.ExtLst, _faa)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_fbcdf ST_OfPieType) ValidateWithPath(path string) error {
	switch _fbcdf {
	case 0, 1, 2:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fbcdf))
	}
	return nil
}
func (_fedca *CT_RotY) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _fedca.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", *_fedca.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the EG_AreaChartShared and its children
func (_edgcc *EG_AreaChartShared) Validate() error {
	return _edgcc.ValidateWithPath("\u0045G\u005fA\u0072\u0065\u0061\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064")
}
func NewEG_LegendEntryData() *EG_LegendEntryData {
	_edfea := &EG_LegendEntryData{}
	return _edfea
}

// ValidateWithPath validates the CT_Extension and its children, prefixing error messages with path
func (_eadgd *CT_Extension) ValidateWithPath(path string) error { return nil }
func (_gad *CT_AxPos) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_gad.ValAttr = ST_AxPos(1)
	for _, _bba := range start.Attr {
		if _bba.Name.Local == "\u0076\u0061\u006c" {
			_gad.ValAttr.UnmarshalXMLAttr(_bba)
			continue
		}
	}
	for {
		_dfb, _acbg := d.Token()
		if _acbg != nil {
			return _g.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fA\u0078\u0050\u006f\u0073: \u0025\u0073", _acbg)
		}
		if _cffg, _gc := _dfb.(_b.EndElement); _gc && _cffg.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_LineChart and its children, prefixing error messages with path
func (_ggfd *CT_LineChart) ValidateWithPath(path string) error {
	if _eeafg := _ggfd.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _eeafg != nil {
		return _eeafg
	}
	if _ggfd.VaryColors != nil {
		if _eece := _ggfd.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _eece != nil {
			return _eece
		}
	}
	for _dbdg, _gaafb := range _ggfd.Ser {
		if _fedbb := _gaafb.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _dbdg)); _fedbb != nil {
			return _fedbb
		}
	}
	if _ggfd.DLbls != nil {
		if _bgbc := _ggfd.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _bgbc != nil {
			return _bgbc
		}
	}
	if _ggfd.DropLines != nil {
		if _ecdb := _ggfd.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _ecdb != nil {
			return _ecdb
		}
	}
	if _ggfd.HiLowLines != nil {
		if _befb := _ggfd.HiLowLines.ValidateWithPath(path + "/\u0048\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"); _befb != nil {
			return _befb
		}
	}
	if _ggfd.UpDownBars != nil {
		if _ddabe := _ggfd.UpDownBars.ValidateWithPath(path + "/\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"); _ddabe != nil {
			return _ddabe
		}
	}
	if _ggfd.Marker != nil {
		if _bcce := _ggfd.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _bcce != nil {
			return _bcce
		}
	}
	if _ggfd.Smooth != nil {
		if _cbfba := _ggfd.Smooth.ValidateWithPath(path + "\u002fS\u006d\u006f\u006f\u0074\u0068"); _cbfba != nil {
			return _cbfba
		}
	}
	for _ffbdd, _eege := range _ggfd.AxId {
		if _becb := _eege.ValidateWithPath(_g.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _ffbdd)); _becb != nil {
			return _becb
		}
	}
	if _ggfd.ExtLst != nil {
		if _begf := _ggfd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _begf != nil {
			return _begf
		}
	}
	return nil
}

var ST_BubbleScalePercentPatternRe = _f.MustCompile(ST_BubbleScalePercentPattern)

func (_gfcfd *ST_LblAlgn) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_gfcfd = 0
	case "\u0063\u0074\u0072":
		*_gfcfd = 1
	case "\u006c":
		*_gfcfd = 2
	case "\u0072":
		*_gfcfd = 3
	}
	return nil
}
func (_dgcf *CT_BuiltInUnit) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _fbb := range start.Attr {
		if _fbb.Name.Local == "\u0076\u0061\u006c" {
			_dgcf.ValAttr.UnmarshalXMLAttr(_fbb)
			continue
		}
	}
	for {
		_ecfg, _bac := d.Token()
		if _bac != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fB\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074:\u0020\u0025\u0073", _bac)
		}
		if _dgcbb, _bec := _ecfg.(_b.EndElement); _bec && _dgcbb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gcge *CT_OfPieType) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _gcge.ValAttr != ST_OfPieTypeUnset {
		_cggd, _ggacc := _gcge.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _ggacc != nil {
			return _ggacc
		}
		start.Attr = append(start.Attr, _cggd)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Boolean and its children
func (_gacg *CT_Boolean) Validate() error {
	return _gacg.ValidateWithPath("\u0043\u0054\u005f\u0042\u006f\u006f\u006c\u0065\u0061\u006e")
}
func (_cbbef ST_MarkerStyle) Validate() error { return _cbbef.ValidateWithPath("") }

// ValidateWithPath validates the CT_Title and its children, prefixing error messages with path
func (_fdede *CT_Title) ValidateWithPath(path string) error {
	if _fdede.Tx != nil {
		if _eeffa := _fdede.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _eeffa != nil {
			return _eeffa
		}
	}
	if _fdede.Layout != nil {
		if _fadec := _fdede.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _fadec != nil {
			return _fadec
		}
	}
	if _fdede.Overlay != nil {
		if _cedca := _fdede.Overlay.ValidateWithPath(path + "\u002f\u004f\u0076\u0065\u0072\u006c\u0061\u0079"); _cedca != nil {
			return _cedca
		}
	}
	if _fdede.SpPr != nil {
		if _bcdc := _fdede.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _bcdc != nil {
			return _bcdc
		}
	}
	if _fdede.TxPr != nil {
		if _bcccb := _fdede.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _bcccb != nil {
			return _bcccb
		}
	}
	if _fdede.ExtLst != nil {
		if _dcac := _fdede.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dcac != nil {
			return _dcac
		}
	}
	return nil
}

type EG_LegendEntryData struct{ TxPr *_gfc.CT_TextBody }
type CT_SerTx struct{ SerTxChoice *CT_SerTxChoice }

func (_begd ST_Shape) String() string {
	switch _begd {
	case 0:
		return ""
	case 1:
		return "\u0063\u006f\u006e\u0065"
	case 2:
		return "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x"
	case 3:
		return "\u0062\u006f\u0078"
	case 4:
		return "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072"
	case 5:
		return "\u0070y\u0072\u0061\u006d\u0069\u0064"
	case 6:
		return "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078"
	}
	return ""
}
func (_acce ST_CrossBetween) ValidateWithPath(path string) error {
	switch _acce {
	case 0, 1, 2:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_acce))
	}
	return nil
}
func (_deaff *CT_TrendlineLbl) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _deaff.Layout != nil {
		_fcde := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_deaff.Layout, _fcde)
	}
	if _deaff.Tx != nil {
		_bddg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_deaff.Tx, _bddg)
	}
	if _deaff.NumFmt != nil {
		_debbf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_deaff.NumFmt, _debbf)
	}
	if _deaff.SpPr != nil {
		_fgfgf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_deaff.SpPr, _fgfgf)
	}
	if _deaff.TxPr != nil {
		_bbeaa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_deaff.TxPr, _bbeaa)
	}
	if _deaff.ExtLst != nil {
		_egaba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_deaff.ExtLst, _egaba)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_fadd *CT_ErrValType) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _fadd.ValAttr != ST_ErrValTypeUnset {
		_bgbb, _eecbf := _fadd.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _eecbf != nil {
			return _eecbf
		}
		start.Attr = append(start.Attr, _bgbb)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_bdba *CT_Skip) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_bdba.ValAttr = 1
	for _, _cage := range start.Attr {
		if _cage.Name.Local == "\u0076\u0061\u006c" {
			_gecca, _bgdgeg := _e.ParseUint(_cage.Value, 10, 32)
			if _bgdgeg != nil {
				return _bgdgeg
			}
			_bdba.ValAttr = uint32(_gecca)
			continue
		}
	}
	for {
		_dace, _acff := d.Token()
		if _acff != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0053\u006b\u0069\u0070\u003a\u0020\u0025\u0073", _acff)
		}
		if _begge, _ffab := _dace.(_b.EndElement); _ffab && _begge.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dfaddc ST_TickLblPos) ValidateWithPath(path string) error {
	switch _dfaddc {
	case 0, 1, 2, 3, 4:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dfaddc))
	}
	return nil
}

// Validate validates the EG_LineChartShared and its children
func (_beeeda *EG_LineChartShared) Validate() error {
	return _beeeda.ValidateWithPath("\u0045G\u005fL\u0069\u006e\u0065\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064")
}
func (_ecfcf *EG_LegendEntryData) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_ddegg:
	for {
		_abde, _eeacc := d.Token()
		if _eeacc != nil {
			return _eeacc
		}
		switch _dgcba := _abde.(type) {
		case _b.StartElement:
			switch _dgcba.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_ecfcf.TxPr = _gfc.NewCT_TextBody()
				if _cbdde := d.DecodeElement(_ecfcf.TxPr, &_dgcba); _cbdde != nil {
					return _cbdde
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u004c\u0065\u0067\u0065\u006e\u0064E\u006e\u0074\u0072\u0079\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _dgcba.Name)
				if _acgfg := d.Skip(); _acgfg != nil {
					return _acgfg
				}
			}
		case _b.EndElement:
			break _ddegg
		case _b.CharData:
		}
	}
	return nil
}

type CT_HeaderFooter struct {

	// Align With Margins
	AlignWithMarginsAttr *bool

	// Different Odd Even
	DifferentOddEvenAttr *bool

	// Different First
	DifferentFirstAttr *bool

	// Odd Header
	OddHeader *string

	// Odd Footer
	OddFooter *string

	// Even Header
	EvenHeader *string

	// Even Footer
	EvenFooter *string

	// First Header
	FirstHeader *string

	// First Footer
	FirstFooter *string
}
type CT_ScatterSer struct {

	// Index
	Idx *CT_UnsignedInt

	// Order
	Order *CT_UnsignedInt

	// Series Text
	Tx   *CT_SerTx
	SpPr *_gfc.CT_ShapeProperties

	// Marker
	Marker *CT_Marker

	// Data Point
	DPt []*CT_DPt

	// Data Labels
	DLbls     *CT_DLbls
	Trendline []*CT_Trendline

	// Error Bars
	ErrBars []*CT_ErrBars
	XVal    *CT_AxDataSource
	YVal    *CT_NumDataSource

	// Smoothing
	Smooth *CT_Boolean

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

// Validate validates the CT_TxChoice and its children
func (_gcga *CT_TxChoice) Validate() error {
	return _gcga.ValidateWithPath("C\u0054\u005f\u0054\u0078\u0043\u0068\u006f\u0069\u0063\u0065")
}

type CT_Layout struct {

	// Manual Layout
	ManualLayout *CT_ManualLayout

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func NewCT_BarSer() *CT_BarSer {
	_agcd := &CT_BarSer{}
	_agcd.Idx = NewCT_UnsignedInt()
	_agcd.Order = NewCT_UnsignedInt()
	return _agcd
}
func (_fcca *EG_DLblShared) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _fcca.NumFmt != nil {
		_dbec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_fcca.NumFmt, _dbec)
	}
	if _fcca.SpPr != nil {
		_ececfa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fcca.SpPr, _ececfa)
	}
	if _fcca.TxPr != nil {
		_ccefd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_fcca.TxPr, _ccefd)
	}
	if _fcca.DLblPos != nil {
		_gagff := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_fcca.DLblPos, _gagff)
	}
	if _fcca.ShowLegendKey != nil {
		_ecfedf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_fcca.ShowLegendKey, _ecfedf)
	}
	if _fcca.ShowVal != nil {
		_fcceg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_fcca.ShowVal, _fcceg)
	}
	if _fcca.ShowCatName != nil {
		_badfd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_fcca.ShowCatName, _badfd)
	}
	if _fcca.ShowSerName != nil {
		_ebaec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_fcca.ShowSerName, _ebaec)
	}
	if _fcca.ShowPercent != nil {
		_cdgeg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_fcca.ShowPercent, _cdgeg)
	}
	if _fcca.ShowBubbleSize != nil {
		_aebfcf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_fcca.ShowBubbleSize, _aebfcf)
	}
	if _fcca.Separator != nil {
		_gcdbd := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_gf.AddPreserveSpaceAttr(&_gcdbd, *_fcca.Separator)
		e.EncodeElement(_fcca.Separator, _gcdbd)
	}
	return nil
}

type CT_LineSer struct {

	// Index
	Idx *CT_UnsignedInt

	// Order
	Order *CT_UnsignedInt

	// Series Text
	Tx   *CT_SerTx
	SpPr *_gfc.CT_ShapeProperties

	// Marker
	Marker *CT_Marker

	// Data Point
	DPt []*CT_DPt

	// Data Labels
	DLbls     *CT_DLbls
	Trendline []*CT_Trendline

	// Error Bars
	ErrBars *CT_ErrBars

	// Category Axis Data
	Cat    *CT_AxDataSource
	Val    *CT_NumDataSource
	Smooth *CT_Boolean

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func NewCT_PieChart() *CT_PieChart         { _cfdf := &CT_PieChart{}; return _cfdf }
func (_feegf ST_TickMark) Validate() error { return _feegf.ValidateWithPath("") }

// Validate validates the CT_PivotSource and its children
func (_adcd *CT_PivotSource) Validate() error {
	return _adcd.ValidateWithPath("\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0053o\u0075\u0072\u0063\u0065")
}

// ValidateWithPath validates the CT_SurfaceChart and its children, prefixing error messages with path
func (_aedga *CT_SurfaceChart) ValidateWithPath(path string) error {
	if _aedga.Wireframe != nil {
		if _aacee := _aedga.Wireframe.ValidateWithPath(path + "\u002f\u0057\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"); _aacee != nil {
			return _aacee
		}
	}
	for _fdccf, _cdabb := range _aedga.Ser {
		if _gccec := _cdabb.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _fdccf)); _gccec != nil {
			return _gccec
		}
	}
	if _aedga.BandFmts != nil {
		if _deaf := _aedga.BandFmts.ValidateWithPath(path + "\u002fB\u0061\u006e\u0064\u0046\u006d\u0074s"); _deaf != nil {
			return _deaf
		}
	}
	for _cebag, _gdecbb := range _aedga.AxId {
		if _abbcf := _gdecbb.ValidateWithPath(_g.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _cebag)); _abbcf != nil {
			return _abbcf
		}
	}
	if _aedga.ExtLst != nil {
		if _fegd := _aedga.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fegd != nil {
			return _fegd
		}
	}
	return nil
}
func _bfeaa(_adgfb bool) uint8 {
	if _adgfb {
		return 1
	}
	return 0
}
func (_gfffa *CT_Style) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_gfffa.ValAttr = 1
	for _, _gagge := range start.Attr {
		if _gagge.Name.Local == "\u0076\u0061\u006c" {
			_fbda, _abeg := _e.ParseUint(_gagge.Value, 10, 8)
			if _abeg != nil {
				return _abeg
			}
			_gfffa.ValAttr = uint8(_fbda)
			continue
		}
	}
	for {
		_agbg, _cfcff := d.Token()
		if _cfcff != nil {
			return _g.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fS\u0074\u0079\u006c\u0065: \u0025\u0073", _cfcff)
		}
		if _fecc, _gcdee := _agbg.(_b.EndElement); _gcdee && _fecc.Name == start.Name {
			break
		}
	}
	return nil
}

const (
	ST_CrossesUnset    ST_Crosses = 0
	ST_CrossesAutoZero ST_Crosses = 1
	ST_CrossesMax      ST_Crosses = 2
	ST_CrossesMin      ST_Crosses = 3
)

func (_egfac *ST_TimeUnit) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_egfac = 0
	case "\u0064\u0061\u0079\u0073":
		*_egfac = 1
	case "\u006d\u006f\u006e\u0074\u0068\u0073":
		*_egfac = 2
	case "\u0079\u0065\u0061r\u0073":
		*_egfac = 3
	}
	return nil
}

type CT_PivotFmt struct {

	// Index
	Idx  *CT_UnsignedInt
	SpPr *_gfc.CT_ShapeProperties
	TxPr *_gfc.CT_TextBody

	// Marker
	Marker *CT_Marker

	// Data Label
	DLbl *CT_DLbl

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_eeg *CT_AxDataSourceChoice) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _eeg.MultiLvlStrRef != nil {
		_dcgf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0075\u006c\u0074i\u004c\u0076\u006c\u0053\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_eeg.MultiLvlStrRef, _dcgf)
	} else if _eeg.NumRef != nil {
		_gfga := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0052\u0065\u0066"}}
		e.EncodeElement(_eeg.NumRef, _gfga)
	} else if _eeg.NumLit != nil {
		_fcg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u004c\u0069\u0074"}}
		e.EncodeElement(_eeg.NumLit, _fcg)
	} else if _eeg.StrRef != nil {
		_bab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_eeg.StrRef, _bab)
	} else if _eeg.StrLit != nil {
		_fba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u004c\u0069\u0074"}}
		e.EncodeElement(_eeg.StrLit, _fba)
	}
	return nil
}
func NewCT_DLblPos() *CT_DLblPos { _bdf := &CT_DLblPos{}; _bdf.ValAttr = ST_DLblPos(1); return _bdf }
func (_efgcfe ST_TrendlineType) String() string {
	switch _efgcfe {
	case 0:
		return ""
	case 1:
		return "\u0065\u0078\u0070"
	case 2:
		return "\u006c\u0069\u006e\u0065\u0061\u0072"
	case 3:
		return "\u006c\u006f\u0067"
	case 4:
		return "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g"
	case 5:
		return "\u0070\u006f\u006c\u0079"
	case 6:
		return "\u0070\u006f\u0077e\u0072"
	}
	return ""
}
func (_baege ST_CrossBetween) Validate() error { return _baege.ValidateWithPath("") }

// ValidateWithPath validates the CT_ValAx and its children, prefixing error messages with path
func (_egaagb *CT_ValAx) ValidateWithPath(path string) error {
	if _adgfc := _egaagb.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _adgfc != nil {
		return _adgfc
	}
	if _fafeb := _egaagb.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _fafeb != nil {
		return _fafeb
	}
	if _egaagb.Delete != nil {
		if _adgdg := _egaagb.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _adgdg != nil {
			return _adgdg
		}
	}
	if _bceab := _egaagb.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _bceab != nil {
		return _bceab
	}
	if _egaagb.MajorGridlines != nil {
		if _ecbff := _egaagb.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _ecbff != nil {
			return _ecbff
		}
	}
	if _egaagb.MinorGridlines != nil {
		if _bagfc := _egaagb.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _bagfc != nil {
			return _bagfc
		}
	}
	if _egaagb.Title != nil {
		if _gdcceg := _egaagb.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _gdcceg != nil {
			return _gdcceg
		}
	}
	if _egaagb.NumFmt != nil {
		if _becdg := _egaagb.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _becdg != nil {
			return _becdg
		}
	}
	if _egaagb.MajorTickMark != nil {
		if _bfff := _egaagb.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _bfff != nil {
			return _bfff
		}
	}
	if _egaagb.MinorTickMark != nil {
		if _bgcfc := _egaagb.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _bgcfc != nil {
			return _bgcfc
		}
	}
	if _egaagb.TickLblPos != nil {
		if _dbeg := _egaagb.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _dbeg != nil {
			return _dbeg
		}
	}
	if _egaagb.SpPr != nil {
		if _agbca := _egaagb.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _agbca != nil {
			return _agbca
		}
	}
	if _egaagb.TxPr != nil {
		if _adacf := _egaagb.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _adacf != nil {
			return _adacf
		}
	}
	if _fabbd := _egaagb.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _fabbd != nil {
		return _fabbd
	}
	if _egaagb.AxSharedChoice != nil {
		if _gaed := _egaagb.AxSharedChoice.ValidateWithPath(path + "\u002fA\u0078S\u0068\u0061\u0072\u0065\u0064\u0043\u0068\u006f\u0069\u0063\u0065"); _gaed != nil {
			return _gaed
		}
	}
	if _egaagb.CrossBetween != nil {
		if _dfba := _egaagb.CrossBetween.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e"); _dfba != nil {
			return _dfba
		}
	}
	if _egaagb.MajorUnit != nil {
		if _cefdb := _egaagb.MajorUnit.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"); _cefdb != nil {
			return _cefdb
		}
	}
	if _egaagb.MinorUnit != nil {
		if _dddfd := _egaagb.MinorUnit.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"); _dddfd != nil {
			return _dddfd
		}
	}
	if _egaagb.DispUnits != nil {
		if _bgae := _egaagb.DispUnits.ValidateWithPath(path + "\u002f\u0044\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073"); _bgae != nil {
			return _bgae
		}
	}
	if _egaagb.ExtLst != nil {
		if _beaed := _egaagb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _beaed != nil {
			return _beaed
		}
	}
	return nil
}
func NewCT_StrData() *CT_StrData { _gcaa := &CT_StrData{}; return _gcaa }
func (_face *CT_LegendPos) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _face.ValAttr != ST_LegendPosUnset {
		_fbgbc, _abaa := _face.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _abaa != nil {
			return _abaa
		}
		start.Attr = append(start.Attr, _fbgbc)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_gdbgg ST_TickLblPos) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_gdbgg.String(), start)
}
func (_ddgdf *EG_DLblShared) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_bfecc:
	for {
		_gddff, _bgffa := d.Token()
		if _bgffa != nil {
			return _bgffa
		}
		switch _dfge := _gddff.(type) {
		case _b.StartElement:
			switch _dfge.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_ddgdf.NumFmt = NewCT_NumFmt()
				if _bdefd := d.DecodeElement(_ddgdf.NumFmt, &_dfge); _bdefd != nil {
					return _bdefd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ddgdf.SpPr = _gfc.NewCT_ShapeProperties()
				if _gfffaa := d.DecodeElement(_ddgdf.SpPr, &_dfge); _gfffaa != nil {
					return _gfffaa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_ddgdf.TxPr = _gfc.NewCT_TextBody()
				if _aecg := d.DecodeElement(_ddgdf.TxPr, &_dfge); _aecg != nil {
					return _aecg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_ddgdf.DLblPos = NewCT_DLblPos()
				if _dbbd := d.DecodeElement(_ddgdf.DLblPos, &_dfge); _dbbd != nil {
					return _dbbd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_ddgdf.ShowLegendKey = NewCT_Boolean()
				if _geee := d.DecodeElement(_ddgdf.ShowLegendKey, &_dfge); _geee != nil {
					return _geee
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_ddgdf.ShowVal = NewCT_Boolean()
				if _bfece := d.DecodeElement(_ddgdf.ShowVal, &_dfge); _bfece != nil {
					return _bfece
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_ddgdf.ShowCatName = NewCT_Boolean()
				if _gafe := d.DecodeElement(_ddgdf.ShowCatName, &_dfge); _gafe != nil {
					return _gafe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_ddgdf.ShowSerName = NewCT_Boolean()
				if _fdded := d.DecodeElement(_ddgdf.ShowSerName, &_dfge); _fdded != nil {
					return _fdded
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_ddgdf.ShowPercent = NewCT_Boolean()
				if _cfecdc := d.DecodeElement(_ddgdf.ShowPercent, &_dfge); _cfecdc != nil {
					return _cfecdc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_ddgdf.ShowBubbleSize = NewCT_Boolean()
				if _ebgcb := d.DecodeElement(_ddgdf.ShowBubbleSize, &_dfge); _ebgcb != nil {
					return _ebgcb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_ddgdf.Separator = new(string)
				if _abgbdg := d.DecodeElement(_ddgdf.Separator, &_dfge); _abgbdg != nil {
					return _abgbdg
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0044L\u0062\u006c\u0053\u0068\u0061\u0072\u0065\u0064 \u0025\u0076", _dfge.Name)
				if _gfcae := d.Skip(); _gfcae != nil {
					return _gfcae
				}
			}
		case _b.EndElement:
			break _bfecc
		case _b.CharData:
		}
	}
	return nil
}

const ST_OverlapPercentPattern = "\u0028\u002d\u003f\u0030\u002a\u0028(\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u005b\u0031\u002d\u0039\u005d[\u0030\u002d\u0039\u005d\u0029\u007c\u00310\u0030\u0029\u0029\u0025"

// ValidateWithPath validates the Group_DLbls and its children, prefixing error messages with path
func (_cbfgb *Group_DLbls) ValidateWithPath(path string) error {
	if _cbfgb.NumFmt != nil {
		if _fcbcb := _cbfgb.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _fcbcb != nil {
			return _fcbcb
		}
	}
	if _cbfgb.SpPr != nil {
		if _fggea := _cbfgb.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fggea != nil {
			return _fggea
		}
	}
	if _cbfgb.TxPr != nil {
		if _cfdbd := _cbfgb.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _cfdbd != nil {
			return _cfdbd
		}
	}
	if _cbfgb.DLblPos != nil {
		if _dece := _cbfgb.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _dece != nil {
			return _dece
		}
	}
	if _cbfgb.ShowLegendKey != nil {
		if _ebaf := _cbfgb.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _ebaf != nil {
			return _ebaf
		}
	}
	if _cbfgb.ShowVal != nil {
		if _fdfeb := _cbfgb.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _fdfeb != nil {
			return _fdfeb
		}
	}
	if _cbfgb.ShowCatName != nil {
		if _aagc := _cbfgb.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _aagc != nil {
			return _aagc
		}
	}
	if _cbfgb.ShowSerName != nil {
		if _aagfdg := _cbfgb.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _aagfdg != nil {
			return _aagfdg
		}
	}
	if _cbfgb.ShowPercent != nil {
		if _gagfc := _cbfgb.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _gagfc != nil {
			return _gagfc
		}
	}
	if _cbfgb.ShowBubbleSize != nil {
		if _abed := _cbfgb.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _abed != nil {
			return _abed
		}
	}
	if _cbfgb.ShowLeaderLines != nil {
		if _dcefd := _cbfgb.ShowLeaderLines.ValidateWithPath(path + "\u002f\u0053h\u006f\u0077\u004ce\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _dcefd != nil {
			return _dcefd
		}
	}
	if _cbfgb.LeaderLines != nil {
		if _bfcbd := _cbfgb.LeaderLines.ValidateWithPath(path + "\u002f\u004c\u0065a\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _bfcbd != nil {
			return _bfcbd
		}
	}
	return nil
}

// ValidateWithPath validates the CT_UnsignedInt and its children, prefixing error messages with path
func (_ddbcg *CT_UnsignedInt) ValidateWithPath(path string) error { return nil }
func (_cfgg *CT_BarDir) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _cfgg.ValAttr != ST_BarDirUnset {
		_dbab, _gfgf := _cfgg.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _gfgf != nil {
			return _gfgf
		}
		start.Attr = append(start.Attr, _dbab)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type ST_Grouping byte

func (_feeag *CT_SplitType) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _feeag.ValAttr != ST_SplitTypeUnset {
		_gedca, _gagg := _feeag.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _gagg != nil {
			return _gagg
		}
		start.Attr = append(start.Attr, _gedca)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type EG_SerShared struct {

	// Index
	Idx *CT_UnsignedInt

	// Order
	Order *CT_UnsignedInt

	// Series Text
	Tx   *CT_SerTx
	SpPr *_gfc.CT_ShapeProperties
}

func (_eaaeb *ST_ScatterStyle) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_eaaeb = 0
	case "\u006e\u006f\u006e\u0065":
		*_eaaeb = 1
	case "\u006c\u0069\u006e\u0065":
		*_eaaeb = 2
	case "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072":
		*_eaaeb = 3
	case "\u006d\u0061\u0072\u006b\u0065\u0072":
		*_eaaeb = 4
	case "\u0073\u006d\u006f\u006f\u0074\u0068":
		*_eaaeb = 5
	case "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072":
		*_eaaeb = 6
	}
	return nil
}

const (
	ST_ErrBarTypeUnset ST_ErrBarType = 0
	ST_ErrBarTypeBoth  ST_ErrBarType = 1
	ST_ErrBarTypeMinus ST_ErrBarType = 2
	ST_ErrBarTypePlus  ST_ErrBarType = 3
)

func (_bbccb ST_LayoutMode) ValidateWithPath(path string) error {
	switch _bbccb {
	case 0, 1, 2:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bbccb))
	}
	return nil
}
func (_abafc ST_Thickness) String() string {
	if _abafc.ST_ThicknessPercent != nil {
		return _g.Sprintf("\u0025\u0076", *_abafc.ST_ThicknessPercent)
	}
	if _abafc.Uint32 != nil {
		return _g.Sprintf("\u0025\u0076", *_abafc.Uint32)
	}
	return ""
}
func NewCT_BubbleSer() *CT_BubbleSer {
	_agfa := &CT_BubbleSer{}
	_agfa.Idx = NewCT_UnsignedInt()
	_agfa.Order = NewCT_UnsignedInt()
	return _agfa
}
func NewEG_BarChartShared() *EG_BarChartShared {
	_agegd := &EG_BarChartShared{}
	_agegd.BarDir = NewCT_BarDir()
	return _agegd
}

type CT_Scaling struct {

	// Logarithmic Base
	LogBase *CT_LogBase

	// Axis Orientation
	Orientation *CT_Orientation

	// Maximum
	Max *CT_Double

	// Minimum
	Min *CT_Double

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

// ValidateWithPath validates the CT_RotX and its children, prefixing error messages with path
func (_agddd *CT_RotX) ValidateWithPath(path string) error {
	if _agddd.ValAttr != nil {
		if *_agddd.ValAttr < -90 {
			return _g.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003e\u003d\u0020\u002d\u0039\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_agddd.ValAttr)
		}
		if *_agddd.ValAttr > 90 {
			return _g.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003c\u003d\u0020\u00390 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_agddd.ValAttr)
		}
	}
	return nil
}
func (_ededg ST_BuiltInUnit) ValidateWithPath(path string) error {
	switch _ededg {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ededg))
	}
	return nil
}

// Validate validates the CT_View3D and its children
func (_dfdaf *CT_View3D) Validate() error {
	return _dfdaf.ValidateWithPath("\u0043T\u005f\u0056\u0069\u0065\u0077\u0033D")
}
func NewCT_Area3DChart() *CT_Area3DChart { _cd := &CT_Area3DChart{}; return _cd }
func (_fbage *CT_PlotAreaChoice) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _fbage.AreaChart != nil {
		_dfeac := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0061\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_fbage.AreaChart, _dfeac)
	} else if _fbage.Area3DChart != nil {
		_bbcd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_fbage.Area3DChart, _bbcd)
	} else if _fbage.LineChart != nil {
		_egbff := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006c\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_fbage.LineChart, _egbff)
	} else if _fbage.Line3DChart != nil {
		_fabef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_fbage.Line3DChart, _fabef)
	} else if _fbage.StockChart != nil {
		_ecaeg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073t\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_fbage.StockChart, _ecaeg)
	} else if _fbage.RadarChart != nil {
		_abgag := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0072a\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_fbage.RadarChart, _abgag)
	} else if _fbage.ScatterChart != nil {
		_cfaaa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0063\u0061\u0074\u0074\u0065\u0072C\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_fbage.ScatterChart, _cfaaa)
	} else if _fbage.PieChart != nil {
		_gbdcf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_fbage.PieChart, _gbdcf)
	} else if _fbage.Pie3DChart != nil {
		_efaba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070i\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_fbage.Pie3DChart, _efaba)
	} else if _fbage.DoughnutChart != nil {
		_bcbag := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064o\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_fbage.DoughnutChart, _bcbag)
	} else if _fbage.BarChart != nil {
		_dacd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_fbage.BarChart, _dacd)
	} else if _fbage.Bar3DChart != nil {
		_cegc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062a\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_fbage.Bar3DChart, _cegc)
	} else if _fbage.OfPieChart != nil {
		_acdfg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006ff\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_fbage.OfPieChart, _acdfg)
	} else if _fbage.SurfaceChart != nil {
		_bbdc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0075\u0072\u0066\u0061\u0063\u0065C\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_fbage.SurfaceChart, _bbdc)
	} else if _fbage.Surface3DChart != nil {
		_caggd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003as\u0075\u0072\u0066a\u0063\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_fbage.Surface3DChart, _caggd)
	} else if _fbage.BubbleChart != nil {
		_bgcec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_fbage.BubbleChart, _bgcec)
	}
	return nil
}
func (_befgg *CT_NumVal) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _becba := range start.Attr {
		if _becba.Name.Local == "\u0069\u0064\u0078" {
			_aeagc, _dbcbc := _e.ParseUint(_becba.Value, 10, 32)
			if _dbcbc != nil {
				return _dbcbc
			}
			_befgg.IdxAttr = uint32(_aeagc)
			continue
		}
		if _becba.Name.Local == "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065" {
			_bacg := _becba.Value
			_befgg.FormatCodeAttr = &_bacg
			continue
		}
	}
_cdcae:
	for {
		_aeacc, _eefde := d.Token()
		if _eefde != nil {
			return _eefde
		}
		switch _dfabb := _aeacc.(type) {
		case _b.StartElement:
			switch _dfabb.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				if _ccag := d.DecodeElement(&_befgg.V, &_dfabb); _ccag != nil {
					return _ccag
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004e\u0075\u006dV\u0061\u006c \u0025\u0076", _dfabb.Name)
				if _fgba := d.Skip(); _fgba != nil {
					return _fgba
				}
			}
		case _b.EndElement:
			break _cdcae
		case _b.CharData:
		}
	}
	return nil
}

type ST_ErrBarType byte

// ValidateWithPath validates the CT_Line3DChart and its children, prefixing error messages with path
func (_cfbgd *CT_Line3DChart) ValidateWithPath(path string) error {
	if _edbcb := _cfbgd.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _edbcb != nil {
		return _edbcb
	}
	if _cfbgd.VaryColors != nil {
		if _cbfef := _cfbgd.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _cbfef != nil {
			return _cbfef
		}
	}
	for _ddega, _bbea := range _cfbgd.Ser {
		if _egdg := _bbea.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _ddega)); _egdg != nil {
			return _egdg
		}
	}
	if _cfbgd.DLbls != nil {
		if _gddf := _cfbgd.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _gddf != nil {
			return _gddf
		}
	}
	if _cfbgd.DropLines != nil {
		if _cdebb := _cfbgd.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _cdebb != nil {
			return _cdebb
		}
	}
	if _cfbgd.GapDepth != nil {
		if _acbga := _cfbgd.GapDepth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0044\u0065\u0070\u0074h"); _acbga != nil {
			return _acbga
		}
	}
	for _agec, _dgbdd := range _cfbgd.AxId {
		if _cgad := _dgbdd.ValidateWithPath(_g.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _agec)); _cgad != nil {
			return _cgad
		}
	}
	if _cfbgd.ExtLst != nil {
		if _cefgd := _cfbgd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cefgd != nil {
			return _cefgd
		}
	}
	return nil
}

type ST_LblAlgn byte

func (_bgdge *CT_RelId) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _ffbed := range start.Attr {
		if _ffbed.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _ffbed.Name.Local == "\u0069\u0064" || _ffbed.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _ffbed.Name.Local == "\u0069\u0064" {
			_dgfd := _ffbed.Value
			_bgdge.IdAttr = _dgfd
			continue
		}
	}
	for {
		_fdeaa, _cdfce := d.Token()
		if _cdfce != nil {
			return _g.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fR\u0065\u006c\u0049\u0064: \u0025\u0073", _cdfce)
		}
		if _cfae, _bcceb := _fdeaa.(_b.EndElement); _bcceb && _cfae.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cdgd *CT_ErrBarType) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _cdgd.ValAttr != ST_ErrBarTypeUnset {
		_cecb, _bbe := _cdgd.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _bbe != nil {
			return _bbe
		}
		start.Attr = append(start.Attr, _cecb)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_DTable and its children
func (_bdfe *CT_DTable) Validate() error {
	return _bdfe.ValidateWithPath("\u0043T\u005f\u0044\u0054\u0061\u0062\u006ce")
}
func (_dcedb *ST_LegendPos) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_dcedb = 0
	case "\u0062":
		*_dcedb = 1
	case "\u0074\u0072":
		*_dcedb = 2
	case "\u006c":
		*_dcedb = 3
	case "\u0072":
		*_dcedb = 4
	case "\u0074":
		*_dcedb = 5
	}
	return nil
}
func (_fded *CT_DLbls) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fded.DLblsChoice = NewCT_DLblsChoice()
_bbcf:
	for {
		_gffedf, _cbecd := d.Token()
		if _cbecd != nil {
			return _cbecd
		}
		switch _bfca := _gffedf.(type) {
		case _b.StartElement:
			switch _bfca.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}:
				_gffgd := NewCT_DLbl()
				if _ddbe := d.DecodeElement(_gffgd, &_bfca); _ddbe != nil {
					return _ddbe
				}
				_fded.DLbl = append(_fded.DLbl, _gffgd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				if _fded.DLblsChoice == nil {
					_fded.DLblsChoice = NewCT_DLblsChoice()
				}
				if _agbcf := d.DecodeElement(&_fded.DLblsChoice.Delete, &_bfca); _agbcf != nil {
					return _agbcf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				if _fded.DLblsChoice == nil {
					_fded.DLblsChoice = NewCT_DLblsChoice()
				}
				if _dfgd := d.DecodeElement(&_fded.DLblsChoice.NumFmt, &_bfca); _dfgd != nil {
					return _dfgd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				if _fded.DLblsChoice == nil {
					_fded.DLblsChoice = NewCT_DLblsChoice()
				}
				if _bdea := d.DecodeElement(&_fded.DLblsChoice.SpPr, &_bfca); _bdea != nil {
					return _bdea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				if _fded.DLblsChoice == nil {
					_fded.DLblsChoice = NewCT_DLblsChoice()
				}
				if _egeg := d.DecodeElement(&_fded.DLblsChoice.TxPr, &_bfca); _egeg != nil {
					return _egeg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				if _fded.DLblsChoice == nil {
					_fded.DLblsChoice = NewCT_DLblsChoice()
				}
				if _ddfa := d.DecodeElement(&_fded.DLblsChoice.DLblPos, &_bfca); _ddfa != nil {
					return _ddfa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				if _fded.DLblsChoice == nil {
					_fded.DLblsChoice = NewCT_DLblsChoice()
				}
				if _efdd := d.DecodeElement(&_fded.DLblsChoice.ShowLegendKey, &_bfca); _efdd != nil {
					return _efdd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				if _fded.DLblsChoice == nil {
					_fded.DLblsChoice = NewCT_DLblsChoice()
				}
				if _aefab := d.DecodeElement(&_fded.DLblsChoice.ShowVal, &_bfca); _aefab != nil {
					return _aefab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				if _fded.DLblsChoice == nil {
					_fded.DLblsChoice = NewCT_DLblsChoice()
				}
				if _ebfd := d.DecodeElement(&_fded.DLblsChoice.ShowCatName, &_bfca); _ebfd != nil {
					return _ebfd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				if _fded.DLblsChoice == nil {
					_fded.DLblsChoice = NewCT_DLblsChoice()
				}
				if _geadf := d.DecodeElement(&_fded.DLblsChoice.ShowSerName, &_bfca); _geadf != nil {
					return _geadf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				if _fded.DLblsChoice == nil {
					_fded.DLblsChoice = NewCT_DLblsChoice()
				}
				if _bgcd := d.DecodeElement(&_fded.DLblsChoice.ShowPercent, &_bfca); _bgcd != nil {
					return _bgcd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				if _fded.DLblsChoice == nil {
					_fded.DLblsChoice = NewCT_DLblsChoice()
				}
				if _efdc := d.DecodeElement(&_fded.DLblsChoice.ShowBubbleSize, &_bfca); _efdc != nil {
					return _efdc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				if _fded.DLblsChoice == nil {
					_fded.DLblsChoice = NewCT_DLblsChoice()
				}
				if _gdefe := d.DecodeElement(&_fded.DLblsChoice.Separator, &_bfca); _gdefe != nil {
					return _gdefe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				if _fded.DLblsChoice == nil {
					_fded.DLblsChoice = NewCT_DLblsChoice()
				}
				if _efb := d.DecodeElement(&_fded.DLblsChoice.ShowLeaderLines, &_bfca); _efb != nil {
					return _efb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				if _fded.DLblsChoice == nil {
					_fded.DLblsChoice = NewCT_DLblsChoice()
				}
				if _cab := d.DecodeElement(&_fded.DLblsChoice.LeaderLines, &_bfca); _cab != nil {
					return _cab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fded.ExtLst = NewCT_ExtensionList()
				if _feead := d.DecodeElement(_fded.ExtLst, &_bfca); _feead != nil {
					return _feead
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073\u0020\u0025\u0076", _bfca.Name)
				if _ffac := d.Skip(); _ffac != nil {
					return _ffac
				}
			}
		case _b.EndElement:
			break _bbcf
		case _b.CharData:
		}
	}
	return nil
}

// Validate validates the CT_TickMark and its children
func (_baaae *CT_TickMark) Validate() error {
	return _baaae.ValidateWithPath("C\u0054\u005f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b")
}

// Validate validates the CT_ScatterChart and its children
func (_febga *CT_ScatterChart) Validate() error {
	return _febga.ValidateWithPath("\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074")
}
func (_efcgb *CT_Scaling) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _efcgb.LogBase != nil {
		_befcd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006c\u006f\u0067\u0042\u0061\u0073e"}}
		e.EncodeElement(_efcgb.LogBase, _befcd)
	}
	if _efcgb.Orientation != nil {
		_adbde := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006f\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"}}
		e.EncodeElement(_efcgb.Orientation, _adbde)
	}
	if _efcgb.Max != nil {
		_efeecf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006da\u0078"}}
		e.EncodeElement(_efcgb.Max, _efeecf)
	}
	if _efcgb.Min != nil {
		_gaab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006di\u006e"}}
		e.EncodeElement(_efcgb.Min, _gaab)
	}
	if _efcgb.ExtLst != nil {
		_ageee := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_efcgb.ExtLst, _ageee)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

const (
	ST_SplitTypeUnset   ST_SplitType = 0
	ST_SplitTypeAuto    ST_SplitType = 1
	ST_SplitTypeCust    ST_SplitType = 2
	ST_SplitTypePercent ST_SplitType = 3
	ST_SplitTypePos     ST_SplitType = 4
	ST_SplitTypeVal     ST_SplitType = 5
)

func NewCT_TrendlineType() *CT_TrendlineType {
	_gbec := &CT_TrendlineType{}
	return _gbec
}
func (_agge ST_SizeRepresents) ValidateWithPath(path string) error {
	switch _agge {
	case 0, 1, 2:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_agge))
	}
	return nil
}

type CT_DLblChoice struct {
	Delete *CT_Boolean

	// Layout
	Layout *CT_Layout
	Tx     *CT_Tx

	// Number Format
	NumFmt *CT_NumFmt
	SpPr   *_gfc.CT_ShapeProperties
	TxPr   *_gfc.CT_TextBody

	// Data Label Position
	DLblPos *CT_DLblPos

	// Show Legend Key
	ShowLegendKey *CT_Boolean

	// Show Value
	ShowVal *CT_Boolean

	// Show Category Name
	ShowCatName *CT_Boolean

	// Show Series Name
	ShowSerName *CT_Boolean

	// Show Percent
	ShowPercent *CT_Boolean

	// Show Bubble Size
	ShowBubbleSize *CT_Boolean

	// Separator
	Separator *string
}

func NewCT_PivotSource() *CT_PivotSource {
	_cfbc := &CT_PivotSource{}
	_cfbc.FmtId = NewCT_UnsignedInt()
	return _cfbc
}

// ValidateWithPath validates the CT_TickLblPos and its children, prefixing error messages with path
func (_dbaa *CT_TickLblPos) ValidateWithPath(path string) error {
	if _bbbaa := _dbaa.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bbbaa != nil {
		return _bbbaa
	}
	return nil
}
func (_abdab ST_RadarStyle) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_ebfed := _b.Attr{}
	_ebfed.Name = name
	switch _abdab {
	case ST_RadarStyleUnset:
		_ebfed.Value = ""
	case ST_RadarStyleStandard:
		_ebfed.Value = "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case ST_RadarStyleMarker:
		_ebfed.Value = "\u006d\u0061\u0072\u006b\u0065\u0072"
	case ST_RadarStyleFilled:
		_ebfed.Value = "\u0066\u0069\u006c\u006c\u0065\u0064"
	}
	return _ebfed, nil
}
func (_cfea *CT_DTable) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _cfea.ShowHorzBorder != nil {
		_acgg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003as\u0068\u006f\u0077H\u006f\u0072\u007a\u0042\u006f\u0072\u0064\u0065\u0072"}}
		e.EncodeElement(_cfea.ShowHorzBorder, _acgg)
	}
	if _cfea.ShowVertBorder != nil {
		_afde := _b.StartElement{Name: _b.Name{Local: "\u0063\u003as\u0068\u006f\u0077V\u0065\u0072\u0074\u0042\u006f\u0072\u0064\u0065\u0072"}}
		e.EncodeElement(_cfea.ShowVertBorder, _afde)
	}
	if _cfea.ShowOutline != nil {
		_aeda := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"}}
		e.EncodeElement(_cfea.ShowOutline, _aeda)
	}
	if _cfea.ShowKeys != nil {
		_cagg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004b\u0065\u0079\u0073"}}
		e.EncodeElement(_cfea.ShowKeys, _cagg)
	}
	if _cfea.SpPr != nil {
		_ceae := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_cfea.SpPr, _ceae)
	}
	if _cfea.TxPr != nil {
		_adefd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_cfea.TxPr, _adefd)
	}
	if _cfea.ExtLst != nil {
		_cbgcag := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cfea.ExtLst, _cbgcag)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_RelId and its children, prefixing error messages with path
func (_ffcf *CT_RelId) ValidateWithPath(path string) error { return nil }
func (_ebbg *ChartSpace) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_ebbg.CT_ChartSpace = *NewCT_ChartSpace()
_fegcd:
	for {
		_bdgdg, _dcfae := d.Token()
		if _dcfae != nil {
			return _dcfae
		}
		switch _gdcd := _bdgdg.(type) {
		case _b.StartElement:
			switch _gdcd.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}:
				_ebbg.Date1904 = NewCT_Boolean()
				if _dgacg := d.DecodeElement(_ebbg.Date1904, &_gdcd); _dgacg != nil {
					return _dgacg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}:
				_ebbg.Lang = NewCT_TextLanguageID()
				if _dfcdc := d.DecodeElement(_ebbg.Lang, &_gdcd); _dfcdc != nil {
					return _dfcdc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}:
				_ebbg.RoundedCorners = NewCT_Boolean()
				if _fffbd := d.DecodeElement(_ebbg.RoundedCorners, &_gdcd); _fffbd != nil {
					return _fffbd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}:
				_ebbg.Style = NewCT_Style()
				if _ccbdg := d.DecodeElement(_ebbg.Style, &_gdcd); _ccbdg != nil {
					return _ccbdg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}:
				_ebbg.ClrMapOvr = _gfc.NewCT_ColorMapping()
				if _fbaef := d.DecodeElement(_ebbg.ClrMapOvr, &_gdcd); _fbaef != nil {
					return _fbaef
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}:
				_ebbg.PivotSource = NewCT_PivotSource()
				if _bcfaa := d.DecodeElement(_ebbg.PivotSource, &_gdcd); _bcfaa != nil {
					return _bcfaa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}:
				_ebbg.Protection = NewCT_Protection()
				if _ggfdc := d.DecodeElement(_ebbg.Protection, &_gdcd); _ggfdc != nil {
					return _ggfdc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}:
				if _gcbf := d.DecodeElement(_ebbg.Chart, &_gdcd); _gcbf != nil {
					return _gcbf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ebbg.SpPr = _gfc.NewCT_ShapeProperties()
				if _dacf := d.DecodeElement(_ebbg.SpPr, &_gdcd); _dacf != nil {
					return _dacf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_ebbg.TxPr = _gfc.NewCT_TextBody()
				if _fbbg := d.DecodeElement(_ebbg.TxPr, &_gdcd); _fbbg != nil {
					return _fbbg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}:
				_ebbg.ExternalData = NewCT_ExternalData()
				if _daacc := d.DecodeElement(_ebbg.ExternalData, &_gdcd); _daacc != nil {
					return _daacc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}:
				_ebbg.PrintSettings = NewCT_PrintSettings()
				if _gfacb := d.DecodeElement(_ebbg.PrintSettings, &_gdcd); _gfacb != nil {
					return _gfacb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}:
				_ebbg.UserShapes = NewCT_RelId()
				if _ebecg := d.DecodeElement(_ebbg.UserShapes, &_gdcd); _ebecg != nil {
					return _ebecg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ebbg.ExtLst = NewCT_ExtensionList()
				if _agcfa := d.DecodeElement(_ebbg.ExtLst, &_gdcd); _agcfa != nil {
					return _agcfa
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0068\u0061r\u0074\u0053\u0070\u0061\u0063\u0065\u0020\u0025\u0076", _gdcd.Name)
				if _gbcgc := d.Skip(); _gbcgc != nil {
					return _gbcgc
				}
			}
		case _b.EndElement:
			break _fegcd
		case _b.CharData:
		}
	}
	return nil
}
func NewCT_MarkerSize() *CT_MarkerSize { _edad := &CT_MarkerSize{}; return _edad }

const ST_HPercentWithSymbolPattern = "0\u002a\u0028\u0028\u005b\u0035\u002d\u0039\u005d\u0029|\u0028\u005b\u0031\u002d\u0039\u005d\u005b0-\u0039\u005d\u0029\u007c(\u005b\u0031\u002d\u0034\u005d\u005b\u0030\u002d\u0039][\u0030\u002d9\u005d\u0029\u007c\u0035\u0030\u0030\u0029\u0025"

func (_aggag *ST_BarDir) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_aggag = 0
	case "\u0062\u0061\u0072":
		*_aggag = 1
	case "\u0063\u006f\u006c":
		*_aggag = 2
	}
	return nil
}
func (_bbace ST_BuiltInUnit) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_bbace.String(), start)
}

// ValidateWithPath validates the ChartSpace and its children, prefixing error messages with path
func (_ecbg *ChartSpace) ValidateWithPath(path string) error {
	if _egbdd := _ecbg.CT_ChartSpace.ValidateWithPath(path); _egbdd != nil {
		return _egbdd
	}
	return nil
}

// Validate validates the CT_LegendPos and its children
func (_dceb *CT_LegendPos) Validate() error {
	return _dceb.ValidateWithPath("\u0043\u0054\u005fL\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073")
}
func (_agc *CT_BandFmts) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_ddaa:
	for {
		_bfg, _cdc := d.Token()
		if _cdc != nil {
			return _cdc
		}
		switch _ccg := _bfg.(type) {
		case _b.StartElement:
			switch _ccg.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062a\u006e\u0064\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062a\u006e\u0064\u0046\u006d\u0074"}:
				_fbfd := NewCT_BandFmt()
				if _cgecd := d.DecodeElement(_fbfd, &_ccg); _cgecd != nil {
					return _cgecd
				}
				_agc.BandFmt = append(_agc.BandFmt, _fbfd)
			default:
				_df.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074\u0073\u0020\u0025\u0076", _ccg.Name)
				if _bedf := d.Skip(); _bedf != nil {
					return _bedf
				}
			}
		case _b.EndElement:
			break _ddaa
		case _b.CharData:
		}
	}
	return nil
}
func (_ddbba *CT_RelId) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0072\u003a\u0069\u0064"}, Value: _g.Sprintf("\u0025\u0076", _ddbba.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_LayoutMode() *CT_LayoutMode { _cecba := &CT_LayoutMode{}; return _cecba }
func (_fafef *CT_ErrDir) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fafef.ValAttr = ST_ErrDir(1)
	for _, _fbgbf := range start.Attr {
		if _fbgbf.Name.Local == "\u0076\u0061\u006c" {
			_fafef.ValAttr.UnmarshalXMLAttr(_fbgbf)
			continue
		}
	}
	for {
		_feeg, _geae := d.Token()
		if _geae != nil {
			return _g.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0045\u0072\u0072D\u0069\u0072\u003a\u0020\u0025\u0073", _geae)
		}
		if _dcae, _bbbd := _feeg.(_b.EndElement); _bbbd && _dcae.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bcafd ST_DLblPos) Validate() error { return _bcafd.ValidateWithPath("") }
func (_bcdf ST_AxPos) String() string {
	switch _bcdf {
	case 0:
		return ""
	case 1:
		return "\u0062"
	case 2:
		return "\u006c"
	case 3:
		return "\u0072"
	case 4:
		return "\u0074"
	}
	return ""
}
func ParseUnionST_GapAmount(s string) (ST_GapAmount, error) {
	if ST_GapAmountPercentPatternRe.MatchString(s) {
		return ST_GapAmount{ST_GapAmountPercent: &s}, nil
	}
	_beddcf, _ggcca := _e.ParseUint(s, 10, 16)
	if _ggcca != nil {
		return ST_GapAmount{}, _ggcca
	}
	_cgfdfg := uint16(_beddcf)
	return ST_GapAmount{ST_GapAmountUShort: &_cgfdfg}, nil
}

type CT_Skip struct {

	// Tick Skip Value
	ValAttr uint32
}

func (_eaag *CT_Orientation) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _eaag.ValAttr != ST_OrientationUnset {
		_aaag, _feca := _eaag.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _feca != nil {
			return _feca
		}
		start.Attr = append(start.Attr, _aaag)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_a *CT_Area3DChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _a.Grouping != nil {
		_ga := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_a.Grouping, _ga)
	}
	if _a.VaryColors != nil {
		_ed := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_a.VaryColors, _ed)
	}
	if _a.Ser != nil {
		_cc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _ag := range _a.Ser {
			e.EncodeElement(_ag, _cc)
		}
	}
	if _a.DLbls != nil {
		_eb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_a.DLbls, _eb)
	}
	if _a.DropLines != nil {
		_gfg := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_a.DropLines, _gfg)
	}
	if _a.GapDepth != nil {
		_aa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}}
		e.EncodeElement(_a.GapDepth, _aa)
	}
	_eg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _fd := range _a.AxId {
		e.EncodeElement(_fd, _eg)
	}
	if _a.ExtLst != nil {
		_ae := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_a.ExtLst, _ae)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_fcfbb *ST_RadarStyle) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_fcfbb = 0
	case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
		*_fcfbb = 1
	case "\u006d\u0061\u0072\u006b\u0065\u0072":
		*_fcfbb = 2
	case "\u0066\u0069\u006c\u006c\u0065\u0064":
		*_fcfbb = 3
	}
	return nil
}

// Validate validates the CT_DateAx and its children
func (_cdda *CT_DateAx) Validate() error {
	return _cdda.ValidateWithPath("\u0043T\u005f\u0044\u0061\u0074\u0065\u0041x")
}
func (_ggdeb *CT_SerAx) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_ggdeb.AxId = NewCT_UnsignedInt()
	_ggdeb.Scaling = NewCT_Scaling()
	_ggdeb.AxPos = NewCT_AxPos()
	_ggdeb.CrossAx = NewCT_UnsignedInt()
_edgb:
	for {
		_eegcf, _eace := d.Token()
		if _eace != nil {
			return _eace
		}
		switch _febac := _eegcf.(type) {
		case _b.StartElement:
			switch _febac.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _cefgee := d.DecodeElement(_ggdeb.AxId, &_febac); _cefgee != nil {
					return _cefgee
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _ddffa := d.DecodeElement(_ggdeb.Scaling, &_febac); _ddffa != nil {
					return _ddffa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_ggdeb.Delete = NewCT_Boolean()
				if _dfeae := d.DecodeElement(_ggdeb.Delete, &_febac); _dfeae != nil {
					return _dfeae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _bfabc := d.DecodeElement(_ggdeb.AxPos, &_febac); _bfabc != nil {
					return _bfabc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_ggdeb.MajorGridlines = NewCT_ChartLines()
				if _bageb := d.DecodeElement(_ggdeb.MajorGridlines, &_febac); _bageb != nil {
					return _bageb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_ggdeb.MinorGridlines = NewCT_ChartLines()
				if _dgcgg := d.DecodeElement(_ggdeb.MinorGridlines, &_febac); _dgcgg != nil {
					return _dgcgg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_ggdeb.Title = NewCT_Title()
				if _fcbc := d.DecodeElement(_ggdeb.Title, &_febac); _fcbc != nil {
					return _fcbc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_ggdeb.NumFmt = NewCT_NumFmt()
				if _ecbae := d.DecodeElement(_ggdeb.NumFmt, &_febac); _ecbae != nil {
					return _ecbae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_ggdeb.MajorTickMark = NewCT_TickMark()
				if _cgea := d.DecodeElement(_ggdeb.MajorTickMark, &_febac); _cgea != nil {
					return _cgea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_ggdeb.MinorTickMark = NewCT_TickMark()
				if _bded := d.DecodeElement(_ggdeb.MinorTickMark, &_febac); _bded != nil {
					return _bded
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_ggdeb.TickLblPos = NewCT_TickLblPos()
				if _egcff := d.DecodeElement(_ggdeb.TickLblPos, &_febac); _egcff != nil {
					return _egcff
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ggdeb.SpPr = _gfc.NewCT_ShapeProperties()
				if _egcea := d.DecodeElement(_ggdeb.SpPr, &_febac); _egcea != nil {
					return _egcea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_ggdeb.TxPr = _gfc.NewCT_TextBody()
				if _dbbbg := d.DecodeElement(_ggdeb.TxPr, &_febac); _dbbbg != nil {
					return _dbbbg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _cggge := d.DecodeElement(_ggdeb.CrossAx, &_febac); _cggge != nil {
					return _cggge
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_ggdeb.AxSharedChoice = NewEG_AxSharedChoice()
				if _cagaa := d.DecodeElement(&_ggdeb.AxSharedChoice.Crosses, &_febac); _cagaa != nil {
					return _cagaa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_ggdeb.AxSharedChoice = NewEG_AxSharedChoice()
				if _acdfgb := d.DecodeElement(&_ggdeb.AxSharedChoice.CrossesAt, &_febac); _acdfgb != nil {
					return _acdfgb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}:
				_ggdeb.TickLblSkip = NewCT_Skip()
				if _afdda := d.DecodeElement(_ggdeb.TickLblSkip, &_febac); _afdda != nil {
					return _afdda
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}:
				_ggdeb.TickMarkSkip = NewCT_Skip()
				if _eeefb := d.DecodeElement(_ggdeb.TickMarkSkip, &_febac); _eeefb != nil {
					return _eeefb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ggdeb.ExtLst = NewCT_ExtensionList()
				if _ddbfec := d.DecodeElement(_ggdeb.ExtLst, &_febac); _ddbfec != nil {
					return _ddbfec
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0065\u0072\u0041\u0078\u0020\u0025\u0076", _febac.Name)
				if _cbcac := d.Skip(); _cbcac != nil {
					return _cbcac
				}
			}
		case _b.EndElement:
			break _edgb
		case _b.CharData:
		}
	}
	return nil
}
func (_eec *CT_ChartSpace) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _eec.Date1904 != nil {
		_cdbb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}}
		e.EncodeElement(_eec.Date1904, _cdbb)
	}
	if _eec.Lang != nil {
		_bbd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0061\u006e\u0067"}}
		e.EncodeElement(_eec.Lang, _bbd)
	}
	if _eec.RoundedCorners != nil {
		_dgfab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003ar\u006f\u0075\u006ed\u0065\u0064\u0043\u006f\u0072\u006e\u0065\u0072\u0073"}}
		e.EncodeElement(_eec.RoundedCorners, _dgfab)
	}
	if _eec.Style != nil {
		_gdcc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0074\u0079\u006c\u0065"}}
		e.EncodeElement(_eec.Style, _gdcc)
	}
	if _eec.ClrMapOvr != nil {
		_cadc := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0063\u006c\u0072\u004d\u0061\u0070\u004f\u0076\u0072"}}
		e.EncodeElement(_eec.ClrMapOvr, _cadc)
	}
	if _eec.PivotSource != nil {
		_dfcd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}}
		e.EncodeElement(_eec.PivotSource, _dfcd)
	}
	if _eec.Protection != nil {
		_afdc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070r\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}}
		e.EncodeElement(_eec.Protection, _afdc)
	}
	_fcd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0063\u0068\u0061\u0072\u0074"}}
	e.EncodeElement(_eec.Chart, _fcd)
	if _eec.SpPr != nil {
		_gedd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_eec.SpPr, _gedd)
	}
	if _eec.TxPr != nil {
		_becd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_eec.TxPr, _becd)
	}
	if _eec.ExternalData != nil {
		_becf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u0065\u0072\u006e\u0061l\u0044\u0061\u0074\u0061"}}
		e.EncodeElement(_eec.ExternalData, _becf)
	}
	if _eec.PrintSettings != nil {
		_fgdg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0070r\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}}
		e.EncodeElement(_eec.PrintSettings, _fgdg)
	}
	if _eec.UserShapes != nil {
		_cdd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0075s\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}}
		e.EncodeElement(_eec.UserShapes, _cdd)
	}
	if _eec.ExtLst != nil {
		_ebac := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_eec.ExtLst, _ebac)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type ST_DispBlanksAs byte
type CT_Area3DChart struct {

	// Grouping
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean

	// Area Chart Series
	Ser []*CT_AreaSer

	// Data Labels
	DLbls *CT_DLbls

	// Drop Lines
	DropLines *CT_ChartLines

	// Gap Depth
	GapDepth *CT_GapAmount

	// Axis ID
	AxId []*CT_UnsignedInt

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_badd *CT_BarSer) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_gced := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_badd.Idx, _gced)
	_ebec := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_badd.Order, _ebec)
	if _badd.Tx != nil {
		_fbfc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_badd.Tx, _fbfc)
	}
	if _badd.SpPr != nil {
		_gcb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_badd.SpPr, _gcb)
	}
	if _badd.InvertIfNegative != nil {
		_beb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0069n\u0076\u0065\u0072\u0074\u0049f\u004e\u0065g\u0061\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_badd.InvertIfNegative, _beb)
	}
	if _badd.PictureOptions != nil {
		_facc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_badd.PictureOptions, _facc)
	}
	if _badd.DPt != nil {
		_eaf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _dgcb := range _badd.DPt {
			e.EncodeElement(_dgcb, _eaf)
		}
	}
	if _badd.DLbls != nil {
		_ddae := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_badd.DLbls, _ddae)
	}
	if _badd.Trendline != nil {
		_gcc := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _gfaa := range _badd.Trendline {
			e.EncodeElement(_gfaa, _gcc)
		}
	}
	if _badd.ErrBars != nil {
		_gdf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		e.EncodeElement(_badd.ErrBars, _gdf)
	}
	if _badd.Cat != nil {
		_caa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_badd.Cat, _caa)
	}
	if _badd.Val != nil {
		_cgd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_badd.Val, _cgd)
	}
	if _badd.Shape != nil {
		_eaga := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0068\u0061\u0070\u0065"}}
		e.EncodeElement(_badd.Shape, _eaga)
	}
	if _badd.ExtLst != nil {
		_gbfg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_badd.ExtLst, _gbfg)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type ST_SplitType byte

func NewEG_SerShared() *EG_SerShared {
	_edafe := &EG_SerShared{}
	_edafe.Idx = NewCT_UnsignedInt()
	_edafe.Order = NewCT_UnsignedInt()
	return _edafe
}

type CT_BubbleScale struct {

	// Bubble Scale Value
	ValAttr *ST_BubbleScale
}
type CT_StockChart struct {

	// Line Chart Series
	Ser []*CT_LineSer

	// Data Labels
	DLbls     *CT_DLbls
	DropLines *CT_ChartLines

	// High Low Lines
	HiLowLines *CT_ChartLines

	// Up/Down Bars
	UpDownBars *CT_UpDownBars

	// Axis ID
	AxId []*CT_UnsignedInt

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_dfcde *CT_ScatterChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dfcde.ScatterStyle = NewCT_ScatterStyle()
_cgadd:
	for {
		_ebbea, _eggef := d.Token()
		if _eggef != nil {
			return _eggef
		}
		switch _cged := _ebbea.(type) {
		case _b.StartElement:
			switch _cged.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065"}:
				if _fdga := d.DecodeElement(_dfcde.ScatterStyle, &_cged); _fdga != nil {
					return _fdga
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_dfcde.VaryColors = NewCT_Boolean()
				if _gdecf := d.DecodeElement(_dfcde.VaryColors, &_cged); _gdecf != nil {
					return _gdecf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_gdfc := NewCT_ScatterSer()
				if _cfcfcb := d.DecodeElement(_gdfc, &_cged); _cfcfcb != nil {
					return _cfcfcb
				}
				_dfcde.Ser = append(_dfcde.Ser, _gdfc)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_dfcde.DLbls = NewCT_DLbls()
				if _aagf := d.DecodeElement(_dfcde.DLbls, &_cged); _aagf != nil {
					return _aagf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_egcf := NewCT_UnsignedInt()
				if _faedd := d.DecodeElement(_egcf, &_cged); _faedd != nil {
					return _faedd
				}
				_dfcde.AxId = append(_dfcde.AxId, _egcf)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dfcde.ExtLst = NewCT_ExtensionList()
				if _fbaea := d.DecodeElement(_dfcde.ExtLst, &_cged); _fbaea != nil {
					return _fbaea
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _cged.Name)
				if _agafa := d.Skip(); _agafa != nil {
					return _agafa
				}
			}
		case _b.EndElement:
			break _cgadd
		case _b.CharData:
		}
	}
	return nil
}
func NewChart() *Chart { _afdde := &Chart{}; _afdde.CT_RelId = *NewCT_RelId(); return _afdde }
func (_eea *CT_BarChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_eea.BarDir = NewCT_BarDir()
_dccc:
	for {
		_decf, _beda := d.Token()
		if _beda != nil {
			return _beda
		}
		switch _bbag := _decf.(type) {
		case _b.StartElement:
			switch _bbag.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}:
				if _fdeg := d.DecodeElement(_eea.BarDir, &_bbag); _fdeg != nil {
					return _fdeg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_eea.Grouping = NewCT_BarGrouping()
				if _dad := d.DecodeElement(_eea.Grouping, &_bbag); _dad != nil {
					return _dad
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_eea.VaryColors = NewCT_Boolean()
				if _gbfb := d.DecodeElement(_eea.VaryColors, &_bbag); _gbfb != nil {
					return _gbfb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_bbc := NewCT_BarSer()
				if _dddf := d.DecodeElement(_bbc, &_bbag); _dddf != nil {
					return _dddf
				}
				_eea.Ser = append(_eea.Ser, _bbc)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_eea.DLbls = NewCT_DLbls()
				if _abcd := d.DecodeElement(_eea.DLbls, &_bbag); _abcd != nil {
					return _abcd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_eea.GapWidth = NewCT_GapAmount()
				if _fbaaa := d.DecodeElement(_eea.GapWidth, &_bbag); _fbaaa != nil {
					return _fbaaa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0070"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0070"}:
				_eea.Overlap = NewCT_Overlap()
				if _bfdc := d.DecodeElement(_eea.Overlap, &_bbag); _bfdc != nil {
					return _bfdc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_eac := NewCT_ChartLines()
				if _aded := d.DecodeElement(_eac, &_bbag); _aded != nil {
					return _aded
				}
				_eea.SerLines = append(_eea.SerLines, _eac)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_cgef := NewCT_UnsignedInt()
				if _dfcg := d.DecodeElement(_cgef, &_bbag); _dfcg != nil {
					return _dfcg
				}
				_eea.AxId = append(_eea.AxId, _cgef)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_eea.ExtLst = NewCT_ExtensionList()
				if _bfadg := d.DecodeElement(_eea.ExtLst, &_bbag); _bfadg != nil {
					return _bfadg
				}
			default:
				_df.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _bbag.Name)
				if _fbcd := d.Skip(); _fbcd != nil {
					return _fbcd
				}
			}
		case _b.EndElement:
			break _dccc
		case _b.CharData:
		}
	}
	return nil
}

type CT_RadarSer struct {

	// Index
	Idx *CT_UnsignedInt

	// Order
	Order *CT_UnsignedInt

	// Series Text
	Tx   *CT_SerTx
	SpPr *_gfc.CT_ShapeProperties

	// Marker
	Marker *CT_Marker

	// Data Point
	DPt []*CT_DPt

	// Data Labels
	DLbls *CT_DLbls

	// Category Axis Data
	Cat *CT_AxDataSource
	Val *CT_NumDataSource

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func NewCT_Marker() *CT_Marker { _ggdfc := &CT_Marker{}; return _ggdfc }
func NewCT_ScatterSer() *CT_ScatterSer {
	_gecdd := &CT_ScatterSer{}
	_gecdd.Idx = NewCT_UnsignedInt()
	_gecdd.Order = NewCT_UnsignedInt()
	return _gecdd
}
func (_faaa ST_Grouping) String() string {
	switch _faaa {
	case 0:
		return ""
	case 1:
		return "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case 2:
		return "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case 3:
		return "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return ""
}
func (_fabgf *CT_UpDownBars) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _fabgf.GapWidth != nil {
		_cdbdd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_fabgf.GapWidth, _cdbdd)
	}
	if _fabgf.UpBars != nil {
		_facbc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0075\u0070\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_fabgf.UpBars, _facbc)
	}
	if _fabgf.DownBars != nil {
		_cdgg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_fabgf.DownBars, _cdgg)
	}
	if _fabgf.ExtLst != nil {
		_ddec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fabgf.ExtLst, _ddec)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_cgcbae *CT_ScatterStyle) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _cgcbae.ValAttr != ST_ScatterStyleUnset {
		_adaba, _bggb := _cgcbae.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _bggb != nil {
			return _bggb
		}
		start.Attr = append(start.Attr, _adaba)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_debfe ST_BarDir) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_eddfgd := _b.Attr{}
	_eddfgd.Name = name
	switch _debfe {
	case ST_BarDirUnset:
		_eddfgd.Value = ""
	case ST_BarDirBar:
		_eddfgd.Value = "\u0062\u0061\u0072"
	case ST_BarDirCol:
		_eddfgd.Value = "\u0063\u006f\u006c"
	}
	return _eddfgd, nil
}
func (_fcfa ST_PageSetupOrientation) String() string {
	switch _fcfa {
	case 0:
		return ""
	case 1:
		return "\u0064e\u0066\u0061\u0075\u006c\u0074"
	case 2:
		return "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074"
	case 3:
		return "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e"
	}
	return ""
}
func (_bfbab ST_DepthPercent) String() string {
	if _bfbab.ST_DepthPercentWithSymbol != nil {
		return _g.Sprintf("\u0025\u0076", *_bfbab.ST_DepthPercentWithSymbol)
	}
	if _bfbab.ST_DepthPercentUShort != nil {
		return _g.Sprintf("\u0025\u0076", *_bfbab.ST_DepthPercentUShort)
	}
	return ""
}

const ST_GapAmountPercentPattern = "0\u002a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029|\u0028\u005b\u0031\u002d\u0039\u005d\u005b0-\u0039\u005d\u0029\u007c(\u005b\u0031\u002d\u0034\u005d\u005b\u0030\u002d\u0039][\u0030\u002d9\u005d\u0029\u007c\u0035\u0030\u0030\u0029\u0025"

func (_cddacd ST_TimeUnit) String() string {
	switch _cddacd {
	case 0:
		return ""
	case 1:
		return "\u0064\u0061\u0079\u0073"
	case 2:
		return "\u006d\u006f\u006e\u0074\u0068\u0073"
	case 3:
		return "\u0079\u0065\u0061r\u0073"
	}
	return ""
}
func NewCT_ExtensionList() *CT_ExtensionList {
	_fgcf := &CT_ExtensionList{}
	return _fgcf
}

type CT_LegendEntry struct {

	// Index
	Idx               *CT_UnsignedInt
	LegendEntryChoice *CT_LegendEntryChoice

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_dcfg *CT_PageSetup) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _dcfg.PaperSizeAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0070a\u0070\u0065\u0072\u0053\u0069\u007ae"}, Value: _g.Sprintf("\u0025\u0076", *_dcfg.PaperSizeAttr)})
	}
	if _dcfg.PaperHeightAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "p\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074"}, Value: _g.Sprintf("\u0025\u0076", *_dcfg.PaperHeightAttr)})
	}
	if _dcfg.PaperWidthAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0070\u0061\u0070\u0065\u0072\u0057\u0069\u0064\u0074\u0068"}, Value: _g.Sprintf("\u0025\u0076", *_dcfg.PaperWidthAttr)})
	}
	if _dcfg.FirstPageNumberAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0066i\u0072s\u0074\u0050\u0061\u0067\u0065\u004e\u0075\u006d\u0062\u0065\u0072"}, Value: _g.Sprintf("\u0025\u0076", *_dcfg.FirstPageNumberAttr)})
	}
	if _dcfg.OrientationAttr != ST_PageSetupOrientationUnset {
		_aaeb, _bdgcf := _dcfg.OrientationAttr.MarshalXMLAttr(_b.Name{Local: "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"})
		if _bdgcf != nil {
			return _bdgcf
		}
		start.Attr = append(start.Attr, _aaeb)
	}
	if _dcfg.BlackAndWhiteAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0062\u006c\u0061\u0063\u006b\u0041\u006e\u0064\u0057\u0068\u0069\u0074\u0065"}, Value: _g.Sprintf("\u0025\u0064", _bfeaa(*_dcfg.BlackAndWhiteAttr))})
	}
	if _dcfg.DraftAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0064\u0072\u0061f\u0074"}, Value: _g.Sprintf("\u0025\u0064", _bfeaa(*_dcfg.DraftAttr))})
	}
	if _dcfg.UseFirstPageNumberAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0075s\u0065F\u0069\u0072\u0073\u0074\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072"}, Value: _g.Sprintf("\u0025\u0064", _bfeaa(*_dcfg.UseFirstPageNumberAttr))})
	}
	if _dcfg.HorizontalDpiAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0044\u0070\u0069"}, Value: _g.Sprintf("\u0025\u0076", *_dcfg.HorizontalDpiAttr)})
	}
	if _dcfg.VerticalDpiAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "v\u0065\u0072\u0074\u0069\u0063\u0061\u006c\u0044\u0070\u0069"}, Value: _g.Sprintf("\u0025\u0076", *_dcfg.VerticalDpiAttr)})
	}
	if _dcfg.CopiesAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0063\u006f\u0070\u0069\u0065\u0073"}, Value: _g.Sprintf("\u0025\u0076", *_dcfg.CopiesAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_LegendEntryChoice and its children, prefixing error messages with path
func (_edffc *CT_LegendEntryChoice) ValidateWithPath(path string) error {
	if _edffc.Delete != nil {
		if _aaccd := _edffc.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _aaccd != nil {
			return _aaccd
		}
	}
	if _edffc.TxPr != nil {
		if _gcbced := _edffc.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _gcbced != nil {
			return _gcbced
		}
	}
	return nil
}

// Validate validates the CT_AxDataSource and its children
func (_fee *CT_AxDataSource) Validate() error {
	return _fee.ValidateWithPath("\u0043T\u005fA\u0078\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065")
}

// Validate validates the EG_SurfaceChartShared and its children
func (_deca *EG_SurfaceChartShared) Validate() error {
	return _deca.ValidateWithPath("E\u0047\u005f\u0053\u0075rf\u0061c\u0065\u0043\u0068\u0061\u0072t\u0053\u0068\u0061\u0072\u0065\u0064")
}

type CT_LblAlgn struct {

	// Label Alignment Value
	ValAttr ST_LblAlgn
}

var ST_GapAmountPercentPatternRe = _f.MustCompile(ST_GapAmountPercentPattern)

// Validate validates the CT_Bar3DChart and its children
func (_abe *CT_Bar3DChart) Validate() error {
	return _abe.ValidateWithPath("\u0043\u0054\u005f\u0042\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074")
}
func (_bbbge *ST_TimeUnit) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_abea, _gfcdc := d.Token()
	if _gfcdc != nil {
		return _gfcdc
	}
	if _fcbfe, _agad := _abea.(_b.EndElement); _agad && _fcbfe.Name == start.Name {
		*_bbbge = 1
		return nil
	}
	if _cgcde, _adeaf := _abea.(_b.CharData); !_adeaf {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _abea)
	} else {
		switch string(_cgcde) {
		case "":
			*_bbbge = 0
		case "\u0064\u0061\u0079\u0073":
			*_bbbge = 1
		case "\u006d\u006f\u006e\u0074\u0068\u0073":
			*_bbbge = 2
		case "\u0079\u0065\u0061r\u0073":
			*_bbbge = 3
		}
	}
	_abea, _gfcdc = d.Token()
	if _gfcdc != nil {
		return _gfcdc
	}
	if _acfe, _ecfgbg := _abea.(_b.EndElement); _ecfgbg && _acfe.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _abea)
}

type CT_TxChoice struct {
	StrRef *CT_StrRef
	Rich   *_gfc.CT_TextBody
}

func (_edba *CT_RotY) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _aadbb := range start.Attr {
		if _aadbb.Name.Local == "\u0076\u0061\u006c" {
			_gdda, _aacgb := _e.ParseUint(_aadbb.Value, 10, 16)
			if _aacgb != nil {
				return _aacgb
			}
			_cdbca := uint16(_gdda)
			_edba.ValAttr = &_cdbca
			continue
		}
	}
	for {
		_gdcbf, _eggg := d.Token()
		if _eggg != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0052\u006f\u0074\u0059\u003a\u0020\u0025\u0073", _eggg)
		}
		if _acaef, _afeca := _gdcbf.(_b.EndElement); _afeca && _acaef.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ffabb *ST_Shape) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_ffabb = 0
	case "\u0063\u006f\u006e\u0065":
		*_ffabb = 1
	case "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x":
		*_ffabb = 2
	case "\u0062\u006f\u0078":
		*_ffabb = 3
	case "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072":
		*_ffabb = 4
	case "\u0070y\u0072\u0061\u006d\u0069\u0064":
		*_ffabb = 5
	case "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078":
		*_ffabb = 6
	}
	return nil
}

// ValidateWithPath validates the CT_Skip and its children, prefixing error messages with path
func (_gbac *CT_Skip) ValidateWithPath(path string) error {
	if _gbac.ValAttr < 1 {
		return _g.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0031\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _gbac.ValAttr)
	}
	return nil
}
func (_gaad *CT_LegendEntry) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_gaad.Idx = NewCT_UnsignedInt()
	_gaad.LegendEntryChoice = NewCT_LegendEntryChoice()
_feab:
	for {
		_gbfbaa, _ggdb := d.Token()
		if _ggdb != nil {
			return _ggdb
		}
		switch _abgdc := _gbfbaa.(type) {
		case _b.StartElement:
			switch _abgdc.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _bfbd := d.DecodeElement(_gaad.Idx, &_abgdc); _bfbd != nil {
					return _bfbd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				if _gaad.LegendEntryChoice == nil {
					_gaad.LegendEntryChoice = NewCT_LegendEntryChoice()
				}
				if _cbgd := d.DecodeElement(&_gaad.LegendEntryChoice.Delete, &_abgdc); _cbgd != nil {
					return _cbgd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				if _gaad.LegendEntryChoice == nil {
					_gaad.LegendEntryChoice = NewCT_LegendEntryChoice()
				}
				if _bfcec := d.DecodeElement(&_gaad.LegendEntryChoice.TxPr, &_abgdc); _bfcec != nil {
					return _bfcec
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gaad.ExtLst = NewCT_ExtensionList()
				if _fafff := d.DecodeElement(_gaad.ExtLst, &_abgdc); _fafff != nil {
					return _fafff
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064\u0045n\u0074r\u0079\u0020\u0025\u0076", _abgdc.Name)
				if _ffeag := d.Skip(); _ffeag != nil {
					return _ffeag
				}
			}
		case _b.EndElement:
			break _feab
		case _b.CharData:
		}
	}
	return nil
}
func (_bddc ST_ErrDir) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_fgcag := _b.Attr{}
	_fgcag.Name = name
	switch _bddc {
	case ST_ErrDirUnset:
		_fgcag.Value = ""
	case ST_ErrDirX:
		_fgcag.Value = "\u0078"
	case ST_ErrDirY:
		_fgcag.Value = "\u0079"
	}
	return _fgcag, nil
}
func (_cbfad *CT_UpDownBar) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_efbb:
	for {
		_ebde, _gbgd := d.Token()
		if _gbgd != nil {
			return _gbgd
		}
		switch _ffagc := _ebde.(type) {
		case _b.StartElement:
			switch _ffagc.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cbfad.SpPr = _gfc.NewCT_ShapeProperties()
				if _eeabf := d.DecodeElement(_cbfad.SpPr, &_ffagc); _eeabf != nil {
					return _eeabf
				}
			default:
				_df.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_U\u0070\u0044o\u0077\u006e\u0042\u0061\u0072\u0020\u0025\u0076", _ffagc.Name)
				if _fgga := d.Skip(); _fgga != nil {
					return _fgga
				}
			}
		case _b.EndElement:
			break _efbb
		case _b.CharData:
		}
	}
	return nil
}
func (_gaaa *CT_GapAmount) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _gcfb := range start.Attr {
		if _gcfb.Name.Local == "\u0076\u0061\u006c" {
			_dcafc, _fddg := ParseUnionST_GapAmount(_gcfb.Value)
			if _fddg != nil {
				return _fddg
			}
			_gaaa.ValAttr = &_dcafc
			continue
		}
	}
	for {
		_cedd, _cedf := d.Token()
		if _cedf != nil {
			return _g.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0047\u0061p\u0041\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0073", _cedf)
		}
		if _ebfe, _cac := _cedd.(_b.EndElement); _cac && _ebfe.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ebg *CT_Boolean) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _gbd := range start.Attr {
		if _gbd.Name.Local == "\u0076\u0061\u006c" {
			_cae, _eeb := _e.ParseBool(_gbd.Value)
			if _eeb != nil {
				return _eeb
			}
			_ebg.ValAttr = &_cae
			continue
		}
	}
	for {
		_fad, _gbdc := d.Token()
		if _gbdc != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0042\u006f\u006f\u006c\u0065\u0061\u006e\u003a\u0020%\u0073", _gbdc)
		}
		if _gafb, _gcgg := _fad.(_b.EndElement); _gcgg && _gafb.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Shape struct {

	// Shape Value
	ValAttr ST_Shape
}

// ValidateWithPath validates the CT_PictureStackUnit and its children, prefixing error messages with path
func (_gfgb *CT_PictureStackUnit) ValidateWithPath(path string) error {
	if _gfgb.ValAttr <= 0 {
		return _g.Errorf("\u0025\u0073\u002fm.\u0056\u0061\u006c\u0041\u0074\u0074\u0072\u0020\u006du\u0073t\u0020b\u0065 \u003e\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _gfgb.ValAttr)
	}
	return nil
}

// Validate validates the CT_DLblPos and its children
func (_ebcbb *CT_DLblPos) Validate() error {
	return _ebcbb.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0050\u006f\u0073")
}

const (
	ST_TickMarkUnset ST_TickMark = 0
	ST_TickMarkCross ST_TickMark = 1
	ST_TickMarkIn    ST_TickMark = 2
	ST_TickMarkNone  ST_TickMark = 3
	ST_TickMarkOut   ST_TickMark = 4
)

type CT_CatAx struct {

	// Axis ID
	AxId *CT_UnsignedInt

	// Scaling
	Scaling *CT_Scaling

	// Delete
	Delete *CT_Boolean

	// Axis Position
	AxPos *CT_AxPos

	// Major Gridlines
	MajorGridlines *CT_ChartLines

	// Minor Gridlines
	MinorGridlines *CT_ChartLines

	// Title
	Title *CT_Title

	// Number Format
	NumFmt *CT_NumFmt

	// Major Tick Mark
	MajorTickMark *CT_TickMark

	// Minor Tick Mark
	MinorTickMark *CT_TickMark

	// Tick Label Position
	TickLblPos *CT_TickLblPos
	SpPr       *_gfc.CT_ShapeProperties
	TxPr       *_gfc.CT_TextBody

	// Crossing Axis ID
	CrossAx        *CT_UnsignedInt
	AxSharedChoice *EG_AxSharedChoice

	// Automatic Category Axis
	Auto *CT_Boolean

	// Label Alignment
	LblAlgn *CT_LblAlgn

	// Label Offset
	LblOffset   *CT_LblOffset
	TickLblSkip *CT_Skip

	// Tick Mark Skip
	TickMarkSkip *CT_Skip

	// No Multi-level Labels
	NoMultiLvlLbl *CT_Boolean

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

// Validate validates the CT_PageMargins and its children
func (_ageege *CT_PageMargins) Validate() error {
	return _ageege.ValidateWithPath("\u0043\u0054\u005f\u0050\u0061\u0067\u0065\u004d\u0061r\u0067\u0069\u006e\u0073")
}
func NewCT_HeaderFooter() *CT_HeaderFooter { _gfeg := &CT_HeaderFooter{}; return _gfeg }
func (_gbfbe *ST_ErrValType) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_gbfbe = 0
	case "\u0063\u0075\u0073\u0074":
		*_gbfbe = 1
	case "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c":
		*_gbfbe = 2
	case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065":
		*_gbfbe = 3
	case "\u0073\u0074\u0064\u0044\u0065\u0076":
		*_gbfbe = 4
	case "\u0073\u0074\u0064\u0045\u0072\u0072":
		*_gbfbe = 5
	}
	return nil
}
func (_dggbae *EG_PieChartShared) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_dafa:
	for {
		_dbccb, _ebfac := d.Token()
		if _ebfac != nil {
			return _ebfac
		}
		switch _dcfdf := _dbccb.(type) {
		case _b.StartElement:
			switch _dcfdf.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_dggbae.VaryColors = NewCT_Boolean()
				if _ccaeb := d.DecodeElement(_dggbae.VaryColors, &_dcfdf); _ccaeb != nil {
					return _ccaeb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_bbbcca := NewCT_PieSer()
				if _gecaf := d.DecodeElement(_bbbcca, &_dcfdf); _gecaf != nil {
					return _gecaf
				}
				_dggbae.Ser = append(_dggbae.Ser, _bbbcca)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_dggbae.DLbls = NewCT_DLbls()
				if _bcgec := d.DecodeElement(_dggbae.DLbls, &_dcfdf); _bcgec != nil {
					return _bcgec
				}
			default:
				_df.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _dcfdf.Name)
				if _dcbda := d.Skip(); _dcbda != nil {
					return _dcbda
				}
			}
		case _b.EndElement:
			break _dafa
		case _b.CharData:
		}
	}
	return nil
}
func NewCT_HoleSize() *CT_HoleSize { _cedg := &CT_HoleSize{}; return _cedg }
func (_dac *CT_DLbls) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _dac.DLbl != nil {
		_cefge := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u004c\u0062\u006c"}}
		for _, _begc := range _dac.DLbl {
			e.EncodeElement(_begc, _cefge)
		}
	}
	_dac.DLblsChoice.MarshalXML(e, _b.StartElement{})
	if _dac.ExtLst != nil {
		_afag := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dac.ExtLst, _afag)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_LblOffset and its children, prefixing error messages with path
func (_aefad *CT_LblOffset) ValidateWithPath(path string) error {
	if _aefad.ValAttr != nil {
		if _bgcae := _aefad.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bgcae != nil {
			return _bgcae
		}
	}
	return nil
}

type ST_BuiltInUnit byte

// ValidateWithPath validates the CT_DLblsChoice and its children, prefixing error messages with path
func (_caaf *CT_DLblsChoice) ValidateWithPath(path string) error {
	if _caaf.Delete != nil {
		if _eaad := _caaf.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _eaad != nil {
			return _eaad
		}
	}
	if _caaf.NumFmt != nil {
		if _cefgc := _caaf.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _cefgc != nil {
			return _cefgc
		}
	}
	if _caaf.SpPr != nil {
		if _adad := _caaf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _adad != nil {
			return _adad
		}
	}
	if _caaf.TxPr != nil {
		if _dafb := _caaf.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _dafb != nil {
			return _dafb
		}
	}
	if _caaf.DLblPos != nil {
		if _gdgdd := _caaf.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _gdgdd != nil {
			return _gdgdd
		}
	}
	if _caaf.ShowLegendKey != nil {
		if _adbe := _caaf.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _adbe != nil {
			return _adbe
		}
	}
	if _caaf.ShowVal != nil {
		if _abef := _caaf.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _abef != nil {
			return _abef
		}
	}
	if _caaf.ShowCatName != nil {
		if _edcg := _caaf.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _edcg != nil {
			return _edcg
		}
	}
	if _caaf.ShowSerName != nil {
		if _gaeb := _caaf.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _gaeb != nil {
			return _gaeb
		}
	}
	if _caaf.ShowPercent != nil {
		if _dcccc := _caaf.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _dcccc != nil {
			return _dcccc
		}
	}
	if _caaf.ShowBubbleSize != nil {
		if _dedb := _caaf.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _dedb != nil {
			return _dedb
		}
	}
	if _caaf.ShowLeaderLines != nil {
		if _fcbeb := _caaf.ShowLeaderLines.ValidateWithPath(path + "\u002f\u0053h\u006f\u0077\u004ce\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _fcbeb != nil {
			return _fcbeb
		}
	}
	if _caaf.LeaderLines != nil {
		if _gbeg := _caaf.LeaderLines.ValidateWithPath(path + "\u002f\u004c\u0065a\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _gbeg != nil {
			return _gbeg
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Style and its children, prefixing error messages with path
func (_bfaa *CT_Style) ValidateWithPath(path string) error {
	if _bfaa.ValAttr < 1 {
		return _g.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0031\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _bfaa.ValAttr)
	}
	if _bfaa.ValAttr > 48 {
		return _g.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003c\u003d\u0020\u00348 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _bfaa.ValAttr)
	}
	return nil
}
func (_fgcc *CT_LayoutMode) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _fgcc.ValAttr != ST_LayoutModeUnset {
		_accaf, _egcgd := _fgcc.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _egcgd != nil {
			return _egcgd
		}
		start.Attr = append(start.Attr, _accaf)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_adbb ST_RadarStyle) Validate() error { return _adbb.ValidateWithPath("") }
func (_ffgacd ST_ScatterStyle) ValidateWithPath(path string) error {
	switch _ffgacd {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ffgacd))
	}
	return nil
}

const (
	ST_BuiltInUnitUnset            ST_BuiltInUnit = 0
	ST_BuiltInUnitHundreds         ST_BuiltInUnit = 1
	ST_BuiltInUnitThousands        ST_BuiltInUnit = 2
	ST_BuiltInUnitTenThousands     ST_BuiltInUnit = 3
	ST_BuiltInUnitHundredThousands ST_BuiltInUnit = 4
	ST_BuiltInUnitMillions         ST_BuiltInUnit = 5
	ST_BuiltInUnitTenMillions      ST_BuiltInUnit = 6
	ST_BuiltInUnitHundredMillions  ST_BuiltInUnit = 7
	ST_BuiltInUnitBillions         ST_BuiltInUnit = 8
	ST_BuiltInUnitTrillions        ST_BuiltInUnit = 9
)

func (_gedgc *ST_SplitType) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_gedgc = 0
	case "\u0061\u0075\u0074\u006f":
		*_gedgc = 1
	case "\u0063\u0075\u0073\u0074":
		*_gedgc = 2
	case "\u0070e\u0072\u0063\u0065\u006e\u0074":
		*_gedgc = 3
	case "\u0070\u006f\u0073":
		*_gedgc = 4
	case "\u0076\u0061\u006c":
		*_gedgc = 5
	}
	return nil
}
func (_cacd *ST_TickMark) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_febb, _cafbb := d.Token()
	if _cafbb != nil {
		return _cafbb
	}
	if _cdaa, _bbcaf := _febb.(_b.EndElement); _bbcaf && _cdaa.Name == start.Name {
		*_cacd = 1
		return nil
	}
	if _cacf, _ddaac := _febb.(_b.CharData); !_ddaac {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _febb)
	} else {
		switch string(_cacf) {
		case "":
			*_cacd = 0
		case "\u0063\u0072\u006fs\u0073":
			*_cacd = 1
		case "\u0069\u006e":
			*_cacd = 2
		case "\u006e\u006f\u006e\u0065":
			*_cacd = 3
		case "\u006f\u0075\u0074":
			*_cacd = 4
		}
	}
	_febb, _cafbb = d.Token()
	if _cafbb != nil {
		return _cafbb
	}
	if _gdga, _dcfbae := _febb.(_b.EndElement); _dcfbae && _gdga.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _febb)
}
func ParseUnionST_HPercent(s string) (ST_HPercent, error) {
	if ST_HPercentWithSymbolPatternRe.MatchString(s) {
		return ST_HPercent{ST_HPercentWithSymbol: &s}, nil
	}
	_cfacdf, _fffffc := _e.ParseUint(s, 10, 16)
	if _fffffc != nil {
		return ST_HPercent{}, _fffffc
	}
	_fefaf := uint16(_cfacdf)
	return ST_HPercent{ST_HPercentUShort: &_fefaf}, nil
}
func (_deag ST_ScatterStyle) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_deag.String(), start)
}

// Validate validates the CT_Legend and its children
func (_bbfa *CT_Legend) Validate() error {
	return _bbfa.ValidateWithPath("\u0043T\u005f\u004c\u0065\u0067\u0065\u006ed")
}
func (_gacc *CT_BubbleChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _gacc.VaryColors != nil {
		_fcgd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_gacc.VaryColors, _fcgd)
	}
	if _gacc.Ser != nil {
		_dgga := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _abf := range _gacc.Ser {
			e.EncodeElement(_abf, _dgga)
		}
	}
	if _gacc.DLbls != nil {
		_fbfe := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gacc.DLbls, _fbfe)
	}
	if _gacc.Bubble3D != nil {
		_ffeg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}}
		e.EncodeElement(_gacc.Bubble3D, _ffeg)
	}
	if _gacc.BubbleScale != nil {
		_fdf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"}}
		e.EncodeElement(_gacc.BubbleScale, _fdf)
	}
	if _gacc.ShowNegBubbles != nil {
		_fdbb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003as\u0068\u006f\u0077N\u0065\u0067\u0042\u0075\u0062\u0062\u006c\u0065\u0073"}}
		e.EncodeElement(_gacc.ShowNegBubbles, _fdbb)
	}
	if _gacc.SizeRepresents != nil {
		_fafd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003as\u0069\u007a\u0065R\u0065\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0073"}}
		e.EncodeElement(_gacc.SizeRepresents, _fafd)
	}
	_fag := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _dgac := range _gacc.AxId {
		e.EncodeElement(_dgac, _fag)
	}
	if _gacc.ExtLst != nil {
		_efe := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gacc.ExtLst, _efe)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_Thickness and its children, prefixing error messages with path
func (_ccea *CT_Thickness) ValidateWithPath(path string) error {
	if _acffb := _ccea.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _acffb != nil {
		return _acffb
	}
	return nil
}

// Validate validates the CT_CustSplit and its children
func (_ffbe *CT_CustSplit) Validate() error {
	return _ffbe.ValidateWithPath("\u0043\u0054\u005fC\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074")
}

type CT_RotX struct {

	// X Rotation Value
	ValAttr *int8
}

func (_gfdbdc ST_SplitType) Validate() error { return _gfdbdc.ValidateWithPath("") }

// ValidateWithPath validates the CT_GapAmount and its children, prefixing error messages with path
func (_cceee *CT_GapAmount) ValidateWithPath(path string) error {
	if _cceee.ValAttr != nil {
		if _ebbdd := _cceee.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ebbdd != nil {
			return _ebbdd
		}
	}
	return nil
}
func (_gcbbf ST_CrossBetween) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_gcbbf.String(), start)
}

// Validate validates the CT_Thickness and its children
func (_babe *CT_Thickness) Validate() error {
	return _babe.ValidateWithPath("\u0043\u0054\u005fT\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073")
}

type CT_DispUnits struct {
	DispUnitsChoice *CT_DispUnitsChoice

	// Display Units Label
	DispUnitsLbl *CT_DispUnitsLbl

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}
type CT_FirstSliceAng struct {

	// First Slice Angle Value
	ValAttr *uint16
}

// Validate validates the CT_SerAx and its children
func (_dcdgf *CT_SerAx) Validate() error {
	return _dcdgf.ValidateWithPath("\u0043\u0054\u005f\u0053\u0065\u0072\u0041\u0078")
}
func (_gdfec *EG_BarChartShared) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_ffgge := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0044\u0069\u0072"}}
	e.EncodeElement(_gdfec.BarDir, _ffgge)
	if _gdfec.Grouping != nil {
		_dfebd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_gdfec.Grouping, _dfebd)
	}
	if _gdfec.VaryColors != nil {
		_gcgge := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_gdfec.VaryColors, _gcgge)
	}
	if _gdfec.Ser != nil {
		_addf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _fbabf := range _gdfec.Ser {
			e.EncodeElement(_fbabf, _addf)
		}
	}
	if _gdfec.DLbls != nil {
		_gbggb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gdfec.DLbls, _gbggb)
	}
	return nil
}
func (_gfcaa *CT_StockChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_cfcbf:
	for {
		_eccfe, _dagc := d.Token()
		if _dagc != nil {
			return _dagc
		}
		switch _bfedc := _eccfe.(type) {
		case _b.StartElement:
			switch _bfedc.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_dgcgb := NewCT_LineSer()
				if _eaaaf := d.DecodeElement(_dgcgb, &_bfedc); _eaaaf != nil {
					return _eaaaf
				}
				_gfcaa.Ser = append(_gfcaa.Ser, _dgcgb)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_gfcaa.DLbls = NewCT_DLbls()
				if _ccece := d.DecodeElement(_gfcaa.DLbls, &_bfedc); _ccece != nil {
					return _ccece
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_gfcaa.DropLines = NewCT_ChartLines()
				if _ddffg := d.DecodeElement(_gfcaa.DropLines, &_bfedc); _ddffg != nil {
					return _ddffg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}:
				_gfcaa.HiLowLines = NewCT_ChartLines()
				if _ebfc := d.DecodeElement(_gfcaa.HiLowLines, &_bfedc); _ebfc != nil {
					return _ebfc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}:
				_gfcaa.UpDownBars = NewCT_UpDownBars()
				if _bafab := d.DecodeElement(_gfcaa.UpDownBars, &_bfedc); _bafab != nil {
					return _bafab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_fdfd := NewCT_UnsignedInt()
				if _cffgce := d.DecodeElement(_fdfd, &_bfedc); _cffgce != nil {
					return _cffgce
				}
				_gfcaa.AxId = append(_gfcaa.AxId, _fdfd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gfcaa.ExtLst = NewCT_ExtensionList()
				if _dabge := d.DecodeElement(_gfcaa.ExtLst, &_bfedc); _dabge != nil {
					return _dabge
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053t\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _bfedc.Name)
				if _caabf := d.Skip(); _caabf != nil {
					return _caabf
				}
			}
		case _b.EndElement:
			break _cfcbf
		case _b.CharData:
		}
	}
	return nil
}
func (_abag *CT_ErrValType) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _egdb := range start.Attr {
		if _egdb.Name.Local == "\u0076\u0061\u006c" {
			_abag.ValAttr.UnmarshalXMLAttr(_egdb)
			continue
		}
	}
	for {
		_ccdgd, _eddca := d.Token()
		if _eddca != nil {
			return _g.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0045r\u0072V\u0061l\u0054\u0079\u0070\u0065\u003a\u0020\u0025s", _eddca)
		}
		if _gabcd, _bfed := _ccdgd.(_b.EndElement); _bfed && _gabcd.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_Surface3DChart and its children
func (_beadd *CT_Surface3DChart) Validate() error {
	return _beadd.ValidateWithPath("\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074")
}

// Validate validates the CT_UpDownBar and its children
func (_ebab *CT_UpDownBar) Validate() error {
	return _ebab.ValidateWithPath("\u0043\u0054\u005fU\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072")
}
func NewCT_AreaChart() *CT_AreaChart { _ff := &CT_AreaChart{}; return _ff }

// Validate validates the UserShapes and its children
func (_dbfdd *UserShapes) Validate() error {
	return _dbfdd.ValidateWithPath("\u0055\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073")
}
func (_cfce *ST_LayoutTarget) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_bdgad, _efafa := d.Token()
	if _efafa != nil {
		return _efafa
	}
	if _efdfe, _bfgefg := _bdgad.(_b.EndElement); _bfgefg && _efdfe.Name == start.Name {
		*_cfce = 1
		return nil
	}
	if _facec, _dcfde := _bdgad.(_b.CharData); !_dcfde {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bdgad)
	} else {
		switch string(_facec) {
		case "":
			*_cfce = 0
		case "\u0069\u006e\u006ee\u0072":
			*_cfce = 1
		case "\u006f\u0075\u0074e\u0072":
			*_cfce = 2
		}
	}
	_bdgad, _efafa = d.Token()
	if _efafa != nil {
		return _efafa
	}
	if _ebaac, _eebee := _bdgad.(_b.EndElement); _eebee && _ebaac.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bdgad)
}

// Validate validates the CT_BandFmt and its children
func (_dcd *CT_BandFmt) Validate() error {
	return _dcd.ValidateWithPath("\u0043\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074")
}
func (_gafcd *CT_LogBase) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_gafcd.ValAttr = 2
	for _, _badad := range start.Attr {
		if _badad.Name.Local == "\u0076\u0061\u006c" {
			_ddeag, _eada := _e.ParseFloat(_badad.Value, 64)
			if _eada != nil {
				return _eada
			}
			_gafcd.ValAttr = _ddeag
			continue
		}
	}
	for {
		_dfgb, _dcefb := d.Token()
		if _dcefb != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004c\u006f\u0067\u0042\u0061\u0073\u0065\u003a\u0020%\u0073", _dcefb)
		}
		if _cdbcd, _bcab := _dfgb.(_b.EndElement); _bcab && _cdbcd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_edac ST_LblAlgn) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_edac.String(), start)
}

// Validate validates the CT_MarkerStyle and its children
func (_fdeee *CT_MarkerStyle) Validate() error {
	return _fdeee.ValidateWithPath("\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072S\u0074\u0079\u006c\u0065")
}

// ValidateWithPath validates the EG_LineChartShared and its children, prefixing error messages with path
func (_dfbda *EG_LineChartShared) ValidateWithPath(path string) error {
	if _edfbc := _dfbda.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _edfbc != nil {
		return _edfbc
	}
	if _dfbda.VaryColors != nil {
		if _fcdfa := _dfbda.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _fcdfa != nil {
			return _fcdfa
		}
	}
	for _agfad, _eafdg := range _dfbda.Ser {
		if _gaccd := _eafdg.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _agfad)); _gaccd != nil {
			return _gaccd
		}
	}
	if _dfbda.DLbls != nil {
		if _agecb := _dfbda.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _agecb != nil {
			return _agecb
		}
	}
	if _dfbda.DropLines != nil {
		if _ggfg := _dfbda.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _ggfg != nil {
			return _ggfg
		}
	}
	return nil
}

const (
	ST_DispBlanksAsUnset ST_DispBlanksAs = 0
	ST_DispBlanksAsSpan  ST_DispBlanksAs = 1
	ST_DispBlanksAsGap   ST_DispBlanksAs = 2
	ST_DispBlanksAsZero  ST_DispBlanksAs = 3
)

func (_dbdf *CT_PieSer) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_ebece := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_dbdf.Idx, _ebece)
	_eeffd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_dbdf.Order, _eeffd)
	if _dbdf.Tx != nil {
		_bcabde := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_dbdf.Tx, _bcabde)
	}
	if _dbdf.SpPr != nil {
		_gaegf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_dbdf.SpPr, _gaegf)
	}
	if _dbdf.Explosion != nil {
		_cbbd := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0065\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"}}
		e.EncodeElement(_dbdf.Explosion, _cbbd)
	}
	if _dbdf.DPt != nil {
		_afcgf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _dcafb := range _dbdf.DPt {
			e.EncodeElement(_dcafb, _afcgf)
		}
	}
	if _dbdf.DLbls != nil {
		_debcd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_dbdf.DLbls, _debcd)
	}
	if _dbdf.Cat != nil {
		_gffedfb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_dbdf.Cat, _gffedfb)
	}
	if _dbdf.Val != nil {
		_gebdcb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_dbdf.Val, _gebdcb)
	}
	if _dbdf.ExtLst != nil {
		_dfea := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dbdf.ExtLst, _dfea)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_HoleSize and its children, prefixing error messages with path
func (_faae *CT_HoleSize) ValidateWithPath(path string) error {
	if _faae.ValAttr != nil {
		if _gbef := _faae.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gbef != nil {
			return _gbef
		}
	}
	return nil
}

// ST_SecondPieSize is a union type
type ST_SecondPieSize struct {
	ST_SecondPieSizePercent *string
	ST_SecondPieSizeUShort  *uint16
}

// ValidateWithPath validates the CT_NumData and its children, prefixing error messages with path
func (_bbacd *CT_NumData) ValidateWithPath(path string) error {
	if _bbacd.PtCount != nil {
		if _dceca := _bbacd.PtCount.ValidateWithPath(path + "\u002f\u0050\u0074\u0043\u006f\u0075\u006e\u0074"); _dceca != nil {
			return _dceca
		}
	}
	for _bbed, _eacaa := range _bbacd.Pt {
		if _ccdaf := _eacaa.ValidateWithPath(_g.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _bbed)); _ccdaf != nil {
			return _ccdaf
		}
	}
	if _bbacd.ExtLst != nil {
		if _daaba := _bbacd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _daaba != nil {
			return _daaba
		}
	}
	return nil
}

type CT_Crosses struct {

	// Crosses Value
	ValAttr ST_Crosses
}
type CT_StrData struct {
	PtCount *CT_UnsignedInt
	Pt      []*CT_StrVal
	ExtLst  *CT_ExtensionList
}

func (_bbgab ST_PageSetupOrientation) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_bbgab.String(), start)
}

type CT_Overlap struct {

	// Overlap Value
	ValAttr *ST_Overlap
}

// Validate validates the CT_TimeUnit and its children
func (_ddaba *CT_TimeUnit) Validate() error {
	return _ddaba.ValidateWithPath("C\u0054\u005f\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074")
}

// Validate validates the CT_Marker and its children
func (_gegaa *CT_Marker) Validate() error {
	return _gegaa.ValidateWithPath("\u0043T\u005f\u004d\u0061\u0072\u006b\u0065r")
}
func (_cgefd *ST_PageSetupOrientation) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_ffdbg, _gedgd := d.Token()
	if _gedgd != nil {
		return _gedgd
	}
	if _bcbd, _gbfe := _ffdbg.(_b.EndElement); _gbfe && _bcbd.Name == start.Name {
		*_cgefd = 1
		return nil
	}
	if _adfa, _defge := _ffdbg.(_b.CharData); !_defge {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ffdbg)
	} else {
		switch string(_adfa) {
		case "":
			*_cgefd = 0
		case "\u0064e\u0066\u0061\u0075\u006c\u0074":
			*_cgefd = 1
		case "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074":
			*_cgefd = 2
		case "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e":
			*_cgefd = 3
		}
	}
	_ffdbg, _gedgd = d.Token()
	if _gedgd != nil {
		return _gedgd
	}
	if _agabb, _aedad := _ffdbg.(_b.EndElement); _aedad && _agabb.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ffdbg)
}

type CT_DLbls struct {

	// Data Label
	DLbl        []*CT_DLbl
	DLblsChoice *CT_DLblsChoice

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func NewCT_NumData() *CT_NumData { _aefg := &CT_NumData{}; return _aefg }

type ST_ErrValType byte

func (_efgcg ST_LblAlgn) String() string {
	switch _efgcg {
	case 0:
		return ""
	case 1:
		return "\u0063\u0074\u0072"
	case 2:
		return "\u006c"
	case 3:
		return "\u0072"
	}
	return ""
}

// ValidateWithPath validates the CT_Bar3DChart and its children, prefixing error messages with path
func (_abce *CT_Bar3DChart) ValidateWithPath(path string) error {
	if _cgc := _abce.BarDir.ValidateWithPath(path + "\u002fB\u0061\u0072\u0044\u0069\u0072"); _cgc != nil {
		return _cgc
	}
	if _abce.Grouping != nil {
		if _agde := _abce.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _agde != nil {
			return _agde
		}
	}
	if _abce.VaryColors != nil {
		if _cdcd := _abce.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _cdcd != nil {
			return _cdcd
		}
	}
	for _gde, _eaba := range _abce.Ser {
		if _acf := _eaba.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _gde)); _acf != nil {
			return _acf
		}
	}
	if _abce.DLbls != nil {
		if _dgdg := _abce.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _dgdg != nil {
			return _dgdg
		}
	}
	if _abce.GapWidth != nil {
		if _efc := _abce.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _efc != nil {
			return _efc
		}
	}
	if _abce.GapDepth != nil {
		if _bbfc := _abce.GapDepth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0044\u0065\u0070\u0074h"); _bbfc != nil {
			return _bbfc
		}
	}
	if _abce.Shape != nil {
		if _aaa := _abce.Shape.ValidateWithPath(path + "\u002f\u0053\u0068\u0061\u0070\u0065"); _aaa != nil {
			return _aaa
		}
	}
	for _agdd, _ceede := range _abce.AxId {
		if _fbd := _ceede.ValidateWithPath(_g.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _agdd)); _fbd != nil {
			return _fbd
		}
	}
	if _abce.ExtLst != nil {
		if _gbcc := _abce.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gbcc != nil {
			return _gbcc
		}
	}
	return nil
}
func (_faaeg *CT_OfPieChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_acgb := _b.StartElement{Name: _b.Name{Local: "c\u003a\u006f\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_faaeg.OfPieType, _acgb)
	if _faaeg.VaryColors != nil {
		_bdgbd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_faaeg.VaryColors, _bdgbd)
	}
	if _faaeg.Ser != nil {
		_dbe := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _cadg := range _faaeg.Ser {
			e.EncodeElement(_cadg, _dbe)
		}
	}
	if _faaeg.DLbls != nil {
		_effc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_faaeg.DLbls, _effc)
	}
	if _faaeg.GapWidth != nil {
		_eedc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_faaeg.GapWidth, _eedc)
	}
	if _faaeg.SplitType != nil {
		_bgdg := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0073\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065"}}
		e.EncodeElement(_faaeg.SplitType, _bgdg)
	}
	if _faaeg.SplitPos != nil {
		_dfgda := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u006c\u0069\u0074\u0050\u006f\u0073"}}
		e.EncodeElement(_faaeg.SplitPos, _dfgda)
	}
	if _faaeg.CustSplit != nil {
		_dgcbg := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0063\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074"}}
		e.EncodeElement(_faaeg.CustSplit, _dgcbg)
	}
	if _faaeg.SecondPieSize != nil {
		_fffa := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073e\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_faaeg.SecondPieSize, _fffa)
	}
	if _faaeg.SerLines != nil {
		_affda := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		for _, _bfagc := range _faaeg.SerLines {
			e.EncodeElement(_bfagc, _affda)
		}
	}
	if _faaeg.ExtLst != nil {
		_egbda := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_faaeg.ExtLst, _egbda)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_dggfa ST_TrendlineType) ValidateWithPath(path string) error {
	switch _dggfa {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dggfa))
	}
	return nil
}
func NewCT_LogBase() *CT_LogBase { _fcbdb := &CT_LogBase{}; _fcbdb.ValAttr = 2; return _fcbdb }
func (_dcaab *CT_DispUnitsLbl) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _dcaab.Layout != nil {
		_ggbf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_dcaab.Layout, _ggbf)
	}
	if _dcaab.Tx != nil {
		_aebc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_dcaab.Tx, _aebc)
	}
	if _dcaab.SpPr != nil {
		_eddfg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_dcaab.SpPr, _eddfg)
	}
	if _dcaab.TxPr != nil {
		_decff := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_dcaab.TxPr, _decff)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_AxPos() *CT_AxPos { _dcgc := &CT_AxPos{}; _dcgc.ValAttr = ST_AxPos(1); return _dcgc }

// ValidateWithPath validates the CT_Order and its children, prefixing error messages with path
func (_bfdfd *CT_Order) ValidateWithPath(path string) error {
	if _bfdfd.ValAttr != nil {
		if *_bfdfd.ValAttr < 2 {
			return _g.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_bfdfd.ValAttr)
		}
		if *_bfdfd.ValAttr > 6 {
			return _g.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003c=\u0020\u0036\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_bfdfd.ValAttr)
		}
	}
	return nil
}
func (_gded *CT_NumDataSourceChoice) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _gded.NumRef != nil {
		_facd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0052\u0065\u0066"}}
		e.EncodeElement(_gded.NumRef, _facd)
	} else if _gded.NumLit != nil {
		_eedbc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u004c\u0069\u0074"}}
		e.EncodeElement(_gded.NumLit, _eedbc)
	}
	return nil
}

type CT_TickLblPos struct {

	// Tick Label Position Value
	ValAttr ST_TickLblPos
}

// ValidateWithPath validates the CT_ChartSpace and its children, prefixing error messages with path
func (_dfad *CT_ChartSpace) ValidateWithPath(path string) error {
	if _dfad.Date1904 != nil {
		if _cbgca := _dfad.Date1904.ValidateWithPath(path + "\u002fD\u0061\u0074\u0065\u0031\u0039\u00304"); _cbgca != nil {
			return _cbgca
		}
	}
	if _dfad.Lang != nil {
		if _daag := _dfad.Lang.ValidateWithPath(path + "\u002f\u004c\u0061n\u0067"); _daag != nil {
			return _daag
		}
	}
	if _dfad.RoundedCorners != nil {
		if _acgd := _dfad.RoundedCorners.ValidateWithPath(path + "\u002fR\u006fu\u006e\u0064\u0065\u0064\u0043\u006f\u0072\u006e\u0065\u0072\u0073"); _acgd != nil {
			return _acgd
		}
	}
	if _dfad.Style != nil {
		if _debc := _dfad.Style.ValidateWithPath(path + "\u002f\u0053\u0074\u0079\u006c\u0065"); _debc != nil {
			return _debc
		}
	}
	if _dfad.ClrMapOvr != nil {
		if _eddce := _dfad.ClrMapOvr.ValidateWithPath(path + "\u002f\u0043\u006c\u0072\u004d\u0061\u0070\u004f\u0076\u0072"); _eddce != nil {
			return _eddce
		}
	}
	if _dfad.PivotSource != nil {
		if _afed := _dfad.PivotSource.ValidateWithPath(path + "\u002f\u0050\u0069v\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"); _afed != nil {
			return _afed
		}
	}
	if _dfad.Protection != nil {
		if _cbfg := _dfad.Protection.ValidateWithPath(path + "/\u0050\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"); _cbfg != nil {
			return _cbfg
		}
	}
	if _cfge := _dfad.Chart.ValidateWithPath(path + "\u002f\u0043\u0068\u0061\u0072\u0074"); _cfge != nil {
		return _cfge
	}
	if _dfad.SpPr != nil {
		if _egde := _dfad.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _egde != nil {
			return _egde
		}
	}
	if _dfad.TxPr != nil {
		if _gdeg := _dfad.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _gdeg != nil {
			return _gdeg
		}
	}
	if _dfad.ExternalData != nil {
		if _agbc := _dfad.ExternalData.ValidateWithPath(path + "\u002f\u0045\u0078\u0074\u0065\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"); _agbc != nil {
			return _agbc
		}
	}
	if _dfad.PrintSettings != nil {
		if _gcca := _dfad.PrintSettings.ValidateWithPath(path + "\u002f\u0050\u0072\u0069\u006e\u0074\u0053\u0065\u0074t\u0069\u006e\u0067\u0073"); _gcca != nil {
			return _gcca
		}
	}
	if _dfad.UserShapes != nil {
		if _cbeb := _dfad.UserShapes.ValidateWithPath(path + "/\u0055\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"); _cbeb != nil {
			return _cbeb
		}
	}
	if _dfad.ExtLst != nil {
		if _efgb := _dfad.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _efgb != nil {
			return _efgb
		}
	}
	return nil
}

// Validate validates the CT_SerTxChoice and its children
func (_fdaef *CT_SerTxChoice) Validate() error {
	return _fdaef.ValidateWithPath("\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078\u0043h\u006f\u0069\u0063\u0065")
}

// ValidateWithPath validates the EG_SurfaceChartShared and its children, prefixing error messages with path
func (_ebfeg *EG_SurfaceChartShared) ValidateWithPath(path string) error {
	if _ebfeg.Wireframe != nil {
		if _eaedc := _ebfeg.Wireframe.ValidateWithPath(path + "\u002f\u0057\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"); _eaedc != nil {
			return _eaedc
		}
	}
	for _gfbb, _bbcb := range _ebfeg.Ser {
		if _fgfa := _bbcb.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _gfbb)); _fgfa != nil {
			return _fgfa
		}
	}
	if _ebfeg.BandFmts != nil {
		if _bcefg := _ebfeg.BandFmts.ValidateWithPath(path + "\u002fB\u0061\u006e\u0064\u0046\u006d\u0074s"); _bcefg != nil {
			return _bcefg
		}
	}
	return nil
}
func NewCT_StrVal() *CT_StrVal { _beeb := &CT_StrVal{}; return _beeb }
func (_fbgeb *CT_TrendlineType) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _dgedg := range start.Attr {
		if _dgedg.Name.Local == "\u0076\u0061\u006c" {
			_fbgeb.ValAttr.UnmarshalXMLAttr(_dgedg)
			continue
		}
	}
	for {
		_fdgbd, _befdd := d.Token()
		if _befdd != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0072\u0065\u006ed\u006ci\u006e\u0065\u0054\u0079\u0070\u0065\u003a \u0025\u0073", _befdd)
		}
		if _gcgeg, _cgeae := _fdgbd.(_b.EndElement); _cgeae && _gcgeg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bged ST_RadarStyle) String() string {
	switch _bged {
	case 0:
		return ""
	case 1:
		return "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case 2:
		return "\u006d\u0061\u0072\u006b\u0065\u0072"
	case 3:
		return "\u0066\u0069\u006c\u006c\u0065\u0064"
	}
	return ""
}
func (_ccfga *CT_PictureStackUnit) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", _ccfga.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_Tx() *CT_Tx                      { _dfgca := &CT_Tx{}; _dfgca.TxChoice = NewCT_TxChoice(); return _dfgca }
func (_acgda ST_LegendPos) Validate() error { return _acgda.ValidateWithPath("") }
func (_edc *CT_AreaSer) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_edc.Idx = NewCT_UnsignedInt()
	_edc.Order = NewCT_UnsignedInt()
_bfc:
	for {
		_bgb, _gea := d.Token()
		if _gea != nil {
			return _gea
		}
		switch _ggf := _bgb.(type) {
		case _b.StartElement:
			switch _ggf.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _ffe := d.DecodeElement(_edc.Idx, &_ggf); _ffe != nil {
					return _ffe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _abb := d.DecodeElement(_edc.Order, &_ggf); _abb != nil {
					return _abb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_edc.Tx = NewCT_SerTx()
				if _bge := d.DecodeElement(_edc.Tx, &_ggf); _bge != nil {
					return _bge
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_edc.SpPr = _gfc.NewCT_ShapeProperties()
				if _ee := d.DecodeElement(_edc.SpPr, &_ggf); _ee != nil {
					return _ee
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_edc.PictureOptions = NewCT_PictureOptions()
				if _ce := d.DecodeElement(_edc.PictureOptions, &_ggf); _ce != nil {
					return _ce
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_egbd := NewCT_DPt()
				if _dgg := d.DecodeElement(_egbd, &_ggf); _dgg != nil {
					return _dgg
				}
				_edc.DPt = append(_edc.DPt, _egbd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_edc.DLbls = NewCT_DLbls()
				if _ea := d.DecodeElement(_edc.DLbls, &_ggf); _ea != nil {
					return _ea
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_aca := NewCT_Trendline()
				if _abd := d.DecodeElement(_aca, &_ggf); _abd != nil {
					return _abd
				}
				_edc.Trendline = append(_edc.Trendline, _aca)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_ace := NewCT_ErrBars()
				if _dbd := d.DecodeElement(_ace, &_ggf); _dbd != nil {
					return _dbd
				}
				_edc.ErrBars = append(_edc.ErrBars, _ace)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_edc.Cat = NewCT_AxDataSource()
				if _fa := d.DecodeElement(_edc.Cat, &_ggf); _fa != nil {
					return _fa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_edc.Val = NewCT_NumDataSource()
				if _dga := d.DecodeElement(_edc.Val, &_ggf); _dga != nil {
					return _dga
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_edc.ExtLst = NewCT_ExtensionList()
				if _dbg := d.DecodeElement(_edc.ExtLst, &_ggf); _dbg != nil {
					return _dbg
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fA\u0072\u0065\u0061\u0053\u0065\u0072\u0020\u0025\u0076", _ggf.Name)
				if _egbb := d.Skip(); _egbb != nil {
					return _egbb
				}
			}
		case _b.EndElement:
			break _bfc
		case _b.CharData:
		}
	}
	return nil
}
func (_beafa ST_Grouping) ValidateWithPath(path string) error {
	switch _beafa {
	case 0, 1, 2, 3:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_beafa))
	}
	return nil
}
func (_bfdf *CT_BarGrouping) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _bfdf.ValAttr != ST_BarGroupingUnset {
		_deae, _fea := _bfdf.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _fea != nil {
			return _fea
		}
		start.Attr = append(start.Attr, _deae)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Trendline and its children
func (_dfaad *CT_Trendline) Validate() error {
	return _dfaad.ValidateWithPath("\u0043\u0054\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065")
}
func (_dgdaag ST_BuiltInUnit) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_egcbc := _b.Attr{}
	_egcbc.Name = name
	switch _dgdaag {
	case ST_BuiltInUnitUnset:
		_egcbc.Value = ""
	case ST_BuiltInUnitHundreds:
		_egcbc.Value = "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073"
	case ST_BuiltInUnitThousands:
		_egcbc.Value = "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s"
	case ST_BuiltInUnitTenThousands:
		_egcbc.Value = "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case ST_BuiltInUnitHundredThousands:
		_egcbc.Value = "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case ST_BuiltInUnitMillions:
		_egcbc.Value = "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitTenMillions:
		_egcbc.Value = "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitHundredMillions:
		_egcbc.Value = "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitBillions:
		_egcbc.Value = "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitTrillions:
		_egcbc.Value = "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es"
	}
	return _egcbc, nil
}
func (_cgeed *EG_SurfaceChartShared) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_eaafff:
	for {
		_ggceg, _deee := d.Token()
		if _deee != nil {
			return _deee
		}
		switch _bbgacc := _ggceg.(type) {
		case _b.StartElement:
			switch _bbgacc.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}:
				_cgeed.Wireframe = NewCT_Boolean()
				if _cfeb := d.DecodeElement(_cgeed.Wireframe, &_bbgacc); _cfeb != nil {
					return _cfeb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_egafc := NewCT_SurfaceSer()
				if _daacg := d.DecodeElement(_egafc, &_bbgacc); _daacg != nil {
					return _daacg
				}
				_cgeed.Ser = append(_cgeed.Ser, _egafc)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}:
				_cgeed.BandFmts = NewCT_BandFmts()
				if _baabc := d.DecodeElement(_cgeed.BandFmts, &_bbgacc); _baabc != nil {
					return _baabc
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075n\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u006f\u006e E\u0047\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _bbgacc.Name)
				if _bcec := d.Skip(); _bcec != nil {
					return _bcec
				}
			}
		case _b.EndElement:
			break _eaafff
		case _b.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PageSetup and its children, prefixing error messages with path
func (_dbcfb *CT_PageSetup) ValidateWithPath(path string) error {
	if _dbcfb.PaperHeightAttr != nil {
		if !_cf.ST_PositiveUniversalMeasurePatternRe.MatchString(*_dbcfb.PaperHeightAttr) {
			return _g.Errorf("\u0025\u0073/\u006d\u002e\u0050\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _cf.ST_PositiveUniversalMeasurePatternRe, *_dbcfb.PaperHeightAttr)
		}
	}
	if _dbcfb.PaperHeightAttr != nil {
		if !_cf.ST_UniversalMeasurePatternRe.MatchString(*_dbcfb.PaperHeightAttr) {
			return _g.Errorf("\u0025\u0073/\u006d\u002e\u0050\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _cf.ST_UniversalMeasurePatternRe, *_dbcfb.PaperHeightAttr)
		}
	}
	if _dbcfb.PaperWidthAttr != nil {
		if !_cf.ST_PositiveUniversalMeasurePatternRe.MatchString(*_dbcfb.PaperWidthAttr) {
			return _g.Errorf("\u0025s\u002f\u006d.\u0050\u0061\u0070e\u0072\u0057\u0069\u0064\u0074\u0068\u0041t\u0074\u0072\u0020\u006d\u0075\u0073t\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027 \u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _cf.ST_PositiveUniversalMeasurePatternRe, *_dbcfb.PaperWidthAttr)
		}
	}
	if _dbcfb.PaperWidthAttr != nil {
		if !_cf.ST_UniversalMeasurePatternRe.MatchString(*_dbcfb.PaperWidthAttr) {
			return _g.Errorf("\u0025s\u002f\u006d.\u0050\u0061\u0070e\u0072\u0057\u0069\u0064\u0074\u0068\u0041t\u0074\u0072\u0020\u006d\u0075\u0073t\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027 \u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _cf.ST_UniversalMeasurePatternRe, *_dbcfb.PaperWidthAttr)
		}
	}
	if _aabe := _dbcfb.OrientationAttr.ValidateWithPath(path + "\u002f\u004fr\u0069\u0065\u006et\u0061\u0074\u0069\u006f\u006e\u0041\u0074\u0074\u0072"); _aabe != nil {
		return _aabe
	}
	return nil
}
func (_bbfdaf *EG_AreaChartShared) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_gegaag:
	for {
		_cffff, _bdgcce := d.Token()
		if _bdgcce != nil {
			return _bdgcce
		}
		switch _baeab := _cffff.(type) {
		case _b.StartElement:
			switch _baeab.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_bbfdaf.Grouping = NewCT_Grouping()
				if _edecb := d.DecodeElement(_bbfdaf.Grouping, &_baeab); _edecb != nil {
					return _edecb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_bbfdaf.VaryColors = NewCT_Boolean()
				if _edcb := d.DecodeElement(_bbfdaf.VaryColors, &_baeab); _edcb != nil {
					return _edcb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_eacdd := NewCT_AreaSer()
				if _cgcacg := d.DecodeElement(_eacdd, &_baeab); _cgcacg != nil {
					return _cgcacg
				}
				_bbfdaf.Ser = append(_bbfdaf.Ser, _eacdd)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_bbfdaf.DLbls = NewCT_DLbls()
				if _cdfb := d.DecodeElement(_bbfdaf.DLbls, &_baeab); _cdfb != nil {
					return _cdfb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_bbfdaf.DropLines = NewCT_ChartLines()
				if _cfcc := d.DecodeElement(_bbfdaf.DropLines, &_baeab); _cfcc != nil {
					return _cfcc
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0041\u0072\u0065\u0061\u0043\u0068a\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _baeab.Name)
				if _daef := d.Skip(); _daef != nil {
					return _daef
				}
			}
		case _b.EndElement:
			break _gegaag
		case _b.CharData:
		}
	}
	return nil
}
func (_bcgee *CT_RadarChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_caecg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0072a\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"}}
	e.EncodeElement(_bcgee.RadarStyle, _caecg)
	if _bcgee.VaryColors != nil {
		_dccg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_bcgee.VaryColors, _dccg)
	}
	if _bcgee.Ser != nil {
		_ebee := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _ffbdg := range _bcgee.Ser {
			e.EncodeElement(_ffbdg, _ebee)
		}
	}
	if _bcgee.DLbls != nil {
		_ceeb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_bcgee.DLbls, _ceeb)
	}
	_cfbff := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _befa := range _bcgee.AxId {
		e.EncodeElement(_befa, _cfbff)
	}
	if _bcgee.ExtLst != nil {
		_ffde := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bcgee.ExtLst, _ffde)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_bfeb ST_PictureFormat) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_bfeb.String(), start)
}
func (_efef *CT_DPt) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_efef.Idx = NewCT_UnsignedInt()
_ggcd:
	for {
		_baea, _ddda := d.Token()
		if _ddda != nil {
			return _ddda
		}
		switch _cgdb := _baea.(type) {
		case _b.StartElement:
			switch _cgdb.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _gcfe := d.DecodeElement(_efef.Idx, &_cgdb); _gcfe != nil {
					return _gcfe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}:
				_efef.InvertIfNegative = NewCT_Boolean()
				if _faab := d.DecodeElement(_efef.InvertIfNegative, &_cgdb); _faab != nil {
					return _faab
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_efef.Marker = NewCT_Marker()
				if _feac := d.DecodeElement(_efef.Marker, &_cgdb); _feac != nil {
					return _feac
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}:
				_efef.Bubble3D = NewCT_Boolean()
				if _deec := d.DecodeElement(_efef.Bubble3D, &_cgdb); _deec != nil {
					return _deec
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}:
				_efef.Explosion = NewCT_UnsignedInt()
				if _fcgg := d.DecodeElement(_efef.Explosion, &_cgdb); _fcgg != nil {
					return _fcgg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_efef.SpPr = _gfc.NewCT_ShapeProperties()
				if _faffe := d.DecodeElement(_efef.SpPr, &_cgdb); _faffe != nil {
					return _faffe
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_efef.PictureOptions = NewCT_PictureOptions()
				if _agddf := d.DecodeElement(_efef.PictureOptions, &_cgdb); _agddf != nil {
					return _agddf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_efef.ExtLst = NewCT_ExtensionList()
				if _fadc := d.DecodeElement(_efef.ExtLst, &_cgdb); _fadc != nil {
					return _fadc
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0050\u0074\u0020\u0025\u0076", _cgdb.Name)
				if _abdc := d.Skip(); _abdc != nil {
					return _abdc
				}
			}
		case _b.EndElement:
			break _ggcd
		case _b.CharData:
		}
	}
	return nil
}
func (_efeeg ST_OfPieType) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_dadbg := _b.Attr{}
	_dadbg.Name = name
	switch _efeeg {
	case ST_OfPieTypeUnset:
		_dadbg.Value = ""
	case ST_OfPieTypePie:
		_dadbg.Value = "\u0070\u0069\u0065"
	case ST_OfPieTypeBar:
		_dadbg.Value = "\u0062\u0061\u0072"
	}
	return _dadbg, nil
}

// ValidateWithPath validates the CT_OfPieChart and its children, prefixing error messages with path
func (_bbff *CT_OfPieChart) ValidateWithPath(path string) error {
	if _cgag := _bbff.OfPieType.ValidateWithPath(path + "\u002f\u004f\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065"); _cgag != nil {
		return _cgag
	}
	if _bbff.VaryColors != nil {
		if _dadaf := _bbff.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _dadaf != nil {
			return _dadaf
		}
	}
	for _cgcba, _gaeg := range _bbff.Ser {
		if _cgce := _gaeg.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _cgcba)); _cgce != nil {
			return _cgce
		}
	}
	if _bbff.DLbls != nil {
		if _baad := _bbff.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _baad != nil {
			return _baad
		}
	}
	if _bbff.GapWidth != nil {
		if _afaab := _bbff.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _afaab != nil {
			return _afaab
		}
	}
	if _bbff.SplitType != nil {
		if _ggdc := _bbff.SplitType.ValidateWithPath(path + "\u002f\u0053\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065"); _ggdc != nil {
			return _ggdc
		}
	}
	if _bbff.SplitPos != nil {
		if _dgdc := _bbff.SplitPos.ValidateWithPath(path + "\u002fS\u0070\u006c\u0069\u0074\u0050\u006fs"); _dgdc != nil {
			return _dgdc
		}
	}
	if _bbff.CustSplit != nil {
		if _fdefb := _bbff.CustSplit.ValidateWithPath(path + "\u002f\u0043\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074"); _fdefb != nil {
			return _fdefb
		}
	}
	if _bbff.SecondPieSize != nil {
		if _gbbfe := _bbff.SecondPieSize.ValidateWithPath(path + "\u002f\u0053\u0065\u0063\u006f\u006e\u0064\u0050\u0069e\u0053\u0069\u007a\u0065"); _gbbfe != nil {
			return _gbbfe
		}
	}
	for _fcad, _agcfc := range _bbff.SerLines {
		if _dadd := _agcfc.ValidateWithPath(_g.Sprintf("\u0025s\u002fS\u0065\u0072\u004c\u0069\u006e\u0065\u0073\u005b\u0025\u0064\u005d", path, _fcad)); _dadd != nil {
			return _dadd
		}
	}
	if _bbff.ExtLst != nil {
		if _baeec := _bbff.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _baeec != nil {
			return _baeec
		}
	}
	return nil
}

type ST_BarGrouping byte

func NewCT_NumRef() *CT_NumRef {
	_ccbca := &CT_NumRef{}
	return _ccbca
}
func (_acaa *CT_MultiLvlStrData) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _acaa.PtCount != nil {
		_fgcb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0070\u0074\u0043\u006f\u0075\u006et"}}
		e.EncodeElement(_acaa.PtCount, _fgcb)
	}
	if _acaa.Lvl != nil {
		_dgafc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006cv\u006c"}}
		for _, _gbbab := range _acaa.Lvl {
			e.EncodeElement(_gbbab, _dgafc)
		}
	}
	if _acaa.ExtLst != nil {
		_gbgb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_acaa.ExtLst, _gbgb)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_acbgd *CT_Style) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", _acbgd.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_fdcaf *ST_PictureFormat) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_cegcga, _agabc := d.Token()
	if _agabc != nil {
		return _agabc
	}
	if _ddgad, _gaeeb := _cegcga.(_b.EndElement); _gaeeb && _ddgad.Name == start.Name {
		*_fdcaf = 1
		return nil
	}
	if _aegce, _dbafc := _cegcga.(_b.CharData); !_dbafc {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cegcga)
	} else {
		switch string(_aegce) {
		case "":
			*_fdcaf = 0
		case "\u0073t\u0072\u0065\u0074\u0063\u0068":
			*_fdcaf = 1
		case "\u0073\u0074\u0061c\u006b":
			*_fdcaf = 2
		case "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065":
			*_fdcaf = 3
		}
	}
	_cegcga, _agabc = d.Token()
	if _agabc != nil {
		return _agabc
	}
	if _dafab, _aafag := _cegcga.(_b.EndElement); _aafag && _dafab.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cegcga)
}
func ParseUnionST_HoleSize(s string) (ST_HoleSize, error) {
	if ST_HoleSizePercentPatternRe.MatchString(s) {
		return ST_HoleSize{ST_HoleSizePercent: &s}, nil
	}
	_gadff, _dbbfd := _e.ParseUint(s, 10, 8)
	if _dbbfd != nil {
		return ST_HoleSize{}, _dbbfd
	}
	_ddafg := uint8(_gadff)
	return ST_HoleSize{ST_HoleSizeUByte: &_ddafg}, nil
}
func (_bdbaf *ST_Overlap) ValidateWithPath(path string) error {
	_eefeb := []string{}
	if _bdbaf.ST_OverlapPercent != nil {
		_eefeb = append(_eefeb, "\u0053\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070\u0050\u0065r\u0063\u0065\u006e\u0074")
	}
	if _bdbaf.ST_OverlapByte != nil {
		_eefeb = append(_eefeb, "\u0053\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061p\u0042\u0079\u0074\u0065")
	}
	if len(_eefeb) > 1 {
		return _g.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _eefeb)
	}
	return nil
}

type CT_Line3DChart struct {

	// Grouping
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_LineSer

	// Data Labels
	DLbls *CT_DLbls

	// Drop Lines
	DropLines *CT_ChartLines

	// Gap Depth
	GapDepth *CT_GapAmount

	// Axis ID
	AxId []*CT_UnsignedInt

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

// Validate validates the CT_DPt and its children
func (_edfb *CT_DPt) Validate() error {
	return _edfb.ValidateWithPath("\u0043\u0054\u005f\u0044\u0050\u0074")
}
func NewCT_Protection() *CT_Protection { _edgga := &CT_Protection{}; return _edgga }
func (_aafbb *ST_Thickness) ValidateWithPath(path string) error {
	_gdfcc := []string{}
	if _aafbb.ST_ThicknessPercent != nil {
		_gdfcc = append(_gdfcc, "\u0053\u0054\u005f\u0054hi\u0063\u006b\u006e\u0065\u0073\u0073\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _aafbb.Uint32 != nil {
		_gdfcc = append(_gdfcc, "\u0055\u0069\u006e\u0074\u0033\u0032")
	}
	if len(_gdfcc) > 1 {
		return _g.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _gdfcc)
	}
	return nil
}
func (_bacc *CT_View3D) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_egabg:
	for {
		_bcad, _deffd := d.Token()
		if _deffd != nil {
			return _deffd
		}
		switch _gdfa := _bcad.(type) {
		case _b.StartElement:
			switch _gdfa.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0058"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0058"}:
				_bacc.RotX = NewCT_RotX()
				if _efbf := d.DecodeElement(_bacc.RotX, &_gdfa); _efbf != nil {
					return _efbf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_bacc.HPercent = NewCT_HPercent()
				if _egad := d.DecodeElement(_bacc.HPercent, &_gdfa); _egad != nil {
					return _egad
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0059"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0059"}:
				_bacc.RotY = NewCT_RotY()
				if _ecgag := d.DecodeElement(_bacc.RotY, &_gdfa); _ecgag != nil {
					return _ecgag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u0070t\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u0070t\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_bacc.DepthPercent = NewCT_DepthPercent()
				if _dcda := d.DecodeElement(_bacc.DepthPercent, &_gdfa); _dcda != nil {
					return _dcda
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0041\u006e\u0067\u0041\u0078"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0041\u006e\u0067\u0041\u0078"}:
				_bacc.RAngAx = NewCT_Boolean()
				if _adaaa := d.DecodeElement(_bacc.RAngAx, &_gdfa); _adaaa != nil {
					return _adaaa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"}:
				_bacc.Perspective = NewCT_Perspective()
				if _fggde := d.DecodeElement(_bacc.Perspective, &_gdfa); _fggde != nil {
					return _fggde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bacc.ExtLst = NewCT_ExtensionList()
				if _ccfdfc := d.DecodeElement(_bacc.ExtLst, &_gdfa); _ccfdfc != nil {
					return _ccfdfc
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0056\u0069\u0065w\u0033\u0044 \u0025\u0076", _gdfa.Name)
				if _fecca := d.Skip(); _fecca != nil {
					return _fecca
				}
			}
		case _b.EndElement:
			break _egabg
		case _b.CharData:
		}
	}
	return nil
}
func NewCT_DoughnutChart() *CT_DoughnutChart { _bgac := &CT_DoughnutChart{}; return _bgac }
func (_egaaa *CT_LblOffset) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _egaaa.ValAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", *_egaaa.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type ST_TimeUnit byte

func (_bgfb ST_SizeRepresents) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_bgfb.String(), start)
}
func (_ggcga *ST_LblOffset) ValidateWithPath(path string) error {
	_fdagg := []string{}
	if _ggcga.ST_LblOffsetPercent != nil {
		_fdagg = append(_fdagg, "\u0053\u0054\u005f\u004cbl\u004f\u0066\u0066\u0073\u0065\u0074\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _ggcga.ST_LblOffsetUShort != nil {
		_fdagg = append(_fdagg, "\u0053T\u005fL\u0062\u006c\u004f\u0066\u0066s\u0065\u0074U\u0053\u0068\u006f\u0072\u0074")
	}
	if len(_fdagg) > 1 {
		return _g.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _fdagg)
	}
	return nil
}
func NewCT_DLbl() *CT_DLbl {
	_gedc := &CT_DLbl{}
	_gedc.Idx = NewCT_UnsignedInt()
	_gedc.DLblChoice = NewCT_DLblChoice()
	return _gedc
}
func NewCT_PictureFormat() *CT_PictureFormat {
	_dbed := &CT_PictureFormat{}
	_dbed.ValAttr = ST_PictureFormat(1)
	return _dbed
}

// ValidateWithPath validates the CT_ErrBars and its children, prefixing error messages with path
func (_gdgdg *CT_ErrBars) ValidateWithPath(path string) error {
	if _gdgdg.ErrDir != nil {
		if _cbea := _gdgdg.ErrDir.ValidateWithPath(path + "\u002fE\u0072\u0072\u0044\u0069\u0072"); _cbea != nil {
			return _cbea
		}
	}
	if _fadg := _gdgdg.ErrBarType.ValidateWithPath(path + "/\u0045\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"); _fadg != nil {
		return _fadg
	}
	if _gegd := _gdgdg.ErrValType.ValidateWithPath(path + "/\u0045\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"); _gegd != nil {
		return _gegd
	}
	if _gdgdg.NoEndCap != nil {
		if _degge := _gdgdg.NoEndCap.ValidateWithPath(path + "\u002fN\u006f\u0045\u006e\u0064\u0043\u0061p"); _degge != nil {
			return _degge
		}
	}
	if _gdgdg.Plus != nil {
		if _gabc := _gdgdg.Plus.ValidateWithPath(path + "\u002f\u0050\u006cu\u0073"); _gabc != nil {
			return _gabc
		}
	}
	if _gdgdg.Minus != nil {
		if _fdcg := _gdgdg.Minus.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u0075\u0073"); _fdcg != nil {
			return _fdcg
		}
	}
	if _gdgdg.Val != nil {
		if _ggbfe := _gdgdg.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _ggbfe != nil {
			return _ggbfe
		}
	}
	if _gdgdg.SpPr != nil {
		if _add := _gdgdg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _add != nil {
			return _add
		}
	}
	if _gdgdg.ExtLst != nil {
		if _bbgb := _gdgdg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bbgb != nil {
			return _bbgb
		}
	}
	return nil
}

// ValidateWithPath validates the CT_AxDataSource and its children, prefixing error messages with path
func (_dea *CT_AxDataSource) ValidateWithPath(path string) error {
	if _gec := _dea.AxDataSourceChoice.ValidateWithPath(path + "\u002f\u0041\u0078\u0044at\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0043\u0068\u006f\u0069\u0063\u0065"); _gec != nil {
		return _gec
	}
	return nil
}
func (_dcbdgf *CT_PictureStackUnit) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dcbdgf.ValAttr = 0 + 1
	for _, _dfff := range start.Attr {
		if _dfff.Name.Local == "\u0076\u0061\u006c" {
			_eabec, _eceae := _e.ParseFloat(_dfff.Value, 64)
			if _eceae != nil {
				return _eceae
			}
			_dcbdgf.ValAttr = _eabec
			continue
		}
	}
	for {
		_gegdf, _dbcd := d.Token()
		if _dbcd != nil {
			return _g.Errorf("\u0070\u0061\u0072s\u0069\u006e\u0067\u0020C\u0054\u005f\u0050\u0069\u0063\u0074\u0075r\u0065\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074\u003a\u0020\u0025\u0073", _dbcd)
		}
		if _bceb, _fgdgd := _gegdf.(_b.EndElement); _fgdgd && _bceb.Name == start.Name {
			break
		}
	}
	return nil
}
func NewEG_AxSharedChoice() *EG_AxSharedChoice { _bbebc := &EG_AxSharedChoice{}; return _bbebc }

type CT_HoleSize struct {

	// Hole Size Value
	ValAttr *ST_HoleSize
}

func (_dcbge ST_TickMark) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_feefa := _b.Attr{}
	_feefa.Name = name
	switch _dcbge {
	case ST_TickMarkUnset:
		_feefa.Value = ""
	case ST_TickMarkCross:
		_feefa.Value = "\u0063\u0072\u006fs\u0073"
	case ST_TickMarkIn:
		_feefa.Value = "\u0069\u006e"
	case ST_TickMarkNone:
		_feefa.Value = "\u006e\u006f\u006e\u0065"
	case ST_TickMarkOut:
		_feefa.Value = "\u006f\u0075\u0074"
	}
	return _feefa, nil
}
func (_cdaf *CT_BarChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_cfa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0044\u0069\u0072"}}
	e.EncodeElement(_cdaf.BarDir, _cfa)
	if _cdaf.Grouping != nil {
		_ccec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_cdaf.Grouping, _ccec)
	}
	if _cdaf.VaryColors != nil {
		_fefd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_cdaf.VaryColors, _fefd)
	}
	if _cdaf.Ser != nil {
		_cfg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _gee := range _cdaf.Ser {
			e.EncodeElement(_gee, _cfg)
		}
	}
	if _cdaf.DLbls != nil {
		_fbgbd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_cdaf.DLbls, _fbgbd)
	}
	if _cdaf.GapWidth != nil {
		_gffed := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_cdaf.GapWidth, _gffed)
	}
	if _cdaf.Overlap != nil {
		_ecg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0076\u0065\u0072\u006c\u0061p"}}
		e.EncodeElement(_cdaf.Overlap, _ecg)
	}
	if _cdaf.SerLines != nil {
		_ggb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		for _, _ffff := range _cdaf.SerLines {
			e.EncodeElement(_ffff, _ggb)
		}
	}
	_eff := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _aaae := range _cdaf.AxId {
		e.EncodeElement(_aaae, _eff)
	}
	if _cdaf.ExtLst != nil {
		_dbac := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cdaf.ExtLst, _dbac)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_TrendlineType struct {

	// Trendline Type Value
	ValAttr ST_TrendlineType
}

// Validate validates the CT_BubbleChart and its children
func (_cgf *CT_BubbleChart) Validate() error {
	return _cgf.ValidateWithPath("\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065C\u0068\u0061\u0072\u0074")
}
func (_dbfb ST_TimeUnit) ValidateWithPath(path string) error {
	switch _dbfb {
	case 0, 1, 2, 3:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dbfb))
	}
	return nil
}
func NewCT_LegendEntry() *CT_LegendEntry {
	_ccce := &CT_LegendEntry{}
	_ccce.Idx = NewCT_UnsignedInt()
	_ccce.LegendEntryChoice = NewCT_LegendEntryChoice()
	return _ccce
}

type CT_DispBlanksAs struct {

	// Display Blanks As Value
	ValAttr ST_DispBlanksAs
}

func (_afge *ST_HoleSize) ValidateWithPath(path string) error {
	_gcgee := []string{}
	if _afge.ST_HoleSizePercent != nil {
		_gcgee = append(_gcgee, "\u0053T\u005fH\u006f\u006c\u0065\u0053\u0069z\u0065\u0050e\u0072\u0063\u0065\u006e\u0074")
	}
	if _afge.ST_HoleSizeUByte != nil {
		_gcgee = append(_gcgee, "\u0053\u0054_\u0048\u006f\u006ce\u0053\u0069\u007a\u0065\u0055\u0042\u0079\u0074\u0065")
	}
	if len(_gcgee) > 1 {
		return _g.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _gcgee)
	}
	return nil
}
func NewCT_RadarChart() *CT_RadarChart {
	_ffggd := &CT_RadarChart{}
	_ffggd.RadarStyle = NewCT_RadarStyle()
	return _ffggd
}

type CT_UpDownBars struct {

	// Gap Width
	GapWidth *CT_GapAmount

	// Up Bars
	UpBars *CT_UpDownBar

	// Down Bars
	DownBars *CT_UpDownBar

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func NewCT_DLblsChoice() *CT_DLblsChoice { _ccecf := &CT_DLblsChoice{}; return _ccecf }

// Validate validates the CT_StrVal and its children
func (_dfcdea *CT_StrVal) Validate() error {
	return _dfcdea.ValidateWithPath("\u0043T\u005f\u0053\u0074\u0072\u0056\u0061l")
}

const (
	ST_TimeUnitUnset  ST_TimeUnit = 0
	ST_TimeUnitDays   ST_TimeUnit = 1
	ST_TimeUnitMonths ST_TimeUnit = 2
	ST_TimeUnitYears  ST_TimeUnit = 3
)

// Validate validates the CT_StockChart and its children
func (_gcee *CT_StockChart) Validate() error {
	return _gcee.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074")
}

// ValidateWithPath validates the CT_Surface3DChart and its children, prefixing error messages with path
func (_aebag *CT_Surface3DChart) ValidateWithPath(path string) error {
	if _aebag.Wireframe != nil {
		if _cbga := _aebag.Wireframe.ValidateWithPath(path + "\u002f\u0057\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"); _cbga != nil {
			return _cbga
		}
	}
	for _ddfd, _dbgde := range _aebag.Ser {
		if _aeea := _dbgde.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _ddfd)); _aeea != nil {
			return _aeea
		}
	}
	if _aebag.BandFmts != nil {
		if _gcbab := _aebag.BandFmts.ValidateWithPath(path + "\u002fB\u0061\u006e\u0064\u0046\u006d\u0074s"); _gcbab != nil {
			return _gcbab
		}
	}
	for _fddea, _aeef := range _aebag.AxId {
		if _fdaae := _aeef.ValidateWithPath(_g.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _fddea)); _fdaae != nil {
			return _fdaae
		}
	}
	if _aebag.ExtLst != nil {
		if _abagaf := _aebag.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _abagaf != nil {
			return _abagaf
		}
	}
	return nil
}

type CT_Surface3DChart struct {

	// Wireframe
	Wireframe *CT_Boolean

	// Surface Chart Series
	Ser []*CT_SurfaceSer

	// Band Formats
	BandFmts *CT_BandFmts

	// Axis ID
	AxId []*CT_UnsignedInt

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}
type CT_HPercent struct {

	// Height Percent Value
	ValAttr *ST_HPercent
}

func (_cbfdb ST_LegendPos) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_fedff := _b.Attr{}
	_fedff.Name = name
	switch _cbfdb {
	case ST_LegendPosUnset:
		_fedff.Value = ""
	case ST_LegendPosB:
		_fedff.Value = "\u0062"
	case ST_LegendPosTr:
		_fedff.Value = "\u0074\u0072"
	case ST_LegendPosL:
		_fedff.Value = "\u006c"
	case ST_LegendPosR:
		_fedff.Value = "\u0072"
	case ST_LegendPosT:
		_fedff.Value = "\u0074"
	}
	return _fedff, nil
}
func NewCT_AxisUnit() *CT_AxisUnit { _fbf := &CT_AxisUnit{}; _fbf.ValAttr = 0 + 1; return _fbf }
func (_cdbegc *EG_AxShared) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_egaab := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_cdbegc.AxId, _egaab)
	_abfab := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_cdbegc.Scaling, _abfab)
	if _cdbegc.Delete != nil {
		_cceda := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_cdbegc.Delete, _cceda)
	}
	_adfb := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_cdbegc.AxPos, _adfb)
	if _cdbegc.MajorGridlines != nil {
		_abaabg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_cdbegc.MajorGridlines, _abaabg)
	}
	if _cdbegc.MinorGridlines != nil {
		_adaeg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_cdbegc.MinorGridlines, _adaeg)
	}
	if _cdbegc.Title != nil {
		_aagfd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_cdbegc.Title, _aagfd)
	}
	if _cdbegc.NumFmt != nil {
		_cbebg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_cdbegc.NumFmt, _cbebg)
	}
	if _cdbegc.MajorTickMark != nil {
		_baefc := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_cdbegc.MajorTickMark, _baefc)
	}
	if _cdbegc.MinorTickMark != nil {
		_gccdf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_cdbegc.MinorTickMark, _gccdf)
	}
	if _cdbegc.TickLblPos != nil {
		_gbead := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_cdbegc.TickLblPos, _gbead)
	}
	if _cdbegc.SpPr != nil {
		_ffdfc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_cdbegc.SpPr, _ffdfc)
	}
	if _cdbegc.TxPr != nil {
		_bcdcd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_cdbegc.TxPr, _bcdcd)
	}
	_agfbe := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_cdbegc.CrossAx, _agfbe)
	if _cdbegc.AxSharedChoice != nil {
		_cdbegc.AxSharedChoice.MarshalXML(e, _b.StartElement{})
	}
	return nil
}

// ValidateWithPath validates the Chart and its children, prefixing error messages with path
func (_fgdc *Chart) ValidateWithPath(path string) error {
	if _bdffd := _fgdc.CT_RelId.ValidateWithPath(path); _bdffd != nil {
		return _bdffd
	}
	return nil
}
func (_acde ST_ErrValType) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_acde.String(), start)
}
func (_bdaec *ST_ErrBarType) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fcddg, _egbeb := d.Token()
	if _egbeb != nil {
		return _egbeb
	}
	if _gbccb, _cbbbb := _fcddg.(_b.EndElement); _cbbbb && _gbccb.Name == start.Name {
		*_bdaec = 1
		return nil
	}
	if _gege, _dafff := _fcddg.(_b.CharData); !_dafff {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fcddg)
	} else {
		switch string(_gege) {
		case "":
			*_bdaec = 0
		case "\u0062\u006f\u0074\u0068":
			*_bdaec = 1
		case "\u006d\u0069\u006eu\u0073":
			*_bdaec = 2
		case "\u0070\u006c\u0075\u0073":
			*_bdaec = 3
		}
	}
	_fcddg, _egbeb = d.Token()
	if _egbeb != nil {
		return _egbeb
	}
	if _fcfdb, _bcgg := _fcddg.(_b.EndElement); _bcgg && _fcfdb.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fcddg)
}
func (_bdbe *CT_SerTx) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_bdbe.SerTxChoice = NewCT_SerTxChoice()
_ggade:
	for {
		_fdaff, _abefe := d.Token()
		if _abefe != nil {
			return _abefe
		}
		switch _deegd := _fdaff.(type) {
		case _b.StartElement:
			switch _deegd.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_bdbe.SerTxChoice = NewCT_SerTxChoice()
				if _ggddd := d.DecodeElement(&_bdbe.SerTxChoice.StrRef, &_deegd); _ggddd != nil {
					return _ggddd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				_bdbe.SerTxChoice = NewCT_SerTxChoice()
				if _edgbf := d.DecodeElement(&_bdbe.SerTxChoice.V, &_deegd); _edgbf != nil {
					return _edgbf
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078\u0020\u0025\u0076", _deegd.Name)
				if _fbbdg := d.Skip(); _fbbdg != nil {
					return _fbbdg
				}
			}
		case _b.EndElement:
			break _ggade
		case _b.CharData:
		}
	}
	return nil
}
func (_aefa *CT_DLblChoice) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _aefa.Delete != nil {
		_gdef := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_aefa.Delete, _gdef)
	} else if _aefa.Layout != nil {
		_ebb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_aefa.Layout, _ebb)
	} else if _aefa.Tx != nil {
		_ecba := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_aefa.Tx, _ecba)
	} else if _aefa.NumFmt != nil {
		_aebg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_aefa.NumFmt, _aebg)
	} else if _aefa.SpPr != nil {
		_befc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_aefa.SpPr, _befc)
	} else if _aefa.TxPr != nil {
		_fgbe := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_aefa.TxPr, _fgbe)
	} else if _aefa.DLblPos != nil {
		_gdea := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_aefa.DLblPos, _gdea)
	} else if _aefa.ShowLegendKey != nil {
		_gbbf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_aefa.ShowLegendKey, _gbbf)
	} else if _aefa.ShowVal != nil {
		_dedg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_aefa.ShowVal, _dedg)
	} else if _aefa.ShowCatName != nil {
		_dgea := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_aefa.ShowCatName, _dgea)
	} else if _aefa.ShowSerName != nil {
		_beed := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_aefa.ShowSerName, _beed)
	} else if _aefa.ShowPercent != nil {
		_bde := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_aefa.ShowPercent, _bde)
	} else if _aefa.ShowBubbleSize != nil {
		_dfg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_aefa.ShowBubbleSize, _dfg)
	} else if _aefa.Separator != nil {
		_caef := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_gf.AddPreserveSpaceAttr(&_caef, *_aefa.Separator)
		e.EncodeElement(_aefa.Separator, _caef)
	}
	return nil
}
func (_dfgdc *CT_Pie3DChart) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _dfgdc.VaryColors != nil {
		_edcd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_dfgdc.VaryColors, _edcd)
	}
	if _dfgdc.Ser != nil {
		_edcea := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _cabe := range _dfgdc.Ser {
			e.EncodeElement(_cabe, _edcea)
		}
	}
	if _dfgdc.DLbls != nil {
		_fdefda := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_dfgdc.DLbls, _fdefda)
	}
	if _dfgdc.ExtLst != nil {
		_daffd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dfgdc.ExtLst, _daffd)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_faccb *CT_StrRef) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_adee := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0066"}}
	_gf.AddPreserveSpaceAttr(&_adee, _faccb.F)
	e.EncodeElement(_faccb.F, _adee)
	if _faccb.StrCache != nil {
		_edffa := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}}
		e.EncodeElement(_faccb.StrCache, _edffa)
	}
	if _faccb.ExtLst != nil {
		_ggfad := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_faccb.ExtLst, _ggfad)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_CustSplit and its children, prefixing error messages with path
func (_adbd *CT_CustSplit) ValidateWithPath(path string) error {
	for _ecae, _bbaa := range _adbd.SecondPiePt {
		if _gbfd := _bbaa.ValidateWithPath(_g.Sprintf("\u0025s\u002fS\u0065\u0063\u006f\u006e\u0064P\u0069\u0065P\u0074\u005b\u0025\u0064\u005d", path, _ecae)); _gbfd != nil {
			return _gbfd
		}
	}
	return nil
}
func (_aggae *ST_SecondPieSize) Validate() error { return _aggae.ValidateWithPath("") }
func (_agbbf *CT_LegendEntry) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_ecgf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_agbbf.Idx, _ecgf)
	_agbbf.LegendEntryChoice.MarshalXML(e, _b.StartElement{})
	if _agbbf.ExtLst != nil {
		_ggceb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_agbbf.ExtLst, _ggceb)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_egafcg *ST_ErrDir) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_egafcg = 0
	case "\u0078":
		*_egafcg = 1
	case "\u0079":
		*_egafcg = 2
	}
	return nil
}

// ValidateWithPath validates the CT_AxPos and its children, prefixing error messages with path
func (_dfbd *CT_AxPos) ValidateWithPath(path string) error {
	if _dfbd.ValAttr == ST_AxPosUnset {
		return _g.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _gbaa := _dfbd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gbaa != nil {
		return _gbaa
	}
	return nil
}
func (_bcafdd ST_MarkerStyle) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_eede := _b.Attr{}
	_eede.Name = name
	switch _bcafdd {
	case ST_MarkerStyleUnset:
		_eede.Value = ""
	case ST_MarkerStyleCircle:
		_eede.Value = "\u0063\u0069\u0072\u0063\u006c\u0065"
	case ST_MarkerStyleDash:
		_eede.Value = "\u0064\u0061\u0073\u0068"
	case ST_MarkerStyleDiamond:
		_eede.Value = "\u0064i\u0061\u006d\u006f\u006e\u0064"
	case ST_MarkerStyleDot:
		_eede.Value = "\u0064\u006f\u0074"
	case ST_MarkerStyleNone:
		_eede.Value = "\u006e\u006f\u006e\u0065"
	case ST_MarkerStylePicture:
		_eede.Value = "\u0070i\u0063\u0074\u0075\u0072\u0065"
	case ST_MarkerStylePlus:
		_eede.Value = "\u0070\u006c\u0075\u0073"
	case ST_MarkerStyleSquare:
		_eede.Value = "\u0073\u0071\u0075\u0061\u0072\u0065"
	case ST_MarkerStyleStar:
		_eede.Value = "\u0073\u0074\u0061\u0072"
	case ST_MarkerStyleTriangle:
		_eede.Value = "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065"
	case ST_MarkerStyleX:
		_eede.Value = "\u0078"
	case ST_MarkerStyleAuto:
		_eede.Value = "\u0061\u0075\u0074\u006f"
	}
	return _eede, nil
}

// ValidateWithPath validates the CT_LogBase and its children, prefixing error messages with path
func (_cfcf *CT_LogBase) ValidateWithPath(path string) error {
	if _cfcf.ValAttr < 2 {
		return _g.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _cfcf.ValAttr)
	}
	if _cfcf.ValAttr > 1000 {
		return _g.Errorf("\u0025\u0073\u002f\u006d\u002e\u0056\u0061\u006c\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003c\u003d\u00201\u0030\u0030\u0030\u0020\u0028h\u0061\u0076e\u0020\u0025\u0076\u0029", path, _cfcf.ValAttr)
	}
	return nil
}
func (_bbgdf *ST_MarkerStyle) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_adecb, _aaebf := d.Token()
	if _aaebf != nil {
		return _aaebf
	}
	if _ddebb, _ecgaag := _adecb.(_b.EndElement); _ecgaag && _ddebb.Name == start.Name {
		*_bbgdf = 1
		return nil
	}
	if _abfecb, _bccgg := _adecb.(_b.CharData); !_bccgg {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _adecb)
	} else {
		switch string(_abfecb) {
		case "":
			*_bbgdf = 0
		case "\u0063\u0069\u0072\u0063\u006c\u0065":
			*_bbgdf = 1
		case "\u0064\u0061\u0073\u0068":
			*_bbgdf = 2
		case "\u0064i\u0061\u006d\u006f\u006e\u0064":
			*_bbgdf = 3
		case "\u0064\u006f\u0074":
			*_bbgdf = 4
		case "\u006e\u006f\u006e\u0065":
			*_bbgdf = 5
		case "\u0070i\u0063\u0074\u0075\u0072\u0065":
			*_bbgdf = 6
		case "\u0070\u006c\u0075\u0073":
			*_bbgdf = 7
		case "\u0073\u0071\u0075\u0061\u0072\u0065":
			*_bbgdf = 8
		case "\u0073\u0074\u0061\u0072":
			*_bbgdf = 9
		case "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065":
			*_bbgdf = 10
		case "\u0078":
			*_bbgdf = 11
		case "\u0061\u0075\u0074\u006f":
			*_bbgdf = 12
		}
	}
	_adecb, _aaebf = d.Token()
	if _aaebf != nil {
		return _aaebf
	}
	if _befgd, _ffaae := _adecb.(_b.EndElement); _ffaae && _befgd.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _adecb)
}
func (_abddb *CT_DispBlanksAs) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _abddb.ValAttr != ST_DispBlanksAsUnset {
		_ebgd, _ggfc := _abddb.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
		if _ggfc != nil {
			return _ggfc
		}
		start.Attr = append(start.Attr, _ebgd)
	}
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_fggg *CT_MultiLvlStrData) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_babca:
	for {
		_adaf, _ecea := d.Token()
		if _ecea != nil {
			return _ecea
		}
		switch _fbgae := _adaf.(type) {
		case _b.StartElement:
			switch _fbgae.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}:
				_fggg.PtCount = NewCT_UnsignedInt()
				if _egagb := d.DecodeElement(_fggg.PtCount, &_fbgae); _egagb != nil {
					return _egagb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0076\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0076\u006c"}:
				_acacb := NewCT_Lvl()
				if _gaff := d.DecodeElement(_acacb, &_fbgae); _gaff != nil {
					return _gaff
				}
				_fggg.Lvl = append(_fggg.Lvl, _acacb)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fggg.ExtLst = NewCT_ExtensionList()
				if _edce := d.DecodeElement(_fggg.ExtLst, &_fbgae); _edce != nil {
					return _edce
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004cv\u006c\u0053\u0074\u0072\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _fbgae.Name)
				if _bbaf := d.Skip(); _bbaf != nil {
					return _bbaf
				}
			}
		case _b.EndElement:
			break _babca
		case _b.CharData:
		}
	}
	return nil
}

// Validate validates the CT_NumDataSource and its children
func (_gfdbd *CT_NumDataSource) Validate() error {
	return _gfdbd.ValidateWithPath("\u0043\u0054_\u004e\u0075\u006dD\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065")
}

type CT_ScatterChart struct {

	// Scatter Style
	ScatterStyle *CT_ScatterStyle

	// Vary Colors by Point
	VaryColors *CT_Boolean

	// Scatter Chart Series
	Ser []*CT_ScatterSer

	// Data Labels
	DLbls *CT_DLbls

	// Axis ID
	AxId []*CT_UnsignedInt

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func NewCT_Shape() *CT_Shape { _afggd := &CT_Shape{}; return _afggd }
func (_agga *CT_Crosses) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_agga.ValAttr = ST_Crosses(1)
	for _, _eceda := range start.Attr {
		if _eceda.Name.Local == "\u0076\u0061\u006c" {
			_agga.ValAttr.UnmarshalXMLAttr(_eceda)
			continue
		}
	}
	for {
		_gceg, _ceec := d.Token()
		if _ceec != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0065\u0073\u003a\u0020%\u0073", _ceec)
		}
		if _dcad, _cdcc := _gceg.(_b.EndElement); _cdcc && _dcad.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fgaba *ST_DepthPercent) Validate() error { return _fgaba.ValidateWithPath("") }

const ST_LblOffsetPercentPattern = "\u0030\u002a\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u007c\u0028[1\u002d\u0039\u005d\u005b\u0030\u002d9\u005d\u0029\u007c\u0028\u005b\u0031\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u005b0\u002d\u0039\u005d\u0029\u007c\u0031\u0030\u00300\u0029\u0025"

// Validate validates the CT_DoughnutChart and its children
func (_dfgc *CT_DoughnutChart) Validate() error {
	return _dfgc.ValidateWithPath("\u0043\u0054_\u0044\u006f\u0075g\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074")
}

// Validate validates the CT_BubbleScale and its children
func (_aab *CT_BubbleScale) Validate() error {
	return _aab.ValidateWithPath("\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065S\u0063\u0061\u006c\u0065")
}
func ParseUnionST_DepthPercent(s string) (ST_DepthPercent, error) {
	if ST_DepthPercentWithSymbolPatternRe.MatchString(s) {
		return ST_DepthPercent{ST_DepthPercentWithSymbol: &s}, nil
	}
	_ceddc, _gcbgb := _e.ParseUint(s, 10, 16)
	if _gcbgb != nil {
		return ST_DepthPercent{}, _gcbgb
	}
	_bfegb := uint16(_ceddc)
	return ST_DepthPercent{ST_DepthPercentUShort: &_bfegb}, nil
}

const (
	ST_MarkerStyleUnset    ST_MarkerStyle = 0
	ST_MarkerStyleCircle   ST_MarkerStyle = 1
	ST_MarkerStyleDash     ST_MarkerStyle = 2
	ST_MarkerStyleDiamond  ST_MarkerStyle = 3
	ST_MarkerStyleDot      ST_MarkerStyle = 4
	ST_MarkerStyleNone     ST_MarkerStyle = 5
	ST_MarkerStylePicture  ST_MarkerStyle = 6
	ST_MarkerStylePlus     ST_MarkerStyle = 7
	ST_MarkerStyleSquare   ST_MarkerStyle = 8
	ST_MarkerStyleStar     ST_MarkerStyle = 9
	ST_MarkerStyleTriangle ST_MarkerStyle = 10
	ST_MarkerStyleX        ST_MarkerStyle = 11
	ST_MarkerStyleAuto     ST_MarkerStyle = 12
)

func (_eggf *CT_DoughnutChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_daabb:
	for {
		_bcagd, _cbag := d.Token()
		if _cbag != nil {
			return _cbag
		}
		switch _ebcc := _bcagd.(type) {
		case _b.StartElement:
			switch _ebcc.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_eggf.VaryColors = NewCT_Boolean()
				if _fdegf := d.DecodeElement(_eggf.VaryColors, &_ebcc); _fdegf != nil {
					return _fdegf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_egfea := NewCT_PieSer()
				if _ebgf := d.DecodeElement(_egfea, &_ebcc); _ebgf != nil {
					return _ebgf
				}
				_eggf.Ser = append(_eggf.Ser, _egfea)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_eggf.DLbls = NewCT_DLbls()
				if _cgde := d.DecodeElement(_eggf.DLbls, &_ebcc); _cgde != nil {
					return _cgde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}:
				_eggf.FirstSliceAng = NewCT_FirstSliceAng()
				if _ebacb := d.DecodeElement(_eggf.FirstSliceAng, &_ebcc); _ebacb != nil {
					return _ebacb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u006f\u006c\u0065\u0053\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u006f\u006c\u0065\u0053\u0069\u007a\u0065"}:
				_eggf.HoleSize = NewCT_HoleSize()
				if _cffc := d.DecodeElement(_eggf.HoleSize, &_ebcc); _cffc != nil {
					return _cffc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_eggf.ExtLst = NewCT_ExtensionList()
				if _caeed := d.DecodeElement(_eggf.ExtLst, &_ebcc); _caeed != nil {
					return _caeed
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074\u0020\u0025v", _ebcc.Name)
				if _fage := d.Skip(); _fage != nil {
					return _fage
				}
			}
		case _b.EndElement:
			break _daabb
		case _b.CharData:
		}
	}
	return nil
}
func NewCT_DepthPercent() *CT_DepthPercent { _edfbf := &CT_DepthPercent{}; return _edfbf }

type ST_LayoutTarget byte

func (_gffd *CT_MultiLvlStrRef) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_fddag := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0066"}}
	_gf.AddPreserveSpaceAttr(&_fddag, _gffd.F)
	e.EncodeElement(_gffd.F, _fddag)
	if _gffd.MultiLvlStrCache != nil {
		_bgdfd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006du\u006c\u0074\u0069\u004c\u0076l\u0053\u0074r\u0043\u0061\u0063\u0068\u0065"}}
		e.EncodeElement(_gffd.MultiLvlStrCache, _bgdfd)
	}
	if _gffd.ExtLst != nil {
		_acbe := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gffd.ExtLst, _acbe)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_PageMargins struct {

	// Left
	LAttr float64

	// Right
	RAttr float64

	// Top
	TAttr float64

	// Bottom
	BAttr float64

	// Header
	HeaderAttr float64

	// Footer
	FooterAttr float64
}

func (_aabd *CT_Extension) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _aabd.UriAttr != nil {
		start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0075\u0072\u0069"}, Value: _g.Sprintf("\u0025\u0076", *_aabd.UriAttr)})
	}
	e.EncodeToken(start)
	if _aabd.Any != nil {
		_aabd.Any.MarshalXML(e, _b.StartElement{})
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_GapAmount and its children
func (_eebba *CT_GapAmount) Validate() error {
	return _eebba.ValidateWithPath("\u0043\u0054\u005fG\u0061\u0070\u0041\u006d\u006f\u0075\u006e\u0074")
}
func (_efgbdd *CT_ScatterSer) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	_aaca := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_efgbdd.Idx, _aaca)
	_eaaa := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_efgbdd.Order, _eaaa)
	if _efgbdd.Tx != nil {
		_gaec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_efgbdd.Tx, _gaec)
	}
	if _efgbdd.SpPr != nil {
		_gedg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_efgbdd.SpPr, _gedg)
	}
	if _efgbdd.Marker != nil {
		_cggb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_efgbdd.Marker, _cggb)
	}
	if _efgbdd.DPt != nil {
		_effad := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _fdcb := range _efgbdd.DPt {
			e.EncodeElement(_fdcb, _effad)
		}
	}
	if _efgbdd.DLbls != nil {
		_afbaf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_efgbdd.DLbls, _afbaf)
	}
	if _efgbdd.Trendline != nil {
		_dbdb := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _eaaae := range _efgbdd.Trendline {
			e.EncodeElement(_eaaae, _dbdb)
		}
	}
	if _efgbdd.ErrBars != nil {
		_ddcf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		for _, _afdag := range _efgbdd.ErrBars {
			e.EncodeElement(_afdag, _ddcf)
		}
	}
	if _efgbdd.XVal != nil {
		_cbcb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0078\u0056\u0061\u006c"}}
		e.EncodeElement(_efgbdd.XVal, _cbcb)
	}
	if _efgbdd.YVal != nil {
		_adcb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0079\u0056\u0061\u006c"}}
		e.EncodeElement(_efgbdd.YVal, _adcb)
	}
	if _efgbdd.Smooth != nil {
		_dccbg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u006d\u006f\u006f\u0074\u0068"}}
		e.EncodeElement(_efgbdd.Smooth, _dccbg)
	}
	if _efgbdd.ExtLst != nil {
		_bdaf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_efgbdd.ExtLst, _bdaf)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_TickLblPos and its children
func (_aagbg *CT_TickLblPos) Validate() error {
	return _aagbg.ValidateWithPath("\u0043\u0054\u005f\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073")
}

type CT_LineChart struct {

	// Grouping
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_LineSer

	// Data Labels
	DLbls *CT_DLbls

	// Drop Lines
	DropLines *CT_ChartLines

	// High Low Lines
	HiLowLines *CT_ChartLines
	UpDownBars *CT_UpDownBars

	// Show Marker
	Marker *CT_Boolean
	Smooth *CT_Boolean

	// Axis ID
	AxId []*CT_UnsignedInt

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

// ValidateWithPath validates the CT_Legend and its children, prefixing error messages with path
func (_ddea *CT_Legend) ValidateWithPath(path string) error {
	if _ddea.LegendPos != nil {
		if _aeeb := _ddea.LegendPos.ValidateWithPath(path + "\u002f\u004c\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073"); _aeeb != nil {
			return _aeeb
		}
	}
	for _fbae, _dgag := range _ddea.LegendEntry {
		if _bbgaf := _dgag.ValidateWithPath(_g.Sprintf("\u0025s\u002fL\u0065\u0067\u0065\u006e\u0064E\u006e\u0074r\u0079\u005b\u0025\u0064\u005d", path, _fbae)); _bbgaf != nil {
			return _bbgaf
		}
	}
	if _ddea.Layout != nil {
		if _gcbe := _ddea.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _gcbe != nil {
			return _gcbe
		}
	}
	if _ddea.Overlay != nil {
		if _eaaf := _ddea.Overlay.ValidateWithPath(path + "\u002f\u004f\u0076\u0065\u0072\u006c\u0061\u0079"); _eaaf != nil {
			return _eaaf
		}
	}
	if _ddea.SpPr != nil {
		if _cgefg := _ddea.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cgefg != nil {
			return _cgefg
		}
	}
	if _ddea.TxPr != nil {
		if _gdgc := _ddea.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _gdgc != nil {
			return _gdgc
		}
	}
	if _ddea.ExtLst != nil {
		if _bfdd := _ddea.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bfdd != nil {
			return _bfdd
		}
	}
	return nil
}
func NewCT_LineChart() *CT_LineChart {
	_fdcgg := &CT_LineChart{}
	_fdcgg.Grouping = NewCT_Grouping()
	return _fdcgg
}
func (_egaf *ChartSpace) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0063"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063\u003a\u0063h\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065"
	return _egaf.CT_ChartSpace.MarshalXML(e, start)
}
func (_gbfa *CT_LegendPos) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _fddbe := range start.Attr {
		if _fddbe.Name.Local == "\u0076\u0061\u006c" {
			_gbfa.ValAttr.UnmarshalXMLAttr(_fddbe)
			continue
		}
	}
	for {
		_cgggd, _cgebg := d.Token()
		if _cgebg != nil {
			return _g.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u004c\u0065g\u0065\u006e\u0064\u0050\u006f\u0073\u003a\u0020\u0025\u0073", _cgebg)
		}
		if _cagga, _cgdd := _cgggd.(_b.EndElement); _cgdd && _cagga.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_DLblChoice and its children, prefixing error messages with path
func (_daabe *CT_DLblChoice) ValidateWithPath(path string) error {
	if _daabe.Delete != nil {
		if _afdd := _daabe.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _afdd != nil {
			return _afdd
		}
	}
	if _daabe.Layout != nil {
		if _gada := _daabe.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _gada != nil {
			return _gada
		}
	}
	if _daabe.Tx != nil {
		if _fgca := _daabe.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _fgca != nil {
			return _fgca
		}
	}
	if _daabe.NumFmt != nil {
		if _eega := _daabe.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _eega != nil {
			return _eega
		}
	}
	if _daabe.SpPr != nil {
		if _degc := _daabe.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _degc != nil {
			return _degc
		}
	}
	if _daabe.TxPr != nil {
		if _fbcdg := _daabe.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _fbcdg != nil {
			return _fbcdg
		}
	}
	if _daabe.DLblPos != nil {
		if _cfcd := _daabe.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _cfcd != nil {
			return _cfcd
		}
	}
	if _daabe.ShowLegendKey != nil {
		if _acdg := _daabe.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _acdg != nil {
			return _acdg
		}
	}
	if _daabe.ShowVal != nil {
		if _bbde := _daabe.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _bbde != nil {
			return _bbde
		}
	}
	if _daabe.ShowCatName != nil {
		if _egcc := _daabe.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _egcc != nil {
			return _egcc
		}
	}
	if _daabe.ShowSerName != nil {
		if _gfge := _daabe.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _gfge != nil {
			return _gfge
		}
	}
	if _daabe.ShowPercent != nil {
		if _bebd := _daabe.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _bebd != nil {
			return _bebd
		}
	}
	if _daabe.ShowBubbleSize != nil {
		if _ebba := _daabe.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _ebba != nil {
			return _ebba
		}
	}
	return nil
}
func NewCT_Surface() *CT_Surface { _gfeeg := &CT_Surface{}; return _gfeeg }

// ValidateWithPath validates the CT_BandFmt and its children, prefixing error messages with path
func (_dbb *CT_BandFmt) ValidateWithPath(path string) error {
	if _degd := _dbb.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _degd != nil {
		return _degd
	}
	if _dbb.SpPr != nil {
		if _bgbd := _dbb.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _bgbd != nil {
			return _bgbd
		}
	}
	return nil
}

// Validate validates the Chart and its children
func (_eegce *Chart) Validate() error { return _eegce.ValidateWithPath("\u0043\u0068\u0061r\u0074") }
func (_cfcda *CT_Double) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	start.Attr = append(start.Attr, _b.Attr{Name: _b.Name{Local: "\u0076\u0061\u006c"}, Value: _g.Sprintf("\u0025\u0076", _cfcda.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_eedac *CT_Marker) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_gfcd:
	for {
		_gdcbg, _dbbf := d.Token()
		if _dbbf != nil {
			return _dbbf
		}
		switch _bgce := _gdcbg.(type) {
		case _b.StartElement:
			switch _bgce.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0079\u006d\u0062\u006f\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0079\u006d\u0062\u006f\u006c"}:
				_eedac.Symbol = NewCT_MarkerStyle()
				if _gbgc := d.DecodeElement(_eedac.Symbol, &_bgce); _gbgc != nil {
					return _gbgc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065"}:
				_eedac.Size = NewCT_MarkerSize()
				if _cgbg := d.DecodeElement(_eedac.Size, &_bgce); _cgbg != nil {
					return _cgbg
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_eedac.SpPr = _gfc.NewCT_ShapeProperties()
				if _bbae := d.DecodeElement(_eedac.SpPr, &_bgce); _bbae != nil {
					return _bbae
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_eedac.ExtLst = NewCT_ExtensionList()
				if _cbbeg := d.DecodeElement(_eedac.ExtLst, &_bgce); _cbbeg != nil {
					return _cbbeg
				}
			default:
				_df.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004d\u0061\u0072k\u0065\u0072 \u0025\u0076", _bgce.Name)
				if _eecc := d.Skip(); _eecc != nil {
					return _eecc
				}
			}
		case _b.EndElement:
			break _gfcd
		case _b.CharData:
		}
	}
	return nil
}

// Validate validates the CT_ChartSpace and its children
func (_ggc *CT_ChartSpace) Validate() error {
	return _ggc.ValidateWithPath("\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065")
}
func (_gcad *CT_PageSetup) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _daffc := range start.Attr {
		if _daffc.Name.Local == "\u0070a\u0070\u0065\u0072\u0053\u0069\u007ae" {
			_daaa, _deccg := _e.ParseUint(_daffc.Value, 10, 32)
			if _deccg != nil {
				return _deccg
			}
			_eaec := uint32(_daaa)
			_gcad.PaperSizeAttr = &_eaec
			continue
		}
		if _daffc.Name.Local == "p\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074" {
			_dfga := _daffc.Value
			_gcad.PaperHeightAttr = &_dfga
			continue
		}
		if _daffc.Name.Local == "\u0070\u0061\u0070\u0065\u0072\u0057\u0069\u0064\u0074\u0068" {
			_gdgbe := _daffc.Value
			_gcad.PaperWidthAttr = &_gdgbe
			continue
		}
		if _daffc.Name.Local == "\u0066i\u0072s\u0074\u0050\u0061\u0067\u0065\u004e\u0075\u006d\u0062\u0065\u0072" {
			_eaedg, _dedd := _e.ParseUint(_daffc.Value, 10, 32)
			if _dedd != nil {
				return _dedd
			}
			_efeb := uint32(_eaedg)
			_gcad.FirstPageNumberAttr = &_efeb
			continue
		}
		if _daffc.Name.Local == "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e" {
			_gcad.OrientationAttr.UnmarshalXMLAttr(_daffc)
			continue
		}
		if _daffc.Name.Local == "\u0062\u006c\u0061\u0063\u006b\u0041\u006e\u0064\u0057\u0068\u0069\u0074\u0065" {
			_egbbd, _befd := _e.ParseBool(_daffc.Value)
			if _befd != nil {
				return _befd
			}
			_gcad.BlackAndWhiteAttr = &_egbbd
			continue
		}
		if _daffc.Name.Local == "\u0064\u0072\u0061f\u0074" {
			_cdfeb, _aecbe := _e.ParseBool(_daffc.Value)
			if _aecbe != nil {
				return _aecbe
			}
			_gcad.DraftAttr = &_cdfeb
			continue
		}
		if _daffc.Name.Local == "\u0075s\u0065F\u0069\u0072\u0073\u0074\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072" {
			_ecfff, _dggcf := _e.ParseBool(_daffc.Value)
			if _dggcf != nil {
				return _dggcf
			}
			_gcad.UseFirstPageNumberAttr = &_ecfff
			continue
		}
		if _daffc.Name.Local == "\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0044\u0070\u0069" {
			_dcee, _edfa := _e.ParseInt(_daffc.Value, 10, 32)
			if _edfa != nil {
				return _edfa
			}
			_afcb := int32(_dcee)
			_gcad.HorizontalDpiAttr = &_afcb
			continue
		}
		if _daffc.Name.Local == "v\u0065\u0072\u0074\u0069\u0063\u0061\u006c\u0044\u0070\u0069" {
			_ddfeg, _febc := _e.ParseInt(_daffc.Value, 10, 32)
			if _febc != nil {
				return _febc
			}
			_gdcae := int32(_ddfeg)
			_gcad.VerticalDpiAttr = &_gdcae
			continue
		}
		if _daffc.Name.Local == "\u0063\u006f\u0070\u0069\u0065\u0073" {
			_acbc, _eefe := _e.ParseUint(_daffc.Value, 10, 32)
			if _eefe != nil {
				return _eefe
			}
			_ddgg := uint32(_acbc)
			_gcad.CopiesAttr = &_ddgg
			continue
		}
	}
	for {
		_ddaeff, _eeaac := d.Token()
		if _eeaac != nil {
			return _g.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0050\u0061g\u0065\u0053\u0065\u0074\u0075\u0070\u003a\u0020\u0025\u0073", _eeaac)
		}
		if _acga, _fbab := _ddaeff.(_b.EndElement); _fbab && _acga.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_Crosses() *CT_Crosses { _gafc := &CT_Crosses{}; _gafc.ValAttr = ST_Crosses(1); return _gafc }
func NewCT_RotX() *CT_RotX       { _ecdde := &CT_RotX{}; return _ecdde }
func (_afcaf *CT_LblAlgn) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_cfbd, _ffeb := _afcaf.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
	if _ffeb != nil {
		return _ffeb
	}
	start.Attr = append(start.Attr, _cfbd)
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_cdffa *ST_ErrValType) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fgag, _fdgde := d.Token()
	if _fdgde != nil {
		return _fdgde
	}
	if _dbgff, _gdaf := _fgag.(_b.EndElement); _gdaf && _dbgff.Name == start.Name {
		*_cdffa = 1
		return nil
	}
	if _bcggg, _fdggf := _fgag.(_b.CharData); !_fdggf {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fgag)
	} else {
		switch string(_bcggg) {
		case "":
			*_cdffa = 0
		case "\u0063\u0075\u0073\u0074":
			*_cdffa = 1
		case "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c":
			*_cdffa = 2
		case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065":
			*_cdffa = 3
		case "\u0073\u0074\u0064\u0044\u0065\u0076":
			*_cdffa = 4
		case "\u0073\u0074\u0064\u0045\u0072\u0072":
			*_cdffa = 5
		}
	}
	_fgag, _fdgde = d.Token()
	if _fdgde != nil {
		return _fdgde
	}
	if _debcfa, _cgdgg := _fgag.(_b.EndElement); _cgdgg && _debcfa.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fgag)
}
func (_afca *CT_DispUnitsChoice) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_fffb := start
	switch start.Name {
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}:
		_afca.CustUnit = NewCT_Double()
		if _fcbd := d.DecodeElement(_afca.CustUnit, &_fffb); _fcbd != nil {
			return _fcbd
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}:
		_afca.BuiltInUnit = NewCT_BuiltInUnit()
		if _acabg := d.DecodeElement(_afca.BuiltInUnit, &_fffb); _acabg != nil {
			return _acabg
		}
	default:
		_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0069\u0073\u0070\u0055\u006ei\u0074\u0073\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _fffb.Name)
		if _ccaba := d.Skip(); _ccaba != nil {
			return _ccaba
		}
	}
	return nil
}
func (_bfgcc *ST_HPercent) Validate() error { return _bfgcc.ValidateWithPath("") }
func (_cdbg ST_RadarStyle) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_cdbg.String(), start)
}

// ValidateWithPath validates the CT_PlotAreaChoice1 and its children, prefixing error messages with path
func (_ggffc *CT_PlotAreaChoice1) ValidateWithPath(path string) error {
	if _ggffc.ValAx != nil {
		if _bdga := _ggffc.ValAx.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0078"); _bdga != nil {
			return _bdga
		}
	}
	if _ggffc.CatAx != nil {
		if _bbcea := _ggffc.CatAx.ValidateWithPath(path + "\u002f\u0043\u0061\u0074\u0041\u0078"); _bbcea != nil {
			return _bbcea
		}
	}
	if _ggffc.DateAx != nil {
		if _dfafd := _ggffc.DateAx.ValidateWithPath(path + "\u002fD\u0061\u0074\u0065\u0041\u0078"); _dfafd != nil {
			return _dfafd
		}
	}
	if _ggffc.SerAx != nil {
		if _ebdc := _ggffc.SerAx.ValidateWithPath(path + "\u002f\u0053\u0065\u0072\u0041\u0078"); _ebdc != nil {
			return _ebdc
		}
	}
	return nil
}
func (_cggg *CT_DispUnitsChoice) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _cggg.CustUnit != nil {
		_cdad := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_cggg.CustUnit, _cdad)
	} else if _cggg.BuiltInUnit != nil {
		_bbfdd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_cggg.BuiltInUnit, _bbfdd)
	}
	return nil
}

const (
	ST_TrendlineTypeUnset     ST_TrendlineType = 0
	ST_TrendlineTypeExp       ST_TrendlineType = 1
	ST_TrendlineTypeLinear    ST_TrendlineType = 2
	ST_TrendlineTypeLog       ST_TrendlineType = 3
	ST_TrendlineTypeMovingAvg ST_TrendlineType = 4
	ST_TrendlineTypePoly      ST_TrendlineType = 5
	ST_TrendlineTypePower     ST_TrendlineType = 6
)

// Validate validates the CT_NumFmt and its children
func (_fbdg *CT_NumFmt) Validate() error {
	return _fbdg.ValidateWithPath("\u0043T\u005f\u004e\u0075\u006d\u0046\u006dt")
}
func (_adb *CT_AreaChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
_db:
	for {
		_fgg, _ba := d.Token()
		if _ba != nil {
			return _ba
		}
		switch _ddd := _fgg.(type) {
		case _b.StartElement:
			switch _ddd.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_adb.Grouping = NewCT_Grouping()
				if _bfad := d.DecodeElement(_adb.Grouping, &_ddd); _bfad != nil {
					return _bfad
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_adb.VaryColors = NewCT_Boolean()
				if _bbf := d.DecodeElement(_adb.VaryColors, &_ddd); _bbf != nil {
					return _bbf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_gaa := NewCT_AreaSer()
				if _fbc := d.DecodeElement(_gaa, &_ddd); _fbc != nil {
					return _fbc
				}
				_adb.Ser = append(_adb.Ser, _gaa)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_adb.DLbls = NewCT_DLbls()
				if _cgec := d.DecodeElement(_adb.DLbls, &_ddd); _cgec != nil {
					return _cgec
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_adb.DropLines = NewCT_ChartLines()
				if _agee := d.DecodeElement(_adb.DropLines, &_ddd); _agee != nil {
					return _agee
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_gac := NewCT_UnsignedInt()
				if _ecc := d.DecodeElement(_gac, &_ddd); _ecc != nil {
					return _ecc
				}
				_adb.AxId = append(_adb.AxId, _gac)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_adb.ExtLst = NewCT_ExtensionList()
				if _bed := d.DecodeElement(_adb.ExtLst, &_ddd); _bed != nil {
					return _bed
				}
			default:
				_df.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_A\u0072\u0065a\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _ddd.Name)
				if _de := d.Skip(); _de != nil {
					return _de
				}
			}
		case _b.EndElement:
			break _db
		case _b.CharData:
		}
	}
	return nil
}
func (_ebcf *CT_Perspective) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _adaae := range start.Attr {
		if _adaae.Name.Local == "\u0076\u0061\u006c" {
			_bagg, _fdgec := _e.ParseUint(_adaae.Value, 10, 8)
			if _fdgec != nil {
				return _fdgec
			}
			_bgafg := uint8(_bagg)
			_ebcf.ValAttr = &_bgafg
			continue
		}
	}
	for {
		_eafc, _bff := d.Token()
		if _bff != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fP\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065:\u0020\u0025\u0073", _bff)
		}
		if _ggfe, _fefba := _eafc.(_b.EndElement); _fefba && _ggfe.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_PageMargins() *CT_PageMargins { _gfdc := &CT_PageMargins{}; return _gfdc }

type CT_LblOffset struct {

	// Label Offset Value
	ValAttr *ST_LblOffset
}

func (_fgabb *ST_Grouping) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_geea, _dedge := d.Token()
	if _dedge != nil {
		return _dedge
	}
	if _ddfbd, _fdcff := _geea.(_b.EndElement); _fdcff && _ddfbd.Name == start.Name {
		*_fgabb = 1
		return nil
	}
	if _fcgfe, _fcgef := _geea.(_b.CharData); !_fcgef {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _geea)
	} else {
		switch string(_fcgfe) {
		case "":
			*_fgabb = 0
		case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
			*_fgabb = 1
		case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
			*_fgabb = 2
		case "\u0073t\u0061\u0063\u006b\u0065\u0064":
			*_fgabb = 3
		}
	}
	_geea, _dedge = d.Token()
	if _dedge != nil {
		return _dedge
	}
	if _gebgf, _dgfba := _geea.(_b.EndElement); _dgfba && _gebgf.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _geea)
}

// ValidateWithPath validates the CT_DispBlanksAs and its children, prefixing error messages with path
func (_ebbb *CT_DispBlanksAs) ValidateWithPath(path string) error {
	if _bcb := _ebbb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bcb != nil {
		return _bcb
	}
	return nil
}
func (_edddf *CT_NumData) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _edddf.FormatCode != nil {
		_egcgdb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0066o\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}}
		_gf.AddPreserveSpaceAttr(&_egcgdb, *_edddf.FormatCode)
		e.EncodeElement(_edddf.FormatCode, _egcgdb)
	}
	if _edddf.PtCount != nil {
		_efbg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0070\u0074\u0043\u006f\u0075\u006et"}}
		e.EncodeElement(_edddf.PtCount, _efbg)
	}
	if _edddf.Pt != nil {
		_cfaf := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u0074"}}
		for _, _afbg := range _edddf.Pt {
			e.EncodeElement(_afbg, _cfaf)
		}
	}
	if _edddf.ExtLst != nil {
		_decb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_edddf.ExtLst, _decb)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func (_edea *CT_MarkerStyle) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_cgdac, _accbf := _edea.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
	if _accbf != nil {
		return _accbf
	}
	start.Attr = append(start.Attr, _cgdac)
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}
func NewCT_Boolean() *CT_Boolean { _eaee := &CT_Boolean{}; return _eaee }

// Validate validates the CT_DispUnitsLbl and its children
func (_ggba *CT_DispUnitsLbl) Validate() error {
	return _ggba.ValidateWithPath("\u0043T\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c")
}

// ValidateWithPath validates the CT_BandFmts and its children, prefixing error messages with path
func (_fcc *CT_BandFmts) ValidateWithPath(path string) error {
	for _dec, _dege := range _fcc.BandFmt {
		if _daf := _dege.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0042\u0061\u006e\u0064\u0046\u006dt\u005b\u0025\u0064\u005d", path, _dec)); _daf != nil {
			return _daf
		}
	}
	return nil
}
func (_fabfd ST_PageSetupOrientation) MarshalXMLAttr(name _b.Name) (_b.Attr, error) {
	_ecgcc := _b.Attr{}
	_ecgcc.Name = name
	switch _fabfd {
	case ST_PageSetupOrientationUnset:
		_ecgcc.Value = ""
	case ST_PageSetupOrientationDefault:
		_ecgcc.Value = "\u0064e\u0066\u0061\u0075\u006c\u0074"
	case ST_PageSetupOrientationPortrait:
		_ecgcc.Value = "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074"
	case ST_PageSetupOrientationLandscape:
		_ecgcc.Value = "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e"
	}
	return _ecgcc, nil
}

type CT_PlotArea struct {

	// Layout
	Layout          *CT_Layout
	PlotAreaChoice  []*CT_PlotAreaChoice
	PlotAreaChoice1 []*CT_PlotAreaChoice1

	// Data Table
	DTable *CT_DTable
	SpPr   *_gfc.CT_ShapeProperties

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_cdgccb ST_SizeRepresents) Validate() error { return _cdgccb.ValidateWithPath("") }
func NewCT_TrendlineLbl() *CT_TrendlineLbl        { _cedgb := &CT_TrendlineLbl{}; return _cedgb }

// ST_HoleSize is a union type
type ST_HoleSize struct {
	ST_HoleSizePercent *string
	ST_HoleSizeUByte   *uint8
}

func (_acab *CT_AxPos) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	_dggc, _egeb := _acab.ValAttr.MarshalXMLAttr(_b.Name{Local: "\u0076\u0061\u006c"})
	if _egeb != nil {
		return _egeb
	}
	start.Attr = append(start.Attr, _dggc)
	e.EncodeToken(start)
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

type CT_BarChart struct {

	// Bar Direction
	BarDir *CT_BarDir

	// Bar Grouping
	Grouping   *CT_BarGrouping
	VaryColors *CT_Boolean

	// Bar Chart Series
	Ser []*CT_BarSer

	// Data Labels
	DLbls *CT_DLbls

	// Gap Width
	GapWidth *CT_GapAmount

	// Overlap
	Overlap *CT_Overlap

	// Series Lines
	SerLines []*CT_ChartLines

	// Axis ID
	AxId []*CT_UnsignedInt

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

func (_afecf *CT_PlotAreaChoice) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dadcd := start
	switch start.Name {
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}:
		_afecf.AreaChart = NewCT_AreaChart()
		if _dedea := d.DecodeElement(_afecf.AreaChart, &_dadcd); _dedea != nil {
			return _dedea
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
		_afecf.Area3DChart = NewCT_Area3DChart()
		if _acfcc := d.DecodeElement(_afecf.Area3DChart, &_dadcd); _acfcc != nil {
			return _acfcc
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}:
		_afecf.LineChart = NewCT_LineChart()
		if _agfec := d.DecodeElement(_afecf.LineChart, &_dadcd); _agfec != nil {
			return _agfec
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
		_afecf.Line3DChart = NewCT_Line3DChart()
		if _fgdeg := d.DecodeElement(_afecf.Line3DChart, &_dadcd); _fgdeg != nil {
			return _fgdeg
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}:
		_afecf.StockChart = NewCT_StockChart()
		if _cddee := d.DecodeElement(_afecf.StockChart, &_dadcd); _cddee != nil {
			return _cddee
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
		_afecf.RadarChart = NewCT_RadarChart()
		if _ccgef := d.DecodeElement(_afecf.RadarChart, &_dadcd); _ccgef != nil {
			return _ccgef
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}:
		_afecf.ScatterChart = NewCT_ScatterChart()
		if _gfgfe := d.DecodeElement(_afecf.ScatterChart, &_dadcd); _gfgfe != nil {
			return _gfgfe
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
		_afecf.PieChart = NewCT_PieChart()
		if _cgggb := d.DecodeElement(_afecf.PieChart, &_dadcd); _cgggb != nil {
			return _cgggb
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
		_afecf.Pie3DChart = NewCT_Pie3DChart()
		if _gbfce := d.DecodeElement(_afecf.Pie3DChart, &_dadcd); _gbfce != nil {
			return _gbfce
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}:
		_afecf.DoughnutChart = NewCT_DoughnutChart()
		if _cbggb := d.DecodeElement(_afecf.DoughnutChart, &_dadcd); _cbggb != nil {
			return _cbggb
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
		_afecf.BarChart = NewCT_BarChart()
		if _cefd := d.DecodeElement(_afecf.BarChart, &_dadcd); _cefd != nil {
			return _cefd
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
		_afecf.Bar3DChart = NewCT_Bar3DChart()
		if _abebf := d.DecodeElement(_afecf.Bar3DChart, &_dadcd); _abebf != nil {
			return _abebf
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
		_afecf.OfPieChart = NewCT_OfPieChart()
		if _aafbf := d.DecodeElement(_afecf.OfPieChart, &_dadcd); _aafbf != nil {
			return _aafbf
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}:
		_afecf.SurfaceChart = NewCT_SurfaceChart()
		if _cgaaa := d.DecodeElement(_afecf.SurfaceChart, &_dadcd); _cgaaa != nil {
			return _cgaaa
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}:
		_afecf.Surface3DChart = NewCT_Surface3DChart()
		if _gbdg := d.DecodeElement(_afecf.Surface3DChart, &_dadcd); _gbdg != nil {
			return _gbdg
		}
	case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}:
		_afecf.BubbleChart = NewCT_BubbleChart()
		if _adag := d.DecodeElement(_afecf.BubbleChart, &_dadcd); _adag != nil {
			return _adag
		}
	default:
		_df.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _dadcd.Name)
		if _gcde := d.Skip(); _gcde != nil {
			return _gcde
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Surface and its children, prefixing error messages with path
func (_gbgcg *CT_Surface) ValidateWithPath(path string) error {
	if _gbgcg.Thickness != nil {
		if _eagea := _gbgcg.Thickness.ValidateWithPath(path + "\u002f\u0054\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073"); _eagea != nil {
			return _eagea
		}
	}
	if _gbgcg.SpPr != nil {
		if _cfff := _gbgcg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cfff != nil {
			return _cfff
		}
	}
	if _gbgcg.PictureOptions != nil {
		if _gcab := _gbgcg.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _gcab != nil {
			return _gcab
		}
	}
	if _gbgcg.ExtLst != nil {
		if _egfgc := _gbgcg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _egfgc != nil {
			return _egfgc
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PictureFormat and its children, prefixing error messages with path
func (_gacd *CT_PictureFormat) ValidateWithPath(path string) error {
	if _gacd.ValAttr == ST_PictureFormatUnset {
		return _g.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _dcaee := _gacd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dcaee != nil {
		return _dcaee
	}
	return nil
}

// Validate validates the CT_PieChart and its children
func (_abdbb *CT_PieChart) Validate() error {
	return _abdbb.ValidateWithPath("C\u0054\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074")
}
func NewUserShapes() *UserShapes {
	_abdge := &UserShapes{}
	_abdge.CT_Drawing = *_c.NewCT_Drawing()
	return _abdge
}

type CT_LogBase struct {

	// Logarithmic Base Value
	ValAttr float64
}

func (_gbefc *CT_OfPieChart) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_gbefc.OfPieType = NewCT_OfPieType()
_baaa:
	for {
		_adaa, _fbfdca := d.Token()
		if _fbfdca != nil {
			return _fbfdca
		}
		switch _gecga := _adaa.(type) {
		case _b.StartElement:
			switch _gecga.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ff\u0050\u0069\u0065\u0054\u0079\u0070e"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ff\u0050\u0069\u0065\u0054\u0079\u0070e"}:
				if _ebcca := d.DecodeElement(_gbefc.OfPieType, &_gecga); _ebcca != nil {
					return _ebcca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_gbefc.VaryColors = NewCT_Boolean()
				if _eafd := d.DecodeElement(_gbefc.VaryColors, &_gecga); _eafd != nil {
					return _eafd
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_gecce := NewCT_PieSer()
				if _ecad := d.DecodeElement(_gecce, &_gecga); _ecad != nil {
					return _ecad
				}
				_gbefc.Ser = append(_gbefc.Ser, _gecce)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_gbefc.DLbls = NewCT_DLbls()
				if _agaf := d.DecodeElement(_gbefc.DLbls, &_gecga); _agaf != nil {
					return _agaf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_gbefc.GapWidth = NewCT_GapAmount()
				if _edfc := d.DecodeElement(_gbefc.GapWidth, &_gecga); _edfc != nil {
					return _edfc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073p\u006c\u0069\u0074\u0054\u0079\u0070e"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073p\u006c\u0069\u0074\u0054\u0079\u0070e"}:
				_gbefc.SplitType = NewCT_SplitType()
				if _fdgefb := d.DecodeElement(_gbefc.SplitType, &_gecga); _fdgefb != nil {
					return _fdgefb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u006c\u0069\u0074\u0050\u006f\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u006c\u0069\u0074\u0050\u006f\u0073"}:
				_gbefc.SplitPos = NewCT_Double()
				if _gegff := d.DecodeElement(_gbefc.SplitPos, &_gecga); _gegff != nil {
					return _gegff
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063u\u0073\u0074\u0053\u0070\u006c\u0069t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063u\u0073\u0074\u0053\u0070\u006c\u0069t"}:
				_gbefc.CustSplit = NewCT_CustSplit()
				if _ffag := d.DecodeElement(_gbefc.CustSplit, &_gecga); _ffag != nil {
					return _ffag
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065"}:
				_gbefc.SecondPieSize = NewCT_SecondPieSize()
				if _addc := d.DecodeElement(_gbefc.SecondPieSize, &_gecga); _addc != nil {
					return _addc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_feba := NewCT_ChartLines()
				if _ddbgd := d.DecodeElement(_feba, &_gecga); _ddbgd != nil {
					return _ddbgd
				}
				_gbefc.SerLines = append(_gbefc.SerLines, _feba)
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gbefc.ExtLst = NewCT_ExtensionList()
				if _ecdc := d.DecodeElement(_gbefc.ExtLst, &_gecga); _ecdc != nil {
					return _ecdc
				}
			default:
				_df.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004ff\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _gecga.Name)
				if _fefb := d.Skip(); _fefb != nil {
					return _fefb
				}
			}
		case _b.EndElement:
			break _baaa
		case _b.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_StockChart and its children, prefixing error messages with path
func (_fade *CT_StockChart) ValidateWithPath(path string) error {
	for _gabbg, _fafda := range _fade.Ser {
		if _eeadb := _fafda.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _gabbg)); _eeadb != nil {
			return _eeadb
		}
	}
	if _fade.DLbls != nil {
		if _bbfdae := _fade.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _bbfdae != nil {
			return _bbfdae
		}
	}
	if _fade.DropLines != nil {
		if _cffgf := _fade.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _cffgf != nil {
			return _cffgf
		}
	}
	if _fade.HiLowLines != nil {
		if _fgfg := _fade.HiLowLines.ValidateWithPath(path + "/\u0048\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"); _fgfg != nil {
			return _fgfg
		}
	}
	if _fade.UpDownBars != nil {
		if _fgbbec := _fade.UpDownBars.ValidateWithPath(path + "/\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"); _fgbbec != nil {
			return _fgbbec
		}
	}
	for _cbbba, _fbfed := range _fade.AxId {
		if _begfd := _fbfed.ValidateWithPath(_g.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _cbbba)); _begfd != nil {
			return _begfd
		}
	}
	if _fade.ExtLst != nil {
		if _befaa := _fade.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _befaa != nil {
			return _befaa
		}
	}
	return nil
}
func NewCT_PieSer() *CT_PieSer {
	_eabgb := &CT_PieSer{}
	_eabgb.Idx = NewCT_UnsignedInt()
	_eabgb.Order = NewCT_UnsignedInt()
	return _eabgb
}

// ValidateWithPath validates the CT_DepthPercent and its children, prefixing error messages with path
func (_daae *CT_DepthPercent) ValidateWithPath(path string) error {
	if _daae.ValAttr != nil {
		if _dfcgb := _daae.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dfcgb != nil {
			return _dfcgb
		}
	}
	return nil
}

type CT_DLbl struct {

	// Index
	Idx        *CT_UnsignedInt
	DLblChoice *CT_DLblChoice

	// Chart Extensibility
	ExtLst *CT_ExtensionList
}

// Validate validates the CT_Protection and its children
func (_fcdgf *CT_Protection) Validate() error {
	return _fcdgf.ValidateWithPath("\u0043\u0054\u005f\u0050\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e")
}
func (_ccbed ST_SplitType) String() string {
	switch _ccbed {
	case 0:
		return ""
	case 1:
		return "\u0061\u0075\u0074\u006f"
	case 2:
		return "\u0063\u0075\u0073\u0074"
	case 3:
		return "\u0070e\u0072\u0063\u0065\u006e\u0074"
	case 4:
		return "\u0070\u006f\u0073"
	case 5:
		return "\u0076\u0061\u006c"
	}
	return ""
}

type CT_NumFmt struct {

	// Number Format Code
	FormatCodeAttr string

	// Linked to Source
	SourceLinkedAttr *bool
}
type CT_ScatterStyle struct {

	// Scatter Style Value
	ValAttr ST_ScatterStyle
}
type CT_Order struct {

	// Order Value
	ValAttr *uint8
}

func (_bbaac *ST_PageSetupOrientation) UnmarshalXMLAttr(attr _b.Attr) error {
	switch attr.Value {
	case "":
		*_bbaac = 0
	case "\u0064e\u0066\u0061\u0075\u006c\u0074":
		*_bbaac = 1
	case "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074":
		*_bbaac = 2
	case "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e":
		*_bbaac = 3
	}
	return nil
}
func (_gadd *EG_PieChartShared) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _gadd.VaryColors != nil {
		_adeg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_gadd.VaryColors, _adeg)
	}
	if _gadd.Ser != nil {
		_bbgbc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _gaedf := range _gadd.Ser {
			e.EncodeElement(_gaedf, _bbgbc)
		}
	}
	if _gadd.DLbls != nil {
		_cgeccf := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gadd.DLbls, _cgeccf)
	}
	return nil
}

type CT_Style struct {

	// Style Type
	ValAttr uint8
}

// ValidateWithPath validates the CT_TickMark and its children, prefixing error messages with path
func (_afdef *CT_TickMark) ValidateWithPath(path string) error {
	if _fece := _afdef.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fece != nil {
		return _fece
	}
	return nil
}

// ValidateWithPath validates the CT_ScatterSer and its children, prefixing error messages with path
func (_fcfb *CT_ScatterSer) ValidateWithPath(path string) error {
	if _fcddc := _fcfb.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _fcddc != nil {
		return _fcddc
	}
	if _aaaec := _fcfb.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _aaaec != nil {
		return _aaaec
	}
	if _fcfb.Tx != nil {
		if _cceea := _fcfb.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _cceea != nil {
			return _cceea
		}
	}
	if _fcfb.SpPr != nil {
		if _eccaf := _fcfb.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _eccaf != nil {
			return _eccaf
		}
	}
	if _fcfb.Marker != nil {
		if _bggde := _fcfb.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _bggde != nil {
			return _bggde
		}
	}
	for _efebg, _eceg := range _fcfb.DPt {
		if _dbdcc := _eceg.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _efebg)); _dbdcc != nil {
			return _dbdcc
		}
	}
	if _fcfb.DLbls != nil {
		if _cfecd := _fcfb.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _cfecd != nil {
			return _cfecd
		}
	}
	for _gaeaa, _fdbac := range _fcfb.Trendline {
		if _agebe := _fdbac.ValidateWithPath(_g.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _gaeaa)); _agebe != nil {
			return _agebe
		}
	}
	for _bafa, _caaaf := range _fcfb.ErrBars {
		if _egebcc := _caaaf.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0045\u0072\u0072\u0042\u0061\u0072s\u005b\u0025\u0064\u005d", path, _bafa)); _egebcc != nil {
			return _egebcc
		}
	}
	if _fcfb.XVal != nil {
		if _edaf := _fcfb.XVal.ValidateWithPath(path + "\u002f\u0058\u0056a\u006c"); _edaf != nil {
			return _edaf
		}
	}
	if _fcfb.YVal != nil {
		if _fdgff := _fcfb.YVal.ValidateWithPath(path + "\u002f\u0059\u0056a\u006c"); _fdgff != nil {
			return _fdgff
		}
	}
	if _fcfb.Smooth != nil {
		if _bbgbe := _fcfb.Smooth.ValidateWithPath(path + "\u002fS\u006d\u006f\u006f\u0074\u0068"); _bbgbe != nil {
			return _bbgbe
		}
	}
	if _fcfb.ExtLst != nil {
		if _dbgca := _fcfb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dbgca != nil {
			return _dbgca
		}
	}
	return nil
}

// Validate validates the CT_LegendEntry and its children
func (_aeae *CT_LegendEntry) Validate() error {
	return _aeae.ValidateWithPath("\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064E\u006e\u0074\u0072\u0079")
}

// ValidateWithPath validates the CT_BarDir and its children, prefixing error messages with path
func (_eddg *CT_BarDir) ValidateWithPath(path string) error {
	if _feef := _eddg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _feef != nil {
		return _feef
	}
	return nil
}

type CT_BuiltInUnit struct {

	// Built In Unit Value
	ValAttr ST_BuiltInUnit
}

// ValidateWithPath validates the CT_LblAlgn and its children, prefixing error messages with path
func (_cfec *CT_LblAlgn) ValidateWithPath(path string) error {
	if _cfec.ValAttr == ST_LblAlgnUnset {
		return _g.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _gadgc := _cfec.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gadgc != nil {
		return _gadgc
	}
	return nil
}

// Validate validates the CT_NumData and its children
func (_gefe *CT_NumData) Validate() error {
	return _gefe.ValidateWithPath("\u0043\u0054\u005f\u004e\u0075\u006d\u0044\u0061\u0074\u0061")
}

// ValidateWithPath validates the CT_MultiLvlStrData and its children, prefixing error messages with path
func (_cbae *CT_MultiLvlStrData) ValidateWithPath(path string) error {
	if _cbae.PtCount != nil {
		if _gafcg := _cbae.PtCount.ValidateWithPath(path + "\u002f\u0050\u0074\u0043\u006f\u0075\u006e\u0074"); _gafcg != nil {
			return _gafcg
		}
	}
	for _fdgeg, _fffd := range _cbae.Lvl {
		if _dcabd := _fffd.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u004c\u0076\u006c\u005b\u0025\u0064\u005d", path, _fdgeg)); _dcabd != nil {
			return _dcabd
		}
	}
	if _cbae.ExtLst != nil {
		if _bdge := _cbae.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bdge != nil {
			return _bdge
		}
	}
	return nil
}

// Validate validates the CT_AxPos and its children
func (_egfe *CT_AxPos) Validate() error {
	return _egfe.ValidateWithPath("\u0043\u0054\u005f\u0041\u0078\u0050\u006f\u0073")
}

// ValidateWithPath validates the CT_NumFmt and its children, prefixing error messages with path
func (_gfade *CT_NumFmt) ValidateWithPath(path string) error { return nil }

// ValidateWithPath validates the CT_MarkerSize and its children, prefixing error messages with path
func (_babd *CT_MarkerSize) ValidateWithPath(path string) error {
	if _babd.ValAttr != nil {
		if *_babd.ValAttr < 2 {
			return _g.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_babd.ValAttr)
		}
		if *_babd.ValAttr > 72 {
			return _g.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003c\u003d\u0020\u00372 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_babd.ValAttr)
		}
	}
	return nil
}

type EG_AxSharedChoice struct {
	Crosses   *CT_Crosses
	CrossesAt *CT_Double
}

func (_afbdg *ST_HPercent) ValidateWithPath(path string) error {
	_gefad := []string{}
	if _afbdg.ST_HPercentWithSymbol != nil {
		_gefad = append(_gefad, "S\u0054\u005f\u0048\u0050er\u0063e\u006e\u0074\u0057\u0069\u0074h\u0053\u0079\u006d\u0062\u006f\u006c")
	}
	if _afbdg.ST_HPercentUShort != nil {
		_gefad = append(_gefad, "\u0053\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074\u0055S\u0068\u006f\u0072\u0074")
	}
	if len(_gefad) > 1 {
		return _g.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _gefad)
	}
	return nil
}
func (_edaff ST_DispBlanksAs) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	return e.EncodeElement(_edaff.String(), start)
}
func (_bcbac ST_Orientation) ValidateWithPath(path string) error {
	switch _bcbac {
	case 0, 1, 2:
	default:
		return _g.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bcbac))
	}
	return nil
}
func (_acaf *CT_PlotAreaChoice1) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	if _acaf.ValAx != nil {
		_fbcgd := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0076\u0061\u006c\u0041\u0078"}}
		e.EncodeElement(_acaf.ValAx, _fbcgd)
	} else if _acaf.CatAx != nil {
		_afce := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0063\u0061\u0074\u0041\u0078"}}
		e.EncodeElement(_acaf.CatAx, _afce)
	} else if _acaf.DateAx != nil {
		_fffec := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0061\u0074\u0065\u0041\u0078"}}
		e.EncodeElement(_acaf.DateAx, _fffec)
	} else if _acaf.SerAx != nil {
		_acbce := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0073\u0065\u0072\u0041\u0078"}}
		e.EncodeElement(_acaf.SerAx, _acbce)
	}
	return nil
}

// Validate validates the CT_PictureFormat and its children
func (_eded *CT_PictureFormat) Validate() error {
	return _eded.ValidateWithPath("\u0043\u0054_\u0050\u0069\u0063t\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074")
}
func (_cgdg *CT_FirstSliceAng) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _aacb := range start.Attr {
		if _aacb.Name.Local == "\u0076\u0061\u006c" {
			_agcfg, _acgcc := _e.ParseUint(_aacb.Value, 10, 16)
			if _acgcc != nil {
				return _acgcc
			}
			_ggce := uint16(_agcfg)
			_cgdg.ValAttr = &_ggce
			continue
		}
	}
	for {
		_bbbgc, _gaea := d.Token()
		if _gaea != nil {
			return _g.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0046\u0069\u0072\u0073t\u0053l\u0069\u0063\u0065\u0041\u006e\u0067\u003a \u0025\u0073", _gaea)
		}
		if _bbfdb, _dfgcb := _bbbgc.(_b.EndElement); _dfgcb && _bbfdb.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_ErrBars and its children
func (_cfgaa *CT_ErrBars) Validate() error {
	return _cfgaa.ValidateWithPath("\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0073")
}
func (_fcdac *ST_Shape) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_dcdbe, _ebdce := d.Token()
	if _ebdce != nil {
		return _ebdce
	}
	if _cbgbe, _aefadg := _dcdbe.(_b.EndElement); _aefadg && _cbgbe.Name == start.Name {
		*_fcdac = 1
		return nil
	}
	if _bccebc, _cfffd := _dcdbe.(_b.CharData); !_cfffd {
		return _g.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dcdbe)
	} else {
		switch string(_bccebc) {
		case "":
			*_fcdac = 0
		case "\u0063\u006f\u006e\u0065":
			*_fcdac = 1
		case "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x":
			*_fcdac = 2
		case "\u0062\u006f\u0078":
			*_fcdac = 3
		case "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072":
			*_fcdac = 4
		case "\u0070y\u0072\u0061\u006d\u0069\u0064":
			*_fcdac = 5
		case "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078":
			*_fcdac = 6
		}
	}
	_dcdbe, _ebdce = d.Token()
	if _ebdce != nil {
		return _ebdce
	}
	if _afff, _cgeede := _dcdbe.(_b.EndElement); _cgeede && _afff.Name == start.Name {
		return nil
	}
	return _g.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dcdbe)
}

const (
	ST_OfPieTypeUnset ST_OfPieType = 0
	ST_OfPieTypePie   ST_OfPieType = 1
	ST_OfPieTypeBar   ST_OfPieType = 2
)

func (_aeeaa *CT_Trendline) MarshalXML(e *_b.Encoder, start _b.StartElement) error {
	e.EncodeToken(start)
	if _aeeaa.Name != nil {
		_dgcgd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u006e\u0061\u006d\u0065"}}
		_gf.AddPreserveSpaceAttr(&_dgcgd, *_aeeaa.Name)
		e.EncodeElement(_aeeaa.Name, _dgcgd)
	}
	if _aeeaa.SpPr != nil {
		_bbedd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_aeeaa.SpPr, _bbedd)
	}
	_fcgfg := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0074r\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_aeeaa.TrendlineType, _fcgfg)
	if _aeeaa.Order != nil {
		_ecbde := _b.StartElement{Name: _b.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
		e.EncodeElement(_aeeaa.Order, _ecbde)
	}
	if _aeeaa.Period != nil {
		_aafc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0070\u0065\u0072\u0069\u006f\u0064"}}
		e.EncodeElement(_aeeaa.Period, _aafc)
	}
	if _aeeaa.Forward != nil {
		_fdfe := _b.StartElement{Name: _b.Name{Local: "\u0063:\u0066\u006f\u0072\u0077\u0061\u0072d"}}
		e.EncodeElement(_aeeaa.Forward, _fdfe)
	}
	if _aeeaa.Backward != nil {
		_gfffag := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0062\u0061\u0063\u006b\u0077\u0061\u0072\u0064"}}
		e.EncodeElement(_aeeaa.Backward, _gfffag)
	}
	if _aeeaa.Intercept != nil {
		_adgc := _b.StartElement{Name: _b.Name{Local: "c\u003a\u0069\u006e\u0074\u0065\u0072\u0063\u0065\u0070\u0074"}}
		e.EncodeElement(_aeeaa.Intercept, _adgc)
	}
	if _aeeaa.DispRSqr != nil {
		_feedg := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0052\u0053\u0071\u0072"}}
		e.EncodeElement(_aeeaa.DispRSqr, _feedg)
	}
	if _aeeaa.DispEq != nil {
		_ccdb := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0045\u0071"}}
		e.EncodeElement(_aeeaa.DispEq, _ccdb)
	}
	if _aeeaa.TrendlineLbl != nil {
		_cfbfc := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069n\u0065\u004c\u0062\u006c"}}
		e.EncodeElement(_aeeaa.TrendlineLbl, _cfbfc)
	}
	if _aeeaa.ExtLst != nil {
		_dabdd := _b.StartElement{Name: _b.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aeeaa.ExtLst, _dabdd)
	}
	e.EncodeToken(_b.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_UpDownBars and its children, prefixing error messages with path
func (_gaafbd *CT_UpDownBars) ValidateWithPath(path string) error {
	if _gaafbd.GapWidth != nil {
		if _cggegb := _gaafbd.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _cggegb != nil {
			return _cggegb
		}
	}
	if _gaafbd.UpBars != nil {
		if _agffg := _gaafbd.UpBars.ValidateWithPath(path + "\u002fU\u0070\u0042\u0061\u0072\u0073"); _agffg != nil {
			return _agffg
		}
	}
	if _gaafbd.DownBars != nil {
		if _dgcgc := _gaafbd.DownBars.ValidateWithPath(path + "\u002fD\u006f\u0077\u006e\u0042\u0061\u0072s"); _dgcgc != nil {
			return _dgcgc
		}
	}
	if _gaafbd.ExtLst != nil {
		if _bfdcb := _gaafbd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bfdcb != nil {
			return _bfdcb
		}
	}
	return nil
}

// Validate validates the CT_RotX and its children
func (_baeee *CT_RotX) Validate() error {
	return _baeee.ValidateWithPath("\u0043T\u005f\u0052\u006f\u0074\u0058")
}
func (_bddfga *CT_Trendline) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	_bddfga.TrendlineType = NewCT_TrendlineType()
_bfbbg:
	for {
		_fegfa, _dedga := d.Token()
		if _dedga != nil {
			return _dedga
		}
		switch _gbgfb := _fegfa.(type) {
		case _b.StartElement:
			switch _gbgfb.Name {
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}:
				_bddfga.Name = new(string)
				if _aebabc := d.DecodeElement(_bddfga.Name, &_gbgfb); _aebabc != nil {
					return _aebabc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_bddfga.SpPr = _gfc.NewCT_ShapeProperties()
				if _gdccdc := d.DecodeElement(_bddfga.SpPr, &_gbgfb); _gdccdc != nil {
					return _gdccdc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065"}:
				if _cbgef := d.DecodeElement(_bddfga.TrendlineType, &_gbgfb); _cbgef != nil {
					return _cbgef
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				_bddfga.Order = NewCT_Order()
				if _dadec := d.DecodeElement(_bddfga.Order, &_gbgfb); _dadec != nil {
					return _dadec
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0065\u0072\u0069\u006f\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0065\u0072\u0069\u006f\u0064"}:
				_bddfga.Period = NewCT_Period()
				if _bgfa := d.DecodeElement(_bddfga.Period, &_gbgfb); _bgfa != nil {
					return _bgfa
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066o\u0072\u0077\u0061\u0072\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066o\u0072\u0077\u0061\u0072\u0064"}:
				_bddfga.Forward = NewCT_Double()
				if _ebbca := d.DecodeElement(_bddfga.Forward, &_gbgfb); _ebbca != nil {
					return _ebbca
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0077\u0061\u0072\u0064"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0077\u0061\u0072\u0064"}:
				_bddfga.Backward = NewCT_Double()
				if _bedc := d.DecodeElement(_bddfga.Backward, &_gbgfb); _bedc != nil {
					return _bedc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069n\u0074\u0065\u0072\u0063\u0065\u0070t"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069n\u0074\u0065\u0072\u0063\u0065\u0070t"}:
				_bddfga.Intercept = NewCT_Double()
				if _eabde := d.DecodeElement(_bddfga.Intercept, &_gbgfb); _eabde != nil {
					return _eabde
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0052\u0053\u0071\u0072"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0052\u0053\u0071\u0072"}:
				_bddfga.DispRSqr = NewCT_Boolean()
				if _eeafc := d.DecodeElement(_bddfga.DispRSqr, &_gbgfb); _eeafc != nil {
					return _eeafc
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0045\u0071"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0045\u0071"}:
				_bddfga.DispEq = NewCT_Boolean()
				if _adgf := d.DecodeElement(_bddfga.DispEq, &_gbgfb); _adgf != nil {
					return _adgf
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c"}:
				_bddfga.TrendlineLbl = NewCT_TrendlineLbl()
				if _cdecb := d.DecodeElement(_bddfga.TrendlineLbl, &_gbgfb); _cdecb != nil {
					return _cdecb
				}
			case _b.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _b.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bddfga.ExtLst = NewCT_ExtensionList()
				if _bbdgc := d.DecodeElement(_bddfga.ExtLst, &_gbgfb); _bbdgc != nil {
					return _bbdgc
				}
			default:
				_df.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_T\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u0020\u0025\u0076", _gbgfb.Name)
				if _adba := d.Skip(); _adba != nil {
					return _adba
				}
			}
		case _b.EndElement:
			break _bfbbg
		case _b.CharData:
		}
	}
	return nil
}

type CT_NumDataSource struct{ NumDataSourceChoice *CT_NumDataSourceChoice }

// ValidateWithPath validates the CT_ExtensionList and its children, prefixing error messages with path
func (_eeab *CT_ExtensionList) ValidateWithPath(path string) error {
	for _gacac, _ffed := range _eeab.Ext {
		if _bdcc := _ffed.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u005b\u0025\u0064\u005d", path, _gacac)); _bdcc != nil {
			return _bdcc
		}
	}
	return nil
}
func (_bcdd *CT_Grouping) UnmarshalXML(d *_b.Decoder, start _b.StartElement) error {
	for _, _bfeg := range start.Attr {
		if _bfeg.Name.Local == "\u0076\u0061\u006c" {
			_bcdd.ValAttr.UnmarshalXMLAttr(_bfeg)
			continue
		}
	}
	for {
		_dabgd, _bfgef := d.Token()
		if _bfgef != nil {
			return _g.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067\u003a\u0020\u0025\u0073", _bfgef)
		}
		if _dbgdb, _bbbc := _dabgd.(_b.EndElement); _bbbc && _dbgdb.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_SurfaceSer() *CT_SurfaceSer {
	_afcdf := &CT_SurfaceSer{}
	_afcdf.Idx = NewCT_UnsignedInt()
	_afcdf.Order = NewCT_UnsignedInt()
	return _afcdf
}
func init() {
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u006f\u006f\u006c\u0065\u0061\u006e", NewCT_Boolean)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u006f\u0075\u0062\u006ce", NewCT_Double)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0055\u006e\u0073\u0069\u0067\u006ee\u0064\u0049\u006e\u0074", NewCT_UnsignedInt)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0052\u0065\u006c\u0049\u0064", NewCT_RelId)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fE\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e", NewCT_Extension)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0045\u0078\u0074e\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074", NewCT_ExtensionList)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004e\u0075\u006d\u0056\u0061l", NewCT_NumVal)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004e\u0075\u006d\u0044\u0061\u0074\u0061", NewCT_NumData)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004e\u0075\u006d\u0052\u0065f", NewCT_NumRef)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u004e\u0075\u006dD\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065", NewCT_NumDataSource)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0053\u0074\u0072\u0056\u0061l", NewCT_StrVal)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0074\u0072\u0044\u0061\u0074\u0061", NewCT_StrData)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0053\u0074\u0072\u0052\u0065f", NewCT_StrRef)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fT\u0078", NewCT_Tx)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0054\u0065\u0078\u0074\u004c\u0061\u006e\u0067\u0075a\u0067\u0065\u0049\u0044", NewCT_TextLanguageID)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0076\u006c", NewCT_Lvl)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fM\u0075\u006c\u0074\u0069\u004cv\u006c\u0053t\u0072\u0044\u0061\u0074\u0061", NewCT_MultiLvlStrData)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066", NewCT_MultiLvlStrRef)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fA\u0078\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065", NewCT_AxDataSource)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078", NewCT_SerTx)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fL\u0061\u0079\u006f\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074", NewCT_LayoutTarget)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u004d\u006f\u0064\u0065", NewCT_LayoutMode)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fM\u0061\u006e\u0075\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074", NewCT_ManualLayout)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004c\u0061\u0079\u006f\u0075t", NewCT_Layout)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0054\u0069\u0074\u006c\u0065", NewCT_Title)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0052\u006f\u0074\u0058", NewCT_RotX)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074", NewCT_HPercent)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0052\u006f\u0074\u0059", NewCT_RotY)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fD\u0065\u0070\u0074\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074", NewCT_DepthPercent)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0065\u0072\u0073\u0070\u0065c\u0074\u0069\u0076\u0065", NewCT_Perspective)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0056\u0069\u0065\u0077\u0033D", NewCT_View3D)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065", NewCT_Surface)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fT\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073", NewCT_Thickness)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u0054\u0061\u0062\u006ce", NewCT_DTable)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fG\u0061\u0070\u0041\u006d\u006f\u0075\u006e\u0074", NewCT_GapAmount)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070", NewCT_Overlap)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065S\u0063\u0061\u006c\u0065", NewCT_BubbleScale)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073", NewCT_SizeRepresents)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0046\u0069\u0072s\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067", NewCT_FirstSliceAng)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0048\u006f\u006c\u0065\u0053\u0069\u007a\u0065", NewCT_HoleSize)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fS\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065", NewCT_SplitType)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fC\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074", NewCT_CustSplit)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0053\u0065\u0063o\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065", NewCT_SecondPieSize)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004e\u0075\u006d\u0046\u006dt", NewCT_NumFmt)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0062\u006c\u0041\u006c\u0067\u006e", NewCT_LblAlgn)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0050\u006f\u0073", NewCT_DLblPos)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u004c\u0062\u006c", NewCT_DLbl)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073", NewCT_DLbls)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072S\u0074\u0079\u006c\u0065", NewCT_MarkerStyle)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072\u0053\u0069\u007a\u0065", NewCT_MarkerSize)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004d\u0061\u0072\u006b\u0065r", NewCT_Marker)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0044\u0050\u0074", NewCT_DPt)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065", NewCT_TrendlineType)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0072\u0064\u0065\u0072", NewCT_Order)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0050\u0065\u0072\u0069\u006fd", NewCT_Period)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c", NewCT_TrendlineLbl)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065", NewCT_Trendline)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0045\u0072\u0072\u0044\u0069r", NewCT_ErrDir)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065", NewCT_ErrBarType)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0045\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065", NewCT_ErrValType)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0073", NewCT_ErrBars)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fU\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072", NewCT_UpDownBar)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073", NewCT_UpDownBars)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0053\u0065\u0072", NewCT_LineSer)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0065\u0072", NewCT_ScatterSer)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0065\u0072", NewCT_RadarSer)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0042\u0061\u0072\u0053\u0065r", NewCT_BarSer)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0053\u0065\u0072", NewCT_AreaSer)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0050\u0069\u0065\u0053\u0065r", NewCT_PieSer)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fB\u0075\u0062\u0062\u006c\u0065\u0053\u0065\u0072", NewCT_BubbleSer)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0053\u0065\u0072", NewCT_SurfaceSer)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067", NewCT_Grouping)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u004c\u0069\u006e\u0065\u0073", NewCT_ChartLines)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fL\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_LineChart)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0033\u0044C\u0068\u0061\u0072\u0074", NewCT_Line3DChart)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074", NewCT_StockChart)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065", NewCT_ScatterStyle)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074", NewCT_ScatterChart)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065", NewCT_RadarStyle)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074", NewCT_RadarChart)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0061\u0072\u0047\u0072\u006fu\u0070\u0069\u006e\u0067", NewCT_BarGrouping)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0042\u0061\u0072\u0044\u0069r", NewCT_BarDir)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065", NewCT_Shape)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074", NewCT_BarChart)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074", NewCT_Bar3DChart)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fA\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074", NewCT_AreaChart)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0033\u0044C\u0068\u0061\u0072\u0074", NewCT_Area3DChart)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_PieChart)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074", NewCT_Pie3DChart)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0044\u006f\u0075g\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074", NewCT_DoughnutChart)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fO\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065", NewCT_OfPieType)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_OfPieChart)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065C\u0068\u0061\u0072\u0074", NewCT_BubbleChart)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074", NewCT_BandFmt)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074\u0073", NewCT_BandFmts)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fS\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_SurfaceChart)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074", NewCT_Surface3DChart)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0041\u0078\u0050\u006f\u0073", NewCT_AxPos)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0065\u0073", NewCT_Crosses)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fC\u0072\u006f\u0073\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e", NewCT_CrossBetween)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b", NewCT_TickMark)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073", NewCT_TickLblPos)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0053\u006b\u0069\u0070", NewCT_Skip)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074", NewCT_TimeUnit)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0041\u0078\u0069\u0073\u0055\u006e\u0069\u0074", NewCT_AxisUnit)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0075\u0069\u006c\u0074\u0049n\u0055\u006e\u0069\u0074", NewCT_BuiltInUnit)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0050\u0069\u0063t\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074", NewCT_PictureFormat)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050ic\u0074\u0075\u0072\u0065\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074", NewCT_PictureStackUnit)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073", NewCT_PictureOptions)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c", NewCT_DispUnitsLbl)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073", NewCT_DispUnits)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0072\u0069\u0065\u006e\u0074a\u0074\u0069\u006f\u006e", NewCT_Orientation)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u006f\u0067\u0042\u0061\u0073\u0065", NewCT_LogBase)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0063\u0061\u006c\u0069\u006e\u0067", NewCT_Scaling)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fL\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074", NewCT_LblOffset)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0061\u0074\u0041\u0078", NewCT_CatAx)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u0061\u0074\u0065\u0041x", NewCT_DateAx)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0065\u0072\u0041\u0078", NewCT_SerAx)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0056\u0061\u006c\u0041\u0078", NewCT_ValAx)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061", NewCT_PlotArea)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074", NewCT_PivotFmt)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fP\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073", NewCT_PivotFmts)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fL\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073", NewCT_LegendPos)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064E\u006e\u0074\u0072\u0079", NewCT_LegendEntry)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004c\u0065\u0067\u0065\u006ed", NewCT_Legend)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fD\u0069\u0073\u0070\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073", NewCT_DispBlanksAs)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074", NewCT_Chart)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065", NewCT_Style)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0053o\u0075\u0072\u0063\u0065", NewCT_PivotSource)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e", NewCT_Protection)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fH\u0065\u0061\u0064\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072", NewCT_HeaderFooter)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0061\u0067\u0065\u004d\u0061r\u0067\u0069\u006e\u0073", NewCT_PageMargins)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fE\u0078\u0074\u0065\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061", NewCT_ExternalData)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fP\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070", NewCT_PageSetup)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0050\u0072\u0069n\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073", NewCT_PrintSettings)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065", NewCT_ChartSpace)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0063\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065", NewChartSpace)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073", NewUserShapes)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0063\u0068\u0061r\u0074", NewChart)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005f\u0044\u004c\u0062\u006c\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_DLblShared)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0047\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c", NewGroup_DLbl)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "G\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c\u0073", NewGroup_DLbls)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005fS\u0065\u0072\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_SerShared)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045G\u005fL\u0069\u006e\u0065\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064", NewEG_LineChartShared)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064", NewEG_BarChartShared)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045G\u005fA\u0072\u0065\u0061\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064", NewEG_AreaChartShared)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064", NewEG_PieChartShared)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "E\u0047\u005f\u0053\u0075rf\u0061c\u0065\u0043\u0068\u0061\u0072t\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_SurfaceChartShared)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "E\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_AxShared)
	_gf.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045G\u005fL\u0065\u0067\u0065\u006e\u0064E\u006e\u0074r\u0079\u0044\u0061\u0074\u0061", NewEG_LegendEntryData)
}
