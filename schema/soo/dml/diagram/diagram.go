//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package diagram

import (
	_a "encoding/xml"
	_e "fmt"
	_g "strconv"
	_f "unioffice"
	_ag "unioffice/common/logger"
	_b "unioffice/schema/soo/dml"
)

func (_cbfgg *CT_When) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _cbfgg.NameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _e.Sprintf("\u0025\u0076", *_cbfgg.NameAttr)})
	}
	_fecdb, _aece := _cbfgg.FuncAttr.MarshalXMLAttr(_a.Name{Local: "\u0066\u0075\u006e\u0063"})
	if _aece != nil {
		return _aece
	}
	start.Attr = append(start.Attr, _fecdb)
	if _cbfgg.ArgAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0061\u0072\u0067"}, Value: _e.Sprintf("\u0025\u0076", *_cbfgg.ArgAttr)})
	}
	_fecdb, _aece = _cbfgg.OpAttr.MarshalXMLAttr(_a.Name{Local: "\u006f\u0070"})
	if _aece != nil {
		return _aece
	}
	start.Attr = append(start.Attr, _fecdb)
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _e.Sprintf("\u0025\u0076", _cbfgg.ValAttr)})
	if _cbfgg.AxisAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0061\u0078\u0069\u0073"}, Value: _e.Sprintf("\u0025\u0076", *_cbfgg.AxisAttr)})
	}
	if _cbfgg.PtTypeAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"}, Value: _e.Sprintf("\u0025\u0076", *_cbfgg.PtTypeAttr)})
	}
	if _cbfgg.HideLastTransAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073"}, Value: _e.Sprintf("\u0025\u0076", *_cbfgg.HideLastTransAttr)})
	}
	if _cbfgg.StAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074"}, Value: _e.Sprintf("\u0025\u0076", *_cbfgg.StAttr)})
	}
	if _cbfgg.CntAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u006e\u0074"}, Value: _e.Sprintf("\u0025\u0076", *_cbfgg.CntAttr)})
	}
	if _cbfgg.StepAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074\u0065\u0070"}, Value: _e.Sprintf("\u0025\u0076", *_cbfgg.StepAttr)})
	}
	e.EncodeToken(start)
	if _cbfgg.WhenChoice != nil {
		for _, _gdac := range _cbfgg.WhenChoice {
			_gdac.MarshalXML(e, _a.StartElement{})
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type CT_SDDescription struct {

	// Natural Language
	LangAttr *string

	// Description Value
	ValAttr string
}

// Validate validates the CT_AdjLst and its children
func (_bfd *CT_AdjLst) Validate() error {
	return _bfd.ValidateWithPath("\u0043T\u005f\u0041\u0064\u006a\u004c\u0073t")
}
func (_aebc *CT_NumericRule) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _aebc.ValAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _e.Sprintf("\u0025\u0076", *_aebc.ValAttr)})
	}
	if _aebc.FactAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0066\u0061\u0063\u0074"}, Value: _e.Sprintf("\u0025\u0076", *_aebc.FactAttr)})
	}
	if _aebc.MaxAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u0061\u0078"}, Value: _e.Sprintf("\u0025\u0076", *_aebc.MaxAttr)})
	}
	_fbfb, _gcfdg := _aebc.TypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0074\u0079\u0070\u0065"})
	if _gcfdg != nil {
		return _gcfdg
	}
	start.Attr = append(start.Attr, _fbfb)
	if _aebc.ForAttr != ST_ConstraintRelationshipUnset {
		_eaeac, _ggdc := _aebc.ForAttr.MarshalXMLAttr(_a.Name{Local: "\u0066\u006f\u0072"})
		if _ggdc != nil {
			return _ggdc
		}
		start.Attr = append(start.Attr, _eaeac)
	}
	if _aebc.ForNameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0066o\u0072\u004e\u0061\u006d\u0065"}, Value: _e.Sprintf("\u0025\u0076", *_aebc.ForNameAttr)})
	}
	if _aebc.PtTypeAttr != ST_ElementTypeUnset {
		_gffc, _bdfg := _aebc.PtTypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"})
		if _bdfg != nil {
			return _bdfg
		}
		start.Attr = append(start.Attr, _gffc)
	}
	e.EncodeToken(start)
	if _aebc.ExtLst != nil {
		_dadb := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aebc.ExtLst, _dadb)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_Cxn and its children, prefixing error messages with path
func (_afaa *CT_Cxn) ValidateWithPath(path string) error {
	if _cbga := _afaa.ModelIdAttr.ValidateWithPath(path + "\u002f\u004d\u006fd\u0065\u006c\u0049\u0064\u0041\u0074\u0074\u0072"); _cbga != nil {
		return _cbga
	}
	if _gbg := _afaa.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _gbg != nil {
		return _gbg
	}
	if _acg := _afaa.SrcIdAttr.ValidateWithPath(path + "\u002f\u0053\u0072\u0063\u0049\u0064\u0041\u0074\u0074\u0072"); _acg != nil {
		return _acg
	}
	if _gfbfa := _afaa.DestIdAttr.ValidateWithPath(path + "/\u0044\u0065\u0073\u0074\u0049\u0064\u0041\u0074\u0074\u0072"); _gfbfa != nil {
		return _gfbfa
	}
	if _afaa.ParTransIdAttr != nil {
		if _gadd := _afaa.ParTransIdAttr.ValidateWithPath(path + "\u002fP\u0061r\u0054\u0072\u0061\u006e\u0073\u0049\u0064\u0041\u0074\u0074\u0072"); _gadd != nil {
			return _gadd
		}
	}
	if _afaa.SibTransIdAttr != nil {
		if _gbed := _afaa.SibTransIdAttr.ValidateWithPath(path + "\u002fS\u0069b\u0054\u0072\u0061\u006e\u0073\u0049\u0064\u0041\u0074\u0074\u0072"); _gbed != nil {
			return _gbed
		}
	}
	if _afaa.ExtLst != nil {
		if _bggg := _afaa.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bggg != nil {
			return _bggg
		}
	}
	return nil
}
func (_fccd *CT_SDName) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _fccd.LangAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _e.Sprintf("\u0025\u0076", *_fccd.LangAttr)})
	}
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _e.Sprintf("\u0025\u0076", _fccd.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type CT_PtList struct {

	// Point
	Pt []*CT_Pt
}

// Validate validates the CT_CTCategory and its children
func (_edfc *CT_CTCategory) Validate() error {
	return _edfc.ValidateWithPath("\u0043\u0054\u005f\u0043\u0054\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079")
}
func (_fcffee ST_VerticalAlignment) ValidateWithPath(path string) error {
	switch _fcffee {
	case 0, 1, 2, 3, 4:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fcffee))
	}
	return nil
}

type CT_DiagramDefinitionHeader struct {

	// Unique Identifier
	UniqueIdAttr string

	// Minimum Version
	MinVerAttr *string

	// Default Style
	DefStyleAttr *string

	// Resource Identifier
	ResIdAttr *int32

	// Title
	Title []*CT_Name

	// Description
	Desc []*CT_Description

	// Category List
	CatLst *CT_Categories
	ExtLst *_b.CT_OfficeArtExtensionList
}

func (_adae *ST_Direction) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cfgaa, _decae := d.Token()
	if _decae != nil {
		return _decae
	}
	if _cagc, _ffdf := _cfgaa.(_a.EndElement); _ffdf && _cagc.Name == start.Name {
		*_adae = 1
		return nil
	}
	if _gcaeg, _afggf := _cfgaa.(_a.CharData); !_afggf {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cfgaa)
	} else {
		switch string(_gcaeg) {
		case "":
			*_adae = 0
		case "\u006e\u006f\u0072\u006d":
			*_adae = 1
		case "\u0072\u0065\u0076":
			*_adae = 2
		}
	}
	_cfgaa, _decae = d.Token()
	if _decae != nil {
		return _decae
	}
	if _bcfcd, _edff := _cfgaa.(_a.EndElement); _edff && _bcfcd.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cfgaa)
}

// ValidateWithPath validates the CT_Algorithm and its children, prefixing error messages with path
func (_ead *CT_Algorithm) ValidateWithPath(path string) error {
	if _ead.TypeAttr == ST_AlgorithmTypeUnset {
		return _e.Errorf("\u0025\u0073\u002f\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072\u0020\u0069\u0073\u0020a\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _bcd := _ead.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _bcd != nil {
		return _bcd
	}
	for _fbgb, _gge := range _ead.Param {
		if _cgc := _gge.ValidateWithPath(_e.Sprintf("\u0025\u0073\u002fP\u0061\u0072\u0061\u006d\u005b\u0025\u0064\u005d", path, _fbgb)); _cgc != nil {
			return _cgc
		}
	}
	if _ead.ExtLst != nil {
		if _edc := _ead.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _edc != nil {
			return _edc
		}
	}
	return nil
}
func (_bfggd ST_FlowDirection) String() string {
	switch _bfggd {
	case 0:
		return ""
	case 1:
		return "\u0072\u006f\u0077"
	case 2:
		return "\u0063\u006f\u006c"
	}
	return ""
}
func (_adgfd *ST_FunctionArgument) ValidateWithPath(path string) error {
	_bgcf := []string{}
	if _adgfd.ST_VariableType != ST_VariableTypeUnset {
		_bgcf = append(_bgcf, "\u0053T\u005fV\u0061\u0072\u0069\u0061\u0062\u006c\u0065\u0054\u0079\u0070\u0065")
	}
	if len(_bgcf) > 1 {
		return _e.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _bgcf)
	}
	return nil
}

type AG_ConstraintAttributes struct {
	TypeAttr    ST_ConstraintType
	ForAttr     ST_ConstraintRelationship
	ForNameAttr *string
	PtTypeAttr  ST_ElementType
}

func (_gfbaf *ST_TextAnchorHorizontal) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_aefe, _fgcc := d.Token()
	if _fgcc != nil {
		return _fgcc
	}
	if _fgeb, _feff := _aefe.(_a.EndElement); _feff && _fgeb.Name == start.Name {
		*_gfbaf = 1
		return nil
	}
	if _gece, _ddafe := _aefe.(_a.CharData); !_ddafe {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _aefe)
	} else {
		switch string(_gece) {
		case "":
			*_gfbaf = 0
		case "\u006e\u006f\u006e\u0065":
			*_gfbaf = 1
		case "\u0063\u0074\u0072":
			*_gfbaf = 2
		}
	}
	_aefe, _fgcc = d.Token()
	if _fgcc != nil {
		return _fgcc
	}
	if _beaca, _eacg := _aefe.(_a.EndElement); _eacg && _beaca.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _aefe)
}
func NewLayoutDefHdr() *LayoutDefHdr {
	_dbcfb := &LayoutDefHdr{}
	_dbcfb.CT_DiagramDefinitionHeader = *NewCT_DiagramDefinitionHeader()
	return _dbcfb
}
func (_bedbfc ST_ChildDirection) Validate() error { return _bedbfc.ValidateWithPath("") }
func (_cdd *CT_Description) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _ceed := range start.Attr {
		if _ceed.Name.Local == "\u006c\u0061\u006e\u0067" {
			_bcgg := _ceed.Value
			_cdd.LangAttr = &_bcgg
			continue
		}
		if _ceed.Name.Local == "\u0076\u0061\u006c" {
			_edfg := _ceed.Value
			_cdd.ValAttr = _edfg
			continue
		}
	}
	for {
		_cbea, _bdca := d.Token()
		if _bdca != nil {
			return _e.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fD\u0065\u0073\u0063\u0072\u0069\u0070\u0074\u0069\u006f\u006e:\u0020\u0025\u0073", _bdca)
		}
		if _efe, _cfed := _cbea.(_a.EndElement); _cfed && _efe.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dcbdc ST_ParameterId) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dcbdc.String(), start)
}

type ST_NodeVerticalAlignment byte

func (_eaea *CT_CTName) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _eaea.LangAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _e.Sprintf("\u0025\u0076", *_eaea.LangAttr)})
	}
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _e.Sprintf("\u0025\u0076", _eaea.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_bbce *CT_CTCategory) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _dfga := range start.Attr {
		if _dfga.Name.Local == "\u0074\u0079\u0070\u0065" {
			_ecd := _dfga.Value
			_bbce.TypeAttr = _ecd
			continue
		}
		if _dfga.Name.Local == "\u0070\u0072\u0069" {
			_adgb, _cga := _g.ParseUint(_dfga.Value, 10, 32)
			if _cga != nil {
				return _cga
			}
			_bbce.PriAttr = uint32(_adgb)
			continue
		}
	}
	for {
		_bebe, _bbgba := d.Token()
		if _bbgba != nil {
			return _e.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0043T\u0043a\u0074e\u0067\u006f\u0072\u0079\u003a\u0020\u0025s", _bbgba)
		}
		if _bcc, _gcfd := _bebe.(_a.EndElement); _gcfd && _bcc.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_TextProps and its children, prefixing error messages with path
func (_afbf *CT_TextProps) ValidateWithPath(path string) error {
	if _cagfa := _afbf.Text3DChoice.ValidateWithPath(path + "\u002f\u0054\u0065\u0078\u0074\u0033\u0044\u0043\u0068\u006f\u0069\u0063\u0065"); _cagfa != nil {
		return _cagfa
	}
	return nil
}

// Validate validates the CT_SDCategories and its children
func (_fdagg *CT_SDCategories) Validate() error {
	return _fdagg.ValidateWithPath("\u0043T\u005fS\u0044\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073")
}

// Validate validates the CT_ForEachChoice and its children
func (_bcfc *CT_ForEachChoice) Validate() error {
	return _bcfc.ValidateWithPath("\u0043\u0054_\u0046\u006f\u0072E\u0061\u0063\u0068\u0043\u0068\u006f\u0069\u0063\u0065")
}
func (_gcdge *ColorsDefHdrLst) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063o\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074"
	return _gcdge.CT_ColorTransformHeaderLst.MarshalXML(e, start)
}
func (_fffge ST_DiagramHorizontalAlignment) ValidateWithPath(path string) error {
	switch _fffge {
	case 0, 1, 2, 3, 4:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fffge))
	}
	return nil
}
func NewCT_Choose() *CT_Choose { _adce := &CT_Choose{}; return _adce }
func (_fbebe *ST_PtType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_fbebe = 0
	case "\u006e\u006f\u0064\u0065":
		*_fbebe = 1
	case "\u0061\u0073\u0073\u0074":
		*_fbebe = 2
	case "\u0064\u006f\u0063":
		*_fbebe = 3
	case "\u0070\u0072\u0065\u0073":
		*_fbebe = 4
	case "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073":
		*_fbebe = 5
	case "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073":
		*_fbebe = 6
	}
	return nil
}
func (_edbag ST_ConnectorRouting) String() string {
	switch _edbag {
	case 0:
		return ""
	case 1:
		return "\u0073\u0074\u0072\u0061"
	case 2:
		return "\u0062\u0065\u006e\u0064"
	case 3:
		return "\u0063\u0075\u0072v\u0065"
	case 4:
		return "\u006co\u006e\u0067\u0043\u0075\u0072\u0076e"
	}
	return ""
}
func (_acfce ST_BendPoint) Validate() error { return _acfce.ValidateWithPath("") }
func (_acgc *ST_ElementType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cafd, _ggdda := d.Token()
	if _ggdda != nil {
		return _ggdda
	}
	if _adgg, _ebdc := _cafd.(_a.EndElement); _ebdc && _adgg.Name == start.Name {
		*_acgc = 1
		return nil
	}
	if _eeeef, _egce := _cafd.(_a.CharData); !_egce {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cafd)
	} else {
		switch string(_eeeef) {
		case "":
			*_acgc = 0
		case "\u0061\u006c\u006c":
			*_acgc = 1
		case "\u0064\u006f\u0063":
			*_acgc = 2
		case "\u006e\u006f\u0064\u0065":
			*_acgc = 3
		case "\u006e\u006f\u0072\u006d":
			*_acgc = 4
		case "\u006eo\u006e\u004e\u006f\u0072\u006d":
			*_acgc = 5
		case "\u0061\u0073\u0073\u0074":
			*_acgc = 6
		case "\u006eo\u006e\u0041\u0073\u0073\u0074":
			*_acgc = 7
		case "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073":
			*_acgc = 8
		case "\u0070\u0072\u0065\u0073":
			*_acgc = 9
		case "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073":
			*_acgc = 10
		}
	}
	_cafd, _ggdda = d.Token()
	if _ggdda != nil {
		return _ggdda
	}
	if _gbgf, _ffcba := _cafd.(_a.EndElement); _ffcba && _gbgf.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cafd)
}
func (_gfgac ST_NodeHorizontalAlignment) String() string {
	switch _gfgac {
	case 0:
		return ""
	case 1:
		return "\u006c"
	case 2:
		return "\u0063\u0074\u0072"
	case 3:
		return "\u0072"
	}
	return ""
}
func (_cbac *CT_StyleDefinitionHeader) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _e.Sprintf("\u0025\u0076", _cbac.UniqueIdAttr)})
	if _cbac.MinVerAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _e.Sprintf("\u0025\u0076", *_cbac.MinVerAttr)})
	}
	if _cbac.ResIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u0065\u0073I\u0064"}, Value: _e.Sprintf("\u0025\u0076", *_cbac.ResIdAttr)})
	}
	e.EncodeToken(start)
	_caed := _a.StartElement{Name: _a.Name{Local: "\u0074\u0069\u0074l\u0065"}}
	for _, _edea := range _cbac.Title {
		e.EncodeElement(_edea, _caed)
	}
	_aebb := _a.StartElement{Name: _a.Name{Local: "\u0064\u0065\u0073\u0063"}}
	for _, _adeae := range _cbac.Desc {
		e.EncodeElement(_adeae, _aebb)
	}
	if _cbac.CatLst != nil {
		_dadcc := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cbac.CatLst, _dadcc)
	}
	if _cbac.ExtLst != nil {
		_ddde := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cbac.ExtLst, _ddde)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_AnimOne and its children
func (_abd *CT_AnimOne) Validate() error {
	return _abd.ValidateWithPath("\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004f\u006e\u0065")
}

type LayoutDefHdrLst struct{ CT_DiagramDefinitionHeaderLst }

func (_afga *ST_AxisType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_afga = 0
	case "\u0073\u0065\u006c\u0066":
		*_afga = 1
	case "\u0063\u0068":
		*_afga = 2
	case "\u0064\u0065\u0073":
		*_afga = 3
	case "\u0064e\u0073\u004f\u0072\u0053\u0065\u006cf":
		*_afga = 4
	case "\u0070\u0061\u0072":
		*_afga = 5
	case "\u0061\u006e\u0063s\u0074":
		*_afga = 6
	case "a\u006e\u0063\u0073\u0074\u004f\u0072\u0053\u0065\u006c\u0066":
		*_afga = 7
	case "\u0066o\u006c\u006c\u006f\u0077\u0053\u0069b":
		*_afga = 8
	case "\u0070r\u0065\u0063\u0065\u0064\u0053\u0069b":
		*_afga = 9
	case "\u0066\u006f\u006c\u006c\u006f\u0077":
		*_afga = 10
	case "\u0070\u0072\u0065\u0063\u0065\u0064":
		*_afga = 11
	case "\u0072\u006f\u006f\u0074":
		*_afga = 12
	case "\u006e\u006f\u006e\u0065":
		*_afga = 13
	}
	return nil
}
func (_fgae ST_Breakpoint) ValidateWithPath(path string) error {
	switch _fgae {
	case 0, 1, 2, 3:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fgae))
	}
	return nil
}

type CT_ForEachChoice struct {

	// Algorithm
	Alg *CT_Algorithm

	// Shape
	Shape *CT_Shape

	// Presentation Of
	PresOf *CT_PresentationOf

	// Constraint List
	ConstrLst *CT_Constraints

	// Rule List
	RuleLst *CT_Rules

	// For Each
	ForEach *CT_ForEach

	// Layout Node
	LayoutNode *CT_LayoutNode

	// Choose Element
	Choose *CT_Choose
	ExtLst *_b.CT_OfficeArtExtensionList
}

func (_bafe *CT_ForEachChoice) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_efcc := start
	switch start.Name {
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u006c\u0067"}:
		_bafe.Alg = NewCT_Algorithm()
		if _cdcg := d.DecodeElement(_bafe.Alg, &_efcc); _cdcg != nil {
			return _cdcg
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0068\u0061p\u0065"}:
		_bafe.Shape = NewCT_Shape()
		if _ebaac := d.DecodeElement(_bafe.Shape, &_efcc); _ebaac != nil {
			return _ebaac
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}:
		_bafe.PresOf = NewCT_PresentationOf()
		if _aabb := d.DecodeElement(_bafe.PresOf, &_efcc); _aabb != nil {
			return _aabb
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}:
		_bafe.ConstrLst = NewCT_Constraints()
		if _gcgf := d.DecodeElement(_bafe.ConstrLst, &_efcc); _gcgf != nil {
			return _gcgf
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}:
		_bafe.RuleLst = NewCT_Rules()
		if _aeag := d.DecodeElement(_bafe.RuleLst, &_efcc); _aeag != nil {
			return _aeag
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}:
		_bafe.ForEach = NewCT_ForEach()
		if _fcbf := d.DecodeElement(_bafe.ForEach, &_efcc); _fcbf != nil {
			return _fcbf
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
		_bafe.LayoutNode = NewCT_LayoutNode()
		if _gefe := d.DecodeElement(_bafe.LayoutNode, &_efcc); _gefe != nil {
			return _gefe
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}:
		_bafe.Choose = NewCT_Choose()
		if _gfge := d.DecodeElement(_bafe.Choose, &_efcc); _gfge != nil {
			return _gfge
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
		_bafe.ExtLst = _b.NewCT_OfficeArtExtensionList()
		if _caga := d.DecodeElement(_bafe.ExtLst, &_efcc); _caga != nil {
			return _caga
		}
	default:
		_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0046\u006f\u0072\u0045\u0061\u0063\u0068\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025v", _efcc.Name)
		if _ebcb := d.Skip(); _ebcb != nil {
			return _ebcb
		}
	}
	return nil
}

type CT_AnimOne struct {

	// One By One Animation Value
	ValAttr ST_AnimOneStr
}

func (_feba *ST_ChildOrderType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dbed, _bcdcf := d.Token()
	if _bcdcf != nil {
		return _bcdcf
	}
	if _aagfe, _bbbf := _dbed.(_a.EndElement); _bbbf && _aagfe.Name == start.Name {
		*_feba = 1
		return nil
	}
	if _ddcd, _fgec := _dbed.(_a.CharData); !_fgec {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dbed)
	} else {
		switch string(_ddcd) {
		case "":
			*_feba = 0
		case "\u0062":
			*_feba = 1
		case "\u0074":
			*_feba = 2
		}
	}
	_dbed, _bcdcf = d.Token()
	if _bcdcf != nil {
		return _bcdcf
	}
	if _efbdf, _ccdge := _dbed.(_a.EndElement); _ccdge && _efbdf.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dbed)
}
func NewCT_BulletEnabled() *CT_BulletEnabled { _eee := &CT_BulletEnabled{}; return _eee }
func (_acbag ST_ResizeHandlesStr) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_acbag.String(), start)
}
func (_adbc ST_AxisType) String() string {
	switch _adbc {
	case 0:
		return ""
	case 1:
		return "\u0073\u0065\u006c\u0066"
	case 2:
		return "\u0063\u0068"
	case 3:
		return "\u0064\u0065\u0073"
	case 4:
		return "\u0064e\u0073\u004f\u0072\u0053\u0065\u006cf"
	case 5:
		return "\u0070\u0061\u0072"
	case 6:
		return "\u0061\u006e\u0063s\u0074"
	case 7:
		return "a\u006e\u0063\u0073\u0074\u004f\u0072\u0053\u0065\u006c\u0066"
	case 8:
		return "\u0066o\u006c\u006c\u006f\u0077\u0053\u0069b"
	case 9:
		return "\u0070r\u0065\u0063\u0065\u0064\u0053\u0069b"
	case 10:
		return "\u0066\u006f\u006c\u006c\u006f\u0077"
	case 11:
		return "\u0070\u0072\u0065\u0063\u0065\u0064"
	case 12:
		return "\u0072\u006f\u006f\u0074"
	case 13:
		return "\u006e\u006f\u006e\u0065"
	}
	return ""
}

type DataModel struct{ CT_DataModel }

func (_adeee ST_ChildOrderType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_agdb := _a.Attr{}
	_agdb.Name = name
	switch _adeee {
	case ST_ChildOrderTypeUnset:
		_agdb.Value = ""
	case ST_ChildOrderTypeB:
		_agdb.Value = "\u0062"
	case ST_ChildOrderTypeT:
		_agdb.Value = "\u0074"
	}
	return _agdb, nil
}
func (_ebfed ST_TextBlockDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_ebfed.String(), start)
}

type CT_OtherwiseChoice struct {

	// Algorithm
	Alg *CT_Algorithm

	// Shape
	Shape *CT_Shape

	// Presentation Of
	PresOf *CT_PresentationOf

	// Constraint List
	ConstrLst *CT_Constraints

	// Rule List
	RuleLst *CT_Rules

	// For Each
	ForEach *CT_ForEach

	// Layout Node
	LayoutNode *CT_LayoutNode

	// Choose Element
	Choose *CT_Choose

	// Extension List
	ExtLst *_b.CT_OfficeArtExtensionList
}

func (_dcf *CT_Choose) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _ega := range start.Attr {
		if _ega.Name.Local == "\u006e\u0061\u006d\u0065" {
			_ccgg := _ega.Value
			_dcf.NameAttr = &_ccgg
			continue
		}
	}
_fgb:
	for {
		_gfbf, _gbe := d.Token()
		if _gbe != nil {
			return _gbe
		}
		switch _dfd := _gfbf.(type) {
		case _a.StartElement:
			switch _dfd.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0069\u0066"}:
				_adf := NewCT_When()
				if _acc := d.DecodeElement(_adf, &_dfd); _acc != nil {
					return _acc
				}
				_dcf.If = append(_dcf.If, _adf)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u006c\u0073\u0065"}:
				_dcf.Else = NewCT_Otherwise()
				if _aef := d.DecodeElement(_dcf.Else, &_dfd); _aef != nil {
					return _aef
				}
			default:
				_ag.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0043\u0068\u006fo\u0073\u0065 \u0025\u0076", _dfd.Name)
				if _gfd := d.Skip(); _gfd != nil {
					return _gfd
				}
			}
		case _a.EndElement:
			break _fgb
		case _a.CharData:
		}
	}
	return nil
}
func (_ddafa *ST_ClrAppMethod) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_ddafa = 0
	case "\u0073\u0070\u0061\u006e":
		*_ddafa = 1
	case "\u0063\u0079\u0063l\u0065":
		*_ddafa = 2
	case "\u0072\u0065\u0070\u0065\u0061\u0074":
		*_ddafa = 3
	}
	return nil
}
func (_geaa *CT_DiagramDefinitionHeader) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _e.Sprintf("\u0025\u0076", _geaa.UniqueIdAttr)})
	if _geaa.MinVerAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _e.Sprintf("\u0025\u0076", *_geaa.MinVerAttr)})
	}
	if _geaa.DefStyleAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065"}, Value: _e.Sprintf("\u0025\u0076", *_geaa.DefStyleAttr)})
	}
	if _geaa.ResIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u0065\u0073I\u0064"}, Value: _e.Sprintf("\u0025\u0076", *_geaa.ResIdAttr)})
	}
	e.EncodeToken(start)
	_cgcc := _a.StartElement{Name: _a.Name{Local: "\u0074\u0069\u0074l\u0065"}}
	for _, _bfec := range _geaa.Title {
		e.EncodeElement(_bfec, _cgcc)
	}
	_cdcd := _a.StartElement{Name: _a.Name{Local: "\u0064\u0065\u0073\u0063"}}
	for _, _bda := range _geaa.Desc {
		e.EncodeElement(_bda, _cdcd)
	}
	if _geaa.CatLst != nil {
		_fge := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_geaa.CatLst, _fge)
	}
	if _geaa.ExtLst != nil {
		_cabc := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_geaa.ExtLst, _cabc)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_fabca ST_VariableType) Validate() error { return _fabca.ValidateWithPath("") }
func (_dabe *CT_Rules) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _dabe.Rule != nil {
		_bcdd := _a.StartElement{Name: _a.Name{Local: "\u0072\u0075\u006c\u0065"}}
		for _, _fdagb := range _dabe.Rule {
			e.EncodeElement(_fdagb, _bcdd)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_bbcg *ST_ParameterId) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dacgf, _cfaff := d.Token()
	if _cfaff != nil {
		return _cfaff
	}
	if _bcde, _bdbg := _dacgf.(_a.EndElement); _bdbg && _bcde.Name == start.Name {
		*_bbcg = 1
		return nil
	}
	if _gbcg, _fefde := _dacgf.(_a.CharData); !_fefde {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dacgf)
	} else {
		switch string(_gbcg) {
		case "":
			*_bbcg = 0
		case "\u0068o\u0072\u007a\u0041\u006c\u0069\u0067n":
			*_bbcg = 1
		case "\u0076e\u0072\u0074\u0041\u006c\u0069\u0067n":
			*_bbcg = 2
		case "\u0063\u0068\u0044i\u0072":
			*_bbcg = 3
		case "\u0063h\u0041\u006c\u0069\u0067\u006e":
			*_bbcg = 4
		case "\u0073\u0065\u0063\u0043\u0068\u0041\u006c\u0069\u0067\u006e":
			*_bbcg = 5
		case "\u006c\u0069\u006e\u0044\u0069\u0072":
			*_bbcg = 6
		case "\u0073e\u0063\u004c\u0069\u006e\u0044\u0069r":
			*_bbcg = 7
		case "\u0073\u0074\u0045\u006c\u0065\u006d":
			*_bbcg = 8
		case "\u0062\u0065\u006e\u0064\u0050\u0074":
			*_bbcg = 9
		case "\u0063\u006f\u006e\u006e\u0052\u006f\u0075\u0074":
			*_bbcg = 10
		case "\u0062\u0065\u0067\u0053\u0074\u0079":
			*_bbcg = 11
		case "\u0065\u006e\u0064\u0053\u0074\u0079":
			*_bbcg = 12
		case "\u0064\u0069\u006d":
			*_bbcg = 13
		case "\u0072o\u0074\u0050\u0061\u0074\u0068":
			*_bbcg = 14
		case "\u0063t\u0072\u0053\u0068\u0070\u004d\u0061p":
			*_bbcg = 15
		case "\u006e\u006f\u0064\u0065\u0048\u006f\u0072\u007a\u0041\u006c\u0069\u0067\u006e":
			*_bbcg = 16
		case "\u006e\u006f\u0064\u0065\u0056\u0065\u0072\u0074\u0041\u006c\u0069\u0067\u006e":
			*_bbcg = 17
		case "\u0066\u0061\u006c\u006c\u0062\u0061\u0063\u006b":
			*_bbcg = 18
		case "\u0074\u0078\u0044i\u0072":
			*_bbcg = 19
		case "p\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0050\u006f\u0073":
			*_bbcg = 20
		case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054\u0078\u004d\u0061\u0072":
			*_bbcg = 21
		case "\u0074x\u0042\u006c\u0044\u0069\u0072":
			*_bbcg = 22
		case "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0048\u006f\u0072\u007a":
			*_bbcg = 23
		case "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0056\u0065\u0072\u0074":
			*_bbcg = 24
		case "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0048o\u0072\u007a\u0043\u0068":
			*_bbcg = 25
		case "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0056e\u0072\u0074\u0043\u0068":
			*_bbcg = 26
		case "\u0070\u0061\u0072\u0054\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e":
			*_bbcg = 27
		case "\u0070\u0061\u0072\u0054\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e":
			*_bbcg = 28
		case "\u0073h\u0070T\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e\u0043\u0068":
			*_bbcg = 29
		case "\u0073h\u0070T\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e\u0043\u0068":
			*_bbcg = 30
		case "\u0061u\u0074\u006f\u0054\u0078\u0052\u006ft":
			*_bbcg = 31
		case "\u0067\u0072\u0044i\u0072":
			*_bbcg = 32
		case "\u0066l\u006f\u0077\u0044\u0069\u0072":
			*_bbcg = 33
		case "\u0063o\u006e\u0074\u0044\u0069\u0072":
			*_bbcg = 34
		case "\u0062\u006b\u0070\u0074":
			*_bbcg = 35
		case "\u006f\u0066\u0066":
			*_bbcg = 36
		case "\u0068i\u0065\u0072\u0041\u006c\u0069\u0067n":
			*_bbcg = 37
		case "\u0062\u006b\u0050t\u0046\u0069\u0078\u0065\u0064\u0056\u0061\u006c":
			*_bbcg = 38
		case "s\u0074\u0042\u0075\u006c\u006c\u0065\u0074\u004c\u0076\u006c":
			*_bbcg = 39
		case "\u0073\u0074\u0041n\u0067":
			*_bbcg = 40
		case "\u0073p\u0061\u006e\u0041\u006e\u0067":
			*_bbcg = 41
		case "\u0061\u0072":
			*_bbcg = 42
		case "\u006cn\u0053\u0070\u0050\u0061\u0072":
			*_bbcg = 43
		case "\u006c\u006e\u0053\u0070\u0041\u0066\u0050\u0061\u0072\u0050":
			*_bbcg = 44
		case "\u006c\u006e\u0053\u0070\u0043\u0068":
			*_bbcg = 45
		case "\u006cn\u0053\u0070\u0041\u0066\u0043\u0068P":
			*_bbcg = 46
		case "r\u0074\u0053\u0068\u006f\u0072\u0074\u0044\u0069\u0073\u0074":
			*_bbcg = 47
		case "\u0061l\u0069\u0067\u006e\u0054\u0078":
			*_bbcg = 48
		case "p\u0079\u0072\u0061\u004c\u0076\u006c\u004e\u006f\u0064\u0065":
			*_bbcg = 49
		case "\u0070\u0079r\u0061\u0041\u0063c\u0074\u0042\u006b\u0067\u0064\u004e\u006f\u0064\u0065":
			*_bbcg = 50
		case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054x\u004e\u006f\u0064\u0065":
			*_bbcg = 51
		case "\u0073r\u0063\u004e\u006f\u0064\u0065":
			*_bbcg = 52
		case "\u0064s\u0074\u004e\u006f\u0064\u0065":
			*_bbcg = 53
		case "\u0062\u0065\u0067\u0050\u0074\u0073":
			*_bbcg = 54
		case "\u0065\u006e\u0064\u0050\u0074\u0073":
			*_bbcg = 55
		}
	}
	_dacgf, _cfaff = d.Token()
	if _cfaff != nil {
		return _cfaff
	}
	if _cbfa, _ccef := _dacgf.(_a.EndElement); _ccef && _cbfa.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dacgf)
}
func (_bbceg *CT_Categories) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _bbceg.Cat != nil {
		_fbcb := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074"}}
		for _, _cfa := range _bbceg.Cat {
			e.EncodeElement(_cfa, _fbcb)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_eegff ST_Offset) Validate() error           { return _eegff.ValidateWithPath("") }
func (_cfcb ST_FallbackDimension) Validate() error { return _cfcb.ValidateWithPath("") }

// Validate validates the CT_Description and its children
func (_aedg *CT_Description) Validate() error {
	return _aedg.ValidateWithPath("\u0043\u0054\u005f\u0044\u0065\u0073\u0063\u0072\u0069p\u0074\u0069\u006f\u006e")
}

type CT_StyleDefinitionHeaderLst struct {

	// Style Definition Header
	StyleDefHdr []*CT_StyleDefinitionHeader
}

func (_cfdcc ST_GrowDirection) ValidateWithPath(path string) error {
	switch _cfdcc {
	case 0, 1, 2, 3, 4:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cfdcc))
	}
	return nil
}
func (_bdbd *ST_ParameterId) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bdbd = 0
	case "\u0068o\u0072\u007a\u0041\u006c\u0069\u0067n":
		*_bdbd = 1
	case "\u0076e\u0072\u0074\u0041\u006c\u0069\u0067n":
		*_bdbd = 2
	case "\u0063\u0068\u0044i\u0072":
		*_bdbd = 3
	case "\u0063h\u0041\u006c\u0069\u0067\u006e":
		*_bdbd = 4
	case "\u0073\u0065\u0063\u0043\u0068\u0041\u006c\u0069\u0067\u006e":
		*_bdbd = 5
	case "\u006c\u0069\u006e\u0044\u0069\u0072":
		*_bdbd = 6
	case "\u0073e\u0063\u004c\u0069\u006e\u0044\u0069r":
		*_bdbd = 7
	case "\u0073\u0074\u0045\u006c\u0065\u006d":
		*_bdbd = 8
	case "\u0062\u0065\u006e\u0064\u0050\u0074":
		*_bdbd = 9
	case "\u0063\u006f\u006e\u006e\u0052\u006f\u0075\u0074":
		*_bdbd = 10
	case "\u0062\u0065\u0067\u0053\u0074\u0079":
		*_bdbd = 11
	case "\u0065\u006e\u0064\u0053\u0074\u0079":
		*_bdbd = 12
	case "\u0064\u0069\u006d":
		*_bdbd = 13
	case "\u0072o\u0074\u0050\u0061\u0074\u0068":
		*_bdbd = 14
	case "\u0063t\u0072\u0053\u0068\u0070\u004d\u0061p":
		*_bdbd = 15
	case "\u006e\u006f\u0064\u0065\u0048\u006f\u0072\u007a\u0041\u006c\u0069\u0067\u006e":
		*_bdbd = 16
	case "\u006e\u006f\u0064\u0065\u0056\u0065\u0072\u0074\u0041\u006c\u0069\u0067\u006e":
		*_bdbd = 17
	case "\u0066\u0061\u006c\u006c\u0062\u0061\u0063\u006b":
		*_bdbd = 18
	case "\u0074\u0078\u0044i\u0072":
		*_bdbd = 19
	case "p\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0050\u006f\u0073":
		*_bdbd = 20
	case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054\u0078\u004d\u0061\u0072":
		*_bdbd = 21
	case "\u0074x\u0042\u006c\u0044\u0069\u0072":
		*_bdbd = 22
	case "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0048\u006f\u0072\u007a":
		*_bdbd = 23
	case "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0056\u0065\u0072\u0074":
		*_bdbd = 24
	case "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0048o\u0072\u007a\u0043\u0068":
		*_bdbd = 25
	case "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0056e\u0072\u0074\u0043\u0068":
		*_bdbd = 26
	case "\u0070\u0061\u0072\u0054\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e":
		*_bdbd = 27
	case "\u0070\u0061\u0072\u0054\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e":
		*_bdbd = 28
	case "\u0073h\u0070T\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e\u0043\u0068":
		*_bdbd = 29
	case "\u0073h\u0070T\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e\u0043\u0068":
		*_bdbd = 30
	case "\u0061u\u0074\u006f\u0054\u0078\u0052\u006ft":
		*_bdbd = 31
	case "\u0067\u0072\u0044i\u0072":
		*_bdbd = 32
	case "\u0066l\u006f\u0077\u0044\u0069\u0072":
		*_bdbd = 33
	case "\u0063o\u006e\u0074\u0044\u0069\u0072":
		*_bdbd = 34
	case "\u0062\u006b\u0070\u0074":
		*_bdbd = 35
	case "\u006f\u0066\u0066":
		*_bdbd = 36
	case "\u0068i\u0065\u0072\u0041\u006c\u0069\u0067n":
		*_bdbd = 37
	case "\u0062\u006b\u0050t\u0046\u0069\u0078\u0065\u0064\u0056\u0061\u006c":
		*_bdbd = 38
	case "s\u0074\u0042\u0075\u006c\u006c\u0065\u0074\u004c\u0076\u006c":
		*_bdbd = 39
	case "\u0073\u0074\u0041n\u0067":
		*_bdbd = 40
	case "\u0073p\u0061\u006e\u0041\u006e\u0067":
		*_bdbd = 41
	case "\u0061\u0072":
		*_bdbd = 42
	case "\u006cn\u0053\u0070\u0050\u0061\u0072":
		*_bdbd = 43
	case "\u006c\u006e\u0053\u0070\u0041\u0066\u0050\u0061\u0072\u0050":
		*_bdbd = 44
	case "\u006c\u006e\u0053\u0070\u0043\u0068":
		*_bdbd = 45
	case "\u006cn\u0053\u0070\u0041\u0066\u0043\u0068P":
		*_bdbd = 46
	case "r\u0074\u0053\u0068\u006f\u0072\u0074\u0044\u0069\u0073\u0074":
		*_bdbd = 47
	case "\u0061l\u0069\u0067\u006e\u0054\u0078":
		*_bdbd = 48
	case "p\u0079\u0072\u0061\u004c\u0076\u006c\u004e\u006f\u0064\u0065":
		*_bdbd = 49
	case "\u0070\u0079r\u0061\u0041\u0063c\u0074\u0042\u006b\u0067\u0064\u004e\u006f\u0064\u0065":
		*_bdbd = 50
	case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054x\u004e\u006f\u0064\u0065":
		*_bdbd = 51
	case "\u0073r\u0063\u004e\u006f\u0064\u0065":
		*_bdbd = 52
	case "\u0064s\u0074\u004e\u006f\u0064\u0065":
		*_bdbd = 53
	case "\u0062\u0065\u0067\u0050\u0074\u0073":
		*_bdbd = 54
	case "\u0065\u006e\u0064\u0050\u0074\u0073":
		*_bdbd = 55
	}
	return nil
}
func (_agd *CT_PresentationOf) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _cefe := range start.Attr {
		if _cefe.Name.Local == "\u0061\u0078\u0069\u0073" {
			_eade, _cbad := ParseSliceST_AxisTypes(_cefe.Value)
			if _cbad != nil {
				return _cbad
			}
			_agd.AxisAttr = &_eade
			continue
		}
		if _cefe.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_cdbf, _bgab := ParseSliceST_ElementTypes(_cefe.Value)
			if _bgab != nil {
				return _bgab
			}
			_agd.PtTypeAttr = &_cdbf
			continue
		}
		if _cefe.Name.Local == "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073" {
			_eadf, _eecc := ParseSliceST_Booleans(_cefe.Value)
			if _eecc != nil {
				return _eecc
			}
			_agd.HideLastTransAttr = &_eadf
			continue
		}
		if _cefe.Name.Local == "\u0073\u0074" {
			_bfdf, _cdae := ParseSliceST_Ints(_cefe.Value)
			if _cdae != nil {
				return _cdae
			}
			_agd.StAttr = &_bfdf
			continue
		}
		if _cefe.Name.Local == "\u0063\u006e\u0074" {
			_gbfa, _bebed := ParseSliceST_UnsignedInts(_cefe.Value)
			if _bebed != nil {
				return _bebed
			}
			_agd.CntAttr = &_gbfa
			continue
		}
		if _cefe.Name.Local == "\u0073\u0074\u0065\u0070" {
			_ccbbg, _fafc := ParseSliceST_Ints(_cefe.Value)
			if _fafc != nil {
				return _fafc
			}
			_agd.StepAttr = &_ccbbg
			continue
		}
	}
_ecfcf:
	for {
		_ebcd, _cacf := d.Token()
		if _cacf != nil {
			return _cacf
		}
		switch _aadb := _ebcd.(type) {
		case _a.StartElement:
			switch _aadb.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_agd.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _abec := d.DecodeElement(_agd.ExtLst, &_aadb); _abec != nil {
					return _abec
				}
			default:
				_ag.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u004f\u0066\u0020\u0025\u0076", _aadb.Name)
				if _acef := d.Skip(); _acef != nil {
					return _acef
				}
			}
		case _a.EndElement:
			break _ecfcf
		case _a.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Parameter and its children
func (_edfge *CT_Parameter) Validate() error {
	return _edfge.ValidateWithPath("\u0043\u0054\u005fP\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072")
}
func (_acdbe ST_HierarchyAlignment) ValidateWithPath(path string) error {
	switch _acdbe {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_acdbe))
	}
	return nil
}
func NewRelIds() *RelIds { _fgcg := &RelIds{}; _fgcg.CT_RelIds = *NewCT_RelIds(); return _fgcg }

type CT_CTStyleLabel struct {

	// Name
	NameAttr string

	// Fill Color List
	FillClrLst *CT_Colors

	// Line Color List
	LinClrLst *CT_Colors

	// Effect Color List
	EffectClrLst *CT_Colors

	// Text Line Color List
	TxLinClrLst *CT_Colors

	// Text Fill Color List
	TxFillClrLst *CT_Colors

	// Text Effect Color List
	TxEffectClrLst *CT_Colors
	ExtLst         *_b.CT_OfficeArtExtensionList
}

func (_bfbgc ST_RotationPath) ValidateWithPath(path string) error {
	switch _bfbgc {
	case 0, 1, 2:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bfbgc))
	}
	return nil
}

// Validate validates the CT_CxnList and its children
func (_gec *CT_CxnList) Validate() error {
	return _gec.ValidateWithPath("\u0043\u0054\u005f\u0043\u0078\u006e\u004c\u0069\u0073\u0074")
}

const (
	ST_AxisTypeUnset       ST_AxisType = 0
	ST_AxisTypeSelf        ST_AxisType = 1
	ST_AxisTypeCh          ST_AxisType = 2
	ST_AxisTypeDes         ST_AxisType = 3
	ST_AxisTypeDesOrSelf   ST_AxisType = 4
	ST_AxisTypePar         ST_AxisType = 5
	ST_AxisTypeAncst       ST_AxisType = 6
	ST_AxisTypeAncstOrSelf ST_AxisType = 7
	ST_AxisTypeFollowSib   ST_AxisType = 8
	ST_AxisTypePrecedSib   ST_AxisType = 9
	ST_AxisTypeFollow      ST_AxisType = 10
	ST_AxisTypePreced      ST_AxisType = 11
	ST_AxisTypeRoot        ST_AxisType = 12
	ST_AxisTypeNone        ST_AxisType = 13
)

func (_baa ST_NodeHorizontalAlignment) Validate() error { return _baa.ValidateWithPath("") }
func NewCT_Adj() *CT_Adj                                { _feg := &CT_Adj{}; _feg.IdxAttr = 1; return _feg }

type CT_ChildPref struct {

	// Preferred Number of CHildren Value
	ValAttr *int32
}

func (_dfffad ST_VariableType) String() string {
	switch _dfffad {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074"
	case 3:
		return "\u0063\u0068\u004da\u0078"
	case 4:
		return "\u0063\u0068\u0050\u0072\u0065\u0066"
	case 5:
		return "\u0062\u0075\u006c\u0045\u006e\u0061\u0062\u006c\u0065\u0064"
	case 6:
		return "\u0064\u0069\u0072"
	case 7:
		return "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068"
	case 8:
		return "\u0061n\u0069\u006d\u004f\u006e\u0065"
	case 9:
		return "\u0061n\u0069\u006d\u004c\u0076\u006c"
	case 10:
		return "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073"
	}
	return ""
}
func (_cedg ST_ConstraintType) String() string {
	switch _cedg {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0061\u006c\u0069\u0067\u006e\u004f\u0066\u0066"
	case 3:
		return "\u0062e\u0067\u004d\u0061\u0072\u0067"
	case 4:
		return "\u0062\u0065\u006e\u0064\u0044\u0069\u0073\u0074"
	case 5:
		return "\u0062\u0065\u0067\u0050\u0061\u0064"
	case 6:
		return "\u0062"
	case 7:
		return "\u0062\u004d\u0061r\u0067"
	case 8:
		return "\u0062\u004f\u0066\u0066"
	case 9:
		return "\u0063\u0074\u0072\u0058"
	case 10:
		return "\u0063t\u0072\u0058\u004f\u0066\u0066"
	case 11:
		return "\u0063\u0074\u0072\u0059"
	case 12:
		return "\u0063t\u0072\u0059\u004f\u0066\u0066"
	case 13:
		return "\u0063\u006f\u006e\u006e\u0044\u0069\u0073\u0074"
	case 14:
		return "\u0064\u0069\u0061\u006d"
	case 15:
		return "\u0065n\u0064\u004d\u0061\u0072\u0067"
	case 16:
		return "\u0065\u006e\u0064\u0050\u0061\u0064"
	case 17:
		return "\u0068"
	case 18:
		return "\u0068\u0041\u0072\u0048"
	case 19:
		return "\u0068\u004f\u0066\u0066"
	case 20:
		return "\u006c"
	case 21:
		return "\u006c\u004d\u0061r\u0067"
	case 22:
		return "\u006c\u004f\u0066\u0066"
	case 23:
		return "\u0072"
	case 24:
		return "\u0072\u004d\u0061r\u0067"
	case 25:
		return "\u0072\u004f\u0066\u0066"
	case 26:
		return "\u0070\u0072\u0069\u006d\u0046\u006f\u006e\u0074\u0053\u007a"
	case 27:
		return "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0052\u0061\u0074\u0069\u006f"
	case 28:
		return "\u0073e\u0063\u0046\u006f\u006e\u0074\u0053z"
	case 29:
		return "\u0073\u0069\u0062S\u0070"
	case 30:
		return "\u0073\u0065\u0063\u0053\u0069\u0062\u0053\u0070"
	case 31:
		return "\u0073\u0070"
	case 32:
		return "\u0073t\u0065\u006d\u0054\u0068\u0069\u0063k"
	case 33:
		return "\u0074"
	case 34:
		return "\u0074\u004d\u0061r\u0067"
	case 35:
		return "\u0074\u004f\u0066\u0066"
	case 36:
		return "\u0075\u0073\u0065r\u0041"
	case 37:
		return "\u0075\u0073\u0065r\u0042"
	case 38:
		return "\u0075\u0073\u0065r\u0043"
	case 39:
		return "\u0075\u0073\u0065r\u0044"
	case 40:
		return "\u0075\u0073\u0065r\u0045"
	case 41:
		return "\u0075\u0073\u0065r\u0046"
	case 42:
		return "\u0075\u0073\u0065r\u0047"
	case 43:
		return "\u0075\u0073\u0065r\u0048"
	case 44:
		return "\u0075\u0073\u0065r\u0049"
	case 45:
		return "\u0075\u0073\u0065r\u004a"
	case 46:
		return "\u0075\u0073\u0065r\u004b"
	case 47:
		return "\u0075\u0073\u0065r\u004c"
	case 48:
		return "\u0075\u0073\u0065r\u004d"
	case 49:
		return "\u0075\u0073\u0065r\u004e"
	case 50:
		return "\u0075\u0073\u0065r\u004f"
	case 51:
		return "\u0075\u0073\u0065r\u0050"
	case 52:
		return "\u0075\u0073\u0065r\u0051"
	case 53:
		return "\u0075\u0073\u0065r\u0052"
	case 54:
		return "\u0075\u0073\u0065r\u0053"
	case 55:
		return "\u0075\u0073\u0065r\u0054"
	case 56:
		return "\u0075\u0073\u0065r\u0055"
	case 57:
		return "\u0075\u0073\u0065r\u0056"
	case 58:
		return "\u0075\u0073\u0065r\u0057"
	case 59:
		return "\u0075\u0073\u0065r\u0058"
	case 60:
		return "\u0075\u0073\u0065r\u0059"
	case 61:
		return "\u0075\u0073\u0065r\u005a"
	case 62:
		return "\u0077"
	case 63:
		return "\u0077\u0041\u0072\u0048"
	case 64:
		return "\u0077\u004f\u0066\u0066"
	}
	return ""
}
func (_afdac ST_AnimOneStr) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_afdac.String(), start)
}

const (
	ST_CenterShapeMappingUnset ST_CenterShapeMapping = 0
	ST_CenterShapeMappingNone  ST_CenterShapeMapping = 1
	ST_CenterShapeMappingFNode ST_CenterShapeMapping = 2
)

type ST_ChildAlignment byte

func (_fdgb *CT_ColorTransformHeaderLst) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_fdca:
	for {
		_facc, _egae := d.Token()
		if _egae != nil {
			return _egae
		}
		switch _egaa := _facc.(type) {
		case _a.StartElement:
			switch _egaa.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_bfc := NewCT_ColorTransformHeader()
				if _cfb := d.DecodeElement(_bfc, &_egaa); _cfb != nil {
					return _cfb
				}
				_fdgb.ColorsDefHdr = append(_fdgb.ColorsDefHdr, _bfc)
			default:
				_ag.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020o\u006e\u0020\u0043\u0054_\u0043\u006fl\u006f\u0072\u0054\u0072\u0061\u006e\u0073\u0066\u006f\u0072\u006d\u0048\u0065\u0061\u0064\u0065\u0072\u004c\u0073\u0074\u0020\u0025\u0076", _egaa.Name)
				if _eac := d.Skip(); _eac != nil {
					return _eac
				}
			}
		case _a.EndElement:
			break _fdca
		case _a.CharData:
		}
	}
	return nil
}

type CT_Otherwise struct {

	// Name
	NameAttr        *string
	OtherwiseChoice []*CT_OtherwiseChoice
}

func (_fdbb ST_Offset) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_fdbb.String(), start)
}
func (_fgaa *ST_ConstraintRelationship) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ddfg, _bcfa := d.Token()
	if _bcfa != nil {
		return _bcfa
	}
	if _gggb, _dcgba := _ddfg.(_a.EndElement); _dcgba && _gggb.Name == start.Name {
		*_fgaa = 1
		return nil
	}
	if _gdgce, _dgec := _ddfg.(_a.CharData); !_dgec {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ddfg)
	} else {
		switch string(_gdgce) {
		case "":
			*_fgaa = 0
		case "\u0073\u0065\u006c\u0066":
			*_fgaa = 1
		case "\u0063\u0068":
			*_fgaa = 2
		case "\u0064\u0065\u0073":
			*_fgaa = 3
		}
	}
	_ddfg, _bcfa = d.Token()
	if _bcfa != nil {
		return _bcfa
	}
	if _agbe, _aecd := _ddfg.(_a.EndElement); _aecd && _agbe.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ddfg)
}

// ValidateWithPath validates the StyleDefHdr and its children, prefixing error messages with path
func (_dgbb *StyleDefHdr) ValidateWithPath(path string) error {
	if _facgfc := _dgbb.CT_StyleDefinitionHeader.ValidateWithPath(path); _facgfc != nil {
		return _facgfc
	}
	return nil
}

type ST_HierarchyAlignment byte

// ValidateWithPath validates the CT_ForEach and its children, prefixing error messages with path
func (_abgb *CT_ForEach) ValidateWithPath(path string) error {
	for _fcbe, _agga := range _abgb.ForEachChoice {
		if _aede := _agga.ValidateWithPath(_e.Sprintf("%\u0073/\u0046\u006f\u0072\u0045\u0061\u0063\u0068\u0043h\u006f\u0069\u0063\u0065[%\u0064\u005d", path, _fcbe)); _aede != nil {
			return _aede
		}
	}
	return nil
}
func (_gff *CT_ColorTransform) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _gff.UniqueIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _e.Sprintf("\u0025\u0076", *_gff.UniqueIdAttr)})
	}
	if _gff.MinVerAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _e.Sprintf("\u0025\u0076", *_gff.MinVerAttr)})
	}
	e.EncodeToken(start)
	if _gff.Title != nil {
		_afbg := _a.StartElement{Name: _a.Name{Local: "\u0074\u0069\u0074l\u0065"}}
		for _, _gaef := range _gff.Title {
			e.EncodeElement(_gaef, _afbg)
		}
	}
	if _gff.Desc != nil {
		_fac := _a.StartElement{Name: _a.Name{Local: "\u0064\u0065\u0073\u0063"}}
		for _, _bcdf := range _gff.Desc {
			e.EncodeElement(_bcdf, _fac)
		}
	}
	if _gff.CatLst != nil {
		_ecda := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gff.CatLst, _ecda)
	}
	if _gff.StyleLbl != nil {
		_bagb := _a.StartElement{Name: _a.Name{Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}}
		for _, _ddd := range _gff.StyleLbl {
			e.EncodeElement(_ddd, _bagb)
		}
	}
	if _gff.ExtLst != nil {
		_fbea := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gff.ExtLst, _fbea)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_dacfde ST_ConstraintType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dacfde.String(), start)
}

type CT_Choose struct {

	// Name
	NameAttr *string

	// If
	If []*CT_When

	// Else
	Else *CT_Otherwise
}

// ValidateWithPath validates the CT_Constraint and its children, prefixing error messages with path
func (_dfee *CT_Constraint) ValidateWithPath(path string) error {
	if _facd := _dfee.OpAttr.ValidateWithPath(path + "\u002fO\u0070\u0041\u0074\u0074\u0072"); _facd != nil {
		return _facd
	}
	if _dfee.ExtLst != nil {
		if _ddfd := _dfee.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ddfd != nil {
			return _ddfd
		}
	}
	if _dfee.TypeAttr == ST_ConstraintTypeUnset {
		return _e.Errorf("\u0025\u0073\u002f\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072\u0020\u0069\u0073\u0020a\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _baee := _dfee.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _baee != nil {
		return _baee
	}
	if _beac := _dfee.ForAttr.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0041\u0074\u0074\u0072"); _beac != nil {
		return _beac
	}
	if _adb := _dfee.PtTypeAttr.ValidateWithPath(path + "/\u0050\u0074\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072"); _adb != nil {
		return _adb
	}
	if _cbae := _dfee.RefTypeAttr.ValidateWithPath(path + "\u002f\u0052\u0065f\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072"); _cbae != nil {
		return _cbae
	}
	if _edbf := _dfee.RefForAttr.ValidateWithPath(path + "/\u0052\u0065\u0066\u0046\u006f\u0072\u0041\u0074\u0074\u0072"); _edbf != nil {
		return _edbf
	}
	if _cbcge := _dfee.RefPtTypeAttr.ValidateWithPath(path + "\u002f\u0052\u0065\u0066\u0050\u0074\u0054\u0079\u0070e\u0041\u0074\u0074\u0072"); _cbcge != nil {
		return _cbcge
	}
	return nil
}
func (_dfbb *ST_ConnectorRouting) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_acdcc, _gbecd := d.Token()
	if _gbecd != nil {
		return _gbecd
	}
	if _bedgc, _gagbb := _acdcc.(_a.EndElement); _gagbb && _bedgc.Name == start.Name {
		*_dfbb = 1
		return nil
	}
	if _aadg, _eafd := _acdcc.(_a.CharData); !_eafd {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _acdcc)
	} else {
		switch string(_aadg) {
		case "":
			*_dfbb = 0
		case "\u0073\u0074\u0072\u0061":
			*_dfbb = 1
		case "\u0062\u0065\u006e\u0064":
			*_dfbb = 2
		case "\u0063\u0075\u0072v\u0065":
			*_dfbb = 3
		case "\u006co\u006e\u0067\u0043\u0075\u0072\u0076e":
			*_dfbb = 4
		}
	}
	_acdcc, _gbecd = d.Token()
	if _gbecd != nil {
		return _gbecd
	}
	if _cadbc, _adbe := _acdcc.(_a.EndElement); _adbe && _cadbc.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _acdcc)
}

// Validate validates the CT_LayoutNode and its children
func (_dbac *CT_LayoutNode) Validate() error {
	return _dbac.ValidateWithPath("\u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065")
}
func (_ac *CT_AnimOne) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _ac.ValAttr != ST_AnimOneStrUnset {
		_cbe, _efa := _ac.ValAttr.MarshalXMLAttr(_a.Name{Local: "\u0076\u0061\u006c"})
		if _efa != nil {
			return _efa
		}
		start.Attr = append(start.Attr, _cbe)
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type ST_DiagramTextAlignment byte

// Validate validates the CT_ColorTransform and its children
func (_gfa *CT_ColorTransform) Validate() error {
	return _gfa.ValidateWithPath("\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061\u006es\u0066\u006f\u0072\u006d")
}

// Validate validates the CT_DiagramDefinitionHeader and its children
func (_bbgbe *CT_DiagramDefinitionHeader) Validate() error {
	return _bbgbe.ValidateWithPath("\u0043\u0054\u005f\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044e\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065a\u0064\u0065\u0072")
}

const (
	ST_BreakpointUnset  ST_Breakpoint = 0
	ST_BreakpointEndCnv ST_Breakpoint = 1
	ST_BreakpointBal    ST_Breakpoint = 2
	ST_BreakpointFixed  ST_Breakpoint = 3
)

func (_efcf *ST_ParameterVal) Validate() error { return _efcf.ValidateWithPath("") }

// Validate validates the CT_Pt and its children
func (_dfbe *CT_Pt) Validate() error { return _dfbe.ValidateWithPath("\u0043\u0054\u005fP\u0074") }
func (_bdgea ST_ClrAppMethod) ValidateWithPath(path string) error {
	switch _bdgea {
	case 0, 1, 2, 3:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bdgea))
	}
	return nil
}
func (_aadba ST_TextBlockDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_fgafa := _a.Attr{}
	_fgafa.Name = name
	switch _aadba {
	case ST_TextBlockDirectionUnset:
		_fgafa.Value = ""
	case ST_TextBlockDirectionHorz:
		_fgafa.Value = "\u0068\u006f\u0072\u007a"
	case ST_TextBlockDirectionVert:
		_fgafa.Value = "\u0076\u0065\u0072\u0074"
	}
	return _fgafa, nil
}
func NewCT_LayoutNode() *CT_LayoutNode { _ceabb := &CT_LayoutNode{}; return _ceabb }

// ValidateWithPath validates the LayoutDefHdrLst and its children, prefixing error messages with path
func (_adeab *LayoutDefHdrLst) ValidateWithPath(path string) error {
	if _gagbg := _adeab.CT_DiagramDefinitionHeaderLst.ValidateWithPath(path); _gagbg != nil {
		return _gagbg
	}
	return nil
}
func (_gcagc ST_FunctionArgument) String() string {
	if _gcagc.ST_VariableType != ST_VariableTypeUnset {
		return _gcagc.ST_VariableType.String()
	}
	return ""
}

type CT_TextProps struct{ Text3DChoice *_b.EG_Text3DChoice }
type ST_TextBlockDirection byte

func (_dgag *CT_StyleDefinition) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _dgag.UniqueIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _e.Sprintf("\u0025\u0076", *_dgag.UniqueIdAttr)})
	}
	if _dgag.MinVerAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _e.Sprintf("\u0025\u0076", *_dgag.MinVerAttr)})
	}
	e.EncodeToken(start)
	if _dgag.Title != nil {
		_edfe := _a.StartElement{Name: _a.Name{Local: "\u0074\u0069\u0074l\u0065"}}
		for _, _eaac := range _dgag.Title {
			e.EncodeElement(_eaac, _edfe)
		}
	}
	if _dgag.Desc != nil {
		_ccab := _a.StartElement{Name: _a.Name{Local: "\u0064\u0065\u0073\u0063"}}
		for _, _addgc := range _dgag.Desc {
			e.EncodeElement(_addgc, _ccab)
		}
	}
	if _dgag.CatLst != nil {
		_efac := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dgag.CatLst, _efac)
	}
	if _dgag.Scene3d != nil {
		_ffbga := _a.StartElement{Name: _a.Name{Local: "\u0073c\u0065\u006e\u0065\u0033\u0064"}}
		e.EncodeElement(_dgag.Scene3d, _ffbga)
	}
	_gfadd := _a.StartElement{Name: _a.Name{Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}}
	for _, _defce := range _dgag.StyleLbl {
		e.EncodeElement(_defce, _gfadd)
	}
	if _dgag.ExtLst != nil {
		_fdgd := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dgag.ExtLst, _fdgd)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_ebda *StyleDef) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0073\u0074\u0079\u006c\u0065\u0044\u0065\u0066"
	return _ebda.CT_StyleDefinition.MarshalXML(e, start)
}
func (_ffgb *CT_OtherwiseChoice) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _ffgb.Alg != nil {
		_bafb := _a.StartElement{Name: _a.Name{Local: "\u0061\u006c\u0067"}}
		e.EncodeElement(_ffgb.Alg, _bafb)
	} else if _ffgb.Shape != nil {
		_fdbf := _a.StartElement{Name: _a.Name{Local: "\u0073\u0068\u0061p\u0065"}}
		e.EncodeElement(_ffgb.Shape, _fdbf)
	} else if _ffgb.PresOf != nil {
		_ege := _a.StartElement{Name: _a.Name{Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}}
		e.EncodeElement(_ffgb.PresOf, _ege)
	} else if _ffgb.ConstrLst != nil {
		_bfac := _a.StartElement{Name: _a.Name{Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}}
		e.EncodeElement(_ffgb.ConstrLst, _bfac)
	} else if _ffgb.RuleLst != nil {
		_dcdgb := _a.StartElement{Name: _a.Name{Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}}
		e.EncodeElement(_ffgb.RuleLst, _dcdgb)
	} else if _ffgb.ForEach != nil {
		_eedf := _a.StartElement{Name: _a.Name{Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}}
		e.EncodeElement(_ffgb.ForEach, _eedf)
	} else if _ffgb.LayoutNode != nil {
		_cgafb := _a.StartElement{Name: _a.Name{Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}}
		e.EncodeElement(_ffgb.LayoutNode, _cgafb)
	} else if _ffgb.Choose != nil {
		_efge := _a.StartElement{Name: _a.Name{Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}}
		e.EncodeElement(_ffgb.Choose, _efge)
	} else if _ffgb.ExtLst != nil {
		_cgbg := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ffgb.ExtLst, _cgbg)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_ColorTransformHeader and its children, prefixing error messages with path
func (_aaad *CT_ColorTransformHeader) ValidateWithPath(path string) error {
	for _acbc, _bdfb := range _aaad.Title {
		if _cac := _bdfb.ValidateWithPath(_e.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _acbc)); _cac != nil {
			return _cac
		}
	}
	for _bdc, _degd := range _aaad.Desc {
		if _eff := _degd.ValidateWithPath(_e.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _bdc)); _eff != nil {
			return _eff
		}
	}
	if _aaad.CatLst != nil {
		if _egd := _aaad.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _egd != nil {
			return _egd
		}
	}
	if _aaad.ExtLst != nil {
		if _cbcg := _aaad.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cbcg != nil {
			return _cbcg
		}
	}
	return nil
}
func NewCT_CTName() *CT_CTName { _bfbg := &CT_CTName{}; return _bfbg }
func (_fggaf ST_ConnectorDimension) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_fggaf.String(), start)
}

const (
	ST_AlgorithmTypeUnset     ST_AlgorithmType = 0
	ST_AlgorithmTypeComposite ST_AlgorithmType = 1
	ST_AlgorithmTypeConn      ST_AlgorithmType = 2
	ST_AlgorithmTypeCycle     ST_AlgorithmType = 3
	ST_AlgorithmTypeHierChild ST_AlgorithmType = 4
	ST_AlgorithmTypeHierRoot  ST_AlgorithmType = 5
	ST_AlgorithmTypePyra      ST_AlgorithmType = 6
	ST_AlgorithmTypeLin       ST_AlgorithmType = 7
	ST_AlgorithmTypeSp        ST_AlgorithmType = 8
	ST_AlgorithmTypeTx        ST_AlgorithmType = 9
	ST_AlgorithmTypeSnake     ST_AlgorithmType = 10
)

func (_cgfd *CT_LayoutNodeChoice) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ffgc := start
	switch start.Name {
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u006c\u0067"}:
		_cgfd.Alg = NewCT_Algorithm()
		if _fgeg := d.DecodeElement(_cgfd.Alg, &_ffgc); _fgeg != nil {
			return _fgeg
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0068\u0061p\u0065"}:
		_cgfd.Shape = NewCT_Shape()
		if _ecce := d.DecodeElement(_cgfd.Shape, &_ffgc); _ecce != nil {
			return _ecce
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}:
		_cgfd.PresOf = NewCT_PresentationOf()
		if _gcdg := d.DecodeElement(_cgfd.PresOf, &_ffgc); _gcdg != nil {
			return _gcdg
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}:
		_cgfd.ConstrLst = NewCT_Constraints()
		if _ecbg := d.DecodeElement(_cgfd.ConstrLst, &_ffgc); _ecbg != nil {
			return _ecbg
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}:
		_cgfd.RuleLst = NewCT_Rules()
		if _feaed := d.DecodeElement(_cgfd.RuleLst, &_ffgc); _feaed != nil {
			return _feaed
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0076\u0061\u0072\u004c\u0073\u0074"}:
		_cgfd.VarLst = NewCT_LayoutVariablePropertySet()
		if _gggaa := d.DecodeElement(_cgfd.VarLst, &_ffgc); _gggaa != nil {
			return _gggaa
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}:
		_cgfd.ForEach = NewCT_ForEach()
		if _gcfcg := d.DecodeElement(_cgfd.ForEach, &_ffgc); _gcfcg != nil {
			return _gcfcg
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
		_cgfd.LayoutNode = NewCT_LayoutNode()
		if _abcf := d.DecodeElement(_cgfd.LayoutNode, &_ffgc); _abcf != nil {
			return _abcf
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}:
		_cgfd.Choose = NewCT_Choose()
		if _fega := d.DecodeElement(_cgfd.Choose, &_ffgc); _fega != nil {
			return _fega
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
		_cgfd.ExtLst = _b.NewCT_OfficeArtExtensionList()
		if _ebea := d.DecodeElement(_cgfd.ExtLst, &_ffgc); _ebea != nil {
			return _ebea
		}
	default:
		_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020o\u006e\u0020\u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u004eod\u0065\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _ffgc.Name)
		if _bfgd := d.Skip(); _bfgd != nil {
			return _bfgd
		}
	}
	return nil
}
func (_dgd *CT_CTDescription) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _gag := range start.Attr {
		if _gag.Name.Local == "\u006c\u0061\u006e\u0067" {
			_cgad := _gag.Value
			_dgd.LangAttr = &_cgad
			continue
		}
		if _gag.Name.Local == "\u0076\u0061\u006c" {
			_cbgc := _gag.Value
			_dgd.ValAttr = _cbgc
			continue
		}
	}
	for {
		_cgca, _dfa := d.Token()
		if _dfa != nil {
			return _e.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0043\u0054\u0044\u0065s\u0063r\u0069\u0070\u0074\u0069\u006f\u006e\u003a \u0025\u0073", _dfa)
		}
		if _fa, _eba := _cgca.(_a.EndElement); _eba && _fa.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the ColorsDefHdrLst and its children
func (_gggg *ColorsDefHdrLst) Validate() error {
	return _gggg.ValidateWithPath("\u0043o\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074")
}
func (_gdeef *ST_FunctionValue) ValidateWithPath(path string) error {
	_dccg := []string{}
	if _gdeef.Int32 != nil {
		_dccg = append(_dccg, "\u0049\u006e\u00743\u0032")
	}
	if _gdeef.Bool != nil {
		_dccg = append(_dccg, "\u0042\u006f\u006f\u006c")
	}
	if _gdeef.ST_Direction != ST_DirectionUnset {
		_dccg = append(_dccg, "\u0053\u0054\u005fD\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e")
	}
	if _gdeef.ST_HierBranchStyle != ST_HierBranchStyleUnset {
		_dccg = append(_dccg, "\u0053T\u005fH\u0069\u0065\u0072\u0042\u0072a\u006e\u0063h\u0053\u0074\u0079\u006c\u0065")
	}
	if _gdeef.ST_AnimOneStr != ST_AnimOneStrUnset {
		_dccg = append(_dccg, "\u0053\u0054\u005f\u0041\u006e\u0069\u006d\u004f\u006e\u0065\u0053\u0074\u0072")
	}
	if _gdeef.ST_AnimLvlStr != ST_AnimLvlStrUnset {
		_dccg = append(_dccg, "\u0053\u0054\u005f\u0041\u006e\u0069\u006d\u004c\u0076\u006c\u0053\u0074\u0072")
	}
	if _gdeef.ST_ResizeHandlesStr != ST_ResizeHandlesStrUnset {
		_dccg = append(_dccg, "\u0053\u0054\u005f\u0052es\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073\u0053\u0074\u0072")
	}
	if len(_dccg) > 1 {
		return _e.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _dccg)
	}
	return nil
}
func NewCT_Shape() *CT_Shape {
	_abgbf := &CT_Shape{}
	return _abgbf
}
func NewCT_Constraints() *CT_Constraints { _ebdg := &CT_Constraints{}; return _ebdg }
func (_dgdg *ST_ChildOrderType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_dgdg = 0
	case "\u0062":
		*_dgdg = 1
	case "\u0074":
		*_dgdg = 2
	}
	return nil
}
func NewCT_DiagramDefinitionHeaderLst() *CT_DiagramDefinitionHeaderLst {
	_afbb := &CT_DiagramDefinitionHeaderLst{}
	return _afbb
}
func NewColorsDefHdr() *ColorsDefHdr {
	_ageff := &ColorsDefHdr{}
	_ageff.CT_ColorTransformHeader = *NewCT_ColorTransformHeader()
	return _ageff
}

// Validate validates the CT_CTCategories and its children
func (_gdbf *CT_CTCategories) Validate() error {
	return _gdbf.ValidateWithPath("\u0043T\u005fC\u0054\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073")
}

// Validate validates the LayoutDefHdr and its children
func (_efffd *LayoutDefHdr) Validate() error {
	return _efffd.ValidateWithPath("\u004c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072")
}
func (_bdfad ST_AnimOneStr) Validate() error { return _bdfad.ValidateWithPath("") }
func (_edebb *LayoutDefHdrLst) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_edebb.CT_DiagramDefinitionHeaderLst = *NewCT_DiagramDefinitionHeaderLst()
_ecab:
	for {
		_gcae, _agfdc := d.Token()
		if _agfdc != nil {
			return _agfdc
		}
		switch _cdba := _gcae.(type) {
		case _a.StartElement:
			switch _cdba.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_ecfae := NewCT_DiagramDefinitionHeader()
				if _efbea := d.DecodeElement(_ecfae, &_cdba); _efbea != nil {
					return _efbea
				}
				_edebb.LayoutDefHdr = append(_edebb.LayoutDefHdr, _ecfae)
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u004c\u0061\u0079\u006f\u0075\u0074D\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074\u0020\u0025\u0076", _cdba.Name)
				if _eebc := d.Skip(); _eebc != nil {
					return _eebc
				}
			}
		case _a.EndElement:
			break _ecab
		case _a.CharData:
		}
	}
	return nil
}
func (_bcebg ST_PtType) Validate() error { return _bcebg.ValidateWithPath("") }

// Validate validates the CT_OrgChart and its children
func (_dffa *CT_OrgChart) Validate() error {
	return _dffa.ValidateWithPath("C\u0054\u005f\u004f\u0072\u0067\u0043\u0068\u0061\u0072\u0074")
}
func (_eeda *CT_Parameter) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_eeda.TypeAttr = ST_ParameterId(1)
	for _, _fdgc := range start.Attr {
		if _fdgc.Name.Local == "\u0074\u0079\u0070\u0065" {
			_eeda.TypeAttr.UnmarshalXMLAttr(_fdgc)
			continue
		}
		if _fdgc.Name.Local == "\u0076\u0061\u006c" {
			_effe, _fcgg := ParseUnionST_ParameterVal(_fdgc.Value)
			if _fcgg != nil {
				return _fcgg
			}
			_eeda.ValAttr = _effe
			continue
		}
	}
	for {
		_gee, _beaea := d.Token()
		if _beaea != nil {
			return _e.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0050\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u003a\u0020\u0025\u0073", _beaea)
		}
		if _edab, _fcaff := _gee.(_a.EndElement); _fcaff && _edab.Name == start.Name {
			break
		}
	}
	return nil
}
func (_eecbd *ST_NodeVerticalAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_eecbd = 0
	case "\u0074":
		*_eecbd = 1
	case "\u006d\u0069\u0064":
		*_eecbd = 2
	case "\u0062":
		*_eecbd = 3
	}
	return nil
}
func (_faed *CT_LayoutVariablePropertySet) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _faed.OrgChart != nil {
		_gbdb := _a.StartElement{Name: _a.Name{Local: "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_faed.OrgChart, _gbdb)
	}
	if _faed.ChMax != nil {
		_eaeg := _a.StartElement{Name: _a.Name{Local: "\u0063\u0068\u004da\u0078"}}
		e.EncodeElement(_faed.ChMax, _eaeg)
	}
	if _faed.ChPref != nil {
		_bffb := _a.StartElement{Name: _a.Name{Local: "\u0063\u0068\u0050\u0072\u0065\u0066"}}
		e.EncodeElement(_faed.ChPref, _bffb)
	}
	if _faed.BulletEnabled != nil {
		_cbfb := _a.StartElement{Name: _a.Name{Local: "\u0062\u0075\u006c\u006c\u0065\u0074\u0045\u006e\u0061\u0062\u006c\u0065\u0064"}}
		e.EncodeElement(_faed.BulletEnabled, _cbfb)
	}
	if _faed.Dir != nil {
		_efbe := _a.StartElement{Name: _a.Name{Local: "\u0064\u0069\u0072"}}
		e.EncodeElement(_faed.Dir, _efbe)
	}
	if _faed.HierBranch != nil {
		_deeg := _a.StartElement{Name: _a.Name{Local: "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068"}}
		e.EncodeElement(_faed.HierBranch, _deeg)
	}
	if _faed.AnimOne != nil {
		_gada := _a.StartElement{Name: _a.Name{Local: "\u0061n\u0069\u006d\u004f\u006e\u0065"}}
		e.EncodeElement(_faed.AnimOne, _gada)
	}
	if _faed.AnimLvl != nil {
		_affa := _a.StartElement{Name: _a.Name{Local: "\u0061n\u0069\u006d\u004c\u0076\u006c"}}
		e.EncodeElement(_faed.AnimLvl, _affa)
	}
	if _faed.ResizeHandles != nil {
		_bgba := _a.StartElement{Name: _a.Name{Local: "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073"}}
		e.EncodeElement(_faed.ResizeHandles, _bgba)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_gfeae *ST_Offset) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_gfeae = 0
	case "\u0063\u0074\u0072":
		*_gfeae = 1
	case "\u006f\u0066\u0066":
		*_gfeae = 2
	}
	return nil
}
func (_bbbc *CT_Parameter) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	_gbag, _ebbg := _bbbc.TypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0074\u0079\u0070\u0065"})
	if _ebbg != nil {
		return _ebbg
	}
	start.Attr = append(start.Attr, _gbag)
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _e.Sprintf("\u0025\u0076", _bbbc.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_efdff ST_StartingElement) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_dffb := _a.Attr{}
	_dffb.Name = name
	switch _efdff {
	case ST_StartingElementUnset:
		_dffb.Value = ""
	case ST_StartingElementNode:
		_dffb.Value = "\u006e\u006f\u0064\u0065"
	case ST_StartingElementTrans:
		_dffb.Value = "\u0074\u0072\u0061n\u0073"
	}
	return _dffb, nil
}
func (_aecf ST_CxnType) String() string {
	switch _aecf {
	case 0:
		return ""
	case 1:
		return "\u0070\u0061\u0072O\u0066"
	case 2:
		return "\u0070\u0072\u0065\u0073\u004f\u0066"
	case 3:
		return "\u0070r\u0065\u0073\u0050\u0061\u0072\u004ff"
	case 4:
		return "\u0075\u006e\u006b\u006eow\u006e\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070"
	}
	return ""
}

const (
	ST_ConnectorPointUnset  ST_ConnectorPoint = 0
	ST_ConnectorPointAuto   ST_ConnectorPoint = 1
	ST_ConnectorPointBCtr   ST_ConnectorPoint = 2
	ST_ConnectorPointCtr    ST_ConnectorPoint = 3
	ST_ConnectorPointMidL   ST_ConnectorPoint = 4
	ST_ConnectorPointMidR   ST_ConnectorPoint = 5
	ST_ConnectorPointTCtr   ST_ConnectorPoint = 6
	ST_ConnectorPointBL     ST_ConnectorPoint = 7
	ST_ConnectorPointBR     ST_ConnectorPoint = 8
	ST_ConnectorPointTL     ST_ConnectorPoint = 9
	ST_ConnectorPointTR     ST_ConnectorPoint = 10
	ST_ConnectorPointRadial ST_ConnectorPoint = 11
)

func (_eccec ST_AlgorithmType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_aefb := _a.Attr{}
	_aefb.Name = name
	switch _eccec {
	case ST_AlgorithmTypeUnset:
		_aefb.Value = ""
	case ST_AlgorithmTypeComposite:
		_aefb.Value = "\u0063o\u006d\u0070\u006f\u0073\u0069\u0074e"
	case ST_AlgorithmTypeConn:
		_aefb.Value = "\u0063\u006f\u006e\u006e"
	case ST_AlgorithmTypeCycle:
		_aefb.Value = "\u0063\u0079\u0063l\u0065"
	case ST_AlgorithmTypeHierChild:
		_aefb.Value = "\u0068i\u0065\u0072\u0043\u0068\u0069\u006cd"
	case ST_AlgorithmTypeHierRoot:
		_aefb.Value = "\u0068\u0069\u0065\u0072\u0052\u006f\u006f\u0074"
	case ST_AlgorithmTypePyra:
		_aefb.Value = "\u0070\u0079\u0072\u0061"
	case ST_AlgorithmTypeLin:
		_aefb.Value = "\u006c\u0069\u006e"
	case ST_AlgorithmTypeSp:
		_aefb.Value = "\u0073\u0070"
	case ST_AlgorithmTypeTx:
		_aefb.Value = "\u0074\u0078"
	case ST_AlgorithmTypeSnake:
		_aefb.Value = "\u0073\u006e\u0061k\u0065"
	}
	return _aefb, nil
}
func (_fddde *CT_SDDescription) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _fddde.LangAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _e.Sprintf("\u0025\u0076", *_fddde.LangAttr)})
	}
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _e.Sprintf("\u0025\u0076", _fddde.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Constraints and its children
func (_ccfb *CT_Constraints) Validate() error {
	return _ccfb.ValidateWithPath("\u0043\u0054\u005f\u0043\u006f\u006e\u0073\u0074\u0072a\u0069\u006e\u0074\u0073")
}
func (_ged *CT_DiagramDefinitionHeaderLst) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_ggfab:
	for {
		_bddg, _gcfc := d.Token()
		if _gcfc != nil {
			return _gcfc
		}
		switch _ggde := _bddg.(type) {
		case _a.StartElement:
			switch _ggde.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_cfg := NewCT_DiagramDefinitionHeader()
				if _gbca := d.DecodeElement(_cfg, &_ggde); _gbca != nil {
					return _gbca
				}
				_ged.LayoutDefHdr = append(_ged.LayoutDefHdr, _cfg)
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074 \u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044\u0065\u0066\u0069\u006ei\u0074\u0069\u006f\u006e\u0048\u0065a\u0064\u0065r\u004c\u0073t\u0020%\u0076", _ggde.Name)
				if _ebc := d.Skip(); _ebc != nil {
					return _ebc
				}
			}
		case _a.EndElement:
			break _ggfab
		case _a.CharData:
		}
	}
	return nil
}
func ParseSliceST_Booleans(s string) (ST_Booleans, error) { return ST_Booleans{}, nil }
func (_gaec ST_FunctionValue) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _gaec.Int32 != nil {
		e.EncodeToken(_a.CharData(_e.Sprintf("\u0025\u0064", *_gaec.Int32)))
	}
	if _gaec.Bool != nil {
		e.EncodeToken(_a.CharData(_e.Sprintf("\u0025\u0064", _gfaf(*_gaec.Bool))))
	}
	if _gaec.ST_Direction != ST_DirectionUnset {
		e.EncodeToken(_a.CharData(_gaec.ST_Direction.String()))
	}
	if _gaec.ST_HierBranchStyle != ST_HierBranchStyleUnset {
		e.EncodeToken(_a.CharData(_gaec.ST_HierBranchStyle.String()))
	}
	if _gaec.ST_AnimOneStr != ST_AnimOneStrUnset {
		e.EncodeToken(_a.CharData(_gaec.ST_AnimOneStr.String()))
	}
	if _gaec.ST_AnimLvlStr != ST_AnimLvlStrUnset {
		e.EncodeToken(_a.CharData(_gaec.ST_AnimLvlStr.String()))
	}
	if _gaec.ST_ResizeHandlesStr != ST_ResizeHandlesStrUnset {
		e.EncodeToken(_a.CharData(_gaec.ST_ResizeHandlesStr.String()))
	}
	return e.EncodeToken(_a.EndElement{Name: start.Name})
}
func (_ffcb *CT_SDCategory) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _dcc := range start.Attr {
		if _dcc.Name.Local == "\u0074\u0079\u0070\u0065" {
			_agaec := _dcc.Value
			_ffcb.TypeAttr = _agaec
			continue
		}
		if _dcc.Name.Local == "\u0070\u0072\u0069" {
			_dafdc, _dbfc := _g.ParseUint(_dcc.Value, 10, 32)
			if _dbfc != nil {
				return _dbfc
			}
			_ffcb.PriAttr = uint32(_dafdc)
			continue
		}
	}
	for {
		_aacb, _aedd := d.Token()
		if _aedd != nil {
			return _e.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0053D\u0043a\u0074e\u0067\u006f\u0072\u0079\u003a\u0020\u0025s", _aedd)
		}
		if _efbb, _gfcfc := _aacb.(_a.EndElement); _gfcfc && _efbb.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Category struct {

	// Category Type
	TypeAttr string

	// Priority
	PriAttr uint32
}

// Validate validates the CT_PtList and its children
func (_dadbd *CT_PtList) Validate() error {
	return _dadbd.ValidateWithPath("\u0043T\u005f\u0050\u0074\u004c\u0069\u0073t")
}
func (_acga *LayoutDefHdrLst) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u006ca\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074"
	return _acga.CT_DiagramDefinitionHeaderLst.MarshalXML(e, start)
}
func (_bede *CT_ChildPref) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _bede.ValAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _e.Sprintf("\u0025\u0076", *_bede.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type CT_BulletEnabled struct {

	// Show Insert Bullet Value
	ValAttr *bool
}

func (_bdgd *ST_AlgorithmType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dgcg, _dgdcc := d.Token()
	if _dgdcc != nil {
		return _dgdcc
	}
	if _gefed, _bffed := _dgcg.(_a.EndElement); _bffed && _gefed.Name == start.Name {
		*_bdgd = 1
		return nil
	}
	if _gbdf, _eadefc := _dgcg.(_a.CharData); !_eadefc {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dgcg)
	} else {
		switch string(_gbdf) {
		case "":
			*_bdgd = 0
		case "\u0063o\u006d\u0070\u006f\u0073\u0069\u0074e":
			*_bdgd = 1
		case "\u0063\u006f\u006e\u006e":
			*_bdgd = 2
		case "\u0063\u0079\u0063l\u0065":
			*_bdgd = 3
		case "\u0068i\u0065\u0072\u0043\u0068\u0069\u006cd":
			*_bdgd = 4
		case "\u0068\u0069\u0065\u0072\u0052\u006f\u006f\u0074":
			*_bdgd = 5
		case "\u0070\u0079\u0072\u0061":
			*_bdgd = 6
		case "\u006c\u0069\u006e":
			*_bdgd = 7
		case "\u0073\u0070":
			*_bdgd = 8
		case "\u0074\u0078":
			*_bdgd = 9
		case "\u0073\u006e\u0061k\u0065":
			*_bdgd = 10
		}
	}
	_dgcg, _dgdcc = d.Token()
	if _dgdcc != nil {
		return _dgdcc
	}
	if _aaac, _cbdfe := _dgcg.(_a.EndElement); _cbdfe && _aaac.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dgcg)
}

type CT_ForEach struct {

	// Name
	NameAttr *string

	// Reference
	RefAttr           *string
	ForEachChoice     []*CT_ForEachChoice
	AxisAttr          *ST_AxisTypes
	PtTypeAttr        *ST_ElementTypes
	HideLastTransAttr *ST_Booleans
	StAttr            *ST_Ints
	CntAttr           *ST_UnsignedInts
	StepAttr          *ST_Ints
}
type ST_FallbackDimension byte

func (_fdf *CT_CTCategory) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0074\u0079\u0070\u0065"}, Value: _e.Sprintf("\u0025\u0076", _fdf.TypeAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0069"}, Value: _e.Sprintf("\u0025\u0076", _fdf.PriAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_cbee *ST_HierarchyAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_cbee = 0
	case "\u0074\u004c":
		*_cbee = 1
	case "\u0074\u0052":
		*_cbee = 2
	case "\u0074\u0043\u0074\u0072\u0043\u0068":
		*_cbee = 3
	case "\u0074C\u0074\u0072\u0044\u0065\u0073":
		*_cbee = 4
	case "\u0062\u004c":
		*_cbee = 5
	case "\u0062\u0052":
		*_cbee = 6
	case "\u0062\u0043\u0074\u0072\u0043\u0068":
		*_cbee = 7
	case "\u0062C\u0074\u0072\u0044\u0065\u0073":
		*_cbee = 8
	case "\u006c\u0054":
		*_cbee = 9
	case "\u006c\u0042":
		*_cbee = 10
	case "\u006c\u0043\u0074\u0072\u0043\u0068":
		*_cbee = 11
	case "\u006cC\u0074\u0072\u0044\u0065\u0073":
		*_cbee = 12
	case "\u0072\u0054":
		*_cbee = 13
	case "\u0072\u0042":
		*_cbee = 14
	case "\u0072\u0043\u0074\u0072\u0043\u0068":
		*_cbee = 15
	case "\u0072C\u0074\u0072\u0044\u0065\u0073":
		*_cbee = 16
	}
	return nil
}
func (_eedd *CT_HierBranchStyle) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _facgf := range start.Attr {
		if _facgf.Name.Local == "\u0076\u0061\u006c" {
			_eedd.ValAttr.UnmarshalXMLAttr(_facgf)
			continue
		}
	}
	for {
		_gaaf, _fba := d.Token()
		if _fba != nil {
			return _e.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054_\u0048\u0069\u0065\u0072\u0042\u0072\u0061n\u0063\u0068\u0053\u0074\u0079\u006c\u0065\u003a\u0020\u0025\u0073", _fba)
		}
		if _gce, _fged := _gaaf.(_a.EndElement); _fged && _gce.Name == start.Name {
			break
		}
	}
	return nil
}
func (_eddgg *ST_BoolOperator) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cddbf, _cbgca := d.Token()
	if _cbgca != nil {
		return _cbgca
	}
	if _facde, _dcce := _cddbf.(_a.EndElement); _dcce && _facde.Name == start.Name {
		*_eddgg = 1
		return nil
	}
	if _dabf, _ceee := _cddbf.(_a.CharData); !_ceee {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cddbf)
	} else {
		switch string(_dabf) {
		case "":
			*_eddgg = 0
		case "\u006e\u006f\u006e\u0065":
			*_eddgg = 1
		case "\u0065\u0071\u0075":
			*_eddgg = 2
		case "\u0067\u0074\u0065":
			*_eddgg = 3
		case "\u006c\u0074\u0065":
			*_eddgg = 4
		}
	}
	_cddbf, _cbgca = d.Token()
	if _cbgca != nil {
		return _cbgca
	}
	if _dafg, _ecaf := _cddbf.(_a.EndElement); _ecaf && _dafg.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cddbf)
}
func NewCT_CTStyleLabel() *CT_CTStyleLabel { _ccea := &CT_CTStyleLabel{}; return _ccea }

type CT_AnimLvl struct {

	// Level Animation Value
	ValAttr ST_AnimLvlStr
}

func NewCT_Rules() *CT_Rules { _dfgad := &CT_Rules{}; return _dfgad }
func NewAG_ConstraintAttributes() *AG_ConstraintAttributes {
	_af := &AG_ConstraintAttributes{}
	_af.TypeAttr = ST_ConstraintType(1)
	return _af
}

type ST_HierBranchStyle byte

func (_fgac ST_AlgorithmType) String() string {
	switch _fgac {
	case 0:
		return ""
	case 1:
		return "\u0063o\u006d\u0070\u006f\u0073\u0069\u0074e"
	case 2:
		return "\u0063\u006f\u006e\u006e"
	case 3:
		return "\u0063\u0079\u0063l\u0065"
	case 4:
		return "\u0068i\u0065\u0072\u0043\u0068\u0069\u006cd"
	case 5:
		return "\u0068\u0069\u0065\u0072\u0052\u006f\u006f\u0074"
	case 6:
		return "\u0070\u0079\u0072\u0061"
	case 7:
		return "\u006c\u0069\u006e"
	case 8:
		return "\u0073\u0070"
	case 9:
		return "\u0074\u0078"
	case 10:
		return "\u0073\u006e\u0061k\u0065"
	}
	return ""
}
func (_bfgf *CT_ColorTransformHeaderLst) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _bfgf.ColorsDefHdr != nil {
		_gdca := _a.StartElement{Name: _a.Name{Local: "\u0063\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072"}}
		for _, _dfe := range _bfgf.ColorsDefHdr {
			e.EncodeElement(_dfe, _gdca)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_gccbcc ST_ElementType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_gccbcc.String(), start)
}
func (_gbf *CT_Name) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _ddbda := range start.Attr {
		if _ddbda.Name.Local == "\u006c\u0061\u006e\u0067" {
			_fecg := _ddbda.Value
			_gbf.LangAttr = &_fecg
			continue
		}
		if _ddbda.Name.Local == "\u0076\u0061\u006c" {
			_agcd := _ddbda.Value
			_gbf.ValAttr = _agcd
			continue
		}
	}
	for {
		_bgfc, _dcdf := d.Token()
		if _dcdf != nil {
			return _e.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004e\u0061\u006d\u0065\u003a\u0020\u0025\u0073", _dcdf)
		}
		if _fbfde, _dbdb := _bgfc.(_a.EndElement); _dbdb && _fbfde.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_DiagramDefinition and its children
func (_edde *CT_DiagramDefinition) Validate() error {
	return _edde.ValidateWithPath("C\u0054_\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044e\u0066\u0069\u006e\u0069ti\u006f\u006e")
}
func (_dffc ST_ChildOrderType) String() string {
	switch _dffc {
	case 0:
		return ""
	case 1:
		return "\u0062"
	case 2:
		return "\u0074"
	}
	return ""
}
func NewCT_Description() *CT_Description   { _bgdg := &CT_Description{}; return _bgdg }
func NewCT_SDCategories() *CT_SDCategories { _fcffe := &CT_SDCategories{}; return _fcffe }
func (_dgef ST_FunctionOperator) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dgef.String(), start)
}
func (_fbce ST_FallbackDimension) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_eggfc := _a.Attr{}
	_eggfc.Name = name
	switch _fbce {
	case ST_FallbackDimensionUnset:
		_eggfc.Value = ""
	case ST_FallbackDimension1D:
		_eggfc.Value = "\u0031\u0044"
	case ST_FallbackDimension2D:
		_eggfc.Value = "\u0032\u0044"
	}
	return _eggfc, nil
}
func (_cfbg *ST_VerticalAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_cfbg = 0
	case "\u0074":
		*_cfbg = 1
	case "\u006d\u0069\u0064":
		*_cfbg = 2
	case "\u0062":
		*_cfbg = 3
	case "\u006e\u006f\u006e\u0065":
		*_cfbg = 4
	}
	return nil
}
func (_cccc *ST_StartingElement) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_cccc = 0
	case "\u006e\u006f\u0064\u0065":
		*_cccc = 1
	case "\u0074\u0072\u0061n\u0073":
		*_cccc = 2
	}
	return nil
}
func (_fagdd *ST_DiagramHorizontalAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_fagdd = 0
	case "\u006c":
		*_fagdd = 1
	case "\u0063\u0074\u0072":
		*_fagdd = 2
	case "\u0072":
		*_fagdd = 3
	case "\u006e\u006f\u006e\u0065":
		*_fagdd = 4
	}
	return nil
}
func (_ddga ST_GrowDirection) String() string {
	switch _ddga {
	case 0:
		return ""
	case 1:
		return "\u0074\u004c"
	case 2:
		return "\u0074\u0052"
	case 3:
		return "\u0062\u004c"
	case 4:
		return "\u0062\u0052"
	}
	return ""
}

// ValidateWithPath validates the CT_PtList and its children, prefixing error messages with path
func (_eacd *CT_PtList) ValidateWithPath(path string) error {
	for _aabc, _dbecc := range _eacd.Pt {
		if _fbge := _dbecc.ValidateWithPath(_e.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _aabc)); _fbge != nil {
			return _fbge
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Categories and its children, prefixing error messages with path
func (_cgd *CT_Categories) ValidateWithPath(path string) error {
	for _bafg, _gbde := range _cgd.Cat {
		if _eggf := _gbde.ValidateWithPath(_e.Sprintf("\u0025\u0073\u002f\u0043\u0061\u0074\u005b\u0025\u0064\u005d", path, _bafg)); _eggf != nil {
			return _eggf
		}
	}
	return nil
}

// Validate validates the CT_Name and its children
func (_bcfed *CT_Name) Validate() error {
	return _bcfed.ValidateWithPath("\u0043T\u005f\u004e\u0061\u006d\u0065")
}

type ST_ParameterId byte

func (_bagbe *ST_SecondaryLinearDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bagbe = 0
	case "\u006e\u006f\u006e\u0065":
		*_bagbe = 1
	case "\u0066\u0072\u006fm\u004c":
		*_bagbe = 2
	case "\u0066\u0072\u006fm\u0052":
		*_bagbe = 3
	case "\u0066\u0072\u006fm\u0054":
		*_bagbe = 4
	case "\u0066\u0072\u006fm\u0042":
		*_bagbe = 5
	}
	return nil
}

const (
	ST_ElementTypeUnset    ST_ElementType = 0
	ST_ElementTypeAll      ST_ElementType = 1
	ST_ElementTypeDoc      ST_ElementType = 2
	ST_ElementTypeNode     ST_ElementType = 3
	ST_ElementTypeNorm     ST_ElementType = 4
	ST_ElementTypeNonNorm  ST_ElementType = 5
	ST_ElementTypeAsst     ST_ElementType = 6
	ST_ElementTypeNonAsst  ST_ElementType = 7
	ST_ElementTypeParTrans ST_ElementType = 8
	ST_ElementTypePres     ST_ElementType = 9
	ST_ElementTypeSibTrans ST_ElementType = 10
)

// ValidateWithPath validates the CT_StyleDefinition and its children, prefixing error messages with path
func (_bddga *CT_StyleDefinition) ValidateWithPath(path string) error {
	for _gfdba, _ddbdb := range _bddga.Title {
		if _feb := _ddbdb.ValidateWithPath(_e.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _gfdba)); _feb != nil {
			return _feb
		}
	}
	for _faeg, _gggdb := range _bddga.Desc {
		if _caee := _gggdb.ValidateWithPath(_e.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _faeg)); _caee != nil {
			return _caee
		}
	}
	if _bddga.CatLst != nil {
		if _fgbc := _bddga.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _fgbc != nil {
			return _fgbc
		}
	}
	if _bddga.Scene3d != nil {
		if _dcbe := _bddga.Scene3d.ValidateWithPath(path + "\u002f\u0053\u0063\u0065\u006e\u0065\u0033\u0064"); _dcbe != nil {
			return _dcbe
		}
	}
	for _fbddc, _dbad := range _bddga.StyleLbl {
		if _cggeg := _dbad.ValidateWithPath(_e.Sprintf("\u0025s\u002fS\u0074\u0079\u006c\u0065\u004c\u0062\u006c\u005b\u0025\u0064\u005d", path, _fbddc)); _cggeg != nil {
			return _cggeg
		}
	}
	if _bddga.ExtLst != nil {
		if _fbgcf := _bddga.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fbgcf != nil {
			return _fbgcf
		}
	}
	return nil
}
func (_gdegb ST_TextAnchorVertical) Validate() error { return _gdegb.ValidateWithPath("") }
func (_faaa *CT_Otherwise) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _faaa.NameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _e.Sprintf("\u0025\u0076", *_faaa.NameAttr)})
	}
	e.EncodeToken(start)
	if _faaa.OtherwiseChoice != nil {
		for _, _bged := range _faaa.OtherwiseChoice {
			_bged.MarshalXML(e, _a.StartElement{})
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_bad *CT_LayoutNodeChoice) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _bad.Alg != nil {
		_eegb := _a.StartElement{Name: _a.Name{Local: "\u0061\u006c\u0067"}}
		e.EncodeElement(_bad.Alg, _eegb)
	} else if _bad.Shape != nil {
		_edfa := _a.StartElement{Name: _a.Name{Local: "\u0073\u0068\u0061p\u0065"}}
		e.EncodeElement(_bad.Shape, _edfa)
	} else if _bad.PresOf != nil {
		_gede := _a.StartElement{Name: _a.Name{Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}}
		e.EncodeElement(_bad.PresOf, _gede)
	} else if _bad.ConstrLst != nil {
		_deaa := _a.StartElement{Name: _a.Name{Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}}
		e.EncodeElement(_bad.ConstrLst, _deaa)
	} else if _bad.RuleLst != nil {
		_aeda := _a.StartElement{Name: _a.Name{Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}}
		e.EncodeElement(_bad.RuleLst, _aeda)
	} else if _bad.VarLst != nil {
		_bfca := _a.StartElement{Name: _a.Name{Local: "\u0076\u0061\u0072\u004c\u0073\u0074"}}
		e.EncodeElement(_bad.VarLst, _bfca)
	} else if _bad.ForEach != nil {
		_cfga := _a.StartElement{Name: _a.Name{Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}}
		e.EncodeElement(_bad.ForEach, _cfga)
	} else if _bad.LayoutNode != nil {
		_degg := _a.StartElement{Name: _a.Name{Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}}
		e.EncodeElement(_bad.LayoutNode, _degg)
	} else if _bad.Choose != nil {
		_effd := _a.StartElement{Name: _a.Name{Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}}
		e.EncodeElement(_bad.Choose, _effd)
	} else if _bad.ExtLst != nil {
		_cgdfa := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bad.ExtLst, _cgdfa)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_eaa *CT_ElemPropSet) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _edbfb := range start.Attr {
		if _edbfb.Name.Local == "p\u0072\u0065\u0073\u0041\u0073\u0073\u006f\u0063\u0049\u0044" {
			_dbgg, _ecee := ParseUnionST_ModelId(_edbfb.Value)
			if _ecee != nil {
				return _ecee
			}
			_eaa.PresAssocIDAttr = &_dbgg
			continue
		}
		if _edbfb.Name.Local == "\u0070\u0072\u0065\u0073\u004e\u0061\u006d\u0065" {
			_afca := _edbfb.Value
			_eaa.PresNameAttr = &_afca
			continue
		}
		if _edbfb.Name.Local == "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u004c\u0062\u006c" {
			_agfe := _edbfb.Value
			_eaa.PresStyleLblAttr = &_agfe
			continue
		}
		if _edbfb.Name.Local == "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u0049\u0064\u0078" {
			_dbfd, _bbed := _g.ParseInt(_edbfb.Value, 10, 32)
			if _bbed != nil {
				return _bbed
			}
			_baeb := int32(_dbfd)
			_eaa.PresStyleIdxAttr = &_baeb
			continue
		}
		if _edbfb.Name.Local == "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u0043\u006e\u0074" {
			_bbcf, _ebfe := _g.ParseInt(_edbfb.Value, 10, 32)
			if _ebfe != nil {
				return _ebfe
			}
			_efde := int32(_bbcf)
			_eaa.PresStyleCntAttr = &_efde
			continue
		}
		if _edbfb.Name.Local == "\u006c\u006f\u0054\u0079\u0070\u0065\u0049\u0064" {
			_afcb := _edbfb.Value
			_eaa.LoTypeIdAttr = &_afcb
			continue
		}
		if _edbfb.Name.Local == "\u006co\u0043\u0061\u0074\u0049\u0064" {
			_cbdd := _edbfb.Value
			_eaa.LoCatIdAttr = &_cbdd
			continue
		}
		if _edbfb.Name.Local == "\u0071\u0073\u0054\u0079\u0070\u0065\u0049\u0064" {
			_bead := _edbfb.Value
			_eaa.QsTypeIdAttr = &_bead
			continue
		}
		if _edbfb.Name.Local == "\u0071s\u0043\u0061\u0074\u0049\u0064" {
			_cefd := _edbfb.Value
			_eaa.QsCatIdAttr = &_cefd
			continue
		}
		if _edbfb.Name.Local == "\u0063\u0073\u0054\u0079\u0070\u0065\u0049\u0064" {
			_accf := _edbfb.Value
			_eaa.CsTypeIdAttr = &_accf
			continue
		}
		if _edbfb.Name.Local == "\u0063s\u0043\u0061\u0074\u0049\u0064" {
			_cffc := _edbfb.Value
			_eaa.CsCatIdAttr = &_cffc
			continue
		}
		if _edbfb.Name.Local == "\u0063\u006f\u0068\u0065\u0072\u0065\u006e\u0074\u0033\u0044\u004f\u0066\u0066" {
			_ebaec, _abdfa := _g.ParseBool(_edbfb.Value)
			if _abdfa != nil {
				return _abdfa
			}
			_eaa.Coherent3DOffAttr = &_ebaec
			continue
		}
		if _edbfb.Name.Local == "\u0070\u0068\u006c\u0064\u0072\u0054" {
			_ebbfc := _edbfb.Value
			_eaa.PhldrTAttr = &_ebbfc
			continue
		}
		if _edbfb.Name.Local == "\u0070\u0068\u006cd\u0072" {
			_gaba, _daga := _g.ParseBool(_edbfb.Value)
			if _daga != nil {
				return _daga
			}
			_eaa.PhldrAttr = &_gaba
			continue
		}
		if _edbfb.Name.Local == "\u0063u\u0073\u0074\u0041\u006e\u0067" {
			_fdcd, _cfaf := _g.ParseInt(_edbfb.Value, 10, 32)
			if _cfaf != nil {
				return _cfaf
			}
			_gfbfaf := int32(_fdcd)
			_eaa.CustAngAttr = &_gfbfaf
			continue
		}
		if _edbfb.Name.Local == "\u0063\u0075\u0073t\u0046\u006c\u0069\u0070\u0056\u0065\u0072\u0074" {
			_bcbf, _abfg := _g.ParseBool(_edbfb.Value)
			if _abfg != nil {
				return _abfg
			}
			_eaa.CustFlipVertAttr = &_bcbf
			continue
		}
		if _edbfb.Name.Local == "c\u0075\u0073\u0074\u0046\u006c\u0069\u0070\u0048\u006f\u0072" {
			_aggd, _eaae := _g.ParseBool(_edbfb.Value)
			if _eaae != nil {
				return _eaae
			}
			_eaa.CustFlipHorAttr = &_aggd
			continue
		}
		if _edbfb.Name.Local == "\u0063u\u0073\u0074\u0053\u007a\u0058" {
			_ffce, _deaf := _g.ParseInt(_edbfb.Value, 10, 32)
			if _deaf != nil {
				return _deaf
			}
			_afccg := int32(_ffce)
			_eaa.CustSzXAttr = &_afccg
			continue
		}
		if _edbfb.Name.Local == "\u0063u\u0073\u0074\u0053\u007a\u0059" {
			_gfebe, _faf := _g.ParseInt(_edbfb.Value, 10, 32)
			if _faf != nil {
				return _faf
			}
			_afgg := int32(_gfebe)
			_eaa.CustSzYAttr = &_afgg
			continue
		}
		if _edbfb.Name.Local == "\u0063\u0075\u0073\u0074\u0053\u0063\u0061\u006c\u0065\u0058" {
			_aeac, _cffb := ParseUnionST_PrSetCustVal(_edbfb.Value)
			if _cffb != nil {
				return _cffb
			}
			_eaa.CustScaleXAttr = &_aeac
			continue
		}
		if _edbfb.Name.Local == "\u0063\u0075\u0073\u0074\u0053\u0063\u0061\u006c\u0065\u0059" {
			_bcbg, _gefcd := ParseUnionST_PrSetCustVal(_edbfb.Value)
			if _gefcd != nil {
				return _gefcd
			}
			_eaa.CustScaleYAttr = &_bcbg
			continue
		}
		if _edbfb.Name.Local == "\u0063\u0075\u0073t\u0054" {
			_abdc, _ccdd := _g.ParseBool(_edbfb.Value)
			if _ccdd != nil {
				return _ccdd
			}
			_eaa.CustTAttr = &_abdc
			continue
		}
		if _edbfb.Name.Local == "\u0063\u0075\u0073t\u004c\u0069\u006e\u0046\u0061\u0063\u0074\u0058" {
			_fcdf, _ebbe := ParseUnionST_PrSetCustVal(_edbfb.Value)
			if _ebbe != nil {
				return _ebbe
			}
			_eaa.CustLinFactXAttr = &_fcdf
			continue
		}
		if _edbfb.Name.Local == "\u0063\u0075\u0073t\u004c\u0069\u006e\u0046\u0061\u0063\u0074\u0059" {
			_baeg, _bafaf := ParseUnionST_PrSetCustVal(_edbfb.Value)
			if _bafaf != nil {
				return _bafaf
			}
			_eaa.CustLinFactYAttr = &_baeg
			continue
		}
		if _edbfb.Name.Local == "c\u0075s\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074N\u0065\u0069\u0067\u0068bo\u0072\u0058" {
			_dbggc, _babf := ParseUnionST_PrSetCustVal(_edbfb.Value)
			if _babf != nil {
				return _babf
			}
			_eaa.CustLinFactNeighborXAttr = &_dbggc
			continue
		}
		if _edbfb.Name.Local == "c\u0075s\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074N\u0065\u0069\u0067\u0068bo\u0072\u0059" {
			_gbgb, _gebf := ParseUnionST_PrSetCustVal(_edbfb.Value)
			if _gebf != nil {
				return _gebf
			}
			_eaa.CustLinFactNeighborYAttr = &_gbgb
			continue
		}
		if _edbfb.Name.Local == "\u0063u\u0073t\u0052\u0061\u0064\u0053\u0063\u0061\u006c\u0065\u0052\u0061\u0064" {
			_dfab, _dcb := ParseUnionST_PrSetCustVal(_edbfb.Value)
			if _dcb != nil {
				return _dcb
			}
			_eaa.CustRadScaleRadAttr = &_dfab
			continue
		}
		if _edbfb.Name.Local == "\u0063u\u0073t\u0052\u0061\u0064\u0053\u0063\u0061\u006c\u0065\u0049\u006e\u0063" {
			_eeag, _dbef := ParseUnionST_PrSetCustVal(_edbfb.Value)
			if _dbef != nil {
				return _dbef
			}
			_eaa.CustRadScaleIncAttr = &_eeag
			continue
		}
	}
_aaba:
	for {
		_fcge, _cgeg := d.Token()
		if _cgeg != nil {
			return _cgeg
		}
		switch _eacc := _fcge.(type) {
		case _a.StartElement:
			switch _eacc.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004c\u0061\u0079\u006f\u0075t\u0056\u0061\u0072\u0073"}:
				_eaa.PresLayoutVars = NewCT_LayoutVariablePropertySet()
				if _eagd := d.DecodeElement(_eaa.PresLayoutVars, &_eacc); _eagd != nil {
					return _eagd
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079l\u0065"}:
				_eaa.Style = _b.NewCT_ShapeStyle()
				if _aag := d.DecodeElement(_eaa.Style, &_eacc); _aag != nil {
					return _aag
				}
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0045\u006c\u0065\u006d\u0050\u0072\u006fp\u0053e\u0074\u0020\u0025\u0076", _eacc.Name)
				if _abcd := d.Skip(); _abcd != nil {
					return _abcd
				}
			}
		case _a.EndElement:
			break _aaba
		case _a.CharData:
		}
	}
	return nil
}
func (_dgee ST_PyramidAccentTextMargin) String() string {
	switch _dgee {
	case 0:
		return ""
	case 1:
		return "\u0073\u0074\u0065\u0070"
	case 2:
		return "\u0073\u0074\u0061c\u006b"
	}
	return ""
}
func (_fefa *CT_SDName) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _fedga := range start.Attr {
		if _fedga.Name.Local == "\u006c\u0061\u006e\u0067" {
			_bef := _fedga.Value
			_fefa.LangAttr = &_bef
			continue
		}
		if _fedga.Name.Local == "\u0076\u0061\u006c" {
			_fdaca := _fedga.Value
			_fefa.ValAttr = _fdaca
			continue
		}
	}
	for {
		_bdfgb, _aecc := d.Token()
		if _aecc != nil {
			return _e.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0053\u0044\u004ea\u006d\u0065\u003a\u0020\u0025\u0073", _aecc)
		}
		if _fbee, _bdac := _bdfgb.(_a.EndElement); _bdac && _fbee.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gdfb *ST_DiagramTextAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cadgd, _ebge := d.Token()
	if _ebge != nil {
		return _ebge
	}
	if _cgbc, _deccf := _cadgd.(_a.EndElement); _deccf && _cgbc.Name == start.Name {
		*_gdfb = 1
		return nil
	}
	if _gcebg, _abge := _cadgd.(_a.CharData); !_abge {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cadgd)
	} else {
		switch string(_gcebg) {
		case "":
			*_gdfb = 0
		case "\u006c":
			*_gdfb = 1
		case "\u0063\u0074\u0072":
			*_gdfb = 2
		case "\u0072":
			*_gdfb = 3
		}
	}
	_cadgd, _ebge = d.Token()
	if _ebge != nil {
		return _ebge
	}
	if _abggd, _fagc := _cadgd.(_a.EndElement); _fagc && _abggd.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cadgd)
}
func (_gef *CT_Constraints) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_bac:
	for {
		_abg, _efff := d.Token()
		if _efff != nil {
			return _efff
		}
		switch _agcg := _abg.(type) {
		case _a.StartElement:
			switch _agcg.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u006f\u006e\u0073\u0074\u0072"}:
				_cffe := NewCT_Constraint()
				if _eaba := d.DecodeElement(_cffe, &_agcg); _eaba != nil {
					return _eaba
				}
				_gef.Constr = append(_gef.Constr, _cffe)
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061i\u006et\u0073\u0020\u0025\u0076", _agcg.Name)
				if _fddb := d.Skip(); _fddb != nil {
					return _fddb
				}
			}
		case _a.EndElement:
			break _bac
		case _a.CharData:
		}
	}
	return nil
}
func (_debc ST_FunctionType) String() string {
	switch _debc {
	case 0:
		return ""
	case 1:
		return "\u0063\u006e\u0074"
	case 2:
		return "\u0070\u006f\u0073"
	case 3:
		return "\u0072\u0065\u0076\u0050\u006f\u0073"
	case 4:
		return "\u0070o\u0073\u0045\u0076\u0065\u006e"
	case 5:
		return "\u0070\u006f\u0073\u004f\u0064\u0064"
	case 6:
		return "\u0076\u0061\u0072"
	case 7:
		return "\u0064\u0065\u0070t\u0068"
	case 8:
		return "\u006d\u0061\u0078\u0044\u0065\u0070\u0074\u0068"
	}
	return ""
}
func (_gfefd ST_DiagramHorizontalAlignment) String() string {
	switch _gfefd {
	case 0:
		return ""
	case 1:
		return "\u006c"
	case 2:
		return "\u0063\u0074\u0072"
	case 3:
		return "\u0072"
	case 4:
		return "\u006e\u006f\u006e\u0065"
	}
	return ""
}
func (_aaae ST_ConnectorPoint) ValidateWithPath(path string) error {
	switch _aaae {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_aaae))
	}
	return nil
}
func (_cgff ST_BendPoint) String() string {
	switch _cgff {
	case 0:
		return ""
	case 1:
		return "\u0062\u0065\u0067"
	case 2:
		return "\u0064\u0065\u0066"
	case 3:
		return "\u0065\u006e\u0064"
	}
	return ""
}
func (_daee ST_DiagramTextAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_daee.String(), start)
}

type ST_AlgorithmType byte

func (_cbeb ST_StartingElement) ValidateWithPath(path string) error {
	switch _cbeb {
	case 0, 1, 2:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cbeb))
	}
	return nil
}
func (_cbge ST_SecondaryChildAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_cbge.String(), start)
}
func (_bfda ST_ConnectorRouting) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_ffcdc := _a.Attr{}
	_ffcdc.Name = name
	switch _bfda {
	case ST_ConnectorRoutingUnset:
		_ffcdc.Value = ""
	case ST_ConnectorRoutingStra:
		_ffcdc.Value = "\u0073\u0074\u0072\u0061"
	case ST_ConnectorRoutingBend:
		_ffcdc.Value = "\u0062\u0065\u006e\u0064"
	case ST_ConnectorRoutingCurve:
		_ffcdc.Value = "\u0063\u0075\u0072v\u0065"
	case ST_ConnectorRoutingLongCurve:
		_ffcdc.Value = "\u006co\u006e\u0067\u0043\u0075\u0072\u0076e"
	}
	return _ffcdc, nil
}

// Validate validates the StyleDefHdr and its children
func (_fdcc *StyleDefHdr) Validate() error {
	return _fdcc.ValidateWithPath("S\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072")
}

// ValidateWithPath validates the CT_Constraints and its children, prefixing error messages with path
func (_agac *CT_Constraints) ValidateWithPath(path string) error {
	for _fgbe, _cega := range _agac.Constr {
		if _bde := _cega.ValidateWithPath(_e.Sprintf("\u0025\u0073\u002f\u0043\u006f\u006e\u0073\u0074\u0072\u005b\u0025\u0064\u005d", path, _fgbe)); _bde != nil {
			return _bde
		}
	}
	return nil
}
func (_geaf *CT_HierBranchStyle) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _geaf.ValAttr != ST_HierBranchStyleUnset {
		_fcfa, _degf := _geaf.ValAttr.MarshalXMLAttr(_a.Name{Local: "\u0076\u0061\u006c"})
		if _degf != nil {
			return _degf
		}
		start.Attr = append(start.Attr, _fcfa)
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type CT_HierBranchStyle struct {

	// Organization Chart Branch Style Value
	ValAttr ST_HierBranchStyle
}

// ST_FunctionArgument is a union type
type ST_FunctionArgument struct{ ST_VariableType ST_VariableType }

func (_cgbbf ST_ConnectorPoint) Validate() error { return _cgbbf.ValidateWithPath("") }
func (_egfaa ST_TextAnchorVertical) String() string {
	switch _egfaa {
	case 0:
		return ""
	case 1:
		return "\u0074"
	case 2:
		return "\u006d\u0069\u0064"
	case 3:
		return "\u0062"
	}
	return ""
}
func (_eaab *CT_Name) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _eaab.LangAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _e.Sprintf("\u0025\u0076", *_eaab.LangAttr)})
	}
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _e.Sprintf("\u0025\u0076", _eaab.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type ST_AxisType byte

func (_efffb *LayoutDef) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_efffb.CT_DiagramDefinition = *NewCT_DiagramDefinition()
	for _, _gafd := range start.Attr {
		if _gafd.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_decf := _gafd.Value
			_efffb.UniqueIdAttr = &_decf
			continue
		}
		if _gafd.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_cbcc := _gafd.Value
			_efffb.MinVerAttr = &_cbcc
			continue
		}
		if _gafd.Name.Local == "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065" {
			_gccbc := _gafd.Value
			_efffb.DefStyleAttr = &_gccbc
			continue
		}
	}
_acgfa:
	for {
		_edbg, _adbd := d.Token()
		if _adbd != nil {
			return _adbd
		}
		switch _beadg := _edbg.(type) {
		case _a.StartElement:
			switch _beadg.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_acaf := NewCT_Name()
				if _cbbfc := d.DecodeElement(_acaf, &_beadg); _cbbfc != nil {
					return _cbbfc
				}
				_efffb.Title = append(_efffb.Title, _acaf)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_bgged := NewCT_Description()
				if _cbadef := d.DecodeElement(_bgged, &_beadg); _cbadef != nil {
					return _cbadef
				}
				_efffb.Desc = append(_efffb.Desc, _bgged)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_efffb.CatLst = NewCT_Categories()
				if _agaa := d.DecodeElement(_efffb.CatLst, &_beadg); _agaa != nil {
					return _agaa
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0061\u006d\u0070\u0044\u0061\u0074\u0061"}:
				_efffb.SampData = NewCT_SampleData()
				if _bdbb := d.DecodeElement(_efffb.SampData, &_beadg); _bdbb != nil {
					return _bdbb
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073t\u0079\u006c\u0065\u0044\u0061\u0074a"}:
				_efffb.StyleData = NewCT_SampleData()
				if _fdbeg := d.DecodeElement(_efffb.StyleData, &_beadg); _fdbeg != nil {
					return _fdbeg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063l\u0072\u0044\u0061\u0074\u0061"}:
				_efffb.ClrData = NewCT_SampleData()
				if _gcdef := d.DecodeElement(_efffb.ClrData, &_beadg); _gcdef != nil {
					return _gcdef
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				if _gfgd := d.DecodeElement(_efffb.LayoutNode, &_beadg); _gfgd != nil {
					return _gfgd
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_efffb.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _befed := d.DecodeElement(_efffb.ExtLst, &_beadg); _befed != nil {
					return _befed
				}
			default:
				_ag.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u004c\u0061\u0079\u006f\u0075\u0074D\u0065\u0066 \u0025\u0076", _beadg.Name)
				if _cffcd := d.Skip(); _cffcd != nil {
					return _cffcd
				}
			}
		case _a.EndElement:
			break _acgfa
		case _a.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_StyleLabel and its children, prefixing error messages with path
func (_aebff *CT_StyleLabel) ValidateWithPath(path string) error {
	if _aebff.Scene3d != nil {
		if _affb := _aebff.Scene3d.ValidateWithPath(path + "\u002f\u0053\u0063\u0065\u006e\u0065\u0033\u0064"); _affb != nil {
			return _affb
		}
	}
	if _aebff.Sp3d != nil {
		if _gbeg := _aebff.Sp3d.ValidateWithPath(path + "\u002f\u0053\u00703\u0064"); _gbeg != nil {
			return _gbeg
		}
	}
	if _aebff.TxPr != nil {
		if _gbcd := _aebff.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _gbcd != nil {
			return _gbcd
		}
	}
	if _aebff.Style != nil {
		if _gebe := _aebff.Style.ValidateWithPath(path + "\u002f\u0053\u0074\u0079\u006c\u0065"); _gebe != nil {
			return _gebe
		}
	}
	if _aebff.ExtLst != nil {
		if _dfde := _aebff.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dfde != nil {
			return _dfde
		}
	}
	return nil
}

// ValidateWithPath validates the LayoutDef and its children, prefixing error messages with path
func (_bcgb *LayoutDef) ValidateWithPath(path string) error {
	if _aagfa := _bcgb.CT_DiagramDefinition.ValidateWithPath(path); _aagfa != nil {
		return _aagfa
	}
	return nil
}
func (_dcfa ST_ChildDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_dfeg := _a.Attr{}
	_dfeg.Name = name
	switch _dcfa {
	case ST_ChildDirectionUnset:
		_dfeg.Value = ""
	case ST_ChildDirectionHorz:
		_dfeg.Value = "\u0068\u006f\u0072\u007a"
	case ST_ChildDirectionVert:
		_dfeg.Value = "\u0076\u0065\u0072\u0074"
	}
	return _dfeg, nil
}
func (_acdd *ST_ResizeHandlesStr) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_acdd = 0
	case "\u0065\u0078\u0061c\u0074":
		*_acdd = 1
	case "\u0072\u0065\u006c":
		*_acdd = 2
	}
	return nil
}
func (_fbbbg *ColorsDef) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_fbbbg.CT_ColorTransform = *NewCT_ColorTransform()
	for _, _agag := range start.Attr {
		if _agag.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_dgbf := _agag.Value
			_fbbbg.UniqueIdAttr = &_dgbf
			continue
		}
		if _agag.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_gebff := _agag.Value
			_fbbbg.MinVerAttr = &_gebff
			continue
		}
	}
_agef:
	for {
		_fabc, _ccbef := d.Token()
		if _ccbef != nil {
			return _ccbef
		}
		switch _gdcf := _fabc.(type) {
		case _a.StartElement:
			switch _gdcf.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_ggedd := NewCT_CTName()
				if _ddaf := d.DecodeElement(_ggedd, &_gdcf); _ddaf != nil {
					return _ddaf
				}
				_fbbbg.Title = append(_fbbbg.Title, _ggedd)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_fced := NewCT_CTDescription()
				if _fbca := d.DecodeElement(_fced, &_gdcf); _fbca != nil {
					return _fbca
				}
				_fbbbg.Desc = append(_fbbbg.Desc, _fced)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_fbbbg.CatLst = NewCT_CTCategories()
				if _gbcc := d.DecodeElement(_fbbbg.CatLst, &_gdcf); _gbcc != nil {
					return _gbcc
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}:
				_cged := NewCT_CTStyleLabel()
				if _befe := d.DecodeElement(_cged, &_gdcf); _befe != nil {
					return _befe
				}
				_fbbbg.StyleLbl = append(_fbbbg.StyleLbl, _cged)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fbbbg.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _bebaa := d.DecodeElement(_fbbbg.ExtLst, &_gdcf); _bebaa != nil {
					return _bebaa
				}
			default:
				_ag.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u006f\u006c\u006f\u0072\u0073D\u0065\u0066 \u0025\u0076", _gdcf.Name)
				if _cegg := d.Skip(); _cegg != nil {
					return _cegg
				}
			}
		case _a.EndElement:
			break _agef
		case _a.CharData:
		}
	}
	return nil
}
func (_gdag ST_LinearDirection) String() string {
	switch _gdag {
	case 0:
		return ""
	case 1:
		return "\u0066\u0072\u006fm\u004c"
	case 2:
		return "\u0066\u0072\u006fm\u0052"
	case 3:
		return "\u0066\u0072\u006fm\u0054"
	case 4:
		return "\u0066\u0072\u006fm\u0042"
	}
	return ""
}
func NewCT_DataModel() *CT_DataModel {
	_caaee := &CT_DataModel{}
	_caaee.PtLst = NewCT_PtList()
	return _caaee
}
func (_agabg ST_TextBlockDirection) ValidateWithPath(path string) error {
	switch _agabg {
	case 0, 1, 2:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_agabg))
	}
	return nil
}
func (_bcdc ST_ResizeHandlesStr) ValidateWithPath(path string) error {
	switch _bcdc {
	case 0, 1, 2:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bcdc))
	}
	return nil
}

type ST_FunctionOperator byte
type CT_LayoutNodeChoice struct {

	// Algorithm
	Alg *CT_Algorithm

	// Shape
	Shape *CT_Shape

	// Presentation Of
	PresOf *CT_PresentationOf

	// Constraint List
	ConstrLst *CT_Constraints

	// Rule List
	RuleLst *CT_Rules

	// Variable List
	VarLst *CT_LayoutVariablePropertySet

	// For Each
	ForEach *CT_ForEach

	// Layout Node
	LayoutNode *CT_LayoutNode

	// Choose Element
	Choose *CT_Choose
	ExtLst *_b.CT_OfficeArtExtensionList
}

func (_fg *CT_Algorithm) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_fg.TypeAttr = ST_AlgorithmType(1)
	for _, _adc := range start.Attr {
		if _adc.Name.Local == "\u0074\u0079\u0070\u0065" {
			_fg.TypeAttr.UnmarshalXMLAttr(_adc)
			continue
		}
		if _adc.Name.Local == "\u0072\u0065\u0076" {
			_fbgc, _gde := _g.ParseUint(_adc.Value, 10, 32)
			if _gde != nil {
				return _gde
			}
			_gcg := uint32(_fbgc)
			_fg.RevAttr = &_gcg
			continue
		}
	}
_caa:
	for {
		_gdbb, _ge := d.Token()
		if _ge != nil {
			return _ge
		}
		switch _cbgd := _gdbb.(type) {
		case _a.StartElement:
			switch _cbgd.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0061\u0072a\u006d"}:
				_cef := NewCT_Parameter()
				if _age := d.DecodeElement(_cef, &_cbgd); _age != nil {
					return _age
				}
				_fg.Param = append(_fg.Param, _cef)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fg.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _dee := d.DecodeElement(_fg.ExtLst, &_cbgd); _dee != nil {
					return _dee
				}
			default:
				_ag.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_A\u006c\u0067o\u0072\u0069\u0074\u0068\u006d\u0020\u0025\u0076", _cbgd.Name)
				if _bga := d.Skip(); _bga != nil {
					return _bga
				}
			}
		case _a.EndElement:
			break _caa
		case _a.CharData:
		}
	}
	return nil
}
func (_dcbg ST_PtType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dcbg.String(), start)
}

type AG_IteratorAttributes struct {
	AxisAttr          *ST_AxisTypes
	PtTypeAttr        *ST_ElementTypes
	HideLastTransAttr *ST_Booleans
	StAttr            *ST_Ints
	CntAttr           *ST_UnsignedInts
	StepAttr          *ST_Ints
}

func (_dfdc *CT_PtList) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _dfdc.Pt != nil {
		_edbbd := _a.StartElement{Name: _a.Name{Local: "\u0070\u0074"}}
		for _, _afcg := range _dfdc.Pt {
			e.EncodeElement(_afcg, _edbbd)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type ST_ClrAppMethod byte
type CT_OrgChart struct {

	// Show Organization Chart User Interface Value
	ValAttr *bool
}

func (_afgbc *ST_TextDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dbdee, _acfcc := d.Token()
	if _acfcc != nil {
		return _acfcc
	}
	if _bacad, _fbgbb := _dbdee.(_a.EndElement); _fbgbb && _bacad.Name == start.Name {
		*_afgbc = 1
		return nil
	}
	if _adefgf, _gbgcg := _dbdee.(_a.CharData); !_gbgcg {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dbdee)
	} else {
		switch string(_adefgf) {
		case "":
			*_afgbc = 0
		case "\u0066\u0072\u006fm\u0054":
			*_afgbc = 1
		case "\u0066\u0072\u006fm\u0042":
			*_afgbc = 2
		}
	}
	_dbdee, _acfcc = d.Token()
	if _acfcc != nil {
		return _acfcc
	}
	if _efce, _cacfe := _dbdee.(_a.EndElement); _cacfe && _efce.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dbdee)
}
func (_ggdae *StyleDefHdrLst) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ggdae.CT_StyleDefinitionHeaderLst = *NewCT_StyleDefinitionHeaderLst()
_beee:
	for {
		_dbfg, _acca := d.Token()
		if _acca != nil {
			return _acca
		}
		switch _cccd := _dbfg.(type) {
		case _a.StartElement:
			switch _cccd.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "s\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_agge := NewCT_StyleDefinitionHeader()
				if _ebfc := d.DecodeElement(_agge, &_cccd); _ebfc != nil {
					return _ebfc
				}
				_ggdae.StyleDefHdr = append(_ggdae.StyleDefHdr, _agge)
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064r\u004cs\u0074\u0020\u0025\u0076", _cccd.Name)
				if _eafce := d.Skip(); _eafce != nil {
					return _eafce
				}
			}
		case _a.EndElement:
			break _beee
		case _a.CharData:
		}
	}
	return nil
}

// Validate validates the CT_SampleData and its children
func (_fgdb *CT_SampleData) Validate() error {
	return _fgdb.ValidateWithPath("\u0043\u0054\u005f\u0053\u0061\u006d\u0070\u006c\u0065\u0044\u0061\u0074\u0061")
}

// ValidateWithPath validates the CT_AnimLvl and its children, prefixing error messages with path
func (_bgg *CT_AnimLvl) ValidateWithPath(path string) error {
	if _ff := _bgg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ff != nil {
		return _ff
	}
	return nil
}

// ValidateWithPath validates the AG_ConstraintAttributes and its children, prefixing error messages with path
func (_dd *AG_ConstraintAttributes) ValidateWithPath(path string) error {
	if _dd.TypeAttr == ST_ConstraintTypeUnset {
		return _e.Errorf("\u0025\u0073\u002f\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072\u0020\u0069\u0073\u0020a\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _bbg := _dd.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _bbg != nil {
		return _bbg
	}
	if _eb := _dd.ForAttr.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0041\u0074\u0074\u0072"); _eb != nil {
		return _eb
	}
	if _ddb := _dd.PtTypeAttr.ValidateWithPath(path + "/\u0050\u0074\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072"); _ddb != nil {
		return _ddb
	}
	return nil
}

type ST_CxnType byte

func (_gfef *StyleDefHdr) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "s\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072"
	return _gfef.CT_StyleDefinitionHeader.MarshalXML(e, start)
}

type ST_Direction byte

func (_dcddc ST_ChildAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dcddc.String(), start)
}

const (
	ST_AnimOneStrUnset  ST_AnimOneStr = 0
	ST_AnimOneStrNone   ST_AnimOneStr = 1
	ST_AnimOneStrOne    ST_AnimOneStr = 2
	ST_AnimOneStrBranch ST_AnimOneStr = 3
)

func (_afcdb *ST_ConnectorPoint) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dcfd, _dcdec := d.Token()
	if _dcdec != nil {
		return _dcdec
	}
	if _cfdf, _eabgf := _dcfd.(_a.EndElement); _eabgf && _cfdf.Name == start.Name {
		*_afcdb = 1
		return nil
	}
	if _eddge, _gced := _dcfd.(_a.CharData); !_gced {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dcfd)
	} else {
		switch string(_eddge) {
		case "":
			*_afcdb = 0
		case "\u0061\u0075\u0074\u006f":
			*_afcdb = 1
		case "\u0062\u0043\u0074\u0072":
			*_afcdb = 2
		case "\u0063\u0074\u0072":
			*_afcdb = 3
		case "\u006d\u0069\u0064\u004c":
			*_afcdb = 4
		case "\u006d\u0069\u0064\u0052":
			*_afcdb = 5
		case "\u0074\u0043\u0074\u0072":
			*_afcdb = 6
		case "\u0062\u004c":
			*_afcdb = 7
		case "\u0062\u0052":
			*_afcdb = 8
		case "\u0074\u004c":
			*_afcdb = 9
		case "\u0074\u0052":
			*_afcdb = 10
		case "\u0072\u0061\u0064\u0069\u0061\u006c":
			*_afcdb = 11
		}
	}
	_dcfd, _dcdec = d.Token()
	if _dcdec != nil {
		return _dcdec
	}
	if _bdegg, _eeacfg := _dcfd.(_a.EndElement); _eeacfg && _bdegg.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dcfd)
}

// Validate validates the StyleDef and its children
func (_caca *StyleDef) Validate() error {
	return _caca.ValidateWithPath("\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066")
}
func (_ebbd ST_LayoutShapeType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _ebbd.ST_ShapeType != _b.ST_ShapeTypeUnset {
		e.EncodeToken(_a.CharData(_ebbd.ST_ShapeType.String()))
	}
	if _ebbd.ST_OutputShapeType != ST_OutputShapeTypeUnset {
		e.EncodeToken(_a.CharData(_ebbd.ST_OutputShapeType.String()))
	}
	return e.EncodeToken(_a.EndElement{Name: start.Name})
}

type CT_ResizeHandles struct {

	// Shape Resize Style Type
	ValAttr ST_ResizeHandlesStr
}

func NewCT_SDName() *CT_SDName { _ccgd := &CT_SDName{}; return _ccgd }
func NewCT_DiagramDefinition() *CT_DiagramDefinition {
	_babd := &CT_DiagramDefinition{}
	_babd.LayoutNode = NewCT_LayoutNode()
	return _babd
}

// Validate validates the CT_OtherwiseChoice and its children
func (_afde *CT_OtherwiseChoice) Validate() error {
	return _afde.ValidateWithPath("\u0043T\u005fO\u0074\u0068\u0065\u0072\u0077i\u0073\u0065C\u0068\u006f\u0069\u0063\u0065")
}
func NewCT_StyleDefinitionHeader() *CT_StyleDefinitionHeader {
	_efbd := &CT_StyleDefinitionHeader{}
	return _efbd
}
func (_egeb *ST_SecondaryChildAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dfgb, _cfgd := d.Token()
	if _cfgd != nil {
		return _cfgd
	}
	if _aefcb, _adcgf := _dfgb.(_a.EndElement); _adcgf && _aefcb.Name == start.Name {
		*_egeb = 1
		return nil
	}
	if _dege, _dffff := _dfgb.(_a.CharData); !_dffff {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dfgb)
	} else {
		switch string(_dege) {
		case "":
			*_egeb = 0
		case "\u006e\u006f\u006e\u0065":
			*_egeb = 1
		case "\u0074":
			*_egeb = 2
		case "\u0062":
			*_egeb = 3
		case "\u006c":
			*_egeb = 4
		case "\u0072":
			*_egeb = 5
		}
	}
	_dfgb, _cfgd = d.Token()
	if _cfgd != nil {
		return _cfgd
	}
	if _gcfde, _ageedf := _dfgb.(_a.EndElement); _ageedf && _gcfde.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dfgb)
}

type CT_Colors struct {

	// Color Application Method Type
	MethAttr ST_ClrAppMethod

	// Hue Direction
	HueDirAttr     ST_HueDir
	EG_ColorChoice []*_b.EG_ColorChoice
}

func (_agde *ST_HierarchyAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dabb, _efbg := d.Token()
	if _efbg != nil {
		return _efbg
	}
	if _ggcf, _gcfg := _dabb.(_a.EndElement); _gcfg && _ggcf.Name == start.Name {
		*_agde = 1
		return nil
	}
	if _deecg, _dfbdd := _dabb.(_a.CharData); !_dfbdd {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dabb)
	} else {
		switch string(_deecg) {
		case "":
			*_agde = 0
		case "\u0074\u004c":
			*_agde = 1
		case "\u0074\u0052":
			*_agde = 2
		case "\u0074\u0043\u0074\u0072\u0043\u0068":
			*_agde = 3
		case "\u0074C\u0074\u0072\u0044\u0065\u0073":
			*_agde = 4
		case "\u0062\u004c":
			*_agde = 5
		case "\u0062\u0052":
			*_agde = 6
		case "\u0062\u0043\u0074\u0072\u0043\u0068":
			*_agde = 7
		case "\u0062C\u0074\u0072\u0044\u0065\u0073":
			*_agde = 8
		case "\u006c\u0054":
			*_agde = 9
		case "\u006c\u0042":
			*_agde = 10
		case "\u006c\u0043\u0074\u0072\u0043\u0068":
			*_agde = 11
		case "\u006cC\u0074\u0072\u0044\u0065\u0073":
			*_agde = 12
		case "\u0072\u0054":
			*_agde = 13
		case "\u0072\u0042":
			*_agde = 14
		case "\u0072\u0043\u0074\u0072\u0043\u0068":
			*_agde = 15
		case "\u0072C\u0074\u0072\u0044\u0065\u0073":
			*_agde = 16
		}
	}
	_dabb, _efbg = d.Token()
	if _efbg != nil {
		return _efbg
	}
	if _fdgeb, _bage := _dabb.(_a.EndElement); _bage && _fdgeb.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dabb)
}

type CT_SampleData struct {

	// Use Default
	UseDefAttr *bool

	// Data Model
	DataModel *CT_DataModel
}

func (_dcdc *CT_ChildPref) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _bebeg := range start.Attr {
		if _bebeg.Name.Local == "\u0076\u0061\u006c" {
			_gccd, _eeec := _g.ParseInt(_bebeg.Value, 10, 32)
			if _eeec != nil {
				return _eeec
			}
			_cfdd := int32(_gccd)
			_dcdc.ValAttr = &_cfdd
			continue
		}
	}
	for {
		_fdbe, _cabg := d.Token()
		if _cabg != nil {
			return _e.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0043\u0068i\u006c\u0064\u0050\u0072\u0065\u0066\u003a\u0020\u0025\u0073", _cabg)
		}
		if _ceac, _dbec := _fdbe.(_a.EndElement); _dbec && _ceac.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bcff *ST_RotationPath) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_febd, _bfeae := d.Token()
	if _bfeae != nil {
		return _bfeae
	}
	if _ffcg, _bgde := _febd.(_a.EndElement); _bgde && _ffcg.Name == start.Name {
		*_bcff = 1
		return nil
	}
	if _dcgg, _fbcg := _febd.(_a.CharData); !_fbcg {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _febd)
	} else {
		switch string(_dcgg) {
		case "":
			*_bcff = 0
		case "\u006e\u006f\u006e\u0065":
			*_bcff = 1
		case "\u0061l\u006f\u006e\u0067\u0050\u0061\u0074h":
			*_bcff = 2
		}
	}
	_febd, _bfeae = d.Token()
	if _bfeae != nil {
		return _bfeae
	}
	if _gdeefb, _gebef := _febd.(_a.EndElement); _gebef && _gdeefb.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _febd)
}
func (_cfecc ST_HierarchyAlignment) Validate() error { return _cfecc.ValidateWithPath("") }

type CT_Description struct {

	// Language
	LangAttr *string

	// Value
	ValAttr string
}

func (_gdgd ST_AutoTextRotation) ValidateWithPath(path string) error {
	switch _gdgd {
	case 0, 1, 2, 3:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gdgd))
	}
	return nil
}
func (_adefa *CT_Shape) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _adagc := range start.Attr {
		if _adagc.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _adagc.Name.Local == "\u0062\u006c\u0069\u0070" || _adagc.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _adagc.Name.Local == "\u0062\u006c\u0069\u0070" {
			_bebd := _adagc.Value
			_adefa.BlipAttr = &_bebd
			continue
		}
		if _adagc.Name.Local == "\u0072\u006f\u0074" {
			_dgaa, _efaag := _g.ParseFloat(_adagc.Value, 64)
			if _efaag != nil {
				return _efaag
			}
			_adefa.RotAttr = &_dgaa
			continue
		}
		if _adagc.Name.Local == "\u0074\u0079\u0070\u0065" {
			_dcdd, _cgafbd := ParseUnionST_LayoutShapeType(_adagc.Value)
			if _cgafbd != nil {
				return _cgafbd
			}
			_adefa.TypeAttr = &_dcdd
			continue
		}
		if _adagc.Name.Local == "\u007aO\u0072\u0064\u0065\u0072\u004f\u0066f" {
			_dbff, _agee := _g.ParseInt(_adagc.Value, 10, 32)
			if _agee != nil {
				return _agee
			}
			_dcba := int32(_dbff)
			_adefa.ZOrderOffAttr = &_dcba
			continue
		}
		if _adagc.Name.Local == "\u0068\u0069\u0064\u0065\u0047\u0065\u006f\u006d" {
			_fcfc, _ggag := _g.ParseBool(_adagc.Value)
			if _ggag != nil {
				return _ggag
			}
			_adefa.HideGeomAttr = &_fcfc
			continue
		}
		if _adagc.Name.Local == "\u006ck\u0054\u0078\u0045\u006e\u0074\u0072y" {
			_defa, _fgedg := _g.ParseBool(_adagc.Value)
			if _fgedg != nil {
				return _fgedg
			}
			_adefa.LkTxEntryAttr = &_defa
			continue
		}
		if _adagc.Name.Local == "\u0062l\u0069\u0070\u0050\u0068\u006c\u0064r" {
			_fbfaf, _dce := _g.ParseBool(_adagc.Value)
			if _dce != nil {
				return _dce
			}
			_adefa.BlipPhldrAttr = &_fbfaf
			continue
		}
	}
_adac:
	for {
		_ddbbf, _ceff := d.Token()
		if _ceff != nil {
			return _ceff
		}
		switch _ebag := _ddbbf.(type) {
		case _a.StartElement:
			switch _ebag.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u0064\u006a\u004c\u0073\u0074"}:
				_adefa.AdjLst = NewCT_AdjLst()
				if _feadc := d.DecodeElement(_adefa.AdjLst, &_ebag); _feadc != nil {
					return _feadc
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_adefa.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _dage := d.DecodeElement(_adefa.ExtLst, &_ebag); _dage != nil {
					return _dage
				}
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065\u0020\u0025\u0076", _ebag.Name)
				if _abab := d.Skip(); _abab != nil {
					return _abab
				}
			}
		case _a.EndElement:
			break _adac
		case _a.CharData:
		}
	}
	return nil
}

// Validate validates the CT_WhenChoice and its children
func (_cead *CT_WhenChoice) Validate() error {
	return _cead.ValidateWithPath("\u0043\u0054\u005f\u0057\u0068\u0065\u006e\u0043\u0068\u006f\u0069\u0063\u0065")
}
func (_dgbd ST_BoolOperator) ValidateWithPath(path string) error {
	switch _dgbd {
	case 0, 1, 2, 3, 4:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dgbd))
	}
	return nil
}

const (
	ST_NodeHorizontalAlignmentUnset ST_NodeHorizontalAlignment = 0
	ST_NodeHorizontalAlignmentL     ST_NodeHorizontalAlignment = 1
	ST_NodeHorizontalAlignmentCtr   ST_NodeHorizontalAlignment = 2
	ST_NodeHorizontalAlignmentR     ST_NodeHorizontalAlignment = 3
)

func (_afaf ST_CxnType) Validate() error { return _afaf.ValidateWithPath("") }
func (_cadc ST_ContinueDirection) ValidateWithPath(path string) error {
	switch _cadc {
	case 0, 1, 2:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cadc))
	}
	return nil
}
func NewCT_AnimOne() *CT_AnimOne { _gdbd := &CT_AnimOne{}; return _gdbd }
func (_gdddg ST_Direction) ValidateWithPath(path string) error {
	switch _gdddg {
	case 0, 1, 2:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gdddg))
	}
	return nil
}
func (_gbff ST_PtType) ValidateWithPath(path string) error {
	switch _gbff {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gbff))
	}
	return nil
}
func NewCT_LayoutNodeChoice() *CT_LayoutNodeChoice { _fbfa := &CT_LayoutNodeChoice{}; return _fbfa }
func (_cgcbe ST_ChildDirection) ValidateWithPath(path string) error {
	switch _cgcbe {
	case 0, 1, 2:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cgcbe))
	}
	return nil
}
func (_gecf ST_HueDir) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_fbfbf := _a.Attr{}
	_fbfbf.Name = name
	switch _gecf {
	case ST_HueDirUnset:
		_fbfbf.Value = ""
	case ST_HueDirCw:
		_fbfbf.Value = "\u0063\u0077"
	case ST_HueDirCcw:
		_fbfbf.Value = "\u0063\u0063\u0077"
	}
	return _fbfbf, nil
}

// ValidateWithPath validates the ColorsDefHdr and its children, prefixing error messages with path
func (_cafbg *ColorsDefHdr) ValidateWithPath(path string) error {
	if _gfdg := _cafbg.CT_ColorTransformHeader.ValidateWithPath(path); _gfdg != nil {
		return _gfdg
	}
	return nil
}
func (_defaf ST_ConnectorDimension) String() string {
	switch _defaf {
	case 0:
		return ""
	case 1:
		return "\u0031\u0044"
	case 2:
		return "\u0032\u0044"
	case 3:
		return "\u0063\u0075\u0073\u0074"
	}
	return ""
}
func (_aacdc ST_Direction) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_gdaca := _a.Attr{}
	_gdaca.Name = name
	switch _aacdc {
	case ST_DirectionUnset:
		_gdaca.Value = ""
	case ST_DirectionNorm:
		_gdaca.Value = "\u006e\u006f\u0072\u006d"
	case ST_DirectionRev:
		_gdaca.Value = "\u0072\u0065\u0076"
	}
	return _gdaca, nil
}

// ValidateWithPath validates the CT_BulletEnabled and its children, prefixing error messages with path
func (_gaag *CT_BulletEnabled) ValidateWithPath(path string) error { return nil }
func NewStyleDef() *StyleDef {
	_bfefe := &StyleDef{}
	_bfefe.CT_StyleDefinition = *NewCT_StyleDefinition()
	return _bfefe
}

// Validate validates the CT_NumericRule and its children
func (_bagf *CT_NumericRule) Validate() error {
	return _bagf.ValidateWithPath("\u0043\u0054\u005f\u004e\u0075\u006d\u0065\u0072\u0069c\u0052\u0075\u006c\u0065")
}

// Validate validates the CT_ForEach and its children
func (_aagf *CT_ForEach) Validate() error {
	return _aagf.ValidateWithPath("\u0043\u0054\u005f\u0046\u006f\u0072\u0045\u0061\u0063\u0068")
}
func (_cgaa *CT_Cxn) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _agfa := range start.Attr {
		if _agfa.Name.Local == "\u006do\u0064\u0065\u006c\u0049\u0064" {
			_bdd, _fcg := ParseUnionST_ModelId(_agfa.Value)
			if _fcg != nil {
				return _fcg
			}
			_cgaa.ModelIdAttr = _bdd
			continue
		}
		if _agfa.Name.Local == "\u0074\u0079\u0070\u0065" {
			_cgaa.TypeAttr.UnmarshalXMLAttr(_agfa)
			continue
		}
		if _agfa.Name.Local == "\u0073\u0072\u0063I\u0064" {
			_edeb, _dgdce := ParseUnionST_ModelId(_agfa.Value)
			if _dgdce != nil {
				return _dgdce
			}
			_cgaa.SrcIdAttr = _edeb
			continue
		}
		if _agfa.Name.Local == "\u0064\u0065\u0073\u0074\u0049\u0064" {
			_eccf, _ggfa := ParseUnionST_ModelId(_agfa.Value)
			if _ggfa != nil {
				return _ggfa
			}
			_cgaa.DestIdAttr = _eccf
			continue
		}
		if _agfa.Name.Local == "\u0073\u0072\u0063\u004f\u0072\u0064" {
			_fde, _agab := _g.ParseUint(_agfa.Value, 10, 32)
			if _agab != nil {
				return _agab
			}
			_cgaa.SrcOrdAttr = uint32(_fde)
			continue
		}
		if _agfa.Name.Local == "\u0064e\u0073\u0074\u004f\u0072\u0064" {
			_debd, _edcb := _g.ParseUint(_agfa.Value, 10, 32)
			if _edcb != nil {
				return _edcb
			}
			_cgaa.DestOrdAttr = uint32(_debd)
			continue
		}
		if _agfa.Name.Local == "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073\u0049\u0064" {
			_ddbb, _cggb := ParseUnionST_ModelId(_agfa.Value)
			if _cggb != nil {
				return _cggb
			}
			_cgaa.ParTransIdAttr = &_ddbb
			continue
		}
		if _agfa.Name.Local == "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073\u0049\u0064" {
			_gfg, _deeec := ParseUnionST_ModelId(_agfa.Value)
			if _deeec != nil {
				return _deeec
			}
			_cgaa.SibTransIdAttr = &_gfg
			continue
		}
		if _agfa.Name.Local == "\u0070\u0072\u0065\u0073\u0049\u0064" {
			_eggd := _agfa.Value
			_cgaa.PresIdAttr = &_eggd
			continue
		}
	}
_bced:
	for {
		_aed, _cfddf := d.Token()
		if _cfddf != nil {
			return _cfddf
		}
		switch _bgfba := _aed.(type) {
		case _a.StartElement:
			switch _bgfba.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cgaa.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _agfd := d.DecodeElement(_cgaa.ExtLst, &_bgfba); _agfd != nil {
					return _agfd
				}
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0078\u006e\u0020\u0025\u0076", _bgfba.Name)
				if _dbab := d.Skip(); _dbab != nil {
					return _dbab
				}
			}
		case _a.EndElement:
			break _bced
		case _a.CharData:
		}
	}
	return nil
}
func (_dcfae *ST_NodeVerticalAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_fcad, _gfgg := d.Token()
	if _gfgg != nil {
		return _gfgg
	}
	if _afffg, _bgddf := _fcad.(_a.EndElement); _bgddf && _afffg.Name == start.Name {
		*_dcfae = 1
		return nil
	}
	if _cadf, _ceabg := _fcad.(_a.CharData); !_ceabg {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fcad)
	} else {
		switch string(_cadf) {
		case "":
			*_dcfae = 0
		case "\u0074":
			*_dcfae = 1
		case "\u006d\u0069\u0064":
			*_dcfae = 2
		case "\u0062":
			*_dcfae = 3
		}
	}
	_fcad, _gfgg = d.Token()
	if _gfgg != nil {
		return _gfgg
	}
	if _gdabd, _abfda := _fcad.(_a.EndElement); _abfda && _gdabd.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fcad)
}

type CT_Algorithm struct {

	// Algorithm Type
	TypeAttr ST_AlgorithmType

	// Revision Number
	RevAttr *uint32

	// Parameter
	Param  []*CT_Parameter
	ExtLst *_b.CT_OfficeArtExtensionList
}
type ST_ContinueDirection byte

func (_fdee ST_ClrAppMethod) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_gaabc := _a.Attr{}
	_gaabc.Name = name
	switch _fdee {
	case ST_ClrAppMethodUnset:
		_gaabc.Value = ""
	case ST_ClrAppMethodSpan:
		_gaabc.Value = "\u0073\u0070\u0061\u006e"
	case ST_ClrAppMethodCycle:
		_gaabc.Value = "\u0063\u0079\u0063l\u0065"
	case ST_ClrAppMethodRepeat:
		_gaabc.Value = "\u0072\u0065\u0070\u0065\u0061\u0074"
	}
	return _gaabc, nil
}
func (_ccbed *ST_SecondaryLinearDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_decb, _cafe := d.Token()
	if _cafe != nil {
		return _cafe
	}
	if _efdb, _ecfef := _decb.(_a.EndElement); _ecfef && _efdb.Name == start.Name {
		*_ccbed = 1
		return nil
	}
	if _fbgea, _egda := _decb.(_a.CharData); !_egda {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _decb)
	} else {
		switch string(_fbgea) {
		case "":
			*_ccbed = 0
		case "\u006e\u006f\u006e\u0065":
			*_ccbed = 1
		case "\u0066\u0072\u006fm\u004c":
			*_ccbed = 2
		case "\u0066\u0072\u006fm\u0052":
			*_ccbed = 3
		case "\u0066\u0072\u006fm\u0054":
			*_ccbed = 4
		case "\u0066\u0072\u006fm\u0042":
			*_ccbed = 5
		}
	}
	_decb, _cafe = d.Token()
	if _cafe != nil {
		return _cafe
	}
	if _edad, _fade := _decb.(_a.EndElement); _fade && _edad.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _decb)
}
func NewLayoutDef() *LayoutDef {
	_ddgc := &LayoutDef{}
	_ddgc.CT_DiagramDefinition = *NewCT_DiagramDefinition()
	return _ddgc
}

// ValidateWithPath validates the CT_DiagramDefinitionHeader and its children, prefixing error messages with path
func (_fed *CT_DiagramDefinitionHeader) ValidateWithPath(path string) error {
	for _bedg, _fbdb := range _fed.Title {
		if _bbef := _fbdb.ValidateWithPath(_e.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _bedg)); _bbef != nil {
			return _bbef
		}
	}
	for _fgd, _bfea := range _fed.Desc {
		if _ddfb := _bfea.ValidateWithPath(_e.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _fgd)); _ddfb != nil {
			return _ddfb
		}
	}
	if _fed.CatLst != nil {
		if _efg := _fed.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _efg != nil {
			return _efg
		}
	}
	if _fed.ExtLst != nil {
		if _cgeb := _fed.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cgeb != nil {
			return _cgeb
		}
	}
	return nil
}
func (_defc *CT_SDCategories) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_abac:
	for {
		_aaeba, _ccdbc := d.Token()
		if _ccdbc != nil {
			return _ccdbc
		}
		switch _cdga := _aaeba.(type) {
		case _a.StartElement:
			switch _cdga.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074"}:
				_ebg := NewCT_SDCategory()
				if _acfd := d.DecodeElement(_ebg, &_cdga); _acfd != nil {
					return _acfd
				}
				_defc.Cat = append(_defc.Cat, _ebg)
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0044\u0043a\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073\u0020\u0025\u0076", _cdga.Name)
				if _dgbgf := d.Skip(); _dgbgf != nil {
					return _dgbgf
				}
			}
		case _a.EndElement:
			break _abac
		case _a.CharData:
		}
	}
	return nil
}
func (_badbf *ST_PyramidAccentPosition) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_badbf = 0
	case "\u0062\u0065\u0066":
		*_badbf = 1
	case "\u0061\u0066\u0074":
		*_badbf = 2
	}
	return nil
}

type ST_Ints []int32

func NewCT_RelIds() *CT_RelIds { _fcggc := &CT_RelIds{}; return _fcggc }

type CT_RelIds struct {
	DmAttr string
	LoAttr string
	QsAttr string
	CsAttr string
}
type ST_ConnectorDimension byte

func (_addc ST_FunctionType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_gdbgg := _a.Attr{}
	_gdbgg.Name = name
	switch _addc {
	case ST_FunctionTypeUnset:
		_gdbgg.Value = ""
	case ST_FunctionTypeCnt:
		_gdbgg.Value = "\u0063\u006e\u0074"
	case ST_FunctionTypePos:
		_gdbgg.Value = "\u0070\u006f\u0073"
	case ST_FunctionTypeRevPos:
		_gdbgg.Value = "\u0072\u0065\u0076\u0050\u006f\u0073"
	case ST_FunctionTypePosEven:
		_gdbgg.Value = "\u0070o\u0073\u0045\u0076\u0065\u006e"
	case ST_FunctionTypePosOdd:
		_gdbgg.Value = "\u0070\u006f\u0073\u004f\u0064\u0064"
	case ST_FunctionTypeVar:
		_gdbgg.Value = "\u0076\u0061\u0072"
	case ST_FunctionTypeDepth:
		_gdbgg.Value = "\u0064\u0065\u0070t\u0068"
	case ST_FunctionTypeMaxDepth:
		_gdbgg.Value = "\u006d\u0061\u0078\u0044\u0065\u0070\u0074\u0068"
	}
	return _gdbgg, nil
}
func (_eegdc ST_GrowDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_eegdc.String(), start)
}
func (_agdcb *ST_ParameterVal) ValidateWithPath(path string) error {
	_fggc := []string{}
	if _agdcb.ST_DiagramHorizontalAlignment != ST_DiagramHorizontalAlignmentUnset {
		_fggc = append(_fggc, "\u0053\u0054_\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0048\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0041\u006c\u0069\u0067\u006eme\u006e\u0074")
	}
	if _agdcb.ST_VerticalAlignment != ST_VerticalAlignmentUnset {
		_fggc = append(_fggc, "S\u0054_\u0056\u0065\u0072\u0074\u0069\u0063\u0061\u006cA\u006c\u0069\u0067\u006eme\u006e\u0074")
	}
	if _agdcb.ST_ChildDirection != ST_ChildDirectionUnset {
		_fggc = append(_fggc, "\u0053\u0054\u005f\u0043\u0068\u0069\u006c\u0064\u0044\u0069\u0072\u0065c\u0074\u0069\u006f\u006e")
	}
	if _agdcb.ST_ChildAlignment != ST_ChildAlignmentUnset {
		_fggc = append(_fggc, "\u0053\u0054\u005f\u0043\u0068\u0069\u006c\u0064\u0041\u006c\u0069\u0067n\u006d\u0065\u006e\u0074")
	}
	if _agdcb.ST_SecondaryChildAlignment != ST_SecondaryChildAlignmentUnset {
		_fggc = append(_fggc, "\u0053\u0054\u005f\u0053\u0065\u0063\u006f\u006e\u0064\u0061\u0072y\u0043\u0068\u0069\u006c\u0064\u0041\u006c\u0069\u0067\u006em\u0065\u006e\u0074")
	}
	if _agdcb.ST_LinearDirection != ST_LinearDirectionUnset {
		_fggc = append(_fggc, "\u0053T\u005fL\u0069\u006e\u0065\u0061\u0072D\u0069\u0072e\u0063\u0074\u0069\u006f\u006e")
	}
	if _agdcb.ST_SecondaryLinearDirection != ST_SecondaryLinearDirectionUnset {
		_fggc = append(_fggc, "S\u0054\u005f\u0053\u0065\u0063\u006fn\u0064\u0061\u0072\u0079\u004c\u0069\u006e\u0065\u0061r\u0044\u0069\u0072e\u0063t\u0069\u006f\u006e")
	}
	if _agdcb.ST_StartingElement != ST_StartingElementUnset {
		_fggc = append(_fggc, "\u0053T\u005fS\u0074\u0061\u0072\u0074\u0069n\u0067\u0045l\u0065\u006d\u0065\u006e\u0074")
	}
	if _agdcb.ST_BendPoint != ST_BendPointUnset {
		_fggc = append(_fggc, "\u0053\u0054\u005fB\u0065\u006e\u0064\u0050\u006f\u0069\u006e\u0074")
	}
	if _agdcb.ST_ConnectorRouting != ST_ConnectorRoutingUnset {
		_fggc = append(_fggc, "\u0053\u0054\u005f\u0043on\u006e\u0065\u0063\u0074\u006f\u0072\u0052\u006f\u0075\u0074\u0069\u006e\u0067")
	}
	if _agdcb.ST_ArrowheadStyle != ST_ArrowheadStyleUnset {
		_fggc = append(_fggc, "\u0053\u0054\u005f\u0041\u0072\u0072\u006f\u0077\u0068\u0065\u0061\u0064S\u0074\u0079\u006c\u0065")
	}
	if _agdcb.ST_ConnectorDimension != ST_ConnectorDimensionUnset {
		_fggc = append(_fggc, "S\u0054\u005f\u0043\u006fnn\u0065c\u0074\u006f\u0072\u0044\u0069m\u0065\u006e\u0073\u0069\u006f\u006e")
	}
	if _agdcb.ST_RotationPath != ST_RotationPathUnset {
		_fggc = append(_fggc, "\u0053T\u005fR\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0050\u0061\u0074\u0068")
	}
	if _agdcb.ST_CenterShapeMapping != ST_CenterShapeMappingUnset {
		_fggc = append(_fggc, "S\u0054\u005f\u0043\u0065nt\u0065r\u0053\u0068\u0061\u0070\u0065M\u0061\u0070\u0070\u0069\u006e\u0067")
	}
	if _agdcb.ST_NodeHorizontalAlignment != ST_NodeHorizontalAlignmentUnset {
		_fggc = append(_fggc, "\u0053\u0054\u005f\u004e\u006f\u0064\u0065\u0048\u006f\u0072\u0069z\u006f\u006e\u0074\u0061\u006c\u0041\u006c\u0069\u0067\u006em\u0065\u006e\u0074")
	}
	if _agdcb.ST_NodeVerticalAlignment != ST_NodeVerticalAlignmentUnset {
		_fggc = append(_fggc, "\u0053T\u005f\u004e\u006f\u0064\u0065\u0056\u0065\u0072\u0074\u0069\u0063a\u006c\u0041\u006c\u0069\u0067\u006e\u006d\u0065\u006e\u0074")
	}
	if _agdcb.ST_FallbackDimension != ST_FallbackDimensionUnset {
		_fggc = append(_fggc, "S\u0054_\u0046\u0061\u006c\u006c\u0062\u0061\u0063\u006bD\u0069\u006d\u0065\u006esi\u006f\u006e")
	}
	if _agdcb.ST_TextDirection != ST_TextDirectionUnset {
		_fggc = append(_fggc, "\u0053\u0054_\u0054\u0065\u0078t\u0044\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e")
	}
	if _agdcb.ST_PyramidAccentPosition != ST_PyramidAccentPositionUnset {
		_fggc = append(_fggc, "\u0053T\u005f\u0050\u0079\u0072\u0061\u006d\u0069\u0064\u0041\u0063\u0063e\u006e\u0074\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e")
	}
	if _agdcb.ST_PyramidAccentTextMargin != ST_PyramidAccentTextMarginUnset {
		_fggc = append(_fggc, "\u0053\u0054\u005f\u0050\u0079\u0072\u0061\u006d\u0069\u0064\u0041c\u0063\u0065\u006e\u0074\u0054\u0065\u0078\u0074\u004d\u0061r\u0067\u0069\u006e")
	}
	if _agdcb.ST_TextBlockDirection != ST_TextBlockDirectionUnset {
		_fggc = append(_fggc, "S\u0054\u005f\u0054\u0065xt\u0042l\u006f\u0063\u006b\u0044\u0069r\u0065\u0063\u0074\u0069\u006f\u006e")
	}
	if _agdcb.ST_TextAnchorHorizontal != ST_TextAnchorHorizontalUnset {
		_fggc = append(_fggc, "\u0053\u0054\u005fTe\u0078\u0074\u0041\u006e\u0063\u0068\u006f\u0072\u0048\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c")
	}
	if _agdcb.ST_TextAnchorVertical != ST_TextAnchorVerticalUnset {
		_fggc = append(_fggc, "S\u0054\u005f\u0054\u0065xt\u0041n\u0063\u0068\u006f\u0072\u0056e\u0072\u0074\u0069\u0063\u0061\u006c")
	}
	if _agdcb.ST_DiagramTextAlignment != ST_DiagramTextAlignmentUnset {
		_fggc = append(_fggc, "\u0053\u0054\u005fDi\u0061\u0067\u0072\u0061\u006d\u0054\u0065\u0078\u0074\u0041\u006c\u0069\u0067\u006e\u006d\u0065\u006e\u0074")
	}
	if _agdcb.ST_AutoTextRotation != ST_AutoTextRotationUnset {
		_fggc = append(_fggc, "\u0053\u0054\u005f\u0041ut\u006f\u0054\u0065\u0078\u0074\u0052\u006f\u0074\u0061\u0074\u0069\u006f\u006e")
	}
	if _agdcb.ST_GrowDirection != ST_GrowDirectionUnset {
		_fggc = append(_fggc, "\u0053\u0054_\u0047\u0072\u006fw\u0044\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e")
	}
	if _agdcb.ST_FlowDirection != ST_FlowDirectionUnset {
		_fggc = append(_fggc, "\u0053\u0054_\u0046\u006c\u006fw\u0044\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e")
	}
	if _agdcb.ST_ContinueDirection != ST_ContinueDirectionUnset {
		_fggc = append(_fggc, "S\u0054_\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065D\u0069\u0072\u0065\u0063ti\u006f\u006e")
	}
	if _agdcb.ST_Breakpoint != ST_BreakpointUnset {
		_fggc = append(_fggc, "\u0053\u0054\u005f\u0042\u0072\u0065\u0061\u006b\u0070\u006f\u0069\u006e\u0074")
	}
	if _agdcb.ST_Offset != ST_OffsetUnset {
		_fggc = append(_fggc, "\u0053T\u005f\u004f\u0066\u0066\u0073\u0065t")
	}
	if _agdcb.ST_HierarchyAlignment != ST_HierarchyAlignmentUnset {
		_fggc = append(_fggc, "S\u0054\u005f\u0048\u0069er\u0061r\u0063\u0068\u0079\u0041\u006ci\u0067\u006e\u006d\u0065\u006e\u0074")
	}
	if _agdcb.Int32 != nil {
		_fggc = append(_fggc, "\u0049\u006e\u00743\u0032")
	}
	if _agdcb.Float64 != nil {
		_fggc = append(_fggc, "\u0046l\u006f\u0061\u0074\u0036\u0034")
	}
	if _agdcb.Bool != nil {
		_fggc = append(_fggc, "\u0042\u006f\u006f\u006c")
	}
	if _agdcb.StringVal != nil {
		_fggc = append(_fggc, "\u0053t\u0072\u0069\u006e\u0067\u0056\u0061l")
	}
	if _agdcb.ST_ConnectorPoint != ST_ConnectorPointUnset {
		_fggc = append(_fggc, "\u0053\u0054\u005f\u0043\u006f\u006e\u006e\u0065\u0063\u0074\u006f\u0072P\u006f\u0069\u006e\u0074")
	}
	if len(_fggc) > 1 {
		return _e.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _fggc)
	}
	return nil
}
func NewCT_WhenChoice() *CT_WhenChoice { _bcbff := &CT_WhenChoice{}; return _bcbff }
func (_edggb *ST_AutoTextRotation) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gdcde, _ecbgb := d.Token()
	if _ecbgb != nil {
		return _ecbgb
	}
	if _dbbaa, _dfcg := _gdcde.(_a.EndElement); _dfcg && _dbbaa.Name == start.Name {
		*_edggb = 1
		return nil
	}
	if _fedc, _ccccd := _gdcde.(_a.CharData); !_ccccd {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gdcde)
	} else {
		switch string(_fedc) {
		case "":
			*_edggb = 0
		case "\u006e\u006f\u006e\u0065":
			*_edggb = 1
		case "\u0075\u0070\u0072":
			*_edggb = 2
		case "\u0067\u0072\u0061\u0076":
			*_edggb = 3
		}
	}
	_gdcde, _ecbgb = d.Token()
	if _ecbgb != nil {
		return _ecbgb
	}
	if _agaf, _begcc := _gdcde.(_a.EndElement); _begcc && _agaf.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gdcde)
}
func (_gggeb ST_TextAnchorHorizontal) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_ggce := _a.Attr{}
	_ggce.Name = name
	switch _gggeb {
	case ST_TextAnchorHorizontalUnset:
		_ggce.Value = ""
	case ST_TextAnchorHorizontalNone:
		_ggce.Value = "\u006e\u006f\u006e\u0065"
	case ST_TextAnchorHorizontalCtr:
		_ggce.Value = "\u0063\u0074\u0072"
	}
	return _ggce, nil
}

// ValidateWithPath validates the ColorsDefHdrLst and its children, prefixing error messages with path
func (_gdff *ColorsDefHdrLst) ValidateWithPath(path string) error {
	if _ggdcd := _gdff.CT_ColorTransformHeaderLst.ValidateWithPath(path); _ggdcd != nil {
		return _ggdcd
	}
	return nil
}
func (_fag *CT_Description) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _fag.LangAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _e.Sprintf("\u0025\u0076", *_fag.LangAttr)})
	}
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _e.Sprintf("\u0025\u0076", _fag.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func NewCT_SDCategory() *CT_SDCategory {
	_acbg := &CT_SDCategory{}
	return _acbg
}

// Validate validates the CT_Direction and its children
func (_ddce *CT_Direction) Validate() error {
	return _ddce.ValidateWithPath("\u0043\u0054\u005fD\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e")
}
func (_dede *CT_LayoutNode) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _dede.NameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _e.Sprintf("\u0025\u0076", *_dede.NameAttr)})
	}
	if _dede.StyleLblAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}, Value: _e.Sprintf("\u0025\u0076", *_dede.StyleLblAttr)})
	}
	if _dede.ChOrderAttr != ST_ChildOrderTypeUnset {
		_efb, _fdfb := _dede.ChOrderAttr.MarshalXMLAttr(_a.Name{Local: "\u0063h\u004f\u0072\u0064\u0065\u0072"})
		if _fdfb != nil {
			return _fdfb
		}
		start.Attr = append(start.Attr, _efb)
	}
	if _dede.MoveWithAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u006f\u0076\u0065\u0057\u0069\u0074\u0068"}, Value: _e.Sprintf("\u0025\u0076", *_dede.MoveWithAttr)})
	}
	e.EncodeToken(start)
	if _dede.LayoutNodeChoice != nil {
		for _, _aebee := range _dede.LayoutNodeChoice {
			_aebee.MarshalXML(e, _a.StartElement{})
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_bccf *ST_BendPoint) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cedb, _bedfgb := d.Token()
	if _bedfgb != nil {
		return _bedfgb
	}
	if _gfea, _egef := _cedb.(_a.EndElement); _egef && _gfea.Name == start.Name {
		*_bccf = 1
		return nil
	}
	if _gbedd, _beece := _cedb.(_a.CharData); !_beece {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cedb)
	} else {
		switch string(_gbedd) {
		case "":
			*_bccf = 0
		case "\u0062\u0065\u0067":
			*_bccf = 1
		case "\u0064\u0065\u0066":
			*_bccf = 2
		case "\u0065\u006e\u0064":
			*_bccf = 3
		}
	}
	_cedb, _bedfgb = d.Token()
	if _bedfgb != nil {
		return _bedfgb
	}
	if _caadd, _eddc := _cedb.(_a.EndElement); _eddc && _caadd.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cedb)
}
func NewCT_Pt() *CT_Pt {
	_cacc := &CT_Pt{}
	return _cacc
}
func (_afegb ST_ConstraintRelationship) String() string {
	switch _afegb {
	case 0:
		return ""
	case 1:
		return "\u0073\u0065\u006c\u0066"
	case 2:
		return "\u0063\u0068"
	case 3:
		return "\u0064\u0065\u0073"
	}
	return ""
}
func (_effc ST_DiagramHorizontalAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_effc.String(), start)
}
func (_fcbfd ST_ConnectorRouting) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_fcbfd.String(), start)
}
func NewCT_DiagramDefinitionHeader() *CT_DiagramDefinitionHeader {
	_gbec := &CT_DiagramDefinitionHeader{}
	return _gbec
}
func (_dca *CT_StyleLabel) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _adebe := range start.Attr {
		if _adebe.Name.Local == "\u006e\u0061\u006d\u0065" {
			_gfab := _adebe.Value
			_dca.NameAttr = _gfab
			continue
		}
	}
_deaaf:
	for {
		_fcgb, _edfd := d.Token()
		if _edfd != nil {
			return _edfd
		}
		switch _eafcf := _fcgb.(type) {
		case _a.StartElement:
			switch _eafcf.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073c\u0065\u006e\u0065\u0033\u0064"}:
				_dca.Scene3d = _b.NewCT_Scene3D()
				if _beeg := d.DecodeElement(_dca.Scene3d, &_eafcf); _beeg != nil {
					return _beeg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0070\u0033\u0064"}:
				_dca.Sp3d = _b.NewCT_Shape3D()
				if _ddge := d.DecodeElement(_dca.Sp3d, &_eafcf); _ddge != nil {
					return _ddge
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0078\u0050\u0072"}:
				_dca.TxPr = NewCT_TextProps()
				if _ceafb := d.DecodeElement(_dca.TxPr, &_eafcf); _ceafb != nil {
					return _ceafb
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079l\u0065"}:
				_dca.Style = _b.NewCT_ShapeStyle()
				if _dffg := d.DecodeElement(_dca.Style, &_eafcf); _dffg != nil {
					return _dffg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dca.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _dcbdd := d.DecodeElement(_dca.ExtLst, &_eafcf); _dcbdd != nil {
					return _dcbdd
				}
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053t\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c \u0025\u0076", _eafcf.Name)
				if _eefgd := d.Skip(); _eefgd != nil {
					return _eefgd
				}
			}
		case _a.EndElement:
			break _deaaf
		case _a.CharData:
		}
	}
	return nil
}
func (_cecc *ColorsDefHdrLst) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cecc.CT_ColorTransformHeaderLst = *NewCT_ColorTransformHeaderLst()
_agbb:
	for {
		_cfbdd, _abga := d.Token()
		if _abga != nil {
			return _abga
		}
		switch _aeccc := _cfbdd.(type) {
		case _a.StartElement:
			switch _aeccc.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_bfbfa := NewCT_ColorTransformHeader()
				if _bgaf := d.DecodeElement(_bfbfa, &_aeccc); _bgaf != nil {
					return _bgaf
				}
				_cecc.ColorsDefHdr = append(_cecc.ColorsDefHdr, _bfbfa)
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u006f\u006c\u006f\u0072\u0073D\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074\u0020\u0025\u0076", _aeccc.Name)
				if _defed := d.Skip(); _defed != nil {
					return _defed
				}
			}
		case _a.EndElement:
			break _agbb
		case _a.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_SampleData and its children, prefixing error messages with path
func (_dcdff *CT_SampleData) ValidateWithPath(path string) error {
	if _dcdff.DataModel != nil {
		if _ccbd := _dcdff.DataModel.ValidateWithPath(path + "\u002f\u0044\u0061\u0074\u0061\u004d\u006f\u0064\u0065\u006c"); _ccbd != nil {
			return _ccbd
		}
	}
	return nil
}
func NewCT_CTCategories() *CT_CTCategories { _eeea := &CT_CTCategories{}; return _eeea }

// Validate validates the RelIds and its children
func (_gbbg *RelIds) Validate() error {
	return _gbbg.ValidateWithPath("\u0052\u0065\u006c\u0049\u0064\u0073")
}
func (_cd *CT_AdjLst) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _cd.Adj != nil {
		_eg := _a.StartElement{Name: _a.Name{Local: "\u0061\u0064\u006a"}}
		for _, _dgg := range _cd.Adj {
			e.EncodeElement(_dgg, _eg)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func NewCT_Category() *CT_Category { _aeg := &CT_Category{}; return _aeg }
func (_cece *CT_CTName) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _dgge := range start.Attr {
		if _dgge.Name.Local == "\u006c\u0061\u006e\u0067" {
			_bce := _dgge.Value
			_cece.LangAttr = &_bce
			continue
		}
		if _dgge.Name.Local == "\u0076\u0061\u006c" {
			_bgge := _dgge.Value
			_cece.ValAttr = _bgge
			continue
		}
	}
	for {
		_fbf, _ecfa := d.Token()
		if _ecfa != nil {
			return _e.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0043\u0054\u004ea\u006d\u0065\u003a\u0020\u0025\u0073", _ecfa)
		}
		if _begb, _eeee := _fbf.(_a.EndElement); _eeee && _begb.Name == start.Name {
			break
		}
	}
	return nil
}

const (
	ST_PtTypeUnset    ST_PtType = 0
	ST_PtTypeNode     ST_PtType = 1
	ST_PtTypeAsst     ST_PtType = 2
	ST_PtTypeDoc      ST_PtType = 3
	ST_PtTypePres     ST_PtType = 4
	ST_PtTypeParTrans ST_PtType = 5
	ST_PtTypeSibTrans ST_PtType = 6
)

type ST_ArrowheadStyle byte

const (
	ST_BoolOperatorUnset ST_BoolOperator = 0
	ST_BoolOperatorNone  ST_BoolOperator = 1
	ST_BoolOperatorEqu   ST_BoolOperator = 2
	ST_BoolOperatorGte   ST_BoolOperator = 3
	ST_BoolOperatorLte   ST_BoolOperator = 4
)

func (_eafcfda ST_LinearDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_dgagb := _a.Attr{}
	_dgagb.Name = name
	switch _eafcfda {
	case ST_LinearDirectionUnset:
		_dgagb.Value = ""
	case ST_LinearDirectionFromL:
		_dgagb.Value = "\u0066\u0072\u006fm\u004c"
	case ST_LinearDirectionFromR:
		_dgagb.Value = "\u0066\u0072\u006fm\u0052"
	case ST_LinearDirectionFromT:
		_dgagb.Value = "\u0066\u0072\u006fm\u0054"
	case ST_LinearDirectionFromB:
		_dgagb.Value = "\u0066\u0072\u006fm\u0042"
	}
	return _dgagb, nil
}
func (_gggef *ST_TextAnchorHorizontal) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_gggef = 0
	case "\u006e\u006f\u006e\u0065":
		*_gggef = 1
	case "\u0063\u0074\u0072":
		*_gggef = 2
	}
	return nil
}
func (_bbeg ST_AnimLvlStr) Validate() error                       { return _bbeg.ValidateWithPath("") }
func ParseSliceST_ElementTypes(s string) (ST_ElementTypes, error) { return ST_ElementTypes{}, nil }

const (
	ST_OutputShapeTypeUnset ST_OutputShapeType = 0
	ST_OutputShapeTypeNone  ST_OutputShapeType = 1
	ST_OutputShapeTypeConn  ST_OutputShapeType = 2
)

func ParseSliceST_Ints(s string) (ST_Ints, error) { return ST_Ints{}, nil }
func (_abeg *StyleDefHdr) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_abeg.CT_StyleDefinitionHeader = *NewCT_StyleDefinitionHeader()
	for _, _bgbe := range start.Attr {
		if _bgbe.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_dcgc := _bgbe.Value
			_abeg.UniqueIdAttr = _dcgc
			continue
		}
		if _bgbe.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_ddgg := _bgbe.Value
			_abeg.MinVerAttr = &_ddgg
			continue
		}
		if _bgbe.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_bcaa, _bddd := _g.ParseInt(_bgbe.Value, 10, 32)
			if _bddd != nil {
				return _bddd
			}
			_efbeb := int32(_bcaa)
			_abeg.ResIdAttr = &_efbeb
			continue
		}
	}
_gffa:
	for {
		_eeggg, _bgabd := d.Token()
		if _bgabd != nil {
			return _bgabd
		}
		switch _gdab := _eeggg.(type) {
		case _a.StartElement:
			switch _gdab.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_eefa := NewCT_SDName()
				if _bedfg := d.DecodeElement(_eefa, &_gdab); _bedfg != nil {
					return _bedfg
				}
				_abeg.Title = append(_abeg.Title, _eefa)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_eeddgf := NewCT_SDDescription()
				if _aegc := d.DecodeElement(_eeddgf, &_gdab); _aegc != nil {
					return _aegc
				}
				_abeg.Desc = append(_abeg.Desc, _eeddgf)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_abeg.CatLst = NewCT_SDCategories()
				if _bgeg := d.DecodeElement(_abeg.CatLst, &_gdab); _bgeg != nil {
					return _bgeg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_abeg.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _ccaa := d.DecodeElement(_abeg.ExtLst, &_gdab); _ccaa != nil {
					return _ccaa
				}
			default:
				_ag.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072\u0020\u0025\u0076", _gdab.Name)
				if _cacff := d.Skip(); _cacff != nil {
					return _cacff
				}
			}
		case _a.EndElement:
			break _gffa
		case _a.CharData:
		}
	}
	return nil
}
func NewCT_CTCategory() *CT_CTCategory { _ecfc := &CT_CTCategory{}; return _ecfc }

// Validate validates the CT_DiagramDefinitionHeaderLst and its children
func (_cbdca *CT_DiagramDefinitionHeaderLst) Validate() error {
	return _cbdca.ValidateWithPath("\u0043\u0054_\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065\u0061\u0064\u0065rL\u0073\u0074")
}
func NewCT_Colors() *CT_Colors { _cfaga := &CT_Colors{}; return _cfaga }

// ValidateWithPath validates the LayoutDefHdr and its children, prefixing error messages with path
func (_fcfed *LayoutDefHdr) ValidateWithPath(path string) error {
	if _bgggb := _fcfed.CT_DiagramDefinitionHeader.ValidateWithPath(path); _bgggb != nil {
		return _bgggb
	}
	return nil
}
func (_cebc ST_SecondaryLinearDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_abcec := _a.Attr{}
	_abcec.Name = name
	switch _cebc {
	case ST_SecondaryLinearDirectionUnset:
		_abcec.Value = ""
	case ST_SecondaryLinearDirectionNone:
		_abcec.Value = "\u006e\u006f\u006e\u0065"
	case ST_SecondaryLinearDirectionFromL:
		_abcec.Value = "\u0066\u0072\u006fm\u004c"
	case ST_SecondaryLinearDirectionFromR:
		_abcec.Value = "\u0066\u0072\u006fm\u0052"
	case ST_SecondaryLinearDirectionFromT:
		_abcec.Value = "\u0066\u0072\u006fm\u0054"
	case ST_SecondaryLinearDirectionFromB:
		_abcec.Value = "\u0066\u0072\u006fm\u0042"
	}
	return _abcec, nil
}
func (_dfba ST_DiagramTextAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_cbccd := _a.Attr{}
	_cbccd.Name = name
	switch _dfba {
	case ST_DiagramTextAlignmentUnset:
		_cbccd.Value = ""
	case ST_DiagramTextAlignmentL:
		_cbccd.Value = "\u006c"
	case ST_DiagramTextAlignmentCtr:
		_cbccd.Value = "\u0063\u0074\u0072"
	case ST_DiagramTextAlignmentR:
		_cbccd.Value = "\u0072"
	}
	return _cbccd, nil
}

// Validate validates the CT_Colors and its children
func (_ceab *CT_Colors) Validate() error {
	return _ceab.ValidateWithPath("\u0043T\u005f\u0043\u006f\u006c\u006f\u0072s")
}

// Validate validates the CT_StyleDefinitionHeader and its children
func (_dada *CT_StyleDefinitionHeader) Validate() error {
	return _dada.ValidateWithPath("\u0043T\u005f\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0069\u006ei\u0074\u0069\u006f\u006e\u0048\u0065\u0061\u0064\u0065\u0072")
}

// Validate validates the CT_SDCategory and its children
func (_fecf *CT_SDCategory) Validate() error {
	return _fecf.ValidateWithPath("\u0043\u0054\u005f\u0053\u0044\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079")
}

const (
	ST_TextAnchorHorizontalUnset ST_TextAnchorHorizontal = 0
	ST_TextAnchorHorizontalNone  ST_TextAnchorHorizontal = 1
	ST_TextAnchorHorizontalCtr   ST_TextAnchorHorizontal = 2
)

func (_eccfb *CT_DataModel) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	_begf := _a.StartElement{Name: _a.Name{Local: "\u0070\u0074\u004cs\u0074"}}
	e.EncodeElement(_eccfb.PtLst, _begf)
	if _eccfb.CxnLst != nil {
		_gbc := _a.StartElement{Name: _a.Name{Local: "\u0063\u0078\u006e\u004c\u0073\u0074"}}
		e.EncodeElement(_eccfb.CxnLst, _gbc)
	}
	if _eccfb.Bg != nil {
		_ecg := _a.StartElement{Name: _a.Name{Local: "\u0062\u0067"}}
		e.EncodeElement(_eccfb.Bg, _ecg)
	}
	if _eccfb.Whole != nil {
		_eaed := _a.StartElement{Name: _a.Name{Local: "\u0077\u0068\u006fl\u0065"}}
		e.EncodeElement(_eccfb.Whole, _eaed)
	}
	if _eccfb.ExtLst != nil {
		_bab := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_eccfb.ExtLst, _bab)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_bbgd *CT_TextProps) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	_bbgd.Text3DChoice.MarshalXML(e, _a.StartElement{})
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type ST_OutputShapeType byte

func (_cefaa *ST_ResizeHandlesStr) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_agfee, _ddbf := d.Token()
	if _ddbf != nil {
		return _ddbf
	}
	if _faef, _gedc := _agfee.(_a.EndElement); _gedc && _faef.Name == start.Name {
		*_cefaa = 1
		return nil
	}
	if _dfge, _ecdec := _agfee.(_a.CharData); !_ecdec {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _agfee)
	} else {
		switch string(_dfge) {
		case "":
			*_cefaa = 0
		case "\u0065\u0078\u0061c\u0074":
			*_cefaa = 1
		case "\u0072\u0065\u006c":
			*_cefaa = 2
		}
	}
	_agfee, _ddbf = d.Token()
	if _ddbf != nil {
		return _ddbf
	}
	if _dfbc, _gcdee := _agfee.(_a.EndElement); _gcdee && _dfbc.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _agfee)
}
func (_aecee ST_ResizeHandlesStr) String() string {
	switch _aecee {
	case 0:
		return ""
	case 1:
		return "\u0065\u0078\u0061c\u0074"
	case 2:
		return "\u0072\u0065\u006c"
	}
	return ""
}
func (_cedgc *ST_NodeHorizontalAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_cedgc = 0
	case "\u006c":
		*_cedgc = 1
	case "\u0063\u0074\u0072":
		*_cedgc = 2
	case "\u0072":
		*_cedgc = 3
	}
	return nil
}
func (_beada ST_HierBranchStyle) ValidateWithPath(path string) error {
	switch _beada {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_beada))
	}
	return nil
}
func (_ggbb ST_BoolOperator) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_ggef := _a.Attr{}
	_ggef.Name = name
	switch _ggbb {
	case ST_BoolOperatorUnset:
		_ggef.Value = ""
	case ST_BoolOperatorNone:
		_ggef.Value = "\u006e\u006f\u006e\u0065"
	case ST_BoolOperatorEqu:
		_ggef.Value = "\u0065\u0071\u0075"
	case ST_BoolOperatorGte:
		_ggef.Value = "\u0067\u0074\u0065"
	case ST_BoolOperatorLte:
		_ggef.Value = "\u006c\u0074\u0065"
	}
	return _ggef, nil
}

type ST_PyramidAccentPosition byte

func (_fbcbc *ST_SecondaryChildAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_fbcbc = 0
	case "\u006e\u006f\u006e\u0065":
		*_fbcbc = 1
	case "\u0074":
		*_fbcbc = 2
	case "\u0062":
		*_fbcbc = 3
	case "\u006c":
		*_fbcbc = 4
	case "\u0072":
		*_fbcbc = 5
	}
	return nil
}

type CT_DiagramDefinitionHeaderLst struct {

	// Layout Definition Header
	LayoutDefHdr []*CT_DiagramDefinitionHeader
}

func (_gaaec ST_DiagramHorizontalAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_eagg := _a.Attr{}
	_eagg.Name = name
	switch _gaaec {
	case ST_DiagramHorizontalAlignmentUnset:
		_eagg.Value = ""
	case ST_DiagramHorizontalAlignmentL:
		_eagg.Value = "\u006c"
	case ST_DiagramHorizontalAlignmentCtr:
		_eagg.Value = "\u0063\u0074\u0072"
	case ST_DiagramHorizontalAlignmentR:
		_eagg.Value = "\u0072"
	case ST_DiagramHorizontalAlignmentNone:
		_eagg.Value = "\u006e\u006f\u006e\u0065"
	}
	return _eagg, nil
}

const (
	ST_ChildDirectionUnset ST_ChildDirection = 0
	ST_ChildDirectionHorz  ST_ChildDirection = 1
	ST_ChildDirectionVert  ST_ChildDirection = 2
)
const (
	ST_RotationPathUnset     ST_RotationPath = 0
	ST_RotationPathNone      ST_RotationPath = 1
	ST_RotationPathAlongPath ST_RotationPath = 2
)

func (_agdcba ST_NodeVerticalAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_aabeb := _a.Attr{}
	_aabeb.Name = name
	switch _agdcba {
	case ST_NodeVerticalAlignmentUnset:
		_aabeb.Value = ""
	case ST_NodeVerticalAlignmentT:
		_aabeb.Value = "\u0074"
	case ST_NodeVerticalAlignmentMid:
		_aabeb.Value = "\u006d\u0069\u0064"
	case ST_NodeVerticalAlignmentB:
		_aabeb.Value = "\u0062"
	}
	return _aabeb, nil
}
func ParseSliceST_UnsignedInts(s string) (ST_UnsignedInts, error) { return ST_UnsignedInts{}, nil }

type CT_SDCategory struct {

	// Category Type
	TypeAttr string

	// Priority
	PriAttr uint32
}

func ParseUnionST_ParameterVal(s string) (ST_ParameterVal, error) { return ST_ParameterVal{}, nil }

type CT_Categories struct {

	// Category
	Cat []*CT_Category
}

func (_acec ST_TextBlockDirection) String() string {
	switch _acec {
	case 0:
		return ""
	case 1:
		return "\u0068\u006f\u0072\u007a"
	case 2:
		return "\u0076\u0065\u0072\u0074"
	}
	return ""
}
func (_egfcf *ST_TextDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_egfcf = 0
	case "\u0066\u0072\u006fm\u0054":
		*_egfcf = 1
	case "\u0066\u0072\u006fm\u0042":
		*_egfcf = 2
	}
	return nil
}

// ValidateWithPath validates the CT_HierBranchStyle and its children, prefixing error messages with path
func (_gaf *CT_HierBranchStyle) ValidateWithPath(path string) error {
	if _aedgf := _gaf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _aedgf != nil {
		return _aedgf
	}
	return nil
}
func (_edede ST_SecondaryChildAlignment) ValidateWithPath(path string) error {
	switch _edede {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_edede))
	}
	return nil
}
func (_bbe *CT_Colors) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _dag := range start.Attr {
		if _dag.Name.Local == "\u006d\u0065\u0074\u0068" {
			_bbe.MethAttr.UnmarshalXMLAttr(_dag)
			continue
		}
		if _dag.Name.Local == "\u0068\u0075\u0065\u0044\u0069\u0072" {
			_bbe.HueDirAttr.UnmarshalXMLAttr(_dag)
			continue
		}
	}
_ede:
	for {
		_gfad, _bcb := d.Token()
		if _bcb != nil {
			return _bcb
		}
		switch _aeef := _gfad.(type) {
		case _a.StartElement:
			switch _aeef.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e", Local: "\u0045\u0047\u005f\u0043\u006f\u006c\u006f\u0072\u0043h\u006f\u0069\u0063\u0065"}, _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072g\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u006d\u0061\u0069\u006e", Local: "\u0045\u0047\u005f\u0043\u006f\u006c\u006f\u0072\u0043h\u006f\u0069\u0063\u0065"}:
				_ddf := _b.NewEG_ColorChoice()
				if _fad := d.DecodeElement(_ddf, &_aeef); _fad != nil {
					return _fad
				}
				_bbe.EG_ColorChoice = append(_bbe.EG_ColorChoice, _ddf)
			default:
				_ag.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0043\u006f\u006co\u0072\u0073 \u0025\u0076", _aeef.Name)
				if _ece := d.Skip(); _ece != nil {
					return _ece
				}
			}
		case _a.EndElement:
			break _ede
		case _a.CharData:
		}
	}
	return nil
}

type CT_DataModel struct {

	// Point List
	PtLst *CT_PtList

	// Connection List
	CxnLst *CT_CxnList

	// Background Formatting
	Bg *_b.CT_BackgroundFormatting

	// Whole E2O Formatting
	Whole  *_b.CT_WholeE2oFormatting
	ExtLst *_b.CT_OfficeArtExtensionList
}

func (_fbbg ST_FunctionValue) String() string {
	if _fbbg.Int32 != nil {
		return _e.Sprintf("\u0025\u0076", *_fbbg.Int32)
	}
	if _fbbg.Bool != nil {
		return _e.Sprintf("\u0025\u0076", *_fbbg.Bool)
	}
	if _fbbg.ST_Direction != ST_DirectionUnset {
		return _fbbg.ST_Direction.String()
	}
	if _fbbg.ST_HierBranchStyle != ST_HierBranchStyleUnset {
		return _fbbg.ST_HierBranchStyle.String()
	}
	if _fbbg.ST_AnimOneStr != ST_AnimOneStrUnset {
		return _fbbg.ST_AnimOneStr.String()
	}
	if _fbbg.ST_AnimLvlStr != ST_AnimLvlStrUnset {
		return _fbbg.ST_AnimLvlStr.String()
	}
	if _fbbg.ST_ResizeHandlesStr != ST_ResizeHandlesStrUnset {
		return _fbbg.ST_ResizeHandlesStr.String()
	}
	return ""
}
func (_gafec ST_SecondaryChildAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_cfbf := _a.Attr{}
	_cfbf.Name = name
	switch _gafec {
	case ST_SecondaryChildAlignmentUnset:
		_cfbf.Value = ""
	case ST_SecondaryChildAlignmentNone:
		_cfbf.Value = "\u006e\u006f\u006e\u0065"
	case ST_SecondaryChildAlignmentT:
		_cfbf.Value = "\u0074"
	case ST_SecondaryChildAlignmentB:
		_cfbf.Value = "\u0062"
	case ST_SecondaryChildAlignmentL:
		_cfbf.Value = "\u006c"
	case ST_SecondaryChildAlignmentR:
		_cfbf.Value = "\u0072"
	}
	return _cfbf, nil
}
func NewCT_StyleLabel() *CT_StyleLabel                   { _cafb := &CT_StyleLabel{}; return _cafb }
func (_abgba ST_ConstraintRelationship) Validate() error { return _abgba.ValidateWithPath("") }
func (_gfbba ST_PtType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_gddb := _a.Attr{}
	_gddb.Name = name
	switch _gfbba {
	case ST_PtTypeUnset:
		_gddb.Value = ""
	case ST_PtTypeNode:
		_gddb.Value = "\u006e\u006f\u0064\u0065"
	case ST_PtTypeAsst:
		_gddb.Value = "\u0061\u0073\u0073\u0074"
	case ST_PtTypeDoc:
		_gddb.Value = "\u0064\u006f\u0063"
	case ST_PtTypePres:
		_gddb.Value = "\u0070\u0072\u0065\u0073"
	case ST_PtTypeParTrans:
		_gddb.Value = "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073"
	case ST_PtTypeSibTrans:
		_gddb.Value = "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073"
	}
	return _gddb, nil
}
func (_gaecf *ST_TextAnchorVertical) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_gaecf = 0
	case "\u0074":
		*_gaecf = 1
	case "\u006d\u0069\u0064":
		*_gaecf = 2
	case "\u0062":
		*_gaecf = 3
	}
	return nil
}

type CT_ColorTransformHeader struct {

	// Unique ID
	UniqueIdAttr string

	// Minimum Version
	MinVerAttr *string

	// Resource ID
	ResIdAttr *int32

	// Title
	Title []*CT_CTName

	// Description
	Desc []*CT_CTDescription

	// Color Transform Category List
	CatLst *CT_CTCategories
	ExtLst *_b.CT_OfficeArtExtensionList
}

func (_ffefdf ST_TextAnchorHorizontal) Validate() error { return _ffefdf.ValidateWithPath("") }
func (_dagfb *DataModel) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0064a\u0074\u0061\u004d\u006f\u0064\u0065l"
	return _dagfb.CT_DataModel.MarshalXML(e, start)
}
func (_gdaa *CT_PtList) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_eefg:
	for {
		_efdeb, _ccbg := d.Token()
		if _ccbg != nil {
			return _ccbg
		}
		switch _fcged := _efdeb.(type) {
		case _a.StartElement:
			switch _fcged.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0074"}:
				_deaeb := NewCT_Pt()
				if _gbbe := d.DecodeElement(_deaeb, &_fcged); _gbbe != nil {
					return _gbbe
				}
				_gdaa.Pt = append(_gdaa.Pt, _deaeb)
			default:
				_ag.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0050\u0074\u004ci\u0073\u0074 \u0025\u0076", _fcged.Name)
				if _dbeg := d.Skip(); _dbeg != nil {
					return _dbeg
				}
			}
		case _a.EndElement:
			break _eefg
		case _a.CharData:
		}
	}
	return nil
}
func (_baea *ColorsDefHdr) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_baea.CT_ColorTransformHeader = *NewCT_ColorTransformHeader()
	for _, _dccc := range start.Attr {
		if _dccc.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_fdec := _dccc.Value
			_baea.UniqueIdAttr = _fdec
			continue
		}
		if _dccc.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_ebaaa := _dccc.Value
			_baea.MinVerAttr = &_ebaaa
			continue
		}
		if _dccc.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_cecd, _ccdc := _g.ParseInt(_dccc.Value, 10, 32)
			if _ccdc != nil {
				return _ccdc
			}
			_geda := int32(_cecd)
			_baea.ResIdAttr = &_geda
			continue
		}
	}
_bgcb:
	for {
		_bgbfa, _cbag := d.Token()
		if _cbag != nil {
			return _cbag
		}
		switch _agfda := _bgbfa.(type) {
		case _a.StartElement:
			switch _agfda.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_cbec := NewCT_CTName()
				if _dffgd := d.DecodeElement(_cbec, &_agfda); _dffgd != nil {
					return _dffgd
				}
				_baea.Title = append(_baea.Title, _cbec)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_fbbcc := NewCT_CTDescription()
				if _ccgfg := d.DecodeElement(_fbbcc, &_agfda); _ccgfg != nil {
					return _ccgfg
				}
				_baea.Desc = append(_baea.Desc, _fbbcc)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_baea.CatLst = NewCT_CTCategories()
				if _adad := d.DecodeElement(_baea.CatLst, &_agfda); _adad != nil {
					return _adad
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_baea.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _aaec := d.DecodeElement(_baea.ExtLst, &_agfda); _aaec != nil {
					return _aaec
				}
			default:
				_ag.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u006flo\u0072\u0073D\u0065\u0066\u0048\u0064\u0072\u0020\u0025\u0076", _agfda.Name)
				if _cabdd := d.Skip(); _cabdd != nil {
					return _cabdd
				}
			}
		case _a.EndElement:
			break _bgcb
		case _a.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the StyleDef and its children, prefixing error messages with path
func (_ecdb *StyleDef) ValidateWithPath(path string) error {
	if _dcda := _ecdb.CT_StyleDefinition.ValidateWithPath(path); _dcda != nil {
		return _dcda
	}
	return nil
}

// Validate validates the CT_ElemPropSet and its children
func (_cbcd *CT_ElemPropSet) Validate() error {
	return _cbcd.ValidateWithPath("\u0043\u0054\u005f\u0045\u006c\u0065\u006d\u0050\u0072o\u0070\u0053\u0065\u0074")
}

// Validate validates the CT_SDName and its children
func (_ddbga *CT_SDName) Validate() error {
	return _ddbga.ValidateWithPath("\u0043T\u005f\u0053\u0044\u004e\u0061\u006de")
}
func (_fecc ST_HierBranchStyle) Validate() error { return _fecc.ValidateWithPath("") }

// Validate validates the ColorsDef and its children
func (_cgacf *ColorsDef) Validate() error {
	return _cgacf.ValidateWithPath("\u0043o\u006c\u006f\u0072\u0073\u0044\u0065f")
}
func (_cdcf *ST_ModelId) ValidateWithPath(path string) error {
	_dafe := []string{}
	if _cdcf.Int32 != nil {
		_dafe = append(_dafe, "\u0049\u006e\u00743\u0032")
	}
	if _cdcf.ST_Guid != nil {
		_dafe = append(_dafe, "\u0053T\u005f\u0047\u0075\u0069\u0064")
	}
	if len(_dafe) > 1 {
		return _e.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _dafe)
	}
	return nil
}
func (_eeaf *ST_ConnectorDimension) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_eeaf = 0
	case "\u0031\u0044":
		*_eeaf = 1
	case "\u0032\u0044":
		*_eeaf = 2
	case "\u0063\u0075\u0073\u0074":
		*_eeaf = 3
	}
	return nil
}
func (_aaee ST_FallbackDimension) String() string {
	switch _aaee {
	case 0:
		return ""
	case 1:
		return "\u0031\u0044"
	case 2:
		return "\u0032\u0044"
	}
	return ""
}
func NewCT_When() *CT_When {
	_eafcfd := &CT_When{}
	_eafcfd.FuncAttr = ST_FunctionType(1)
	_eafcfd.OpAttr = ST_FunctionOperator(1)
	return _eafcfd
}
func (_afbbc ST_PyramidAccentPosition) ValidateWithPath(path string) error {
	switch _afbbc {
	case 0, 1, 2:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_afbbc))
	}
	return nil
}
func (_bbffg ST_FunctionOperator) String() string {
	switch _bbffg {
	case 0:
		return ""
	case 1:
		return "\u0065\u0071\u0075"
	case 2:
		return "\u006e\u0065\u0071"
	case 3:
		return "\u0067\u0074"
	case 4:
		return "\u006c\u0074"
	case 5:
		return "\u0067\u0074\u0065"
	case 6:
		return "\u006c\u0074\u0065"
	}
	return ""
}
func (_badd ST_ChildAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_dcbgf := _a.Attr{}
	_dcbgf.Name = name
	switch _badd {
	case ST_ChildAlignmentUnset:
		_dcbgf.Value = ""
	case ST_ChildAlignmentT:
		_dcbgf.Value = "\u0074"
	case ST_ChildAlignmentB:
		_dcbgf.Value = "\u0062"
	case ST_ChildAlignmentL:
		_dcbgf.Value = "\u006c"
	case ST_ChildAlignmentR:
		_dcbgf.Value = "\u0072"
	}
	return _dcbgf, nil
}
func (_ecdaf *CT_ElemPropSet) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _ecdaf.PresAssocIDAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "p\u0072\u0065\u0073\u0041\u0073\u0073\u006f\u0063\u0049\u0044"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.PresAssocIDAttr)})
	}
	if _ecdaf.PresNameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0065\u0073\u004e\u0061\u006d\u0065"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.PresNameAttr)})
	}
	if _ecdaf.PresStyleLblAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.PresStyleLblAttr)})
	}
	if _ecdaf.PresStyleIdxAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u0049\u0064\u0078"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.PresStyleIdxAttr)})
	}
	if _ecdaf.PresStyleCntAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0065s\u0053\u0074\u0079\u006c\u0065\u0043\u006e\u0074"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.PresStyleCntAttr)})
	}
	if _ecdaf.LoTypeIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006c\u006f\u0054\u0079\u0070\u0065\u0049\u0064"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.LoTypeIdAttr)})
	}
	if _ecdaf.LoCatIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006co\u0043\u0061\u0074\u0049\u0064"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.LoCatIdAttr)})
	}
	if _ecdaf.QsTypeIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0071\u0073\u0054\u0079\u0070\u0065\u0049\u0064"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.QsTypeIdAttr)})
	}
	if _ecdaf.QsCatIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0071s\u0043\u0061\u0074\u0049\u0064"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.QsCatIdAttr)})
	}
	if _ecdaf.CsTypeIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0073\u0054\u0079\u0070\u0065\u0049\u0064"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.CsTypeIdAttr)})
	}
	if _ecdaf.CsCatIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063s\u0043\u0061\u0074\u0049\u0064"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.CsCatIdAttr)})
	}
	if _ecdaf.Coherent3DOffAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u006f\u0068\u0065\u0072\u0065\u006e\u0074\u0033\u0044\u004f\u0066\u0066"}, Value: _e.Sprintf("\u0025\u0064", _gfaf(*_ecdaf.Coherent3DOffAttr))})
	}
	if _ecdaf.PhldrTAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0068\u006c\u0064\u0072\u0054"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.PhldrTAttr)})
	}
	if _ecdaf.PhldrAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0068\u006cd\u0072"}, Value: _e.Sprintf("\u0025\u0064", _gfaf(*_ecdaf.PhldrAttr))})
	}
	if _ecdaf.CustAngAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063u\u0073\u0074\u0041\u006e\u0067"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.CustAngAttr)})
	}
	if _ecdaf.CustFlipVertAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0075\u0073t\u0046\u006c\u0069\u0070\u0056\u0065\u0072\u0074"}, Value: _e.Sprintf("\u0025\u0064", _gfaf(*_ecdaf.CustFlipVertAttr))})
	}
	if _ecdaf.CustFlipHorAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "c\u0075\u0073\u0074\u0046\u006c\u0069\u0070\u0048\u006f\u0072"}, Value: _e.Sprintf("\u0025\u0064", _gfaf(*_ecdaf.CustFlipHorAttr))})
	}
	if _ecdaf.CustSzXAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063u\u0073\u0074\u0053\u007a\u0058"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.CustSzXAttr)})
	}
	if _ecdaf.CustSzYAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063u\u0073\u0074\u0053\u007a\u0059"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.CustSzYAttr)})
	}
	if _ecdaf.CustScaleXAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0075\u0073\u0074\u0053\u0063\u0061\u006c\u0065\u0058"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.CustScaleXAttr)})
	}
	if _ecdaf.CustScaleYAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0075\u0073\u0074\u0053\u0063\u0061\u006c\u0065\u0059"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.CustScaleYAttr)})
	}
	if _ecdaf.CustTAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0075\u0073t\u0054"}, Value: _e.Sprintf("\u0025\u0064", _gfaf(*_ecdaf.CustTAttr))})
	}
	if _ecdaf.CustLinFactXAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0075\u0073t\u004c\u0069\u006e\u0046\u0061\u0063\u0074\u0058"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.CustLinFactXAttr)})
	}
	if _ecdaf.CustLinFactYAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0075\u0073t\u004c\u0069\u006e\u0046\u0061\u0063\u0074\u0059"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.CustLinFactYAttr)})
	}
	if _ecdaf.CustLinFactNeighborXAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "c\u0075s\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074N\u0065\u0069\u0067\u0068bo\u0072\u0058"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.CustLinFactNeighborXAttr)})
	}
	if _ecdaf.CustLinFactNeighborYAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "c\u0075s\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074N\u0065\u0069\u0067\u0068bo\u0072\u0059"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.CustLinFactNeighborYAttr)})
	}
	if _ecdaf.CustRadScaleRadAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063u\u0073t\u0052\u0061\u0064\u0053\u0063\u0061\u006c\u0065\u0052\u0061\u0064"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.CustRadScaleRadAttr)})
	}
	if _ecdaf.CustRadScaleIncAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063u\u0073t\u0052\u0061\u0064\u0053\u0063\u0061\u006c\u0065\u0049\u006e\u0063"}, Value: _e.Sprintf("\u0025\u0076", *_ecdaf.CustRadScaleIncAttr)})
	}
	e.EncodeToken(start)
	if _ecdaf.PresLayoutVars != nil {
		_ccdga := _a.StartElement{Name: _a.Name{Local: "\u0070\u0072\u0065\u0073\u004c\u0061\u0079\u006f\u0075t\u0056\u0061\u0072\u0073"}}
		e.EncodeElement(_ecdaf.PresLayoutVars, _ccdga)
	}
	if _ecdaf.Style != nil {
		_cdf := _a.StartElement{Name: _a.Name{Local: "\u0073\u0074\u0079l\u0065"}}
		e.EncodeElement(_ecdaf.Style, _cdf)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

const (
	ST_AnimLvlStrUnset ST_AnimLvlStr = 0
	ST_AnimLvlStrNone  ST_AnimLvlStr = 1
	ST_AnimLvlStrLvl   ST_AnimLvlStr = 2
	ST_AnimLvlStrCtr   ST_AnimLvlStr = 3
)

// Validate validates the CT_DataModel and its children
func (_aega *CT_DataModel) Validate() error {
	return _aega.ValidateWithPath("\u0043\u0054\u005fD\u0061\u0074\u0061\u004d\u006f\u0064\u0065\u006c")
}
func (_cafda ST_RotationPath) String() string {
	switch _cafda {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0061l\u006f\u006e\u0067\u0050\u0061\u0074h"
	}
	return ""
}
func (_degcg *ST_ConstraintType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_degcg = 0
	case "\u006e\u006f\u006e\u0065":
		*_degcg = 1
	case "\u0061\u006c\u0069\u0067\u006e\u004f\u0066\u0066":
		*_degcg = 2
	case "\u0062e\u0067\u004d\u0061\u0072\u0067":
		*_degcg = 3
	case "\u0062\u0065\u006e\u0064\u0044\u0069\u0073\u0074":
		*_degcg = 4
	case "\u0062\u0065\u0067\u0050\u0061\u0064":
		*_degcg = 5
	case "\u0062":
		*_degcg = 6
	case "\u0062\u004d\u0061r\u0067":
		*_degcg = 7
	case "\u0062\u004f\u0066\u0066":
		*_degcg = 8
	case "\u0063\u0074\u0072\u0058":
		*_degcg = 9
	case "\u0063t\u0072\u0058\u004f\u0066\u0066":
		*_degcg = 10
	case "\u0063\u0074\u0072\u0059":
		*_degcg = 11
	case "\u0063t\u0072\u0059\u004f\u0066\u0066":
		*_degcg = 12
	case "\u0063\u006f\u006e\u006e\u0044\u0069\u0073\u0074":
		*_degcg = 13
	case "\u0064\u0069\u0061\u006d":
		*_degcg = 14
	case "\u0065n\u0064\u004d\u0061\u0072\u0067":
		*_degcg = 15
	case "\u0065\u006e\u0064\u0050\u0061\u0064":
		*_degcg = 16
	case "\u0068":
		*_degcg = 17
	case "\u0068\u0041\u0072\u0048":
		*_degcg = 18
	case "\u0068\u004f\u0066\u0066":
		*_degcg = 19
	case "\u006c":
		*_degcg = 20
	case "\u006c\u004d\u0061r\u0067":
		*_degcg = 21
	case "\u006c\u004f\u0066\u0066":
		*_degcg = 22
	case "\u0072":
		*_degcg = 23
	case "\u0072\u004d\u0061r\u0067":
		*_degcg = 24
	case "\u0072\u004f\u0066\u0066":
		*_degcg = 25
	case "\u0070\u0072\u0069\u006d\u0046\u006f\u006e\u0074\u0053\u007a":
		*_degcg = 26
	case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0052\u0061\u0074\u0069\u006f":
		*_degcg = 27
	case "\u0073e\u0063\u0046\u006f\u006e\u0074\u0053z":
		*_degcg = 28
	case "\u0073\u0069\u0062S\u0070":
		*_degcg = 29
	case "\u0073\u0065\u0063\u0053\u0069\u0062\u0053\u0070":
		*_degcg = 30
	case "\u0073\u0070":
		*_degcg = 31
	case "\u0073t\u0065\u006d\u0054\u0068\u0069\u0063k":
		*_degcg = 32
	case "\u0074":
		*_degcg = 33
	case "\u0074\u004d\u0061r\u0067":
		*_degcg = 34
	case "\u0074\u004f\u0066\u0066":
		*_degcg = 35
	case "\u0075\u0073\u0065r\u0041":
		*_degcg = 36
	case "\u0075\u0073\u0065r\u0042":
		*_degcg = 37
	case "\u0075\u0073\u0065r\u0043":
		*_degcg = 38
	case "\u0075\u0073\u0065r\u0044":
		*_degcg = 39
	case "\u0075\u0073\u0065r\u0045":
		*_degcg = 40
	case "\u0075\u0073\u0065r\u0046":
		*_degcg = 41
	case "\u0075\u0073\u0065r\u0047":
		*_degcg = 42
	case "\u0075\u0073\u0065r\u0048":
		*_degcg = 43
	case "\u0075\u0073\u0065r\u0049":
		*_degcg = 44
	case "\u0075\u0073\u0065r\u004a":
		*_degcg = 45
	case "\u0075\u0073\u0065r\u004b":
		*_degcg = 46
	case "\u0075\u0073\u0065r\u004c":
		*_degcg = 47
	case "\u0075\u0073\u0065r\u004d":
		*_degcg = 48
	case "\u0075\u0073\u0065r\u004e":
		*_degcg = 49
	case "\u0075\u0073\u0065r\u004f":
		*_degcg = 50
	case "\u0075\u0073\u0065r\u0050":
		*_degcg = 51
	case "\u0075\u0073\u0065r\u0051":
		*_degcg = 52
	case "\u0075\u0073\u0065r\u0052":
		*_degcg = 53
	case "\u0075\u0073\u0065r\u0053":
		*_degcg = 54
	case "\u0075\u0073\u0065r\u0054":
		*_degcg = 55
	case "\u0075\u0073\u0065r\u0055":
		*_degcg = 56
	case "\u0075\u0073\u0065r\u0056":
		*_degcg = 57
	case "\u0075\u0073\u0065r\u0057":
		*_degcg = 58
	case "\u0075\u0073\u0065r\u0058":
		*_degcg = 59
	case "\u0075\u0073\u0065r\u0059":
		*_degcg = 60
	case "\u0075\u0073\u0065r\u005a":
		*_degcg = 61
	case "\u0077":
		*_degcg = 62
	case "\u0077\u0041\u0072\u0048":
		*_degcg = 63
	case "\u0077\u004f\u0066\u0066":
		*_degcg = 64
	}
	return nil
}
func (_eebb ST_ParameterId) String() string {
	switch _eebb {
	case 0:
		return ""
	case 1:
		return "\u0068o\u0072\u007a\u0041\u006c\u0069\u0067n"
	case 2:
		return "\u0076e\u0072\u0074\u0041\u006c\u0069\u0067n"
	case 3:
		return "\u0063\u0068\u0044i\u0072"
	case 4:
		return "\u0063h\u0041\u006c\u0069\u0067\u006e"
	case 5:
		return "\u0073\u0065\u0063\u0043\u0068\u0041\u006c\u0069\u0067\u006e"
	case 6:
		return "\u006c\u0069\u006e\u0044\u0069\u0072"
	case 7:
		return "\u0073e\u0063\u004c\u0069\u006e\u0044\u0069r"
	case 8:
		return "\u0073\u0074\u0045\u006c\u0065\u006d"
	case 9:
		return "\u0062\u0065\u006e\u0064\u0050\u0074"
	case 10:
		return "\u0063\u006f\u006e\u006e\u0052\u006f\u0075\u0074"
	case 11:
		return "\u0062\u0065\u0067\u0053\u0074\u0079"
	case 12:
		return "\u0065\u006e\u0064\u0053\u0074\u0079"
	case 13:
		return "\u0064\u0069\u006d"
	case 14:
		return "\u0072o\u0074\u0050\u0061\u0074\u0068"
	case 15:
		return "\u0063t\u0072\u0053\u0068\u0070\u004d\u0061p"
	case 16:
		return "\u006e\u006f\u0064\u0065\u0048\u006f\u0072\u007a\u0041\u006c\u0069\u0067\u006e"
	case 17:
		return "\u006e\u006f\u0064\u0065\u0056\u0065\u0072\u0074\u0041\u006c\u0069\u0067\u006e"
	case 18:
		return "\u0066\u0061\u006c\u006c\u0062\u0061\u0063\u006b"
	case 19:
		return "\u0074\u0078\u0044i\u0072"
	case 20:
		return "p\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0050\u006f\u0073"
	case 21:
		return "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054\u0078\u004d\u0061\u0072"
	case 22:
		return "\u0074x\u0042\u006c\u0044\u0069\u0072"
	case 23:
		return "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0048\u006f\u0072\u007a"
	case 24:
		return "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0056\u0065\u0072\u0074"
	case 25:
		return "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0048o\u0072\u007a\u0043\u0068"
	case 26:
		return "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0056e\u0072\u0074\u0043\u0068"
	case 27:
		return "\u0070\u0061\u0072\u0054\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e"
	case 28:
		return "\u0070\u0061\u0072\u0054\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e"
	case 29:
		return "\u0073h\u0070T\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e\u0043\u0068"
	case 30:
		return "\u0073h\u0070T\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e\u0043\u0068"
	case 31:
		return "\u0061u\u0074\u006f\u0054\u0078\u0052\u006ft"
	case 32:
		return "\u0067\u0072\u0044i\u0072"
	case 33:
		return "\u0066l\u006f\u0077\u0044\u0069\u0072"
	case 34:
		return "\u0063o\u006e\u0074\u0044\u0069\u0072"
	case 35:
		return "\u0062\u006b\u0070\u0074"
	case 36:
		return "\u006f\u0066\u0066"
	case 37:
		return "\u0068i\u0065\u0072\u0041\u006c\u0069\u0067n"
	case 38:
		return "\u0062\u006b\u0050t\u0046\u0069\u0078\u0065\u0064\u0056\u0061\u006c"
	case 39:
		return "s\u0074\u0042\u0075\u006c\u006c\u0065\u0074\u004c\u0076\u006c"
	case 40:
		return "\u0073\u0074\u0041n\u0067"
	case 41:
		return "\u0073p\u0061\u006e\u0041\u006e\u0067"
	case 42:
		return "\u0061\u0072"
	case 43:
		return "\u006cn\u0053\u0070\u0050\u0061\u0072"
	case 44:
		return "\u006c\u006e\u0053\u0070\u0041\u0066\u0050\u0061\u0072\u0050"
	case 45:
		return "\u006c\u006e\u0053\u0070\u0043\u0068"
	case 46:
		return "\u006cn\u0053\u0070\u0041\u0066\u0043\u0068P"
	case 47:
		return "r\u0074\u0053\u0068\u006f\u0072\u0074\u0044\u0069\u0073\u0074"
	case 48:
		return "\u0061l\u0069\u0067\u006e\u0054\u0078"
	case 49:
		return "p\u0079\u0072\u0061\u004c\u0076\u006c\u004e\u006f\u0064\u0065"
	case 50:
		return "\u0070\u0079r\u0061\u0041\u0063c\u0074\u0042\u006b\u0067\u0064\u004e\u006f\u0064\u0065"
	case 51:
		return "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054x\u004e\u006f\u0064\u0065"
	case 52:
		return "\u0073r\u0063\u004e\u006f\u0064\u0065"
	case 53:
		return "\u0064s\u0074\u004e\u006f\u0064\u0065"
	case 54:
		return "\u0062\u0065\u0067\u0050\u0074\u0073"
	case 55:
		return "\u0065\u006e\u0064\u0050\u0074\u0073"
	}
	return ""
}
func (_faac *CT_Direction) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _faac.ValAttr != ST_DirectionUnset {
		_aaeg, _cbfd := _faac.ValAttr.MarshalXMLAttr(_a.Name{Local: "\u0076\u0061\u006c"})
		if _cbfd != nil {
			return _cbfd
		}
		start.Attr = append(start.Attr, _aaeg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_ccfef *ST_Breakpoint) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_ccfef = 0
	case "\u0065\u006e\u0064\u0043\u006e\u0076":
		*_ccfef = 1
	case "\u0062\u0061\u006c":
		*_ccfef = 2
	case "\u0066\u0069\u0078e\u0064":
		*_ccfef = 3
	}
	return nil
}

type ST_ElementTypes []ST_ElementType

func (_gdae ST_HierBranchStyle) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_cfcdg := _a.Attr{}
	_cfcdg.Name = name
	switch _gdae {
	case ST_HierBranchStyleUnset:
		_cfcdg.Value = ""
	case ST_HierBranchStyleL:
		_cfcdg.Value = "\u006c"
	case ST_HierBranchStyleR:
		_cfcdg.Value = "\u0072"
	case ST_HierBranchStyleHang:
		_cfcdg.Value = "\u0068\u0061\u006e\u0067"
	case ST_HierBranchStyleStd:
		_cfcdg.Value = "\u0073\u0074\u0064"
	case ST_HierBranchStyleInit:
		_cfcdg.Value = "\u0069\u006e\u0069\u0074"
	}
	return _cfcdg, nil
}
func (_gb *AG_ConstraintAttributes) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gb.TypeAttr = ST_ConstraintType(1)
	for _, _afg := range start.Attr {
		if _afg.Name.Local == "\u0074\u0079\u0070\u0065" {
			_gb.TypeAttr.UnmarshalXMLAttr(_afg)
			continue
		}
		if _afg.Name.Local == "\u0066\u006f\u0072" {
			_gb.ForAttr.UnmarshalXMLAttr(_afg)
			continue
		}
		if _afg.Name.Local == "\u0066o\u0072\u004e\u0061\u006d\u0065" {
			_dg := _afg.Value
			_gb.ForNameAttr = &_dg
			continue
		}
		if _afg.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_gb.PtTypeAttr.UnmarshalXMLAttr(_afg)
			continue
		}
	}
	for {
		_fd, _ea := d.Token()
		if _ea != nil {
			return _e.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0041\u0047\u005f\u0043\u006f\u006es\u0074\u0072\u0061\u0069\u006e\u0074\u0041t\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0073\u003a\u0020%\u0073", _ea)
		}
		if _bec, _c := _fd.(_a.EndElement); _c && _bec.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gagdg *LayoutDef) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u006ca\u0079\u006f\u0075\u0074\u0044\u0065f"
	return _gagdg.CT_DiagramDefinition.MarshalXML(e, start)
}
func (_eead *CT_WhenChoice) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cbeag := start
	switch start.Name {
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u006c\u0067"}:
		_eead.Alg = NewCT_Algorithm()
		if _bebgb := d.DecodeElement(_eead.Alg, &_cbeag); _bebgb != nil {
			return _bebgb
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0068\u0061p\u0065"}:
		_eead.Shape = NewCT_Shape()
		if _bcfcf := d.DecodeElement(_eead.Shape, &_cbeag); _bcfcf != nil {
			return _bcfcf
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}:
		_eead.PresOf = NewCT_PresentationOf()
		if _abce := d.DecodeElement(_eead.PresOf, &_cbeag); _abce != nil {
			return _abce
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}:
		_eead.ConstrLst = NewCT_Constraints()
		if _fbdgdg := d.DecodeElement(_eead.ConstrLst, &_cbeag); _fbdgdg != nil {
			return _fbdgdg
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}:
		_eead.RuleLst = NewCT_Rules()
		if _ccbc := d.DecodeElement(_eead.RuleLst, &_cbeag); _ccbc != nil {
			return _ccbc
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}:
		_eead.ForEach = NewCT_ForEach()
		if _gadad := d.DecodeElement(_eead.ForEach, &_cbeag); _gadad != nil {
			return _gadad
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
		_eead.LayoutNode = NewCT_LayoutNode()
		if _dbcf := d.DecodeElement(_eead.LayoutNode, &_cbeag); _dbcf != nil {
			return _dbcf
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}:
		_eead.Choose = NewCT_Choose()
		if _cceaf := d.DecodeElement(_eead.Choose, &_cbeag); _cceaf != nil {
			return _cceaf
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
		_eead.ExtLst = _b.NewCT_OfficeArtExtensionList()
		if _cecaf := d.DecodeElement(_eead.ExtLst, &_cbeag); _cecaf != nil {
			return _cecaf
		}
	default:
		_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0057h\u0065\u006e\u0043\u0068\u006f\u0069\u0063\u0065 \u0025\u0076", _cbeag.Name)
		if _ggba := d.Skip(); _ggba != nil {
			return _ggba
		}
	}
	return nil
}
func (_aacc *ST_AnimOneStr) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_adbb, _gedea := d.Token()
	if _gedea != nil {
		return _gedea
	}
	if _bfgg, _bfdc := _adbb.(_a.EndElement); _bfdc && _bfgg.Name == start.Name {
		*_aacc = 1
		return nil
	}
	if _fcagc, _bbfd := _adbb.(_a.CharData); !_bbfd {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _adbb)
	} else {
		switch string(_fcagc) {
		case "":
			*_aacc = 0
		case "\u006e\u006f\u006e\u0065":
			*_aacc = 1
		case "\u006f\u006e\u0065":
			*_aacc = 2
		case "\u0062\u0072\u0061\u006e\u0063\u0068":
			*_aacc = 3
		}
	}
	_adbb, _gedea = d.Token()
	if _gedea != nil {
		return _gedea
	}
	if _dfbdc, _aaabd := _adbb.(_a.EndElement); _aaabd && _dfbdc.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _adbb)
}

// Validate validates the LayoutDef and its children
func (_badb *LayoutDef) Validate() error {
	return _badb.ValidateWithPath("\u004ca\u0079\u006f\u0075\u0074\u0044\u0065f")
}
func (_bfgde *CT_NumericRule) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_bfgde.TypeAttr = ST_ConstraintType(1)
	for _, _dde := range start.Attr {
		if _dde.Name.Local == "\u0076\u0061\u006c" {
			_ceeg, _cbdf := _g.ParseFloat(_dde.Value, 64)
			if _cbdf != nil {
				return _cbdf
			}
			_bfgde.ValAttr = &_ceeg
			continue
		}
		if _dde.Name.Local == "\u0066\u0061\u0063\u0074" {
			_daba, _cgccb := _g.ParseFloat(_dde.Value, 64)
			if _cgccb != nil {
				return _cgccb
			}
			_bfgde.FactAttr = &_daba
			continue
		}
		if _dde.Name.Local == "\u006d\u0061\u0078" {
			_becc, _cace := _g.ParseFloat(_dde.Value, 64)
			if _cace != nil {
				return _cace
			}
			_bfgde.MaxAttr = &_becc
			continue
		}
		if _dde.Name.Local == "\u0074\u0079\u0070\u0065" {
			_bfgde.TypeAttr.UnmarshalXMLAttr(_dde)
			continue
		}
		if _dde.Name.Local == "\u0066\u006f\u0072" {
			_bfgde.ForAttr.UnmarshalXMLAttr(_dde)
			continue
		}
		if _dde.Name.Local == "\u0066o\u0072\u004e\u0061\u006d\u0065" {
			_bgbag := _dde.Value
			_bfgde.ForNameAttr = &_bgbag
			continue
		}
		if _dde.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_bfgde.PtTypeAttr.UnmarshalXMLAttr(_dde)
			continue
		}
	}
_ffgd:
	for {
		_egbe, _defbg := d.Token()
		if _defbg != nil {
			return _defbg
		}
		switch _ceabc := _egbe.(type) {
		case _a.StartElement:
			switch _ceabc.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bfgde.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _dadf := d.DecodeElement(_bfgde.ExtLst, &_ceabc); _dadf != nil {
					return _dadf
				}
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004e\u0075\u006d\u0065\u0072\u0069\u0063R\u0075l\u0065\u0020\u0025\u0076", _ceabc.Name)
				if _afgb := d.Skip(); _afgb != nil {
					return _afgb
				}
			}
		case _a.EndElement:
			break _ffgd
		case _a.CharData:
		}
	}
	return nil
}
func (_cffcb ST_AxisType) ValidateWithPath(path string) error {
	switch _cffcb {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cffcb))
	}
	return nil
}

// ValidateWithPath validates the CT_Category and its children, prefixing error messages with path
func (_eed *CT_Category) ValidateWithPath(path string) error { return nil }
func (_fbcgb ST_PyramidAccentTextMargin) Validate() error    { return _fbcgb.ValidateWithPath("") }

type ST_ConstraintType byte

// ST_LayoutShapeType is a union type
type ST_LayoutShapeType struct {
	ST_ShapeType       _b.ST_ShapeType
	ST_OutputShapeType ST_OutputShapeType
}
type ST_BoolOperator byte

func (_gfdb *CT_CxnList) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_bgd:
	for {
		_dafc, _ccc := d.Token()
		if _ccc != nil {
			return _ccc
		}
		switch _caec := _dafc.(type) {
		case _a.StartElement:
			switch _caec.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0078\u006e"}:
				_gadda := NewCT_Cxn()
				if _gdea := d.DecodeElement(_gadda, &_caec); _gdea != nil {
					return _gdea
				}
				_gfdb.Cxn = append(_gfdb.Cxn, _gadda)
			default:
				_ag.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fC\u0078\u006e\u004c\u0069\u0073\u0074\u0020\u0025\u0076", _caec.Name)
				if _bggeg := d.Skip(); _bggeg != nil {
					return _bggeg
				}
			}
		case _a.EndElement:
			break _bgd
		case _a.CharData:
		}
	}
	return nil
}

// Validate validates the CT_ColorTransformHeader and its children
func (_dgff *CT_ColorTransformHeader) Validate() error {
	return _dgff.ValidateWithPath("\u0043\u0054\u005fCo\u006c\u006f\u0072\u0054\u0072\u0061\u006e\u0073\u0066\u006f\u0072\u006d\u0048\u0065\u0061\u0064\u0065\u0072")
}
func (_gcbfd ST_PyramidAccentTextMargin) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_gcbfd.String(), start)
}
func NewCT_OrgChart() *CT_OrgChart { _egaec := &CT_OrgChart{}; return _egaec }
func (_gefa ST_NodeHorizontalAlignment) ValidateWithPath(path string) error {
	switch _gefa {
	case 0, 1, 2, 3:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gefa))
	}
	return nil
}
func NewCT_Otherwise() *CT_Otherwise { _aadf := &CT_Otherwise{}; return _aadf }
func (_fbb *CT_AnimOne) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _egg := range start.Attr {
		if _egg.Name.Local == "\u0076\u0061\u006c" {
			_fbb.ValAttr.UnmarshalXMLAttr(_egg)
			continue
		}
	}
	for {
		_gfc, _ecf := d.Token()
		if _ecf != nil {
			return _e.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004f\u006e\u0065\u003a\u0020%\u0073", _ecf)
		}
		if _bbd, _acb := _gfc.(_a.EndElement); _acb && _bbd.Name == start.Name {
			break
		}
	}
	return nil
}
func (_eaff *ST_PyramidAccentTextMargin) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gceb, _ddda := d.Token()
	if _ddda != nil {
		return _ddda
	}
	if _caaf, _cbagf := _gceb.(_a.EndElement); _cbagf && _caaf.Name == start.Name {
		*_eaff = 1
		return nil
	}
	if _abbc, _gdbgga := _gceb.(_a.CharData); !_gdbgga {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gceb)
	} else {
		switch string(_abbc) {
		case "":
			*_eaff = 0
		case "\u0073\u0074\u0065\u0070":
			*_eaff = 1
		case "\u0073\u0074\u0061c\u006b":
			*_eaff = 2
		}
	}
	_gceb, _ddda = d.Token()
	if _ddda != nil {
		return _ddda
	}
	if _agege, _agdg := _gceb.(_a.EndElement); _agdg && _agege.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gceb)
}
func (_eeeb ST_TextAnchorHorizontal) String() string {
	switch _eeeb {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0063\u0074\u0072"
	}
	return ""
}
func (_dcde ST_HueDir) String() string {
	switch _dcde {
	case 0:
		return ""
	case 1:
		return "\u0063\u0077"
	case 2:
		return "\u0063\u0063\u0077"
	}
	return ""
}

const (
	ST_HierarchyAlignmentUnset   ST_HierarchyAlignment = 0
	ST_HierarchyAlignmentTL      ST_HierarchyAlignment = 1
	ST_HierarchyAlignmentTR      ST_HierarchyAlignment = 2
	ST_HierarchyAlignmentTCtrCh  ST_HierarchyAlignment = 3
	ST_HierarchyAlignmentTCtrDes ST_HierarchyAlignment = 4
	ST_HierarchyAlignmentBL      ST_HierarchyAlignment = 5
	ST_HierarchyAlignmentBR      ST_HierarchyAlignment = 6
	ST_HierarchyAlignmentBCtrCh  ST_HierarchyAlignment = 7
	ST_HierarchyAlignmentBCtrDes ST_HierarchyAlignment = 8
	ST_HierarchyAlignmentLT      ST_HierarchyAlignment = 9
	ST_HierarchyAlignmentLB      ST_HierarchyAlignment = 10
	ST_HierarchyAlignmentLCtrCh  ST_HierarchyAlignment = 11
	ST_HierarchyAlignmentLCtrDes ST_HierarchyAlignment = 12
	ST_HierarchyAlignmentRT      ST_HierarchyAlignment = 13
	ST_HierarchyAlignmentRB      ST_HierarchyAlignment = 14
	ST_HierarchyAlignmentRCtrCh  ST_HierarchyAlignment = 15
	ST_HierarchyAlignmentRCtrDes ST_HierarchyAlignment = 16
)

func (_ebaf ST_PyramidAccentPosition) Validate() error { return _ebaf.ValidateWithPath("") }

type CT_ColorTransformHeaderLst struct {

	// Color Transform Definition Header
	ColorsDefHdr []*CT_ColorTransformHeader
}
type ST_NodeHorizontalAlignment byte

// ValidateWithPath validates the CT_StyleDefinitionHeader and its children, prefixing error messages with path
func (_fddegd *CT_StyleDefinitionHeader) ValidateWithPath(path string) error {
	for _feea, _gdaab := range _fddegd.Title {
		if _efda := _gdaab.ValidateWithPath(_e.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _feea)); _efda != nil {
			return _efda
		}
	}
	for _bbbeb, _dabg := range _fddegd.Desc {
		if _cfff := _dabg.ValidateWithPath(_e.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _bbbeb)); _cfff != nil {
			return _cfff
		}
	}
	if _fddegd.CatLst != nil {
		if _cdggb := _fddegd.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _cdggb != nil {
			return _cdggb
		}
	}
	if _fddegd.ExtLst != nil {
		if _baga := _fddegd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _baga != nil {
			return _baga
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Adj and its children, prefixing error messages with path
func (_gaa *CT_Adj) ValidateWithPath(path string) error {
	if _gaa.IdxAttr < 1 {
		return _e.Errorf("%\u0073\u002f\u006d\u002e\u0049\u0064x\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0031\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _gaa.IdxAttr)
	}
	return nil
}
func (_bbfa ST_HierarchyAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_caeeg := _a.Attr{}
	_caeeg.Name = name
	switch _bbfa {
	case ST_HierarchyAlignmentUnset:
		_caeeg.Value = ""
	case ST_HierarchyAlignmentTL:
		_caeeg.Value = "\u0074\u004c"
	case ST_HierarchyAlignmentTR:
		_caeeg.Value = "\u0074\u0052"
	case ST_HierarchyAlignmentTCtrCh:
		_caeeg.Value = "\u0074\u0043\u0074\u0072\u0043\u0068"
	case ST_HierarchyAlignmentTCtrDes:
		_caeeg.Value = "\u0074C\u0074\u0072\u0044\u0065\u0073"
	case ST_HierarchyAlignmentBL:
		_caeeg.Value = "\u0062\u004c"
	case ST_HierarchyAlignmentBR:
		_caeeg.Value = "\u0062\u0052"
	case ST_HierarchyAlignmentBCtrCh:
		_caeeg.Value = "\u0062\u0043\u0074\u0072\u0043\u0068"
	case ST_HierarchyAlignmentBCtrDes:
		_caeeg.Value = "\u0062C\u0074\u0072\u0044\u0065\u0073"
	case ST_HierarchyAlignmentLT:
		_caeeg.Value = "\u006c\u0054"
	case ST_HierarchyAlignmentLB:
		_caeeg.Value = "\u006c\u0042"
	case ST_HierarchyAlignmentLCtrCh:
		_caeeg.Value = "\u006c\u0043\u0074\u0072\u0043\u0068"
	case ST_HierarchyAlignmentLCtrDes:
		_caeeg.Value = "\u006cC\u0074\u0072\u0044\u0065\u0073"
	case ST_HierarchyAlignmentRT:
		_caeeg.Value = "\u0072\u0054"
	case ST_HierarchyAlignmentRB:
		_caeeg.Value = "\u0072\u0042"
	case ST_HierarchyAlignmentRCtrCh:
		_caeeg.Value = "\u0072\u0043\u0074\u0072\u0043\u0068"
	case ST_HierarchyAlignmentRCtrDes:
		_caeeg.Value = "\u0072C\u0074\u0072\u0044\u0065\u0073"
	}
	return _caeeg, nil
}

// ValidateWithPath validates the CT_ChildPref and its children, prefixing error messages with path
func (_cabd *CT_ChildPref) ValidateWithPath(path string) error {
	if _cabd.ValAttr != nil {
		if *_cabd.ValAttr < -1 {
			return _e.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003e\u003d\u0020\u002d1 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_cabd.ValAttr)
		}
	}
	return nil
}

type ST_AxisTypes []ST_AxisType

// Validate validates the CT_CTDescription and its children
func (_cab *CT_CTDescription) Validate() error {
	return _cab.ValidateWithPath("\u0043\u0054_\u0043\u0054\u0044e\u0073\u0063\u0072\u0069\u0070\u0074\u0069\u006f\u006e")
}

type ST_AnimOneStr byte

// Validate validates the CT_ResizeHandles and its children
func (_degc *CT_ResizeHandles) Validate() error {
	return _degc.ValidateWithPath("\u0043\u0054_\u0052\u0065\u0073i\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073")
}
func (_ffcf *ST_GrowDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_ffcf = 0
	case "\u0074\u004c":
		*_ffcf = 1
	case "\u0074\u0052":
		*_ffcf = 2
	case "\u0062\u004c":
		*_ffcf = 3
	case "\u0062\u0052":
		*_ffcf = 4
	}
	return nil
}

const (
	ST_ContinueDirectionUnset   ST_ContinueDirection = 0
	ST_ContinueDirectionRevDir  ST_ContinueDirection = 1
	ST_ContinueDirectionSameDir ST_ContinueDirection = 2
)

type CT_LayoutVariablePropertySet struct {

	// Show Organization Chart User Interface
	OrgChart *CT_OrgChart

	// Maximum Children
	ChMax *CT_ChildMax

	// Preferred Number of Children
	ChPref *CT_ChildPref

	// Show Insert Bullet
	BulletEnabled *CT_BulletEnabled

	// Diagram Direction
	Dir *CT_Direction

	// Organization Chart Branch Style
	HierBranch *CT_HierBranchStyle

	// One by One Animation String
	AnimOne *CT_AnimOne

	// Level Animation
	AnimLvl *CT_AnimLvl

	// Shape Resize Style
	ResizeHandles *CT_ResizeHandles
}

func (_egbbb ST_ClrAppMethod) String() string {
	switch _egbbb {
	case 0:
		return ""
	case 1:
		return "\u0073\u0070\u0061\u006e"
	case 2:
		return "\u0063\u0079\u0063l\u0065"
	case 3:
		return "\u0072\u0065\u0070\u0065\u0061\u0074"
	}
	return ""
}
func (_edd *CT_CTStyleLabel) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _e.Sprintf("\u0025\u0076", _edd.NameAttr)})
	e.EncodeToken(start)
	if _edd.FillClrLst != nil {
		_ffg := _a.StartElement{Name: _a.Name{Local: "\u0066\u0069\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"}}
		e.EncodeElement(_edd.FillClrLst, _ffg)
	}
	if _edd.LinClrLst != nil {
		_abe := _a.StartElement{Name: _a.Name{Local: "\u006ci\u006e\u0043\u006c\u0072\u004c\u0073t"}}
		e.EncodeElement(_edd.LinClrLst, _abe)
	}
	if _edd.EffectClrLst != nil {
		_bcfe := _a.StartElement{Name: _a.Name{Local: "\u0065\u0066\u0066e\u0063\u0074\u0043\u006c\u0072\u004c\u0073\u0074"}}
		e.EncodeElement(_edd.EffectClrLst, _bcfe)
	}
	if _edd.TxLinClrLst != nil {
		_abf := _a.StartElement{Name: _a.Name{Local: "t\u0078\u004c\u0069\u006e\u0043\u006c\u0072\u004c\u0073\u0074"}}
		e.EncodeElement(_edd.TxLinClrLst, _abf)
	}
	if _edd.TxFillClrLst != nil {
		_gaagg := _a.StartElement{Name: _a.Name{Local: "\u0074\u0078\u0046i\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"}}
		e.EncodeElement(_edd.TxFillClrLst, _gaagg)
	}
	if _edd.TxEffectClrLst != nil {
		_cea := _a.StartElement{Name: _a.Name{Local: "\u0074\u0078\u0045\u0066\u0066\u0065\u0063\u0074\u0043l\u0072\u004c\u0073\u0074"}}
		e.EncodeElement(_edd.TxEffectClrLst, _cea)
	}
	if _edd.ExtLst != nil {
		_fdde := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_edd.ExtLst, _fdde)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_cabcg *DataModel) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cabcg.CT_DataModel = *NewCT_DataModel()
_eggfb:
	for {
		_face, _edddd := d.Token()
		if _edddd != nil {
			return _edddd
		}
		switch _bgaa := _face.(type) {
		case _a.StartElement:
			switch _bgaa.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0074\u004cs\u0074"}:
				if _afcf := d.DecodeElement(_cabcg.PtLst, &_bgaa); _afcf != nil {
					return _afcf
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0078\u006e\u004c\u0073\u0074"}:
				_cabcg.CxnLst = NewCT_CxnList()
				if _ecdc := d.DecodeElement(_cabcg.CxnLst, &_bgaa); _ecdc != nil {
					return _ecdc
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0062\u0067"}:
				_cabcg.Bg = _b.NewCT_BackgroundFormatting()
				if _cbade := d.DecodeElement(_cabcg.Bg, &_bgaa); _cbade != nil {
					return _cbade
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0077\u0068\u006fl\u0065"}:
				_cabcg.Whole = _b.NewCT_WholeE2oFormatting()
				if _fdaa := d.DecodeElement(_cabcg.Whole, &_bgaa); _fdaa != nil {
					return _fdaa
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cabcg.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _bfaa := d.DecodeElement(_cabcg.ExtLst, &_bgaa); _bfaa != nil {
					return _bfaa
				}
			default:
				_ag.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0044\u0061\u0074\u0061\u004d\u006fd\u0065\u006c \u0025\u0076", _bgaa.Name)
				if _aegba := d.Skip(); _aegba != nil {
					return _aegba
				}
			}
		case _a.EndElement:
			break _eggfb
		case _a.CharData:
		}
	}
	return nil
}
func (_dcbbc ST_ConstraintType) ValidateWithPath(path string) error {
	switch _dcbbc {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dcbbc))
	}
	return nil
}
func (_fabac ST_ResizeHandlesStr) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_affd := _a.Attr{}
	_affd.Name = name
	switch _fabac {
	case ST_ResizeHandlesStrUnset:
		_affd.Value = ""
	case ST_ResizeHandlesStrExact:
		_affd.Value = "\u0065\u0078\u0061c\u0074"
	case ST_ResizeHandlesStrRel:
		_affd.Value = "\u0072\u0065\u006c"
	}
	return _affd, nil
}
func (_eabd ST_Breakpoint) Validate() error { return _eabd.ValidateWithPath("") }
func (_ebdd ST_ParameterId) ValidateWithPath(path string) error {
	switch _ebdd {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ebdd))
	}
	return nil
}

type ST_UnsignedInts []uint32

func NewCT_ChildPref() *CT_ChildPref    { _fgag := &CT_ChildPref{}; return _fgag }
func (_edae ST_HueDir) Validate() error { return _edae.ValidateWithPath("") }

// ValidateWithPath validates the CT_PresentationOf and its children, prefixing error messages with path
func (_cbfec *CT_PresentationOf) ValidateWithPath(path string) error {
	if _cbfec.ExtLst != nil {
		if _gaaa := _cbfec.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gaaa != nil {
			return _gaaa
		}
	}
	return nil
}
func (_adgc ST_ConstraintType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_edcg := _a.Attr{}
	_edcg.Name = name
	switch _adgc {
	case ST_ConstraintTypeUnset:
		_edcg.Value = ""
	case ST_ConstraintTypeNone:
		_edcg.Value = "\u006e\u006f\u006e\u0065"
	case ST_ConstraintTypeAlignOff:
		_edcg.Value = "\u0061\u006c\u0069\u0067\u006e\u004f\u0066\u0066"
	case ST_ConstraintTypeBegMarg:
		_edcg.Value = "\u0062e\u0067\u004d\u0061\u0072\u0067"
	case ST_ConstraintTypeBendDist:
		_edcg.Value = "\u0062\u0065\u006e\u0064\u0044\u0069\u0073\u0074"
	case ST_ConstraintTypeBegPad:
		_edcg.Value = "\u0062\u0065\u0067\u0050\u0061\u0064"
	case ST_ConstraintTypeB:
		_edcg.Value = "\u0062"
	case ST_ConstraintTypeBMarg:
		_edcg.Value = "\u0062\u004d\u0061r\u0067"
	case ST_ConstraintTypeBOff:
		_edcg.Value = "\u0062\u004f\u0066\u0066"
	case ST_ConstraintTypeCtrX:
		_edcg.Value = "\u0063\u0074\u0072\u0058"
	case ST_ConstraintTypeCtrXOff:
		_edcg.Value = "\u0063t\u0072\u0058\u004f\u0066\u0066"
	case ST_ConstraintTypeCtrY:
		_edcg.Value = "\u0063\u0074\u0072\u0059"
	case ST_ConstraintTypeCtrYOff:
		_edcg.Value = "\u0063t\u0072\u0059\u004f\u0066\u0066"
	case ST_ConstraintTypeConnDist:
		_edcg.Value = "\u0063\u006f\u006e\u006e\u0044\u0069\u0073\u0074"
	case ST_ConstraintTypeDiam:
		_edcg.Value = "\u0064\u0069\u0061\u006d"
	case ST_ConstraintTypeEndMarg:
		_edcg.Value = "\u0065n\u0064\u004d\u0061\u0072\u0067"
	case ST_ConstraintTypeEndPad:
		_edcg.Value = "\u0065\u006e\u0064\u0050\u0061\u0064"
	case ST_ConstraintTypeH:
		_edcg.Value = "\u0068"
	case ST_ConstraintTypeHArH:
		_edcg.Value = "\u0068\u0041\u0072\u0048"
	case ST_ConstraintTypeHOff:
		_edcg.Value = "\u0068\u004f\u0066\u0066"
	case ST_ConstraintTypeL:
		_edcg.Value = "\u006c"
	case ST_ConstraintTypeLMarg:
		_edcg.Value = "\u006c\u004d\u0061r\u0067"
	case ST_ConstraintTypeLOff:
		_edcg.Value = "\u006c\u004f\u0066\u0066"
	case ST_ConstraintTypeR:
		_edcg.Value = "\u0072"
	case ST_ConstraintTypeRMarg:
		_edcg.Value = "\u0072\u004d\u0061r\u0067"
	case ST_ConstraintTypeROff:
		_edcg.Value = "\u0072\u004f\u0066\u0066"
	case ST_ConstraintTypePrimFontSz:
		_edcg.Value = "\u0070\u0072\u0069\u006d\u0046\u006f\u006e\u0074\u0053\u007a"
	case ST_ConstraintTypePyraAcctRatio:
		_edcg.Value = "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0052\u0061\u0074\u0069\u006f"
	case ST_ConstraintTypeSecFontSz:
		_edcg.Value = "\u0073e\u0063\u0046\u006f\u006e\u0074\u0053z"
	case ST_ConstraintTypeSibSp:
		_edcg.Value = "\u0073\u0069\u0062S\u0070"
	case ST_ConstraintTypeSecSibSp:
		_edcg.Value = "\u0073\u0065\u0063\u0053\u0069\u0062\u0053\u0070"
	case ST_ConstraintTypeSp:
		_edcg.Value = "\u0073\u0070"
	case ST_ConstraintTypeStemThick:
		_edcg.Value = "\u0073t\u0065\u006d\u0054\u0068\u0069\u0063k"
	case ST_ConstraintTypeT:
		_edcg.Value = "\u0074"
	case ST_ConstraintTypeTMarg:
		_edcg.Value = "\u0074\u004d\u0061r\u0067"
	case ST_ConstraintTypeTOff:
		_edcg.Value = "\u0074\u004f\u0066\u0066"
	case ST_ConstraintTypeUserA:
		_edcg.Value = "\u0075\u0073\u0065r\u0041"
	case ST_ConstraintTypeUserB:
		_edcg.Value = "\u0075\u0073\u0065r\u0042"
	case ST_ConstraintTypeUserC:
		_edcg.Value = "\u0075\u0073\u0065r\u0043"
	case ST_ConstraintTypeUserD:
		_edcg.Value = "\u0075\u0073\u0065r\u0044"
	case ST_ConstraintTypeUserE:
		_edcg.Value = "\u0075\u0073\u0065r\u0045"
	case ST_ConstraintTypeUserF:
		_edcg.Value = "\u0075\u0073\u0065r\u0046"
	case ST_ConstraintTypeUserG:
		_edcg.Value = "\u0075\u0073\u0065r\u0047"
	case ST_ConstraintTypeUserH:
		_edcg.Value = "\u0075\u0073\u0065r\u0048"
	case ST_ConstraintTypeUserI:
		_edcg.Value = "\u0075\u0073\u0065r\u0049"
	case ST_ConstraintTypeUserJ:
		_edcg.Value = "\u0075\u0073\u0065r\u004a"
	case ST_ConstraintTypeUserK:
		_edcg.Value = "\u0075\u0073\u0065r\u004b"
	case ST_ConstraintTypeUserL:
		_edcg.Value = "\u0075\u0073\u0065r\u004c"
	case ST_ConstraintTypeUserM:
		_edcg.Value = "\u0075\u0073\u0065r\u004d"
	case ST_ConstraintTypeUserN:
		_edcg.Value = "\u0075\u0073\u0065r\u004e"
	case ST_ConstraintTypeUserO:
		_edcg.Value = "\u0075\u0073\u0065r\u004f"
	case ST_ConstraintTypeUserP:
		_edcg.Value = "\u0075\u0073\u0065r\u0050"
	case ST_ConstraintTypeUserQ:
		_edcg.Value = "\u0075\u0073\u0065r\u0051"
	case ST_ConstraintTypeUserR:
		_edcg.Value = "\u0075\u0073\u0065r\u0052"
	case ST_ConstraintTypeUserS:
		_edcg.Value = "\u0075\u0073\u0065r\u0053"
	case ST_ConstraintTypeUserT:
		_edcg.Value = "\u0075\u0073\u0065r\u0054"
	case ST_ConstraintTypeUserU:
		_edcg.Value = "\u0075\u0073\u0065r\u0055"
	case ST_ConstraintTypeUserV:
		_edcg.Value = "\u0075\u0073\u0065r\u0056"
	case ST_ConstraintTypeUserW:
		_edcg.Value = "\u0075\u0073\u0065r\u0057"
	case ST_ConstraintTypeUserX:
		_edcg.Value = "\u0075\u0073\u0065r\u0058"
	case ST_ConstraintTypeUserY:
		_edcg.Value = "\u0075\u0073\u0065r\u0059"
	case ST_ConstraintTypeUserZ:
		_edcg.Value = "\u0075\u0073\u0065r\u005a"
	case ST_ConstraintTypeW:
		_edcg.Value = "\u0077"
	case ST_ConstraintTypeWArH:
		_edcg.Value = "\u0077\u0041\u0072\u0048"
	case ST_ConstraintTypeWOff:
		_edcg.Value = "\u0077\u004f\u0066\u0066"
	}
	return _edcg, nil
}
func (_fcfd *ST_HierBranchStyle) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_agfg, _cgbb := d.Token()
	if _cgbb != nil {
		return _cgbb
	}
	if _bcea, _dadec := _agfg.(_a.EndElement); _dadec && _bcea.Name == start.Name {
		*_fcfd = 1
		return nil
	}
	if _fbcbg, _afac := _agfg.(_a.CharData); !_afac {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _agfg)
	} else {
		switch string(_fbcbg) {
		case "":
			*_fcfd = 0
		case "\u006c":
			*_fcfd = 1
		case "\u0072":
			*_fcfd = 2
		case "\u0068\u0061\u006e\u0067":
			*_fcfd = 3
		case "\u0073\u0074\u0064":
			*_fcfd = 4
		case "\u0069\u006e\u0069\u0074":
			*_fcfd = 5
		}
	}
	_agfg, _cgbb = d.Token()
	if _cgbb != nil {
		return _cgbb
	}
	if _beace, _gcfb := _agfg.(_a.EndElement); _gcfb && _beace.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _agfg)
}

// Validate validates the ColorsDefHdr and its children
func (_ecgc *ColorsDefHdr) Validate() error {
	return _ecgc.ValidateWithPath("\u0043\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072")
}

type ST_ElementType byte

func (_egaga *StyleDef) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_egaga.CT_StyleDefinition = *NewCT_StyleDefinition()
	for _, _efabc := range start.Attr {
		if _efabc.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_gbbae := _efabc.Value
			_egaga.UniqueIdAttr = &_gbbae
			continue
		}
		if _efabc.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_cebga := _efabc.Value
			_egaga.MinVerAttr = &_cebga
			continue
		}
	}
_bedfe:
	for {
		_agca, _degda := d.Token()
		if _degda != nil {
			return _degda
		}
		switch _cagae := _agca.(type) {
		case _a.StartElement:
			switch _cagae.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_egfab := NewCT_SDName()
				if _aggcf := d.DecodeElement(_egfab, &_cagae); _aggcf != nil {
					return _aggcf
				}
				_egaga.Title = append(_egaga.Title, _egfab)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_deafb := NewCT_SDDescription()
				if _beccd := d.DecodeElement(_deafb, &_cagae); _beccd != nil {
					return _beccd
				}
				_egaga.Desc = append(_egaga.Desc, _deafb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_egaga.CatLst = NewCT_SDCategories()
				if _bgae := d.DecodeElement(_egaga.CatLst, &_cagae); _bgae != nil {
					return _bgae
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073c\u0065\u006e\u0065\u0033\u0064"}:
				_egaga.Scene3d = _b.NewCT_Scene3D()
				if _adge := d.DecodeElement(_egaga.Scene3d, &_cagae); _adge != nil {
					return _adge
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}:
				_aeae := NewCT_StyleLabel()
				if _daeg := d.DecodeElement(_aeae, &_cagae); _daeg != nil {
					return _daeg
				}
				_egaga.StyleLbl = append(_egaga.StyleLbl, _aeae)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_egaga.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _eabe := d.DecodeElement(_egaga.ExtLst, &_cagae); _eabe != nil {
					return _eabe
				}
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0020\u0025\u0076", _cagae.Name)
				if _dgcb := d.Skip(); _dgcb != nil {
					return _dgcb
				}
			}
		case _a.EndElement:
			break _bedfe
		case _a.CharData:
		}
	}
	return nil
}
func (_bbdf ST_PrSetCustVal) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _bbdf.ST_Percentage != nil {
		e.EncodeToken(_a.CharData(*_bbdf.ST_Percentage))
	}
	if _bbdf.Int32 != nil {
		e.EncodeToken(_a.CharData(_e.Sprintf("\u0025\u0064", *_bbdf.Int32)))
	}
	return e.EncodeToken(_a.EndElement{Name: start.Name})
}

// Validate validates the CT_BulletEnabled and its children
func (_dgfe *CT_BulletEnabled) Validate() error {
	return _dgfe.ValidateWithPath("\u0043\u0054_\u0042\u0075\u006cl\u0065\u0074\u0045\u006e\u0061\u0062\u006c\u0065\u0064")
}
func (_cegf *ST_BoolOperator) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_cegf = 0
	case "\u006e\u006f\u006e\u0065":
		*_cegf = 1
	case "\u0065\u0071\u0075":
		*_cegf = 2
	case "\u0067\u0074\u0065":
		*_cegf = 3
	case "\u006c\u0074\u0065":
		*_cegf = 4
	}
	return nil
}

const (
	ST_FlowDirectionUnset ST_FlowDirection = 0
	ST_FlowDirectionRow   ST_FlowDirection = 1
	ST_FlowDirectionCol   ST_FlowDirection = 2
)
const (
	ST_FunctionTypeUnset    ST_FunctionType = 0
	ST_FunctionTypeCnt      ST_FunctionType = 1
	ST_FunctionTypePos      ST_FunctionType = 2
	ST_FunctionTypeRevPos   ST_FunctionType = 3
	ST_FunctionTypePosEven  ST_FunctionType = 4
	ST_FunctionTypePosOdd   ST_FunctionType = 5
	ST_FunctionTypeVar      ST_FunctionType = 6
	ST_FunctionTypeDepth    ST_FunctionType = 7
	ST_FunctionTypeMaxDepth ST_FunctionType = 8
)

func (_dbae ST_TextAnchorVertical) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dbae.String(), start)
}
func (_aaca ST_VerticalAlignment) String() string {
	switch _aaca {
	case 0:
		return ""
	case 1:
		return "\u0074"
	case 2:
		return "\u006d\u0069\u0064"
	case 3:
		return "\u0062"
	case 4:
		return "\u006e\u006f\u006e\u0065"
	}
	return ""
}

type ST_VerticalAlignment byte

func NewLayoutDefHdrLst() *LayoutDefHdrLst {
	_bdee := &LayoutDefHdrLst{}
	_bdee.CT_DiagramDefinitionHeaderLst = *NewCT_DiagramDefinitionHeaderLst()
	return _bdee
}
func (_agaca ST_ElementType) ValidateWithPath(path string) error {
	switch _agaca {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_agaca))
	}
	return nil
}

// ValidateWithPath validates the CT_RelIds and its children, prefixing error messages with path
func (_efgd *CT_RelIds) ValidateWithPath(path string) error { return nil }
func NewCT_PtList() *CT_PtList                              { _aged := &CT_PtList{}; return _aged }
func (_ccfce ST_VariableType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_bbfab := _a.Attr{}
	_bbfab.Name = name
	switch _ccfce {
	case ST_VariableTypeUnset:
		_bbfab.Value = ""
	case ST_VariableTypeNone:
		_bbfab.Value = "\u006e\u006f\u006e\u0065"
	case ST_VariableTypeOrgChart:
		_bbfab.Value = "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074"
	case ST_VariableTypeChMax:
		_bbfab.Value = "\u0063\u0068\u004da\u0078"
	case ST_VariableTypeChPref:
		_bbfab.Value = "\u0063\u0068\u0050\u0072\u0065\u0066"
	case ST_VariableTypeBulEnabled:
		_bbfab.Value = "\u0062\u0075\u006c\u0045\u006e\u0061\u0062\u006c\u0065\u0064"
	case ST_VariableTypeDir:
		_bbfab.Value = "\u0064\u0069\u0072"
	case ST_VariableTypeHierBranch:
		_bbfab.Value = "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068"
	case ST_VariableTypeAnimOne:
		_bbfab.Value = "\u0061n\u0069\u006d\u004f\u006e\u0065"
	case ST_VariableTypeAnimLvl:
		_bbfab.Value = "\u0061n\u0069\u006d\u004c\u0076\u006c"
	case ST_VariableTypeResizeHandles:
		_bbfab.Value = "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073"
	}
	return _bbfab, nil
}

const (
	ST_BendPointUnset ST_BendPoint = 0
	ST_BendPointBeg   ST_BendPoint = 1
	ST_BendPointDef   ST_BendPoint = 2
	ST_BendPointEnd   ST_BendPoint = 3
)

type CT_CxnList struct {

	// Connection
	Cxn []*CT_Cxn
}

// ValidateWithPath validates the CT_SDCategory and its children, prefixing error messages with path
func (_debb *CT_SDCategory) ValidateWithPath(path string) error { return nil }

// Validate validates the DataModel and its children
func (_cgebg *DataModel) Validate() error {
	return _cgebg.ValidateWithPath("\u0044a\u0074\u0061\u004d\u006f\u0064\u0065l")
}
func (_aeaed ST_PtType) String() string {
	switch _aeaed {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u0064\u0065"
	case 2:
		return "\u0061\u0073\u0073\u0074"
	case 3:
		return "\u0064\u006f\u0063"
	case 4:
		return "\u0070\u0072\u0065\u0073"
	case 5:
		return "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073"
	case 6:
		return "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073"
	}
	return ""
}
func (_gbgbf *CT_TextProps) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gbgbf.Text3DChoice = _b.NewEG_Text3DChoice()
_adca:
	for {
		_ecggc, _dacfd := d.Token()
		if _dacfd != nil {
			return _dacfd
		}
		switch _gbgbg := _ecggc.(type) {
		case _a.StartElement:
			switch _gbgbg.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e", Local: "\u0073\u0070\u0033\u0064"}, _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072g\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u006d\u0061\u0069\u006e", Local: "\u0073\u0070\u0033\u0064"}:
				_gbgbf.Text3DChoice = _b.NewEG_Text3DChoice()
				if _adfdb := d.DecodeElement(&_gbgbf.Text3DChoice.Sp3d, &_gbgbg); _adfdb != nil {
					return _adfdb
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e", Local: "\u0066\u006c\u0061\u0074\u0054\u0078"}, _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072g\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u006d\u0061\u0069\u006e", Local: "\u0066\u006c\u0061\u0074\u0054\u0078"}:
				_gbgbf.Text3DChoice = _b.NewEG_Text3DChoice()
				if _ggcd := d.DecodeElement(&_gbgbf.Text3DChoice.FlatTx, &_gbgbg); _ggcd != nil {
					return _ggcd
				}
			default:
				_ag.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_T\u0065\u0078t\u0050\u0072\u006f\u0070\u0073\u0020\u0025\u0076", _gbgbg.Name)
				if _aeab := d.Skip(); _aeab != nil {
					return _aeab
				}
			}
		case _a.EndElement:
			break _adca
		case _a.CharData:
		}
	}
	return nil
}
func (_eaega *ST_ConnectorDimension) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_afdc, _cedde := d.Token()
	if _cedde != nil {
		return _cedde
	}
	if _eddgf, _gcfcge := _afdc.(_a.EndElement); _gcfcge && _eddgf.Name == start.Name {
		*_eaega = 1
		return nil
	}
	if _beaeg, _fbeeg := _afdc.(_a.CharData); !_fbeeg {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _afdc)
	} else {
		switch string(_beaeg) {
		case "":
			*_eaega = 0
		case "\u0031\u0044":
			*_eaega = 1
		case "\u0032\u0044":
			*_eaega = 2
		case "\u0063\u0075\u0073\u0074":
			*_eaega = 3
		}
	}
	_afdc, _cedde = d.Token()
	if _cedde != nil {
		return _cedde
	}
	if _ggacb, _egbf := _afdc.(_a.EndElement); _egbf && _ggacb.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _afdc)
}

// ST_FunctionValue is a union type
type ST_FunctionValue struct {
	Int32               *int32
	Bool                *bool
	ST_Direction        ST_Direction
	ST_HierBranchStyle  ST_HierBranchStyle
	ST_AnimOneStr       ST_AnimOneStr
	ST_AnimLvlStr       ST_AnimLvlStr
	ST_ResizeHandlesStr ST_ResizeHandlesStr
}

func (_cggf *CT_Direction) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _cfddfc := range start.Attr {
		if _cfddfc.Name.Local == "\u0076\u0061\u006c" {
			_cggf.ValAttr.UnmarshalXMLAttr(_cfddfc)
			continue
		}
	}
	for {
		_gac, _cceb := d.Token()
		if _cceb != nil {
			return _e.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0044\u0069r\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0073", _cceb)
		}
		if _dedc, _edge := _gac.(_a.EndElement); _edge && _dedc.Name == start.Name {
			break
		}
	}
	return nil
}
func (_gega *CT_Constraint) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _gega.OpAttr != ST_BoolOperatorUnset {
		_gfbg, _cfe := _gega.OpAttr.MarshalXMLAttr(_a.Name{Local: "\u006f\u0070"})
		if _cfe != nil {
			return _cfe
		}
		start.Attr = append(start.Attr, _gfbg)
	}
	if _gega.ValAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _e.Sprintf("\u0025\u0076", *_gega.ValAttr)})
	}
	if _gega.FactAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0066\u0061\u0063\u0074"}, Value: _e.Sprintf("\u0025\u0076", *_gega.FactAttr)})
	}
	_cba, _dbcc := _gega.TypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0074\u0079\u0070\u0065"})
	if _dbcc != nil {
		return _dbcc
	}
	start.Attr = append(start.Attr, _cba)
	if _gega.ForAttr != ST_ConstraintRelationshipUnset {
		_abdb, _eagc := _gega.ForAttr.MarshalXMLAttr(_a.Name{Local: "\u0066\u006f\u0072"})
		if _eagc != nil {
			return _eagc
		}
		start.Attr = append(start.Attr, _abdb)
	}
	if _gega.ForNameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0066o\u0072\u004e\u0061\u006d\u0065"}, Value: _e.Sprintf("\u0025\u0076", *_gega.ForNameAttr)})
	}
	if _gega.PtTypeAttr != ST_ElementTypeUnset {
		_adec, _dfae := _gega.PtTypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"})
		if _dfae != nil {
			return _dfae
		}
		start.Attr = append(start.Attr, _adec)
	}
	if _gega.RefTypeAttr != ST_ConstraintTypeUnset {
		_cda, _eaga := _gega.RefTypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0072e\u0066\u0054\u0079\u0070\u0065"})
		if _eaga != nil {
			return _eaga
		}
		start.Attr = append(start.Attr, _cda)
	}
	if _gega.RefForAttr != ST_ConstraintRelationshipUnset {
		_eddg, _cfbb := _gega.RefForAttr.MarshalXMLAttr(_a.Name{Local: "\u0072\u0065\u0066\u0046\u006f\u0072"})
		if _cfbb != nil {
			return _cfbb
		}
		start.Attr = append(start.Attr, _eddg)
	}
	if _gega.RefForNameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u0065\u0066\u0046\u006f\u0072\u004e\u0061\u006d\u0065"}, Value: _e.Sprintf("\u0025\u0076", *_gega.RefForNameAttr)})
	}
	if _gega.RefPtTypeAttr != ST_ElementTypeUnset {
		_fce, _eege := _gega.RefPtTypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0072e\u0066\u0050\u0074\u0054\u0079\u0070e"})
		if _eege != nil {
			return _eege
		}
		start.Attr = append(start.Attr, _fce)
	}
	e.EncodeToken(start)
	if _gega.ExtLst != nil {
		_acea := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gega.ExtLst, _acea)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type CT_Pt struct {

	// Model Identifier
	ModelIdAttr ST_ModelId

	// Point Type
	TypeAttr ST_PtType

	// Connection Identifier
	CxnIdAttr *ST_ModelId

	// Property Set
	PrSet *CT_ElemPropSet

	// Shape Properties
	SpPr *_b.CT_ShapeProperties

	// Text Body
	T      *_b.CT_TextBody
	ExtLst *_b.CT_OfficeArtExtensionList
}

func (_ccdad ST_TextDirection) ValidateWithPath(path string) error {
	switch _ccdad {
	case 0, 1, 2:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ccdad))
	}
	return nil
}

// ValidateWithPath validates the CT_SDName and its children, prefixing error messages with path
func (_eggb *CT_SDName) ValidateWithPath(path string) error { return nil }
func (_aeeaa ST_SecondaryChildAlignment) Validate() error   { return _aeeaa.ValidateWithPath("") }
func (_bbgfd ST_ConstraintRelationship) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_gfba := _a.Attr{}
	_gfba.Name = name
	switch _bbgfd {
	case ST_ConstraintRelationshipUnset:
		_gfba.Value = ""
	case ST_ConstraintRelationshipSelf:
		_gfba.Value = "\u0073\u0065\u006c\u0066"
	case ST_ConstraintRelationshipCh:
		_gfba.Value = "\u0063\u0068"
	case ST_ConstraintRelationshipDes:
		_gfba.Value = "\u0064\u0065\u0073"
	}
	return _gfba, nil
}

// ValidateWithPath validates the CT_ForEachChoice and its children, prefixing error messages with path
func (_adee *CT_ForEachChoice) ValidateWithPath(path string) error {
	if _adee.Alg != nil {
		if _egb := _adee.Alg.ValidateWithPath(path + "\u002f\u0041\u006c\u0067"); _egb != nil {
			return _egb
		}
	}
	if _adee.Shape != nil {
		if _aafg := _adee.Shape.ValidateWithPath(path + "\u002f\u0053\u0068\u0061\u0070\u0065"); _aafg != nil {
			return _aafg
		}
	}
	if _adee.PresOf != nil {
		if _ebbb := _adee.PresOf.ValidateWithPath(path + "\u002fP\u0072\u0065\u0073\u004f\u0066"); _ebbb != nil {
			return _ebbb
		}
	}
	if _adee.ConstrLst != nil {
		if _cdge := _adee.ConstrLst.ValidateWithPath(path + "\u002f\u0043\u006f\u006e\u0073\u0074\u0072\u004c\u0073\u0074"); _cdge != nil {
			return _cdge
		}
	}
	if _adee.RuleLst != nil {
		if _fdeg := _adee.RuleLst.ValidateWithPath(path + "\u002f\u0052\u0075\u006c\u0065\u004c\u0073\u0074"); _fdeg != nil {
			return _fdeg
		}
	}
	if _adee.ForEach != nil {
		if _afff := _adee.ForEach.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0045\u0061\u0063\u0068"); _afff != nil {
			return _afff
		}
	}
	if _adee.LayoutNode != nil {
		if _fcbc := _adee.LayoutNode.ValidateWithPath(path + "/\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"); _fcbc != nil {
			return _fcbc
		}
	}
	if _adee.Choose != nil {
		if _abbbb := _adee.Choose.ValidateWithPath(path + "\u002fC\u0068\u006f\u006f\u0073\u0065"); _abbbb != nil {
			return _abbbb
		}
	}
	if _adee.ExtLst != nil {
		if _deae := _adee.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _deae != nil {
			return _deae
		}
	}
	return nil
}
func (_begfb ST_CxnType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_ecded := _a.Attr{}
	_ecded.Name = name
	switch _begfb {
	case ST_CxnTypeUnset:
		_ecded.Value = ""
	case ST_CxnTypeParOf:
		_ecded.Value = "\u0070\u0061\u0072O\u0066"
	case ST_CxnTypePresOf:
		_ecded.Value = "\u0070\u0072\u0065\u0073\u004f\u0066"
	case ST_CxnTypePresParOf:
		_ecded.Value = "\u0070r\u0065\u0073\u0050\u0061\u0072\u004ff"
	case ST_CxnTypeUnknownRelationship:
		_ecded.Value = "\u0075\u006e\u006b\u006eow\u006e\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070"
	}
	return _ecded, nil
}

// ValidateWithPath validates the CT_ResizeHandles and its children, prefixing error messages with path
func (_eecd *CT_ResizeHandles) ValidateWithPath(path string) error {
	if _fddd := _eecd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fddd != nil {
		return _fddd
	}
	return nil
}
func NewCT_HierBranchStyle() *CT_HierBranchStyle {
	_ggga := &CT_HierBranchStyle{}
	return _ggga
}

const (
	ST_DiagramTextAlignmentUnset ST_DiagramTextAlignment = 0
	ST_DiagramTextAlignmentL     ST_DiagramTextAlignment = 1
	ST_DiagramTextAlignmentCtr   ST_DiagramTextAlignment = 2
	ST_DiagramTextAlignmentR     ST_DiagramTextAlignment = 3
)

func (_dfdec ST_AutoTextRotation) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dfdec.String(), start)
}
func (_cgb *CT_DiagramDefinition) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cgb.LayoutNode = NewCT_LayoutNode()
	for _, _eeac := range start.Attr {
		if _eeac.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_bdgg := _eeac.Value
			_cgb.UniqueIdAttr = &_bdgg
			continue
		}
		if _eeac.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_cbdc := _eeac.Value
			_cgb.MinVerAttr = &_cbdc
			continue
		}
		if _eeac.Name.Local == "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065" {
			_gcaf := _eeac.Value
			_cgb.DefStyleAttr = &_gcaf
			continue
		}
	}
_gcdde:
	for {
		_cabe, _cfc := d.Token()
		if _cfc != nil {
			return _cfc
		}
		switch _egcc := _cabe.(type) {
		case _a.StartElement:
			switch _egcc.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_debe := NewCT_Name()
				if _eabg := d.DecodeElement(_debe, &_egcc); _eabg != nil {
					return _eabg
				}
				_cgb.Title = append(_cgb.Title, _debe)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_accb := NewCT_Description()
				if _bcbe := d.DecodeElement(_accb, &_egcc); _bcbe != nil {
					return _bcbe
				}
				_cgb.Desc = append(_cgb.Desc, _accb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_cgb.CatLst = NewCT_Categories()
				if _ecdee := d.DecodeElement(_cgb.CatLst, &_egcc); _ecdee != nil {
					return _ecdee
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0061\u006d\u0070\u0044\u0061\u0074\u0061"}:
				_cgb.SampData = NewCT_SampleData()
				if _edag := d.DecodeElement(_cgb.SampData, &_egcc); _edag != nil {
					return _edag
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073t\u0079\u006c\u0065\u0044\u0061\u0074a"}:
				_cgb.StyleData = NewCT_SampleData()
				if _ffb := d.DecodeElement(_cgb.StyleData, &_egcc); _ffb != nil {
					return _ffb
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063l\u0072\u0044\u0061\u0074\u0061"}:
				_cgb.ClrData = NewCT_SampleData()
				if _cggee := d.DecodeElement(_cgb.ClrData, &_egcc); _cggee != nil {
					return _cggee
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				if _acee := d.DecodeElement(_cgb.LayoutNode, &_egcc); _acee != nil {
					return _acee
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cgb.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _edba := d.DecodeElement(_cgb.ExtLst, &_egcc); _edba != nil {
					return _edba
				}
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070o\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006de\u006et \u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0020\u0025\u0076", _egcc.Name)
				if _ebaa := d.Skip(); _ebaa != nil {
					return _ebaa
				}
			}
		case _a.EndElement:
			break _gcdde
		case _a.CharData:
		}
	}
	return nil
}

const (
	ST_GrowDirectionUnset ST_GrowDirection = 0
	ST_GrowDirectionTL    ST_GrowDirection = 1
	ST_GrowDirectionTR    ST_GrowDirection = 2
	ST_GrowDirectionBL    ST_GrowDirection = 3
	ST_GrowDirectionBR    ST_GrowDirection = 4
)

func (_agcf ST_ConstraintRelationship) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_agcf.String(), start)
}
func (_de *AG_ConstraintAttributes) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	_ba, _bb := _de.TypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0074\u0079\u0070\u0065"})
	if _bb != nil {
		return _bb
	}
	start.Attr = append(start.Attr, _ba)
	if _de.ForAttr != ST_ConstraintRelationshipUnset {
		_be, _ae := _de.ForAttr.MarshalXMLAttr(_a.Name{Local: "\u0066\u006f\u0072"})
		if _ae != nil {
			return _ae
		}
		start.Attr = append(start.Attr, _be)
	}
	if _de.ForNameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0066o\u0072\u004e\u0061\u006d\u0065"}, Value: _e.Sprintf("\u0025\u0076", *_de.ForNameAttr)})
	}
	if _de.PtTypeAttr != ST_ElementTypeUnset {
		_ad, _fb := _de.PtTypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"})
		if _fb != nil {
			return _fb
		}
		start.Attr = append(start.Attr, _ad)
	}
	return nil
}
func (_ecff ST_ElementType) Validate() error { return _ecff.ValidateWithPath("") }
func (_fcgcf *ST_GrowDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cbagb, _febgd := d.Token()
	if _febgd != nil {
		return _febgd
	}
	if _bebb, _dggf := _cbagb.(_a.EndElement); _dggf && _bebb.Name == start.Name {
		*_fcgcf = 1
		return nil
	}
	if _bcbb, _ffbd := _cbagb.(_a.CharData); !_ffbd {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cbagb)
	} else {
		switch string(_bcbb) {
		case "":
			*_fcgcf = 0
		case "\u0074\u004c":
			*_fcgcf = 1
		case "\u0074\u0052":
			*_fcgcf = 2
		case "\u0062\u004c":
			*_fcgcf = 3
		case "\u0062\u0052":
			*_fcgcf = 4
		}
	}
	_cbagb, _febgd = d.Token()
	if _febgd != nil {
		return _febgd
	}
	if _ebfa, _bccgd := _cbagb.(_a.EndElement); _bccgd && _ebfa.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cbagb)
}
func NewCT_AnimLvl() *CT_AnimLvl {
	_ccb := &CT_AnimLvl{}
	return _ccb
}
func (_abcfc *StyleDefHdrLst) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0073\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048d\u0072\u004c\u0073\u0074"
	return _abcfc.CT_StyleDefinitionHeaderLst.MarshalXML(e, start)
}

type CT_Shape struct {

	// Rotation
	RotAttr *float64

	// Shape Type
	TypeAttr *ST_LayoutShapeType
	BlipAttr *string

	// Z-Order Offset
	ZOrderOffAttr *int32

	// Hide Geometry
	HideGeomAttr *bool

	// Prevent Text Editing
	LkTxEntryAttr *bool

	// Image Placeholder
	BlipPhldrAttr *bool

	// Shape Adjust List
	AdjLst *CT_AdjLst
	ExtLst *_b.CT_OfficeArtExtensionList
}

func (_egc *CT_Choose) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _egc.NameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _e.Sprintf("\u0025\u0076", *_egc.NameAttr)})
	}
	e.EncodeToken(start)
	_eddf := _a.StartElement{Name: _a.Name{Local: "\u0069\u0066"}}
	for _, _ccdg := range _egc.If {
		e.EncodeElement(_ccdg, _eddf)
	}
	if _egc.Else != nil {
		_cee := _a.StartElement{Name: _a.Name{Local: "\u0065\u006c\u0073\u0065"}}
		e.EncodeElement(_egc.Else, _cee)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_fcbec *CT_SampleData) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _fcbec.UseDefAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0075\u0073\u0065\u0044\u0065\u0066"}, Value: _e.Sprintf("\u0025\u0064", _gfaf(*_fcbec.UseDefAttr))})
	}
	e.EncodeToken(start)
	if _fcbec.DataModel != nil {
		_efdf := _a.StartElement{Name: _a.Name{Local: "\u0064a\u0074\u0061\u004d\u006f\u0064\u0065l"}}
		e.EncodeElement(_fcbec.DataModel, _efdf)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

const (
	ST_HierBranchStyleUnset ST_HierBranchStyle = 0
	ST_HierBranchStyleL     ST_HierBranchStyle = 1
	ST_HierBranchStyleR     ST_HierBranchStyle = 2
	ST_HierBranchStyleHang  ST_HierBranchStyle = 3
	ST_HierBranchStyleStd   ST_HierBranchStyle = 4
	ST_HierBranchStyleInit  ST_HierBranchStyle = 5
)

func (_eceg ST_HueDir) ValidateWithPath(path string) error {
	switch _eceg {
	case 0, 1, 2:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_eceg))
	}
	return nil
}

type CT_When struct {

	// Name
	NameAttr *string

	// Function
	FuncAttr ST_FunctionType

	// Argument
	ArgAttr *ST_FunctionArgument

	// Operator
	OpAttr ST_FunctionOperator

	// Value
	ValAttr           ST_FunctionValue
	WhenChoice        []*CT_WhenChoice
	AxisAttr          *ST_AxisTypes
	PtTypeAttr        *ST_ElementTypes
	HideLastTransAttr *ST_Booleans
	StAttr            *ST_Ints
	CntAttr           *ST_UnsignedInts
	StepAttr          *ST_Ints
}

func (_fbcge ST_NodeVerticalAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_fbcge.String(), start)
}
func NewCT_OtherwiseChoice() *CT_OtherwiseChoice { _ecba := &CT_OtherwiseChoice{}; return _ecba }
func (_abebe ST_PrSetCustVal) String() string {
	if _abebe.ST_Percentage != nil {
		return _e.Sprintf("\u0025\u0076", *_abebe.ST_Percentage)
	}
	if _abebe.Int32 != nil {
		return _e.Sprintf("\u0025\u0076", *_abebe.Int32)
	}
	return ""
}
func (_ddfa ST_HierBranchStyle) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_ddfa.String(), start)
}
func NewCT_ResizeHandles() *CT_ResizeHandles { _ggge := &CT_ResizeHandles{}; return _ggge }

// ValidateWithPath validates the CT_Rules and its children, prefixing error messages with path
func (_aebac *CT_Rules) ValidateWithPath(path string) error {
	for _cfgg, _fffd := range _aebac.Rule {
		if _eafc := _fffd.ValidateWithPath(_e.Sprintf("%\u0073\u002f\u0052\u0075\u006c\u0065\u005b\u0025\u0064\u005d", path, _cfgg)); _eafc != nil {
			return _eafc
		}
	}
	return nil
}

type CT_Direction struct {

	// Diagram Direction Value
	ValAttr ST_Direction
}

func (_bfba ST_BoolOperator) Validate() error { return _bfba.ValidateWithPath("") }

type ST_ConnectorRouting byte

// Validate validates the CT_LayoutNodeChoice and its children
func (_cbb *CT_LayoutNodeChoice) Validate() error {
	return _cbb.ValidateWithPath("\u0043\u0054\u005f\u004cay\u006f\u0075\u0074\u004e\u006f\u0064\u0065\u0043\u0068\u006f\u0069\u0063\u0065")
}
func (_egaag *CT_OrgChart) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _egaag.ValAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _e.Sprintf("\u0025\u0064", _gfaf(*_egaag.ValAttr))})
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the StyleDefHdrLst and its children, prefixing error messages with path
func (_gfga *StyleDefHdrLst) ValidateWithPath(path string) error {
	if _gaabb := _gfga.CT_StyleDefinitionHeaderLst.ValidateWithPath(path); _gaabb != nil {
		return _gaabb
	}
	return nil
}
func (_aeaee ST_AlgorithmType) Validate() error { return _aeaee.ValidateWithPath("") }

type ST_FunctionType byte

func (_acdbg ST_OutputShapeType) String() string {
	switch _acdbg {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0063\u006f\u006e\u006e"
	}
	return ""
}

// ValidateWithPath validates the CT_CTDescription and its children, prefixing error messages with path
func (_caff *CT_CTDescription) ValidateWithPath(path string) error { return nil }
func (_ddcdb ST_AutoTextRotation) Validate() error                 { return _ddcdb.ValidateWithPath("") }
func (_egegc ST_SecondaryLinearDirection) Validate() error         { return _egegc.ValidateWithPath("") }
func (_eggde ST_BoolOperator) String() string {
	switch _eggde {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0065\u0071\u0075"
	case 3:
		return "\u0067\u0074\u0065"
	case 4:
		return "\u006c\u0074\u0065"
	}
	return ""
}
func (_cafg *ST_LinearDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_cafg = 0
	case "\u0066\u0072\u006fm\u004c":
		*_cafg = 1
	case "\u0066\u0072\u006fm\u0052":
		*_cafg = 2
	case "\u0066\u0072\u006fm\u0054":
		*_cafg = 3
	case "\u0066\u0072\u006fm\u0042":
		*_cafg = 4
	}
	return nil
}

type CT_CTName struct {

	// Language
	LangAttr *string

	// Description Value
	ValAttr string
}

func (_caf *CT_BulletEnabled) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _caf.ValAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _e.Sprintf("\u0025\u0064", _gfaf(*_caf.ValAttr))})
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_dbecca ST_AnimLvlStr) String() string {
	switch _dbecca {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u006c\u0076\u006c"
	case 3:
		return "\u0063\u0074\u0072"
	}
	return ""
}
func (_dgeg *ST_TextBlockDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gaebf, _fbcc := d.Token()
	if _fbcc != nil {
		return _fbcc
	}
	if _fcffa, _bbga := _gaebf.(_a.EndElement); _bbga && _fcffa.Name == start.Name {
		*_dgeg = 1
		return nil
	}
	if _ebafb, _cffee := _gaebf.(_a.CharData); !_cffee {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gaebf)
	} else {
		switch string(_ebafb) {
		case "":
			*_dgeg = 0
		case "\u0068\u006f\u0072\u007a":
			*_dgeg = 1
		case "\u0076\u0065\u0072\u0074":
			*_dgeg = 2
		}
	}
	_gaebf, _fbcc = d.Token()
	if _fbcc != nil {
		return _fbcc
	}
	if _bbbcd, _dgbdc := _gaebf.(_a.EndElement); _dgbdc && _bbbcd.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gaebf)
}
func (_adcec ST_FunctionType) Validate() error { return _adcec.ValidateWithPath("") }

type ST_Offset byte
type CT_AdjLst struct {

	// Shape Adjust
	Adj []*CT_Adj
}

func (_fagg *ST_AutoTextRotation) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_fagg = 0
	case "\u006e\u006f\u006e\u0065":
		*_fagg = 1
	case "\u0075\u0070\u0072":
		*_fagg = 2
	case "\u0067\u0072\u0061\u0076":
		*_fagg = 3
	}
	return nil
}

const (
	ST_ConstraintTypeUnset         ST_ConstraintType = 0
	ST_ConstraintTypeNone          ST_ConstraintType = 1
	ST_ConstraintTypeAlignOff      ST_ConstraintType = 2
	ST_ConstraintTypeBegMarg       ST_ConstraintType = 3
	ST_ConstraintTypeBendDist      ST_ConstraintType = 4
	ST_ConstraintTypeBegPad        ST_ConstraintType = 5
	ST_ConstraintTypeB             ST_ConstraintType = 6
	ST_ConstraintTypeBMarg         ST_ConstraintType = 7
	ST_ConstraintTypeBOff          ST_ConstraintType = 8
	ST_ConstraintTypeCtrX          ST_ConstraintType = 9
	ST_ConstraintTypeCtrXOff       ST_ConstraintType = 10
	ST_ConstraintTypeCtrY          ST_ConstraintType = 11
	ST_ConstraintTypeCtrYOff       ST_ConstraintType = 12
	ST_ConstraintTypeConnDist      ST_ConstraintType = 13
	ST_ConstraintTypeDiam          ST_ConstraintType = 14
	ST_ConstraintTypeEndMarg       ST_ConstraintType = 15
	ST_ConstraintTypeEndPad        ST_ConstraintType = 16
	ST_ConstraintTypeH             ST_ConstraintType = 17
	ST_ConstraintTypeHArH          ST_ConstraintType = 18
	ST_ConstraintTypeHOff          ST_ConstraintType = 19
	ST_ConstraintTypeL             ST_ConstraintType = 20
	ST_ConstraintTypeLMarg         ST_ConstraintType = 21
	ST_ConstraintTypeLOff          ST_ConstraintType = 22
	ST_ConstraintTypeR             ST_ConstraintType = 23
	ST_ConstraintTypeRMarg         ST_ConstraintType = 24
	ST_ConstraintTypeROff          ST_ConstraintType = 25
	ST_ConstraintTypePrimFontSz    ST_ConstraintType = 26
	ST_ConstraintTypePyraAcctRatio ST_ConstraintType = 27
	ST_ConstraintTypeSecFontSz     ST_ConstraintType = 28
	ST_ConstraintTypeSibSp         ST_ConstraintType = 29
	ST_ConstraintTypeSecSibSp      ST_ConstraintType = 30
	ST_ConstraintTypeSp            ST_ConstraintType = 31
	ST_ConstraintTypeStemThick     ST_ConstraintType = 32
	ST_ConstraintTypeT             ST_ConstraintType = 33
	ST_ConstraintTypeTMarg         ST_ConstraintType = 34
	ST_ConstraintTypeTOff          ST_ConstraintType = 35
	ST_ConstraintTypeUserA         ST_ConstraintType = 36
	ST_ConstraintTypeUserB         ST_ConstraintType = 37
	ST_ConstraintTypeUserC         ST_ConstraintType = 38
	ST_ConstraintTypeUserD         ST_ConstraintType = 39
	ST_ConstraintTypeUserE         ST_ConstraintType = 40
	ST_ConstraintTypeUserF         ST_ConstraintType = 41
	ST_ConstraintTypeUserG         ST_ConstraintType = 42
	ST_ConstraintTypeUserH         ST_ConstraintType = 43
	ST_ConstraintTypeUserI         ST_ConstraintType = 44
	ST_ConstraintTypeUserJ         ST_ConstraintType = 45
	ST_ConstraintTypeUserK         ST_ConstraintType = 46
	ST_ConstraintTypeUserL         ST_ConstraintType = 47
	ST_ConstraintTypeUserM         ST_ConstraintType = 48
	ST_ConstraintTypeUserN         ST_ConstraintType = 49
	ST_ConstraintTypeUserO         ST_ConstraintType = 50
	ST_ConstraintTypeUserP         ST_ConstraintType = 51
	ST_ConstraintTypeUserQ         ST_ConstraintType = 52
	ST_ConstraintTypeUserR         ST_ConstraintType = 53
	ST_ConstraintTypeUserS         ST_ConstraintType = 54
	ST_ConstraintTypeUserT         ST_ConstraintType = 55
	ST_ConstraintTypeUserU         ST_ConstraintType = 56
	ST_ConstraintTypeUserV         ST_ConstraintType = 57
	ST_ConstraintTypeUserW         ST_ConstraintType = 58
	ST_ConstraintTypeUserX         ST_ConstraintType = 59
	ST_ConstraintTypeUserY         ST_ConstraintType = 60
	ST_ConstraintTypeUserZ         ST_ConstraintType = 61
	ST_ConstraintTypeW             ST_ConstraintType = 62
	ST_ConstraintTypeWArH          ST_ConstraintType = 63
	ST_ConstraintTypeWOff          ST_ConstraintType = 64
)

// ValidateWithPath validates the CT_Name and its children, prefixing error messages with path
func (_dfbd *CT_Name) ValidateWithPath(path string) error { return nil }
func (_edbc ST_Breakpoint) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_edbc.String(), start)
}
func (_dfg *CT_CTCategories) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_gcfe:
	for {
		_bcdg, _edg := d.Token()
		if _edg != nil {
			return _edg
		}
		switch _ggb := _bcdg.(type) {
		case _a.StartElement:
			switch _ggb.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074"}:
				_dggd := NewCT_CTCategory()
				if _cge := d.DecodeElement(_dggd, &_ggb); _cge != nil {
					return _cge
				}
				_dfg.Cat = append(_dfg.Cat, _dggd)
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0054\u0043a\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073\u0020\u0025\u0076", _ggb.Name)
				if _gdbdd := d.Skip(); _gdbdd != nil {
					return _gdbdd
				}
			}
		case _a.EndElement:
			break _gcfe
		case _a.CharData:
		}
	}
	return nil
}
func (_abee *ST_ContinueDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_abee = 0
	case "\u0072\u0065\u0076\u0044\u0069\u0072":
		*_abee = 1
	case "\u0073a\u006d\u0065\u0044\u0069\u0072":
		*_abee = 2
	}
	return nil
}
func (_gacd *ST_VerticalAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_abed, _bbfeg := d.Token()
	if _bbfeg != nil {
		return _bbfeg
	}
	if _abbf, _dcef := _abed.(_a.EndElement); _dcef && _abbf.Name == start.Name {
		*_gacd = 1
		return nil
	}
	if _gdbff, _ebedb := _abed.(_a.CharData); !_ebedb {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _abed)
	} else {
		switch string(_gdbff) {
		case "":
			*_gacd = 0
		case "\u0074":
			*_gacd = 1
		case "\u006d\u0069\u0064":
			*_gacd = 2
		case "\u0062":
			*_gacd = 3
		case "\u006e\u006f\u006e\u0065":
			*_gacd = 4
		}
	}
	_abed, _bbfeg = d.Token()
	if _bbfeg != nil {
		return _bbfeg
	}
	if _dcbf, _aeecd := _abed.(_a.EndElement); _aeecd && _dcbf.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _abed)
}

const (
	ST_VariableTypeUnset         ST_VariableType = 0
	ST_VariableTypeNone          ST_VariableType = 1
	ST_VariableTypeOrgChart      ST_VariableType = 2
	ST_VariableTypeChMax         ST_VariableType = 3
	ST_VariableTypeChPref        ST_VariableType = 4
	ST_VariableTypeBulEnabled    ST_VariableType = 5
	ST_VariableTypeDir           ST_VariableType = 6
	ST_VariableTypeHierBranch    ST_VariableType = 7
	ST_VariableTypeAnimOne       ST_VariableType = 8
	ST_VariableTypeAnimLvl       ST_VariableType = 9
	ST_VariableTypeResizeHandles ST_VariableType = 10
)

// ValidateWithPath validates the CT_AnimOne and its children, prefixing error messages with path
func (_ccdb *CT_AnimOne) ValidateWithPath(path string) error {
	if _ceca := _ccdb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _ceca != nil {
		return _ceca
	}
	return nil
}

// ValidateWithPath validates the CT_Choose and its children, prefixing error messages with path
func (_eeab *CT_Choose) ValidateWithPath(path string) error {
	for _dcdb, _ggf := range _eeab.If {
		if _adef := _ggf.ValidateWithPath(_e.Sprintf("\u0025s\u002f\u0049\u0066\u005b\u0025\u0064]", path, _dcdb)); _adef != nil {
			return _adef
		}
	}
	if _eeab.Else != nil {
		if _cae := _eeab.Else.ValidateWithPath(path + "\u002f\u0045\u006cs\u0065"); _cae != nil {
			return _cae
		}
	}
	return nil
}
func (_cfdba ST_OutputShapeType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_cfdba.String(), start)
}

// ValidateWithPath validates the CT_NumericRule and its children, prefixing error messages with path
func (_fdda *CT_NumericRule) ValidateWithPath(path string) error {
	if _fdda.ExtLst != nil {
		if _ggea := _fdda.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ggea != nil {
			return _ggea
		}
	}
	if _fdda.TypeAttr == ST_ConstraintTypeUnset {
		return _e.Errorf("\u0025\u0073\u002f\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072\u0020\u0069\u0073\u0020a\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _abgg := _fdda.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _abgg != nil {
		return _abgg
	}
	if _gbab := _fdda.ForAttr.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0041\u0074\u0074\u0072"); _gbab != nil {
		return _gbab
	}
	if _degdd := _fdda.PtTypeAttr.ValidateWithPath(path + "/\u0050\u0074\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072"); _degdd != nil {
		return _degdd
	}
	return nil
}

// ValidateWithPath validates the CT_OtherwiseChoice and its children, prefixing error messages with path
func (_dcbd *CT_OtherwiseChoice) ValidateWithPath(path string) error {
	if _dcbd.Alg != nil {
		if _eggff := _dcbd.Alg.ValidateWithPath(path + "\u002f\u0041\u006c\u0067"); _eggff != nil {
			return _eggff
		}
	}
	if _dcbd.Shape != nil {
		if _gaebg := _dcbd.Shape.ValidateWithPath(path + "\u002f\u0053\u0068\u0061\u0070\u0065"); _gaebg != nil {
			return _gaebg
		}
	}
	if _dcbd.PresOf != nil {
		if _cfdgg := _dcbd.PresOf.ValidateWithPath(path + "\u002fP\u0072\u0065\u0073\u004f\u0066"); _cfdgg != nil {
			return _cfdgg
		}
	}
	if _dcbd.ConstrLst != nil {
		if _aage := _dcbd.ConstrLst.ValidateWithPath(path + "\u002f\u0043\u006f\u006e\u0073\u0074\u0072\u004c\u0073\u0074"); _aage != nil {
			return _aage
		}
	}
	if _dcbd.RuleLst != nil {
		if _aagg := _dcbd.RuleLst.ValidateWithPath(path + "\u002f\u0052\u0075\u006c\u0065\u004c\u0073\u0074"); _aagg != nil {
			return _aagg
		}
	}
	if _dcbd.ForEach != nil {
		if _gfde := _dcbd.ForEach.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0045\u0061\u0063\u0068"); _gfde != nil {
			return _gfde
		}
	}
	if _dcbd.LayoutNode != nil {
		if _bgbf := _dcbd.LayoutNode.ValidateWithPath(path + "/\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"); _bgbf != nil {
			return _bgbf
		}
	}
	if _dcbd.Choose != nil {
		if _cdeg := _dcbd.Choose.ValidateWithPath(path + "\u002fC\u0068\u006f\u006f\u0073\u0065"); _cdeg != nil {
			return _cdeg
		}
	}
	if _dcbd.ExtLst != nil {
		if _cdgc := _dcbd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cdgc != nil {
			return _cdgc
		}
	}
	return nil
}
func (_bgaee *ST_AnimLvlStr) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_fdbc, _acdf := d.Token()
	if _acdf != nil {
		return _acdf
	}
	if _efef, _defbge := _fdbc.(_a.EndElement); _defbge && _efef.Name == start.Name {
		*_bgaee = 1
		return nil
	}
	if _eded, _edffe := _fdbc.(_a.CharData); !_edffe {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fdbc)
	} else {
		switch string(_eded) {
		case "":
			*_bgaee = 0
		case "\u006e\u006f\u006e\u0065":
			*_bgaee = 1
		case "\u006c\u0076\u006c":
			*_bgaee = 2
		case "\u0063\u0074\u0072":
			*_bgaee = 3
		}
	}
	_fdbc, _acdf = d.Token()
	if _acdf != nil {
		return _acdf
	}
	if _acbad, _cgaed := _fdbc.(_a.EndElement); _cgaed && _acbad.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fdbc)
}

type ColorsDef struct{ CT_ColorTransform }

func (_dbffc ST_AxisType) Validate() error { return _dbffc.ValidateWithPath("") }
func (_fbgcb *ST_StartingElement) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gfdbd, _ecdae := d.Token()
	if _ecdae != nil {
		return _ecdae
	}
	if _agad, _daegd := _gfdbd.(_a.EndElement); _daegd && _agad.Name == start.Name {
		*_fbgcb = 1
		return nil
	}
	if _aafbg, _dcbgfa := _gfdbd.(_a.CharData); !_dcbgfa {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gfdbd)
	} else {
		switch string(_aafbg) {
		case "":
			*_fbgcb = 0
		case "\u006e\u006f\u0064\u0065":
			*_fbgcb = 1
		case "\u0074\u0072\u0061n\u0073":
			*_fbgcb = 2
		}
	}
	_gfdbd, _ecdae = d.Token()
	if _ecdae != nil {
		return _ecdae
	}
	if _dffd, _dded := _gfdbd.(_a.EndElement); _dded && _dffd.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gfdbd)
}

// Validate validates the CT_When and its children
func (_fgcf *CT_When) Validate() error {
	return _fgcf.ValidateWithPath("\u0043T\u005f\u0057\u0068\u0065\u006e")
}
func (_gcc *CT_AnimLvl) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _fca := range start.Attr {
		if _fca.Name.Local == "\u0076\u0061\u006c" {
			_gcc.ValAttr.UnmarshalXMLAttr(_fca)
			continue
		}
	}
	for {
		_fefd, _agg := d.Token()
		if _agg != nil {
			return _e.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004c\u0076\u006c\u003a\u0020%\u0073", _agg)
		}
		if _gba, _da := _fefd.(_a.EndElement); _da && _gba.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_StyleDefinitionHeaderLst and its children
func (_dged *CT_StyleDefinitionHeaderLst) Validate() error {
	return _dged.ValidateWithPath("C\u0054\u005f\u0053\u0074\u0079\u006ce\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006fn\u0048\u0065\u0061d\u0065r\u004c\u0073\u0074")
}
func (_fef *AG_ConstraintRefAttributes) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _bed := range start.Attr {
		if _bed.Name.Local == "\u0072e\u0066\u0054\u0079\u0070\u0065" {
			_fef.RefTypeAttr.UnmarshalXMLAttr(_bed)
			continue
		}
		if _bed.Name.Local == "\u0072\u0065\u0066\u0046\u006f\u0072" {
			_fef.RefForAttr.UnmarshalXMLAttr(_bed)
			continue
		}
		if _bed.Name.Local == "\u0072\u0065\u0066\u0046\u006f\u0072\u004e\u0061\u006d\u0065" {
			_aga := _bed.Value
			_fef.RefForNameAttr = &_aga
			continue
		}
		if _bed.Name.Local == "\u0072e\u0066\u0050\u0074\u0054\u0079\u0070e" {
			_fef.RefPtTypeAttr.UnmarshalXMLAttr(_bed)
			continue
		}
	}
	for {
		_cg, _gc := d.Token()
		if _gc != nil {
			return _e.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0041\u0047\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074\u0052\u0065\u0066A\u0074\u0074\u0072\u0069\u0062u\u0074\u0065s\u003a\u0020\u0025\u0073", _gc)
		}
		if _bd, _fea := _cg.(_a.EndElement); _fea && _bd.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the DataModel and its children, prefixing error messages with path
func (_dffag *DataModel) ValidateWithPath(path string) error {
	if _adcd := _dffag.CT_DataModel.ValidateWithPath(path); _adcd != nil {
		return _adcd
	}
	return nil
}

// Validate validates the CT_CTName and its children
func (_fbfd *CT_CTName) Validate() error {
	return _fbfd.ValidateWithPath("\u0043T\u005f\u0043\u0054\u004e\u0061\u006de")
}
func (_fbab *ST_PyramidAccentTextMargin) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_fbab = 0
	case "\u0073\u0074\u0065\u0070":
		*_fbab = 1
	case "\u0073\u0074\u0061c\u006b":
		*_fbab = 2
	}
	return nil
}
func (_cdbee ST_ContinueDirection) String() string {
	switch _cdbee {
	case 0:
		return ""
	case 1:
		return "\u0072\u0065\u0076\u0044\u0069\u0072"
	case 2:
		return "\u0073a\u006d\u0065\u0044\u0069\u0072"
	}
	return ""
}
func (_bebgd ST_ConstraintRelationship) ValidateWithPath(path string) error {
	switch _bebgd {
	case 0, 1, 2, 3:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bebgd))
	}
	return nil
}
func (_gbffg ST_HierarchyAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_gbffg.String(), start)
}
func (_affeb ST_ConnectorDimension) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_fbdcd := _a.Attr{}
	_fbdcd.Name = name
	switch _affeb {
	case ST_ConnectorDimensionUnset:
		_fbdcd.Value = ""
	case ST_ConnectorDimension1D:
		_fbdcd.Value = "\u0031\u0044"
	case ST_ConnectorDimension2D:
		_fbdcd.Value = "\u0032\u0044"
	case ST_ConnectorDimensionCust:
		_fbdcd.Value = "\u0063\u0075\u0073\u0074"
	}
	return _fbdcd, nil
}
func (_bafa *CT_DiagramDefinitionHeaderLst) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _bafa.LayoutDefHdr != nil {
		_ebefc := _a.StartElement{Name: _a.Name{Local: "\u006c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072"}}
		for _, _afeg := range _bafa.LayoutDefHdr {
			e.EncodeElement(_afeg, _ebefc)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_fcfcf *ST_FunctionType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_efdeg, _fbag := d.Token()
	if _fbag != nil {
		return _fbag
	}
	if _dcgbd, _baed := _efdeg.(_a.EndElement); _baed && _dcgbd.Name == start.Name {
		*_fcfcf = 1
		return nil
	}
	if _cgebfe, _abfge := _efdeg.(_a.CharData); !_abfge {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _efdeg)
	} else {
		switch string(_cgebfe) {
		case "":
			*_fcfcf = 0
		case "\u0063\u006e\u0074":
			*_fcfcf = 1
		case "\u0070\u006f\u0073":
			*_fcfcf = 2
		case "\u0072\u0065\u0076\u0050\u006f\u0073":
			*_fcfcf = 3
		case "\u0070o\u0073\u0045\u0076\u0065\u006e":
			*_fcfcf = 4
		case "\u0070\u006f\u0073\u004f\u0064\u0064":
			*_fcfcf = 5
		case "\u0076\u0061\u0072":
			*_fcfcf = 6
		case "\u0064\u0065\u0070t\u0068":
			*_fcfcf = 7
		case "\u006d\u0061\u0078\u0044\u0065\u0070\u0074\u0068":
			*_fcfcf = 8
		}
	}
	_efdeg, _fbag = d.Token()
	if _fbag != nil {
		return _fbag
	}
	if _cbfbd, _aeaec := _efdeg.(_a.EndElement); _aeaec && _cbfbd.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _efdeg)
}
func (_ab *AG_ConstraintRefAttributes) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _ab.RefTypeAttr != ST_ConstraintTypeUnset {
		_afc, _ce := _ab.RefTypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0072e\u0066\u0054\u0079\u0070\u0065"})
		if _ce != nil {
			return _ce
		}
		start.Attr = append(start.Attr, _afc)
	}
	if _ab.RefForAttr != ST_ConstraintRelationshipUnset {
		_ef, _fe := _ab.RefForAttr.MarshalXMLAttr(_a.Name{Local: "\u0072\u0065\u0066\u0046\u006f\u0072"})
		if _fe != nil {
			return _fe
		}
		start.Attr = append(start.Attr, _ef)
	}
	if _ab.RefForNameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u0065\u0066\u0046\u006f\u0072\u004e\u0061\u006d\u0065"}, Value: _e.Sprintf("\u0025\u0076", *_ab.RefForNameAttr)})
	}
	if _ab.RefPtTypeAttr != ST_ElementTypeUnset {
		_bfb, _eae := _ab.RefPtTypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0072e\u0066\u0050\u0074\u0054\u0079\u0070e"})
		if _eae != nil {
			return _eae
		}
		start.Attr = append(start.Attr, _bfb)
	}
	return nil
}

// ValidateWithPath validates the CT_StyleDefinitionHeaderLst and its children, prefixing error messages with path
func (_gfcfd *CT_StyleDefinitionHeaderLst) ValidateWithPath(path string) error {
	for _affg, _acba := range _gfcfd.StyleDefHdr {
		if _fbbc := _acba.ValidateWithPath(_e.Sprintf("\u0025s\u002fS\u0074\u0079\u006c\u0065\u0044e\u0066\u0048d\u0072\u005b\u0025\u0064\u005d", path, _affg)); _fbbc != nil {
			return _fbbc
		}
	}
	return nil
}

const (
	ST_TextBlockDirectionUnset ST_TextBlockDirection = 0
	ST_TextBlockDirectionHorz  ST_TextBlockDirection = 1
	ST_TextBlockDirectionVert  ST_TextBlockDirection = 2
)

func (_dgdf *CT_CxnList) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _dgdf.Cxn != nil {
		_fgaf := _a.StartElement{Name: _a.Name{Local: "\u0063\u0078\u006e"}}
		for _, _def := range _dgdf.Cxn {
			e.EncodeElement(_def, _fgaf)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type ST_PtType byte

func (_cacac ST_FlowDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_cacac.String(), start)
}
func (_affff *CT_RelIds) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _aeeea := range start.Attr {
		if _aeeea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _aeeea.Name.Local == "\u0064\u006d" || _aeeea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _aeeea.Name.Local == "\u0064\u006d" {
			_fbfc := _aeeea.Value
			_affff.DmAttr = _fbfc
			continue
		}
		if _aeeea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _aeeea.Name.Local == "\u006c\u006f" || _aeeea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _aeeea.Name.Local == "\u006c\u006f" {
			_ccdgd := _aeeea.Value
			_affff.LoAttr = _ccdgd
			continue
		}
		if _aeeea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _aeeea.Name.Local == "\u0071\u0073" || _aeeea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _aeeea.Name.Local == "\u0071\u0073" {
			_gdeab := _aeeea.Value
			_affff.QsAttr = _gdeab
			continue
		}
		if _aeeea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _aeeea.Name.Local == "\u0063\u0073" || _aeeea.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _aeeea.Name.Local == "\u0063\u0073" {
			_cfec := _aeeea.Value
			_affff.CsAttr = _cfec
			continue
		}
	}
	for {
		_fcaa, _ddfe := d.Token()
		if _ddfe != nil {
			return _e.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0052\u0065\u006cI\u0064\u0073\u003a\u0020\u0025\u0073", _ddfe)
		}
		if _ecfb, _eeacf := _fcaa.(_a.EndElement); _eeacf && _ecfb.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Parameter and its children, prefixing error messages with path
func (_beag *CT_Parameter) ValidateWithPath(path string) error {
	if _beag.TypeAttr == ST_ParameterIdUnset {
		return _e.Errorf("\u0025\u0073\u002f\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072\u0020\u0069\u0073\u0020a\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _aeec := _beag.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _aeec != nil {
		return _aeec
	}
	if _effde := _beag.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _effde != nil {
		return _effde
	}
	return nil
}
func (_ebcdf ST_ConnectorDimension) Validate() error { return _ebcdf.ValidateWithPath("") }
func (_baae ST_FallbackDimension) ValidateWithPath(path string) error {
	switch _baae {
	case 0, 1, 2:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_baae))
	}
	return nil
}
func (_bggd *CT_Colors) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _bggd.MethAttr != ST_ClrAppMethodUnset {
		_ebae, _bedf := _bggd.MethAttr.MarshalXMLAttr(_a.Name{Local: "\u006d\u0065\u0074\u0068"})
		if _bedf != nil {
			return _bedf
		}
		start.Attr = append(start.Attr, _ebae)
	}
	if _bggd.HueDirAttr != ST_HueDirUnset {
		_cdgd, _bbdc := _bggd.HueDirAttr.MarshalXMLAttr(_a.Name{Local: "\u0068\u0075\u0065\u0044\u0069\u0072"})
		if _bbdc != nil {
			return _bbdc
		}
		start.Attr = append(start.Attr, _cdgd)
	}
	e.EncodeToken(start)
	if _bggd.EG_ColorChoice != nil {
		for _, _efd := range _bggd.EG_ColorChoice {
			_efd.MarshalXML(e, _a.StartElement{})
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func ParseUnionST_PrSetCustVal(s string) (ST_PrSetCustVal, error) { return ST_PrSetCustVal{}, nil }
func (_cadd ST_Breakpoint) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_geeca := _a.Attr{}
	_geeca.Name = name
	switch _cadd {
	case ST_BreakpointUnset:
		_geeca.Value = ""
	case ST_BreakpointEndCnv:
		_geeca.Value = "\u0065\u006e\u0064\u0043\u006e\u0076"
	case ST_BreakpointBal:
		_geeca.Value = "\u0062\u0061\u006c"
	case ST_BreakpointFixed:
		_geeca.Value = "\u0066\u0069\u0078e\u0064"
	}
	return _geeca, nil
}
func ParseUnionST_FunctionValue(s string) (ST_FunctionValue, error) { return ST_FunctionValue{}, nil }
func (_dgeb ST_TextAnchorHorizontal) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dgeb.String(), start)
}
func (_efced ST_TextDirection) String() string {
	switch _efced {
	case 0:
		return ""
	case 1:
		return "\u0066\u0072\u006fm\u0054"
	case 2:
		return "\u0066\u0072\u006fm\u0042"
	}
	return ""
}

type AG_ConstraintRefAttributes struct {
	RefTypeAttr    ST_ConstraintType
	RefForAttr     ST_ConstraintRelationship
	RefForNameAttr *string
	RefPtTypeAttr  ST_ElementType
}

// Validate validates the CT_Adj and its children
func (_bg *CT_Adj) Validate() error {
	return _bg.ValidateWithPath("\u0043\u0054\u005f\u0041\u0064\u006a")
}
func (_dcga *RelIds) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dcga.CT_RelIds = *NewCT_RelIds()
	for _, _acfac := range start.Attr {
		if _acfac.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _acfac.Name.Local == "\u0064\u006d" || _acfac.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _acfac.Name.Local == "\u0064\u006d" {
			_abfd := _acfac.Value
			_dcga.DmAttr = _abfd
			continue
		}
		if _acfac.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _acfac.Name.Local == "\u006c\u006f" || _acfac.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _acfac.Name.Local == "\u006c\u006f" {
			_abced := _acfac.Value
			_dcga.LoAttr = _abced
			continue
		}
		if _acfac.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _acfac.Name.Local == "\u0071\u0073" || _acfac.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _acfac.Name.Local == "\u0071\u0073" {
			_faff := _acfac.Value
			_dcga.QsAttr = _faff
			continue
		}
		if _acfac.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _acfac.Name.Local == "\u0063\u0073" || _acfac.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _acfac.Name.Local == "\u0063\u0073" {
			_dcee := _acfac.Value
			_dcga.CsAttr = _dcee
			continue
		}
	}
	for {
		_dfgaa, _egadg := d.Token()
		if _egadg != nil {
			return _e.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0052e\u006c\u0049d\u0073\u003a\u0020\u0025\u0073", _egadg)
		}
		if _afce, _dbfdd := _dfgaa.(_a.EndElement); _dbfdd && _afce.Name == start.Name {
			break
		}
	}
	return nil
}
func (_bcbd ST_NodeHorizontalAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_bcbd.String(), start)
}

// Validate validates the CT_LayoutVariablePropertySet and its children
func (_ggdd *CT_LayoutVariablePropertySet) Validate() error {
	return _ggdd.ValidateWithPath("\u0043\u0054\u005f\u004ca\u0079\u006f\u0075\u0074\u0056\u0061\u0072\u0069\u0061\u0062l\u0065P\u0072\u006f\u0070\u0065\u0072\u0074\u0079S\u0065\u0074")
}
func (_fggb ST_ArrowheadStyle) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_dbfa := _a.Attr{}
	_dbfa.Name = name
	switch _fggb {
	case ST_ArrowheadStyleUnset:
		_dbfa.Value = ""
	case ST_ArrowheadStyleAuto:
		_dbfa.Value = "\u0061\u0075\u0074\u006f"
	case ST_ArrowheadStyleArr:
		_dbfa.Value = "\u0061\u0072\u0072"
	case ST_ArrowheadStyleNoArr:
		_dbfa.Value = "\u006e\u006f\u0041r\u0072"
	}
	return _dbfa, nil
}
func (_dfffa *ST_ChildAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_dfffa = 0
	case "\u0074":
		*_dfffa = 1
	case "\u0062":
		*_dfffa = 2
	case "\u006c":
		*_dfffa = 3
	case "\u0072":
		*_dfffa = 4
	}
	return nil
}
func (_faacf *ST_ConnectorRouting) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_faacf = 0
	case "\u0073\u0074\u0072\u0061":
		*_faacf = 1
	case "\u0062\u0065\u006e\u0064":
		*_faacf = 2
	case "\u0063\u0075\u0072v\u0065":
		*_faacf = 3
	case "\u006co\u006e\u0067\u0043\u0075\u0072\u0076e":
		*_faacf = 4
	}
	return nil
}
func (_afgbg *ST_TextAnchorVertical) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_edebe, _gfbdc := d.Token()
	if _gfbdc != nil {
		return _gfbdc
	}
	if _fdffc, _ebdgb := _edebe.(_a.EndElement); _ebdgb && _fdffc.Name == start.Name {
		*_afgbg = 1
		return nil
	}
	if _cgdfb, _ceafa := _edebe.(_a.CharData); !_ceafa {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _edebe)
	} else {
		switch string(_cgdfb) {
		case "":
			*_afgbg = 0
		case "\u0074":
			*_afgbg = 1
		case "\u006d\u0069\u0064":
			*_afgbg = 2
		case "\u0062":
			*_afgbg = 3
		}
	}
	_edebe, _gfbdc = d.Token()
	if _gfbdc != nil {
		return _gfbdc
	}
	if _agcgf, _fbde := _edebe.(_a.EndElement); _fbde && _agcgf.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _edebe)
}
func (_bgfcf *ST_DiagramTextAlignment) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bgfcf = 0
	case "\u006c":
		*_bgfcf = 1
	case "\u0063\u0074\u0072":
		*_bgfcf = 2
	case "\u0072":
		*_bgfcf = 3
	}
	return nil
}
func (_bddff ST_GrowDirection) Validate() error { return _bddff.ValidateWithPath("") }
func (_feed *CT_SampleData) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _eceb := range start.Attr {
		if _eceb.Name.Local == "\u0075\u0073\u0065\u0044\u0065\u0066" {
			_aabe, _fdge := _g.ParseBool(_eceb.Value)
			if _fdge != nil {
				return _fdge
			}
			_feed.UseDefAttr = &_aabe
			continue
		}
	}
_bdggcf:
	for {
		_aabce, _fbdgd := d.Token()
		if _fbdgd != nil {
			return _fbdgd
		}
		switch _bdace := _aabce.(type) {
		case _a.StartElement:
			switch _bdace.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064a\u0074\u0061\u004d\u006f\u0064\u0065l"}:
				_feed.DataModel = NewCT_DataModel()
				if _cgbe := d.DecodeElement(_feed.DataModel, &_bdace); _cgbe != nil {
					return _cgbe
				}
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053a\u006d\u0070\u006c\u0065\u0044\u0061\u0074\u0061 \u0025\u0076", _bdace.Name)
				if _cddb := d.Skip(); _cddb != nil {
					return _cddb
				}
			}
		case _a.EndElement:
			break _bdggcf
		case _a.CharData:
		}
	}
	return nil
}

type ST_CenterShapeMapping byte
type ST_ConnectorPoint byte

func (_bdeb ST_ElementType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_cegfb := _a.Attr{}
	_cegfb.Name = name
	switch _bdeb {
	case ST_ElementTypeUnset:
		_cegfb.Value = ""
	case ST_ElementTypeAll:
		_cegfb.Value = "\u0061\u006c\u006c"
	case ST_ElementTypeDoc:
		_cegfb.Value = "\u0064\u006f\u0063"
	case ST_ElementTypeNode:
		_cegfb.Value = "\u006e\u006f\u0064\u0065"
	case ST_ElementTypeNorm:
		_cegfb.Value = "\u006e\u006f\u0072\u006d"
	case ST_ElementTypeNonNorm:
		_cegfb.Value = "\u006eo\u006e\u004e\u006f\u0072\u006d"
	case ST_ElementTypeAsst:
		_cegfb.Value = "\u0061\u0073\u0073\u0074"
	case ST_ElementTypeNonAsst:
		_cegfb.Value = "\u006eo\u006e\u0041\u0073\u0073\u0074"
	case ST_ElementTypeParTrans:
		_cegfb.Value = "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073"
	case ST_ElementTypePres:
		_cegfb.Value = "\u0070\u0072\u0065\u0073"
	case ST_ElementTypeSibTrans:
		_cegfb.Value = "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073"
	}
	return _cegfb, nil
}
func (_bcca *ST_VariableType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bcca = 0
	case "\u006e\u006f\u006e\u0065":
		*_bcca = 1
	case "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074":
		*_bcca = 2
	case "\u0063\u0068\u004da\u0078":
		*_bcca = 3
	case "\u0063\u0068\u0050\u0072\u0065\u0066":
		*_bcca = 4
	case "\u0062\u0075\u006c\u0045\u006e\u0061\u0062\u006c\u0065\u0064":
		*_bcca = 5
	case "\u0064\u0069\u0072":
		*_bcca = 6
	case "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068":
		*_bcca = 7
	case "\u0061n\u0069\u006d\u004f\u006e\u0065":
		*_bcca = 8
	case "\u0061n\u0069\u006d\u004c\u0076\u006c":
		*_bcca = 9
	case "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073":
		*_bcca = 10
	}
	return nil
}

// ValidateWithPath validates the CT_LayoutNode and its children, prefixing error messages with path
func (_cceca *CT_LayoutNode) ValidateWithPath(path string) error {
	if _adeb := _cceca.ChOrderAttr.ValidateWithPath(path + "\u002f\u0043\u0068O\u0072\u0064\u0065\u0072\u0041\u0074\u0074\u0072"); _adeb != nil {
		return _adeb
	}
	for _dafa, _aggf := range _cceca.LayoutNodeChoice {
		if _cgf := _aggf.ValidateWithPath(_e.Sprintf("\u0025\u0073\u002fLa\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d", path, _dafa)); _cgf != nil {
			return _cgf
		}
	}
	return nil
}

type ST_SecondaryChildAlignment byte

func (_deda ST_DiagramTextAlignment) ValidateWithPath(path string) error {
	switch _deda {
	case 0, 1, 2, 3:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_deda))
	}
	return nil
}
func (_ddbde ST_ChildOrderType) Validate() error { return _ddbde.ValidateWithPath("") }
func (_addgd *ST_ChildDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_addgd = 0
	case "\u0068\u006f\u0072\u007a":
		*_addgd = 1
	case "\u0076\u0065\u0072\u0074":
		*_addgd = 2
	}
	return nil
}
func (_ggdca *ST_FunctionType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_ggdca = 0
	case "\u0063\u006e\u0074":
		*_ggdca = 1
	case "\u0070\u006f\u0073":
		*_ggdca = 2
	case "\u0072\u0065\u0076\u0050\u006f\u0073":
		*_ggdca = 3
	case "\u0070o\u0073\u0045\u0076\u0065\u006e":
		*_ggdca = 4
	case "\u0070\u006f\u0073\u004f\u0064\u0064":
		*_ggdca = 5
	case "\u0076\u0061\u0072":
		*_ggdca = 6
	case "\u0064\u0065\u0070t\u0068":
		*_ggdca = 7
	case "\u006d\u0061\u0078\u0044\u0065\u0070\u0074\u0068":
		*_ggdca = 8
	}
	return nil
}
func (_afea ST_ChildAlignment) String() string {
	switch _afea {
	case 0:
		return ""
	case 1:
		return "\u0074"
	case 2:
		return "\u0062"
	case 3:
		return "\u006c"
	case 4:
		return "\u0072"
	}
	return ""
}
func (_dadd ST_AnimOneStr) ValidateWithPath(path string) error {
	switch _dadd {
	case 0, 1, 2, 3:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dadd))
	}
	return nil
}

const (
	ST_LinearDirectionUnset ST_LinearDirection = 0
	ST_LinearDirectionFromL ST_LinearDirection = 1
	ST_LinearDirectionFromR ST_LinearDirection = 2
	ST_LinearDirectionFromT ST_LinearDirection = 3
	ST_LinearDirectionFromB ST_LinearDirection = 4
)

// ValidateWithPath validates the CT_ColorTransformHeaderLst and its children, prefixing error messages with path
func (_dgdc *CT_ColorTransformHeaderLst) ValidateWithPath(path string) error {
	for _cdb, _caebg := range _dgdc.ColorsDefHdr {
		if _fbdd := _caebg.ValidateWithPath(_e.Sprintf("\u0025\u0073\u002f\u0043ol\u006f\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072\u005b\u0025\u0064\u005d", path, _cdb)); _fbdd != nil {
			return _fbdd
		}
	}
	return nil
}
func (_aefc *CT_PresentationOf) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _aefc.AxisAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0061\u0078\u0069\u0073"}, Value: _e.Sprintf("\u0025\u0076", *_aefc.AxisAttr)})
	}
	if _aefc.PtTypeAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"}, Value: _e.Sprintf("\u0025\u0076", *_aefc.PtTypeAttr)})
	}
	if _aefc.HideLastTransAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073"}, Value: _e.Sprintf("\u0025\u0076", *_aefc.HideLastTransAttr)})
	}
	if _aefc.StAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074"}, Value: _e.Sprintf("\u0025\u0076", *_aefc.StAttr)})
	}
	if _aefc.CntAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u006e\u0074"}, Value: _e.Sprintf("\u0025\u0076", *_aefc.CntAttr)})
	}
	if _aefc.StepAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074\u0065\u0070"}, Value: _e.Sprintf("\u0025\u0076", *_aefc.StepAttr)})
	}
	e.EncodeToken(start)
	if _aefc.ExtLst != nil {
		_bfef := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aefc.ExtLst, _bfef)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_ecdaeg ST_FlowDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_deadg := _a.Attr{}
	_deadg.Name = name
	switch _ecdaeg {
	case ST_FlowDirectionUnset:
		_deadg.Value = ""
	case ST_FlowDirectionRow:
		_deadg.Value = "\u0072\u006f\u0077"
	case ST_FlowDirectionCol:
		_deadg.Value = "\u0063\u006f\u006c"
	}
	return _deadg, nil
}
func (_cdaf ST_VerticalAlignment) Validate() error { return _cdaf.ValidateWithPath("") }
func (_aaff ST_SecondaryLinearDirection) String() string {
	switch _aaff {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0066\u0072\u006fm\u004c"
	case 3:
		return "\u0066\u0072\u006fm\u0052"
	case 4:
		return "\u0066\u0072\u006fm\u0054"
	case 5:
		return "\u0066\u0072\u006fm\u0042"
	}
	return ""
}
func (_eaegf *ST_HueDir) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_badba, _cfef := d.Token()
	if _cfef != nil {
		return _cfef
	}
	if _bggcg, _ecgefb := _badba.(_a.EndElement); _ecgefb && _bggcg.Name == start.Name {
		*_eaegf = 1
		return nil
	}
	if _dbbb, _ggfabe := _badba.(_a.CharData); !_ggfabe {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _badba)
	} else {
		switch string(_dbbb) {
		case "":
			*_eaegf = 0
		case "\u0063\u0077":
			*_eaegf = 1
		case "\u0063\u0063\u0077":
			*_eaegf = 2
		}
	}
	_badba, _cfef = d.Token()
	if _cfef != nil {
		return _cfef
	}
	if _bbdg, _edeab := _badba.(_a.EndElement); _edeab && _bbdg.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _badba)
}

// Validate validates the CT_RelIds and its children
func (_edgg *CT_RelIds) Validate() error {
	return _edgg.ValidateWithPath("\u0043T\u005f\u0052\u0065\u006c\u0049\u0064s")
}
func (_dfgaf *ST_Direction) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_dfgaf = 0
	case "\u006e\u006f\u0072\u006d":
		*_dfgaf = 1
	case "\u0072\u0065\u0076":
		*_dfgaf = 2
	}
	return nil
}

// Validate validates the CT_StyleLabel and its children
func (_eeddg *CT_StyleLabel) Validate() error {
	return _eeddg.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c")
}

// ValidateWithPath validates the CT_ChildMax and its children, prefixing error messages with path
func (_gagf *CT_ChildMax) ValidateWithPath(path string) error {
	if _gagf.ValAttr != nil {
		if *_gagf.ValAttr < -1 {
			return _e.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003e\u003d\u0020\u002d1 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_gagf.ValAttr)
		}
	}
	return nil
}

type CT_ElemPropSet struct {

	// Presentation Element Identifier
	PresAssocIDAttr *ST_ModelId

	// Presentation Name
	PresNameAttr *string

	// Presentation Style Label
	PresStyleLblAttr *string

	// Presentation Style Index
	PresStyleIdxAttr *int32

	// Presentation Style Count
	PresStyleCntAttr *int32

	// Current Diagram Type
	LoTypeIdAttr *string

	// Current Diagram Category
	LoCatIdAttr *string

	// Current Style Type
	QsTypeIdAttr *string

	// Current Style Category
	QsCatIdAttr *string

	// Color Transform Type Identifier
	CsTypeIdAttr *string

	// Color Transform Category
	CsCatIdAttr *string

	// Coherent 3D Behavior
	Coherent3DOffAttr *bool

	// Placeholder Text
	PhldrTAttr *string

	// Placeholder
	PhldrAttr *bool

	// Custom Rotation
	CustAngAttr *int32

	// Custom Vertical Flip
	CustFlipVertAttr *bool

	// Custom Horizontal Flip
	CustFlipHorAttr *bool

	// Fixed Width Override
	CustSzXAttr *int32

	// Fixed Height Override
	CustSzYAttr *int32

	// Width Scale
	CustScaleXAttr *ST_PrSetCustVal

	// Height Scale
	CustScaleYAttr *ST_PrSetCustVal

	// Text Changed
	CustTAttr *bool

	// Custom Factor Width
	CustLinFactXAttr *ST_PrSetCustVal

	// Custom Factor Height
	CustLinFactYAttr *ST_PrSetCustVal

	// Neighbor Offset Width
	CustLinFactNeighborXAttr *ST_PrSetCustVal

	// Neighbor Offset Height
	CustLinFactNeighborYAttr *ST_PrSetCustVal

	// Radius Scale
	CustRadScaleRadAttr *ST_PrSetCustVal

	// Include Angle Scale
	CustRadScaleIncAttr *ST_PrSetCustVal

	// Presentation Layout Variables
	PresLayoutVars *CT_LayoutVariablePropertySet

	// Shape Style
	Style *_b.CT_ShapeStyle
}
type LayoutDefHdr struct{ CT_DiagramDefinitionHeader }

func (_aeded *CT_Shape) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _aeded.RotAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u006f\u0074"}, Value: _e.Sprintf("\u0025\u0076", *_aeded.RotAttr)})
	}
	if _aeded.TypeAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0074\u0079\u0070\u0065"}, Value: _e.Sprintf("\u0025\u0076", *_aeded.TypeAttr)})
	}
	if _aeded.BlipAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u003a\u0062\u006c\u0069\u0070"}, Value: _e.Sprintf("\u0025\u0076", *_aeded.BlipAttr)})
	}
	if _aeded.ZOrderOffAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u007aO\u0072\u0064\u0065\u0072\u004f\u0066f"}, Value: _e.Sprintf("\u0025\u0076", *_aeded.ZOrderOffAttr)})
	}
	if _aeded.HideGeomAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0068\u0069\u0064\u0065\u0047\u0065\u006f\u006d"}, Value: _e.Sprintf("\u0025\u0064", _gfaf(*_aeded.HideGeomAttr))})
	}
	if _aeded.LkTxEntryAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006ck\u0054\u0078\u0045\u006e\u0074\u0072y"}, Value: _e.Sprintf("\u0025\u0064", _gfaf(*_aeded.LkTxEntryAttr))})
	}
	if _aeded.BlipPhldrAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0062l\u0069\u0070\u0050\u0068\u006c\u0064r"}, Value: _e.Sprintf("\u0025\u0064", _gfaf(*_aeded.BlipPhldrAttr))})
	}
	e.EncodeToken(start)
	if _aeded.AdjLst != nil {
		_bgbb := _a.StartElement{Name: _a.Name{Local: "\u0061\u0064\u006a\u004c\u0073\u0074"}}
		e.EncodeElement(_aeded.AdjLst, _bgbb)
	}
	if _aeded.ExtLst != nil {
		_efgc := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aeded.ExtLst, _efgc)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_ddbc *ST_CxnType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cced, _dadg := d.Token()
	if _dadg != nil {
		return _dadg
	}
	if _gdbc, _bdeg := _cced.(_a.EndElement); _bdeg && _gdbc.Name == start.Name {
		*_ddbc = 1
		return nil
	}
	if _edaf, _cfece := _cced.(_a.CharData); !_cfece {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cced)
	} else {
		switch string(_edaf) {
		case "":
			*_ddbc = 0
		case "\u0070\u0061\u0072O\u0066":
			*_ddbc = 1
		case "\u0070\u0072\u0065\u0073\u004f\u0066":
			*_ddbc = 2
		case "\u0070r\u0065\u0073\u0050\u0061\u0072\u004ff":
			*_ddbc = 3
		case "\u0075\u006e\u006b\u006eow\u006e\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070":
			*_ddbc = 4
		}
	}
	_cced, _dadg = d.Token()
	if _dadg != nil {
		return _dadg
	}
	if _ffcd, _bfeab := _cced.(_a.EndElement); _bfeab && _ffcd.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cced)
}
func NewCT_ChildMax() *CT_ChildMax { _ecc := &CT_ChildMax{}; return _ecc }
func (_feef ST_VerticalAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_ccdea := _a.Attr{}
	_ccdea.Name = name
	switch _feef {
	case ST_VerticalAlignmentUnset:
		_ccdea.Value = ""
	case ST_VerticalAlignmentT:
		_ccdea.Value = "\u0074"
	case ST_VerticalAlignmentMid:
		_ccdea.Value = "\u006d\u0069\u0064"
	case ST_VerticalAlignmentB:
		_ccdea.Value = "\u0062"
	case ST_VerticalAlignmentNone:
		_ccdea.Value = "\u006e\u006f\u006e\u0065"
	}
	return _ccdea, nil
}
func NewCT_ForEach() *CT_ForEach { _cdbc := &CT_ForEach{}; return _cdbc }

// Validate validates the CT_Categories and its children
func (_aebe *CT_Categories) Validate() error {
	return _aebe.ValidateWithPath("\u0043\u0054\u005f\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073")
}
func (_fdacd ST_LayoutShapeType) String() string {
	if _fdacd.ST_ShapeType != _b.ST_ShapeTypeUnset {
		return _fdacd.ST_ShapeType.String()
	}
	if _fdacd.ST_OutputShapeType != ST_OutputShapeTypeUnset {
		return _fdacd.ST_OutputShapeType.String()
	}
	return ""
}

const (
	ST_HueDirUnset ST_HueDir = 0
	ST_HueDirCw    ST_HueDir = 1
	ST_HueDirCcw   ST_HueDir = 2
)

func (_cgfb ST_Breakpoint) String() string {
	switch _cgfb {
	case 0:
		return ""
	case 1:
		return "\u0065\u006e\u0064\u0043\u006e\u0076"
	case 2:
		return "\u0062\u0061\u006c"
	case 3:
		return "\u0066\u0069\u0078e\u0064"
	}
	return ""
}
func (_eccb *ST_VariableType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_fcabf, _fcdbf := d.Token()
	if _fcdbf != nil {
		return _fcdbf
	}
	if _afggb, _adfgd := _fcabf.(_a.EndElement); _adfgd && _afggb.Name == start.Name {
		*_eccb = 1
		return nil
	}
	if _fdcg, _bggbf := _fcabf.(_a.CharData); !_bggbf {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fcabf)
	} else {
		switch string(_fdcg) {
		case "":
			*_eccb = 0
		case "\u006e\u006f\u006e\u0065":
			*_eccb = 1
		case "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074":
			*_eccb = 2
		case "\u0063\u0068\u004da\u0078":
			*_eccb = 3
		case "\u0063\u0068\u0050\u0072\u0065\u0066":
			*_eccb = 4
		case "\u0062\u0075\u006c\u0045\u006e\u0061\u0062\u006c\u0065\u0064":
			*_eccb = 5
		case "\u0064\u0069\u0072":
			*_eccb = 6
		case "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068":
			*_eccb = 7
		case "\u0061n\u0069\u006d\u004f\u006e\u0065":
			*_eccb = 8
		case "\u0061n\u0069\u006d\u004c\u0076\u006c":
			*_eccb = 9
		case "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073":
			*_eccb = 10
		}
	}
	_fcabf, _fcdbf = d.Token()
	if _fcdbf != nil {
		return _fcdbf
	}
	if _bcdgb, _bagg := _fcabf.(_a.EndElement); _bagg && _bcdgb.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fcabf)
}
func (_dgbc ST_ConnectorPoint) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_bgfbg := _a.Attr{}
	_bgfbg.Name = name
	switch _dgbc {
	case ST_ConnectorPointUnset:
		_bgfbg.Value = ""
	case ST_ConnectorPointAuto:
		_bgfbg.Value = "\u0061\u0075\u0074\u006f"
	case ST_ConnectorPointBCtr:
		_bgfbg.Value = "\u0062\u0043\u0074\u0072"
	case ST_ConnectorPointCtr:
		_bgfbg.Value = "\u0063\u0074\u0072"
	case ST_ConnectorPointMidL:
		_bgfbg.Value = "\u006d\u0069\u0064\u004c"
	case ST_ConnectorPointMidR:
		_bgfbg.Value = "\u006d\u0069\u0064\u0052"
	case ST_ConnectorPointTCtr:
		_bgfbg.Value = "\u0074\u0043\u0074\u0072"
	case ST_ConnectorPointBL:
		_bgfbg.Value = "\u0062\u004c"
	case ST_ConnectorPointBR:
		_bgfbg.Value = "\u0062\u0052"
	case ST_ConnectorPointTL:
		_bgfbg.Value = "\u0074\u004c"
	case ST_ConnectorPointTR:
		_bgfbg.Value = "\u0074\u0052"
	case ST_ConnectorPointRadial:
		_bgfbg.Value = "\u0072\u0061\u0064\u0069\u0061\u006c"
	}
	return _bgfbg, nil
}
func (_decfc ST_CenterShapeMapping) Validate() error { return _decfc.ValidateWithPath("") }
func (_dfcb ST_ConnectorRouting) ValidateWithPath(path string) error {
	switch _dfcb {
	case 0, 1, 2, 3, 4:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dfcb))
	}
	return nil
}
func (_ccgb *ST_ClrAppMethod) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_egbb, _dfff := d.Token()
	if _dfff != nil {
		return _dfff
	}
	if _cacg, _adeaa := _egbb.(_a.EndElement); _adeaa && _cacg.Name == start.Name {
		*_ccgb = 1
		return nil
	}
	if _fdeb, _bbdcf := _egbb.(_a.CharData); !_bbdcf {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _egbb)
	} else {
		switch string(_fdeb) {
		case "":
			*_ccgb = 0
		case "\u0073\u0070\u0061\u006e":
			*_ccgb = 1
		case "\u0063\u0079\u0063l\u0065":
			*_ccgb = 2
		case "\u0072\u0065\u0070\u0065\u0061\u0074":
			*_ccgb = 3
		}
	}
	_egbb, _dfff = d.Token()
	if _dfff != nil {
		return _dfff
	}
	if _bdda, _dabga := _egbb.(_a.EndElement); _dabga && _bdda.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _egbb)
}
func (_bfdfa ST_FunctionOperator) ValidateWithPath(path string) error {
	switch _bfdfa {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bfdfa))
	}
	return nil
}

type ST_DiagramHorizontalAlignment byte
type CT_StyleDefinitionHeader struct {

	// Unique Style ID
	UniqueIdAttr string

	// Minimum Version
	MinVerAttr *string

	// Resource ID
	ResIdAttr *int32

	// Title
	Title []*CT_SDName

	// Style Label Description
	Desc []*CT_SDDescription

	// Category List
	CatLst *CT_SDCategories
	ExtLst *_b.CT_OfficeArtExtensionList
}

func (_dafeg ST_TextAnchorVertical) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_bbge := _a.Attr{}
	_bbge.Name = name
	switch _dafeg {
	case ST_TextAnchorVerticalUnset:
		_bbge.Value = ""
	case ST_TextAnchorVerticalT:
		_bbge.Value = "\u0074"
	case ST_TextAnchorVerticalMid:
		_bbge.Value = "\u006d\u0069\u0064"
	case ST_TextAnchorVerticalB:
		_bbge.Value = "\u0062"
	}
	return _bbge, nil
}

// ValidateWithPath validates the CT_LayoutNodeChoice and its children, prefixing error messages with path
func (_eddgb *CT_LayoutNodeChoice) ValidateWithPath(path string) error {
	if _eddgb.Alg != nil {
		if _ccfc := _eddgb.Alg.ValidateWithPath(path + "\u002f\u0041\u006c\u0067"); _ccfc != nil {
			return _ccfc
		}
	}
	if _eddgb.Shape != nil {
		if _bgfe := _eddgb.Shape.ValidateWithPath(path + "\u002f\u0053\u0068\u0061\u0070\u0065"); _bgfe != nil {
			return _bgfe
		}
	}
	if _eddgb.PresOf != nil {
		if _aded := _eddgb.PresOf.ValidateWithPath(path + "\u002fP\u0072\u0065\u0073\u004f\u0066"); _aded != nil {
			return _aded
		}
	}
	if _eddgb.ConstrLst != nil {
		if _afdaf := _eddgb.ConstrLst.ValidateWithPath(path + "\u002f\u0043\u006f\u006e\u0073\u0074\u0072\u004c\u0073\u0074"); _afdaf != nil {
			return _afdaf
		}
	}
	if _eddgb.RuleLst != nil {
		if _ebfb := _eddgb.RuleLst.ValidateWithPath(path + "\u002f\u0052\u0075\u006c\u0065\u004c\u0073\u0074"); _ebfb != nil {
			return _ebfb
		}
	}
	if _eddgb.VarLst != nil {
		if _agfb := _eddgb.VarLst.ValidateWithPath(path + "\u002fV\u0061\u0072\u004c\u0073\u0074"); _agfb != nil {
			return _agfb
		}
	}
	if _eddgb.ForEach != nil {
		if _bcbcf := _eddgb.ForEach.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0045\u0061\u0063\u0068"); _bcbcf != nil {
			return _bcbcf
		}
	}
	if _eddgb.LayoutNode != nil {
		if _afbd := _eddgb.LayoutNode.ValidateWithPath(path + "/\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"); _afbd != nil {
			return _afbd
		}
	}
	if _eddgb.Choose != nil {
		if _cgcf := _eddgb.Choose.ValidateWithPath(path + "\u002fC\u0068\u006f\u006f\u0073\u0065"); _cgcf != nil {
			return _cgcf
		}
	}
	if _eddgb.ExtLst != nil {
		if _fgee := _eddgb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fgee != nil {
			return _fgee
		}
	}
	return nil
}

const (
	ST_FallbackDimensionUnset ST_FallbackDimension = 0
	ST_FallbackDimension1D    ST_FallbackDimension = 1
	ST_FallbackDimension2D    ST_FallbackDimension = 2
)

func (_dbfcb ST_RotationPath) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dbfcb.String(), start)
}

// ValidateWithPath validates the CT_SDCategories and its children, prefixing error messages with path
func (_cgabd *CT_SDCategories) ValidateWithPath(path string) error {
	for _adfd, _abag := range _cgabd.Cat {
		if _bdfc := _abag.ValidateWithPath(_e.Sprintf("\u0025\u0073\u002f\u0043\u0061\u0074\u005b\u0025\u0064\u005d", path, _adfd)); _bdfc != nil {
			return _bdfc
		}
	}
	return nil
}
func (_bace *CT_StyleDefinitionHeaderLst) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_cfcf:
	for {
		_eecg, _dgda := d.Token()
		if _dgda != nil {
			return _dgda
		}
		switch _caad := _eecg.(type) {
		case _a.StartElement:
			switch _caad.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "s\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072"}:
				_cfee := NewCT_StyleDefinitionHeader()
				if _cbgfa := d.DecodeElement(_cfee, &_caad); _cbgfa != nil {
					return _cbgfa
				}
				_bace.StyleDefHdr = append(_bace.StyleDefHdr, _cfee)
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065a\u0064\u0065\u0072\u004c\u0073\u0074\u0020\u0025\u0076", _caad.Name)
				if _fcbb := d.Skip(); _fcbb != nil {
					return _fcbb
				}
			}
		case _a.EndElement:
			break _cfcf
		case _a.CharData:
		}
	}
	return nil
}
func (_efgf ST_CxnType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_efgf.String(), start)
}
func (_fdcdab ST_Offset) ValidateWithPath(path string) error {
	switch _fdcdab {
	case 0, 1, 2:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fdcdab))
	}
	return nil
}
func (_cgdg ST_TextDirection) Validate() error { return _cgdg.ValidateWithPath("") }
func (_aegg ST_AutoTextRotation) String() string {
	switch _aegg {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0075\u0070\u0072"
	case 3:
		return "\u0067\u0072\u0061\u0076"
	}
	return ""
}

type ST_Breakpoint byte

func (_ebd *CT_Adj) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0069\u0064\u0078"}, Value: _e.Sprintf("\u0025\u0076", _ebd.IdxAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _e.Sprintf("\u0025\u0076", _ebd.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type StyleDef struct{ CT_StyleDefinition }

func (_bcce *CT_Category) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _dac := range start.Attr {
		if _dac.Name.Local == "\u0074\u0079\u0070\u0065" {
			_dbg := _dac.Value
			_bcce.TypeAttr = _dbg
			continue
		}
		if _dac.Name.Local == "\u0070\u0072\u0069" {
			_cgae, _dgfa := _g.ParseUint(_dac.Value, 10, 32)
			if _dgfa != nil {
				return _dgfa
			}
			_bcce.PriAttr = uint32(_cgae)
			continue
		}
	}
	for {
		_gae, _cfag := d.Token()
		if _cfag != nil {
			return _e.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079\u003a\u0020\u0025\u0073", _cfag)
		}
		if _caae, _ddg := _gae.(_a.EndElement); _ddg && _caae.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dfabd ST_ParameterVal) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _dfabd.ST_DiagramHorizontalAlignment != ST_DiagramHorizontalAlignmentUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_DiagramHorizontalAlignment.String()))
	}
	if _dfabd.ST_VerticalAlignment != ST_VerticalAlignmentUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_VerticalAlignment.String()))
	}
	if _dfabd.ST_ChildDirection != ST_ChildDirectionUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_ChildDirection.String()))
	}
	if _dfabd.ST_ChildAlignment != ST_ChildAlignmentUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_ChildAlignment.String()))
	}
	if _dfabd.ST_SecondaryChildAlignment != ST_SecondaryChildAlignmentUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_SecondaryChildAlignment.String()))
	}
	if _dfabd.ST_LinearDirection != ST_LinearDirectionUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_LinearDirection.String()))
	}
	if _dfabd.ST_SecondaryLinearDirection != ST_SecondaryLinearDirectionUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_SecondaryLinearDirection.String()))
	}
	if _dfabd.ST_StartingElement != ST_StartingElementUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_StartingElement.String()))
	}
	if _dfabd.ST_BendPoint != ST_BendPointUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_BendPoint.String()))
	}
	if _dfabd.ST_ConnectorRouting != ST_ConnectorRoutingUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_ConnectorRouting.String()))
	}
	if _dfabd.ST_ArrowheadStyle != ST_ArrowheadStyleUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_ArrowheadStyle.String()))
	}
	if _dfabd.ST_ConnectorDimension != ST_ConnectorDimensionUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_ConnectorDimension.String()))
	}
	if _dfabd.ST_RotationPath != ST_RotationPathUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_RotationPath.String()))
	}
	if _dfabd.ST_CenterShapeMapping != ST_CenterShapeMappingUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_CenterShapeMapping.String()))
	}
	if _dfabd.ST_NodeHorizontalAlignment != ST_NodeHorizontalAlignmentUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_NodeHorizontalAlignment.String()))
	}
	if _dfabd.ST_NodeVerticalAlignment != ST_NodeVerticalAlignmentUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_NodeVerticalAlignment.String()))
	}
	if _dfabd.ST_FallbackDimension != ST_FallbackDimensionUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_FallbackDimension.String()))
	}
	if _dfabd.ST_TextDirection != ST_TextDirectionUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_TextDirection.String()))
	}
	if _dfabd.ST_PyramidAccentPosition != ST_PyramidAccentPositionUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_PyramidAccentPosition.String()))
	}
	if _dfabd.ST_PyramidAccentTextMargin != ST_PyramidAccentTextMarginUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_PyramidAccentTextMargin.String()))
	}
	if _dfabd.ST_TextBlockDirection != ST_TextBlockDirectionUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_TextBlockDirection.String()))
	}
	if _dfabd.ST_TextAnchorHorizontal != ST_TextAnchorHorizontalUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_TextAnchorHorizontal.String()))
	}
	if _dfabd.ST_TextAnchorVertical != ST_TextAnchorVerticalUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_TextAnchorVertical.String()))
	}
	if _dfabd.ST_DiagramTextAlignment != ST_DiagramTextAlignmentUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_DiagramTextAlignment.String()))
	}
	if _dfabd.ST_AutoTextRotation != ST_AutoTextRotationUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_AutoTextRotation.String()))
	}
	if _dfabd.ST_GrowDirection != ST_GrowDirectionUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_GrowDirection.String()))
	}
	if _dfabd.ST_FlowDirection != ST_FlowDirectionUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_FlowDirection.String()))
	}
	if _dfabd.ST_ContinueDirection != ST_ContinueDirectionUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_ContinueDirection.String()))
	}
	if _dfabd.ST_Breakpoint != ST_BreakpointUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_Breakpoint.String()))
	}
	if _dfabd.ST_Offset != ST_OffsetUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_Offset.String()))
	}
	if _dfabd.ST_HierarchyAlignment != ST_HierarchyAlignmentUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_HierarchyAlignment.String()))
	}
	if _dfabd.Int32 != nil {
		e.EncodeToken(_a.CharData(_e.Sprintf("\u0025\u0064", *_dfabd.Int32)))
	}
	if _dfabd.Float64 != nil {
		e.EncodeToken(_a.CharData(_e.Sprintf("\u0025\u0066", *_dfabd.Float64)))
	}
	if _dfabd.Bool != nil {
		e.EncodeToken(_a.CharData(_e.Sprintf("\u0025\u0064", _gfaf(*_dfabd.Bool))))
	}
	if _dfabd.StringVal != nil {
		e.EncodeToken(_a.CharData(*_dfabd.StringVal))
	}
	if _dfabd.ST_ConnectorPoint != ST_ConnectorPointUnset {
		e.EncodeToken(_a.CharData(_dfabd.ST_ConnectorPoint.String()))
	}
	return e.EncodeToken(_a.EndElement{Name: start.Name})
}
func (_gdcd ST_ParameterId) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_abace := _a.Attr{}
	_abace.Name = name
	switch _gdcd {
	case ST_ParameterIdUnset:
		_abace.Value = ""
	case ST_ParameterIdHorzAlign:
		_abace.Value = "\u0068o\u0072\u007a\u0041\u006c\u0069\u0067n"
	case ST_ParameterIdVertAlign:
		_abace.Value = "\u0076e\u0072\u0074\u0041\u006c\u0069\u0067n"
	case ST_ParameterIdChDir:
		_abace.Value = "\u0063\u0068\u0044i\u0072"
	case ST_ParameterIdChAlign:
		_abace.Value = "\u0063h\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdSecChAlign:
		_abace.Value = "\u0073\u0065\u0063\u0043\u0068\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdLinDir:
		_abace.Value = "\u006c\u0069\u006e\u0044\u0069\u0072"
	case ST_ParameterIdSecLinDir:
		_abace.Value = "\u0073e\u0063\u004c\u0069\u006e\u0044\u0069r"
	case ST_ParameterIdStElem:
		_abace.Value = "\u0073\u0074\u0045\u006c\u0065\u006d"
	case ST_ParameterIdBendPt:
		_abace.Value = "\u0062\u0065\u006e\u0064\u0050\u0074"
	case ST_ParameterIdConnRout:
		_abace.Value = "\u0063\u006f\u006e\u006e\u0052\u006f\u0075\u0074"
	case ST_ParameterIdBegSty:
		_abace.Value = "\u0062\u0065\u0067\u0053\u0074\u0079"
	case ST_ParameterIdEndSty:
		_abace.Value = "\u0065\u006e\u0064\u0053\u0074\u0079"
	case ST_ParameterIdDim:
		_abace.Value = "\u0064\u0069\u006d"
	case ST_ParameterIdRotPath:
		_abace.Value = "\u0072o\u0074\u0050\u0061\u0074\u0068"
	case ST_ParameterIdCtrShpMap:
		_abace.Value = "\u0063t\u0072\u0053\u0068\u0070\u004d\u0061p"
	case ST_ParameterIdNodeHorzAlign:
		_abace.Value = "\u006e\u006f\u0064\u0065\u0048\u006f\u0072\u007a\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdNodeVertAlign:
		_abace.Value = "\u006e\u006f\u0064\u0065\u0056\u0065\u0072\u0074\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdFallback:
		_abace.Value = "\u0066\u0061\u006c\u006c\u0062\u0061\u0063\u006b"
	case ST_ParameterIdTxDir:
		_abace.Value = "\u0074\u0078\u0044i\u0072"
	case ST_ParameterIdPyraAcctPos:
		_abace.Value = "p\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0050\u006f\u0073"
	case ST_ParameterIdPyraAcctTxMar:
		_abace.Value = "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054\u0078\u004d\u0061\u0072"
	case ST_ParameterIdTxBlDir:
		_abace.Value = "\u0074x\u0042\u006c\u0044\u0069\u0072"
	case ST_ParameterIdTxAnchorHorz:
		_abace.Value = "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0048\u006f\u0072\u007a"
	case ST_ParameterIdTxAnchorVert:
		_abace.Value = "\u0074\u0078\u0041n\u0063\u0068\u006f\u0072\u0056\u0065\u0072\u0074"
	case ST_ParameterIdTxAnchorHorzCh:
		_abace.Value = "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0048o\u0072\u007a\u0043\u0068"
	case ST_ParameterIdTxAnchorVertCh:
		_abace.Value = "\u0074\u0078\u0041\u006e\u0063\u0068\u006f\u0072\u0056e\u0072\u0074\u0043\u0068"
	case ST_ParameterIdParTxLTRAlign:
		_abace.Value = "\u0070\u0061\u0072\u0054\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdParTxRTLAlign:
		_abace.Value = "\u0070\u0061\u0072\u0054\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e"
	case ST_ParameterIdShpTxLTRAlignCh:
		_abace.Value = "\u0073h\u0070T\u0078\u004c\u0054\u0052\u0041\u006c\u0069\u0067\u006e\u0043\u0068"
	case ST_ParameterIdShpTxRTLAlignCh:
		_abace.Value = "\u0073h\u0070T\u0078\u0052\u0054\u004c\u0041\u006c\u0069\u0067\u006e\u0043\u0068"
	case ST_ParameterIdAutoTxRot:
		_abace.Value = "\u0061u\u0074\u006f\u0054\u0078\u0052\u006ft"
	case ST_ParameterIdGrDir:
		_abace.Value = "\u0067\u0072\u0044i\u0072"
	case ST_ParameterIdFlowDir:
		_abace.Value = "\u0066l\u006f\u0077\u0044\u0069\u0072"
	case ST_ParameterIdContDir:
		_abace.Value = "\u0063o\u006e\u0074\u0044\u0069\u0072"
	case ST_ParameterIdBkpt:
		_abace.Value = "\u0062\u006b\u0070\u0074"
	case ST_ParameterIdOff:
		_abace.Value = "\u006f\u0066\u0066"
	case ST_ParameterIdHierAlign:
		_abace.Value = "\u0068i\u0065\u0072\u0041\u006c\u0069\u0067n"
	case ST_ParameterIdBkPtFixedVal:
		_abace.Value = "\u0062\u006b\u0050t\u0046\u0069\u0078\u0065\u0064\u0056\u0061\u006c"
	case ST_ParameterIdStBulletLvl:
		_abace.Value = "s\u0074\u0042\u0075\u006c\u006c\u0065\u0074\u004c\u0076\u006c"
	case ST_ParameterIdStAng:
		_abace.Value = "\u0073\u0074\u0041n\u0067"
	case ST_ParameterIdSpanAng:
		_abace.Value = "\u0073p\u0061\u006e\u0041\u006e\u0067"
	case ST_ParameterIdAr:
		_abace.Value = "\u0061\u0072"
	case ST_ParameterIdLnSpPar:
		_abace.Value = "\u006cn\u0053\u0070\u0050\u0061\u0072"
	case ST_ParameterIdLnSpAfParP:
		_abace.Value = "\u006c\u006e\u0053\u0070\u0041\u0066\u0050\u0061\u0072\u0050"
	case ST_ParameterIdLnSpCh:
		_abace.Value = "\u006c\u006e\u0053\u0070\u0043\u0068"
	case ST_ParameterIdLnSpAfChP:
		_abace.Value = "\u006cn\u0053\u0070\u0041\u0066\u0043\u0068P"
	case ST_ParameterIdRtShortDist:
		_abace.Value = "r\u0074\u0053\u0068\u006f\u0072\u0074\u0044\u0069\u0073\u0074"
	case ST_ParameterIdAlignTx:
		_abace.Value = "\u0061l\u0069\u0067\u006e\u0054\u0078"
	case ST_ParameterIdPyraLvlNode:
		_abace.Value = "p\u0079\u0072\u0061\u004c\u0076\u006c\u004e\u006f\u0064\u0065"
	case ST_ParameterIdPyraAcctBkgdNode:
		_abace.Value = "\u0070\u0079r\u0061\u0041\u0063c\u0074\u0042\u006b\u0067\u0064\u004e\u006f\u0064\u0065"
	case ST_ParameterIdPyraAcctTxNode:
		_abace.Value = "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0054x\u004e\u006f\u0064\u0065"
	case ST_ParameterIdSrcNode:
		_abace.Value = "\u0073r\u0063\u004e\u006f\u0064\u0065"
	case ST_ParameterIdDstNode:
		_abace.Value = "\u0064s\u0074\u004e\u006f\u0064\u0065"
	case ST_ParameterIdBegPts:
		_abace.Value = "\u0062\u0065\u0067\u0050\u0074\u0073"
	case ST_ParameterIdEndPts:
		_abace.Value = "\u0065\u006e\u0064\u0050\u0074\u0073"
	}
	return _abace, nil
}
func (_bgbc *ST_CenterShapeMapping) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_abdg, _dfec := d.Token()
	if _dfec != nil {
		return _dfec
	}
	if _fadgf, _fbeg := _abdg.(_a.EndElement); _fbeg && _fadgf.Name == start.Name {
		*_bgbc = 1
		return nil
	}
	if _dcbef, _ccfe := _abdg.(_a.CharData); !_ccfe {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _abdg)
	} else {
		switch string(_dcbef) {
		case "":
			*_bgbc = 0
		case "\u006e\u006f\u006e\u0065":
			*_bgbc = 1
		case "\u0066\u004e\u006fd\u0065":
			*_bgbc = 2
		}
	}
	_abdg, _dfec = d.Token()
	if _dfec != nil {
		return _dfec
	}
	if _afgc, _aefd := _abdg.(_a.EndElement); _aefd && _afgc.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _abdg)
}

const (
	ST_StartingElementUnset ST_StartingElement = 0
	ST_StartingElementNode  ST_StartingElement = 1
	ST_StartingElementTrans ST_StartingElement = 2
)

func (_cdcb ST_Offset) String() string {
	switch _cdcb {
	case 0:
		return ""
	case 1:
		return "\u0063\u0074\u0072"
	case 2:
		return "\u006f\u0066\u0066"
	}
	return ""
}
func (_cbcb *ST_FunctionArgument) Validate() error { return _cbcb.ValidateWithPath("") }

// ValidateWithPath validates the CT_Description and its children, prefixing error messages with path
func (_cefa *CT_Description) ValidateWithPath(path string) error { return nil }
func (_ebbfd *CT_Pt) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _degb := range start.Attr {
		if _degb.Name.Local == "\u006do\u0064\u0065\u006c\u0049\u0064" {
			_eaedg, _dfaa := ParseUnionST_ModelId(_degb.Value)
			if _dfaa != nil {
				return _dfaa
			}
			_ebbfd.ModelIdAttr = _eaedg
			continue
		}
		if _degb.Name.Local == "\u0074\u0079\u0070\u0065" {
			_ebbfd.TypeAttr.UnmarshalXMLAttr(_degb)
			continue
		}
		if _degb.Name.Local == "\u0063\u0078\u006eI\u0064" {
			_cfgcf, _fdbg := ParseUnionST_ModelId(_degb.Value)
			if _fdbg != nil {
				return _fdbg
			}
			_ebbfd.CxnIdAttr = &_cfgcf
			continue
		}
	}
_ecgeb:
	for {
		_dadc, _eeaa := d.Token()
		if _eeaa != nil {
			return _eeaa
		}
		switch _deggb := _dadc.(type) {
		case _a.StartElement:
			switch _deggb.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0053e\u0074"}:
				_ebbfd.PrSet = NewCT_ElemPropSet()
				if _aegbd := d.DecodeElement(_ebbfd.PrSet, &_deggb); _aegbd != nil {
					return _aegbd
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0070\u0050\u0072"}:
				_ebbfd.SpPr = _b.NewCT_ShapeProperties()
				if _fdba := d.DecodeElement(_ebbfd.SpPr, &_deggb); _fdba != nil {
					return _fdba
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074"}:
				_ebbfd.T = _b.NewCT_TextBody()
				if _cadg := d.DecodeElement(_ebbfd.T, &_deggb); _cadg != nil {
					return _cadg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ebbfd.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _afbee := d.DecodeElement(_ebbfd.ExtLst, &_deggb); _afbee != nil {
					return _afbee
				}
			default:
				_ag.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006fn \u0043\u0054\u005fP\u0074 \u0025\u0076", _deggb.Name)
				if _ebeca := d.Skip(); _ebeca != nil {
					return _ebeca
				}
			}
		case _a.EndElement:
			break _ecgeb
		case _a.CharData:
		}
	}
	return nil
}
func (_decaf *CT_WhenChoice) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _decaf.Alg != nil {
		_cdgb := _a.StartElement{Name: _a.Name{Local: "\u0061\u006c\u0067"}}
		e.EncodeElement(_decaf.Alg, _cdgb)
	} else if _decaf.Shape != nil {
		_gffcf := _a.StartElement{Name: _a.Name{Local: "\u0073\u0068\u0061p\u0065"}}
		e.EncodeElement(_decaf.Shape, _gffcf)
	} else if _decaf.PresOf != nil {
		_aedc := _a.StartElement{Name: _a.Name{Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}}
		e.EncodeElement(_decaf.PresOf, _aedc)
	} else if _decaf.ConstrLst != nil {
		_cceae := _a.StartElement{Name: _a.Name{Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}}
		e.EncodeElement(_decaf.ConstrLst, _cceae)
	} else if _decaf.RuleLst != nil {
		_efdee := _a.StartElement{Name: _a.Name{Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}}
		e.EncodeElement(_decaf.RuleLst, _efdee)
	} else if _decaf.ForEach != nil {
		_daef := _a.StartElement{Name: _a.Name{Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}}
		e.EncodeElement(_decaf.ForEach, _daef)
	} else if _decaf.LayoutNode != nil {
		_dacb := _a.StartElement{Name: _a.Name{Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}}
		e.EncodeElement(_decaf.LayoutNode, _dacb)
	} else if _decaf.Choose != nil {
		_dgcd := _a.StartElement{Name: _a.Name{Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}}
		e.EncodeElement(_decaf.Choose, _dgcd)
	} else if _decaf.ExtLst != nil {
		_bbfe := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_decaf.ExtLst, _bbfe)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_feeda ST_ContinueDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_adbg := _a.Attr{}
	_adbg.Name = name
	switch _feeda {
	case ST_ContinueDirectionUnset:
		_adbg.Value = ""
	case ST_ContinueDirectionRevDir:
		_adbg.Value = "\u0072\u0065\u0076\u0044\u0069\u0072"
	case ST_ContinueDirectionSameDir:
		_adbg.Value = "\u0073a\u006d\u0065\u0044\u0069\u0072"
	}
	return _adbg, nil
}
func (_bcec ST_PyramidAccentTextMargin) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_gfgga := _a.Attr{}
	_gfgga.Name = name
	switch _bcec {
	case ST_PyramidAccentTextMarginUnset:
		_gfgga.Value = ""
	case ST_PyramidAccentTextMarginStep:
		_gfgga.Value = "\u0073\u0074\u0065\u0070"
	case ST_PyramidAccentTextMarginStack:
		_gfgga.Value = "\u0073\u0074\u0061c\u006b"
	}
	return _gfgga, nil
}
func (_cbadb ST_AnimOneStr) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_ggee := _a.Attr{}
	_ggee.Name = name
	switch _cbadb {
	case ST_AnimOneStrUnset:
		_ggee.Value = ""
	case ST_AnimOneStrNone:
		_ggee.Value = "\u006e\u006f\u006e\u0065"
	case ST_AnimOneStrOne:
		_ggee.Value = "\u006f\u006e\u0065"
	case ST_AnimOneStrBranch:
		_ggee.Value = "\u0062\u0072\u0061\u006e\u0063\u0068"
	}
	return _ggee, nil
}
func (_bdab *ColorsDefHdr) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072"
	return _bdab.CT_ColorTransformHeader.MarshalXML(e, start)
}

const (
	ST_DiagramHorizontalAlignmentUnset ST_DiagramHorizontalAlignment = 0
	ST_DiagramHorizontalAlignmentL     ST_DiagramHorizontalAlignment = 1
	ST_DiagramHorizontalAlignmentCtr   ST_DiagramHorizontalAlignment = 2
	ST_DiagramHorizontalAlignmentR     ST_DiagramHorizontalAlignment = 3
	ST_DiagramHorizontalAlignmentNone  ST_DiagramHorizontalAlignment = 4
)
const (
	ST_FunctionOperatorUnset ST_FunctionOperator = 0
	ST_FunctionOperatorEqu   ST_FunctionOperator = 1
	ST_FunctionOperatorNeq   ST_FunctionOperator = 2
	ST_FunctionOperatorGt    ST_FunctionOperator = 3
	ST_FunctionOperatorLt    ST_FunctionOperator = 4
	ST_FunctionOperatorGte   ST_FunctionOperator = 5
	ST_FunctionOperatorLte   ST_FunctionOperator = 6
)

func (_gbbf ST_Direction) Validate() error { return _gbbf.ValidateWithPath("") }
func (_fgge *ST_ChildDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_agda, _egfc := d.Token()
	if _egfc != nil {
		return _egfc
	}
	if _dccd, _ebdb := _agda.(_a.EndElement); _ebdb && _dccd.Name == start.Name {
		*_fgge = 1
		return nil
	}
	if _edfad, _egeg := _agda.(_a.CharData); !_egeg {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _agda)
	} else {
		switch string(_edfad) {
		case "":
			*_fgge = 0
		case "\u0068\u006f\u0072\u007a":
			*_fgge = 1
		case "\u0076\u0065\u0072\u0074":
			*_fgge = 2
		}
	}
	_agda, _egfc = d.Token()
	if _egfc != nil {
		return _egfc
	}
	if _fdgcc, _dfbf := _agda.(_a.EndElement); _dfbf && _fdgcc.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _agda)
}
func (_bdfbb ST_ChildOrderType) ValidateWithPath(path string) error {
	switch _bdfbb {
	case 0, 1, 2:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bdfbb))
	}
	return nil
}
func (_gbge *ST_PyramidAccentPosition) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ebee, _cbgdd := d.Token()
	if _cbgdd != nil {
		return _cbgdd
	}
	if _bbbaa, _afeb := _ebee.(_a.EndElement); _afeb && _bbbaa.Name == start.Name {
		*_gbge = 1
		return nil
	}
	if _fecga, _fdfg := _ebee.(_a.CharData); !_fdfg {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ebee)
	} else {
		switch string(_fecga) {
		case "":
			*_gbge = 0
		case "\u0062\u0065\u0066":
			*_gbge = 1
		case "\u0061\u0066\u0074":
			*_gbge = 2
		}
	}
	_ebee, _cbgdd = d.Token()
	if _cbgdd != nil {
		return _cbgdd
	}
	if _eafdg, _ggefa := _ebee.(_a.EndElement); _ggefa && _eafdg.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ebee)
}
func (_facdg ST_TextDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_facdg.String(), start)
}

// ValidateWithPath validates the CT_WhenChoice and its children, prefixing error messages with path
func (_ccbge *CT_WhenChoice) ValidateWithPath(path string) error {
	if _ccbge.Alg != nil {
		if _cfcd := _ccbge.Alg.ValidateWithPath(path + "\u002f\u0041\u006c\u0067"); _cfcd != nil {
			return _cfcd
		}
	}
	if _ccbge.Shape != nil {
		if _deeca := _ccbge.Shape.ValidateWithPath(path + "\u002f\u0053\u0068\u0061\u0070\u0065"); _deeca != nil {
			return _deeca
		}
	}
	if _ccbge.PresOf != nil {
		if _bfbge := _ccbge.PresOf.ValidateWithPath(path + "\u002fP\u0072\u0065\u0073\u004f\u0066"); _bfbge != nil {
			return _bfbge
		}
	}
	if _ccbge.ConstrLst != nil {
		if _bbff := _ccbge.ConstrLst.ValidateWithPath(path + "\u002f\u0043\u006f\u006e\u0073\u0074\u0072\u004c\u0073\u0074"); _bbff != nil {
			return _bbff
		}
	}
	if _ccbge.RuleLst != nil {
		if _fddbc := _ccbge.RuleLst.ValidateWithPath(path + "\u002f\u0052\u0075\u006c\u0065\u004c\u0073\u0074"); _fddbc != nil {
			return _fddbc
		}
	}
	if _ccbge.ForEach != nil {
		if _ecfac := _ccbge.ForEach.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0045\u0061\u0063\u0068"); _ecfac != nil {
			return _ecfac
		}
	}
	if _ccbge.LayoutNode != nil {
		if _gfbbg := _ccbge.LayoutNode.ValidateWithPath(path + "/\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"); _gfbbg != nil {
			return _gfbbg
		}
	}
	if _ccbge.Choose != nil {
		if _eegd := _ccbge.Choose.ValidateWithPath(path + "\u002fC\u0068\u006f\u006f\u0073\u0065"); _eegd != nil {
			return _eegd
		}
	}
	if _ccbge.ExtLst != nil {
		if _afcd := _ccbge.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _afcd != nil {
			return _afcd
		}
	}
	return nil
}
func (_gdgb *ST_OutputShapeType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_gdgb = 0
	case "\u006e\u006f\u006e\u0065":
		*_gdgb = 1
	case "\u0063\u006f\u006e\u006e":
		*_gdgb = 2
	}
	return nil
}
func (_abgga ST_FlowDirection) ValidateWithPath(path string) error {
	switch _abgga {
	case 0, 1, 2:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_abgga))
	}
	return nil
}

// Validate validates the CT_ChildPref and its children
func (_gdeg *CT_ChildPref) Validate() error {
	return _gdeg.ValidateWithPath("\u0043\u0054\u005fC\u0068\u0069\u006c\u0064\u0050\u0072\u0065\u0066")
}
func (_acad *ST_FallbackDimension) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ffbgc, _cccee := d.Token()
	if _cccee != nil {
		return _cccee
	}
	if _cgde, _cfgbg := _ffbgc.(_a.EndElement); _cfgbg && _cgde.Name == start.Name {
		*_acad = 1
		return nil
	}
	if _ccfed, _fbcgf := _ffbgc.(_a.CharData); !_fbcgf {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ffbgc)
	} else {
		switch string(_ccfed) {
		case "":
			*_acad = 0
		case "\u0031\u0044":
			*_acad = 1
		case "\u0032\u0044":
			*_acad = 2
		}
	}
	_ffbgc, _cccee = d.Token()
	if _cccee != nil {
		return _cccee
	}
	if _ffcdcc, _aacce := _ffbgc.(_a.EndElement); _aacce && _ffcdcc.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ffbgc)
}

// Validate validates the CT_Category and its children
func (_aaa *CT_Category) Validate() error {
	return _aaa.ValidateWithPath("C\u0054\u005f\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079")
}

const (
	ST_ChildAlignmentUnset ST_ChildAlignment = 0
	ST_ChildAlignmentT     ST_ChildAlignment = 1
	ST_ChildAlignmentB     ST_ChildAlignment = 2
	ST_ChildAlignmentL     ST_ChildAlignment = 3
	ST_ChildAlignmentR     ST_ChildAlignment = 4
)

func (_dcg *CT_When) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_dcg.FuncAttr = ST_FunctionType(1)
	_dcg.OpAttr = ST_FunctionOperator(1)
	for _, _gefea := range start.Attr {
		if _gefea.Name.Local == "\u006e\u0061\u006d\u0065" {
			_cfdcf := _gefea.Value
			_dcg.NameAttr = &_cfdcf
			continue
		}
		if _gefea.Name.Local == "\u0066\u0075\u006e\u0063" {
			_dcg.FuncAttr.UnmarshalXMLAttr(_gefea)
			continue
		}
		if _gefea.Name.Local == "\u0061\u0072\u0067" {
			_fabe, _debg := ParseUnionST_FunctionArgument(_gefea.Value)
			if _debg != nil {
				return _debg
			}
			_dcg.ArgAttr = &_fabe
			continue
		}
		if _gefea.Name.Local == "\u006f\u0070" {
			_dcg.OpAttr.UnmarshalXMLAttr(_gefea)
			continue
		}
		if _gefea.Name.Local == "\u0076\u0061\u006c" {
			_fage, _acdb := ParseUnionST_FunctionValue(_gefea.Value)
			if _acdb != nil {
				return _acdb
			}
			_dcg.ValAttr = _fage
			continue
		}
		if _gefea.Name.Local == "\u0061\u0078\u0069\u0073" {
			_gbdc, _bbba := ParseSliceST_AxisTypes(_gefea.Value)
			if _bbba != nil {
				return _bbba
			}
			_dcg.AxisAttr = &_gbdc
			continue
		}
		if _gefea.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_efdea, _efab := ParseSliceST_ElementTypes(_gefea.Value)
			if _efab != nil {
				return _efab
			}
			_dcg.PtTypeAttr = &_efdea
			continue
		}
		if _gefea.Name.Local == "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073" {
			_beba, _cbcgb := ParseSliceST_Booleans(_gefea.Value)
			if _cbcgb != nil {
				return _cbcgb
			}
			_dcg.HideLastTransAttr = &_beba
			continue
		}
		if _gefea.Name.Local == "\u0073\u0074" {
			_ddced, _baegc := ParseSliceST_Ints(_gefea.Value)
			if _baegc != nil {
				return _baegc
			}
			_dcg.StAttr = &_ddced
			continue
		}
		if _gefea.Name.Local == "\u0063\u006e\u0074" {
			_bfff, _fcdcb := ParseSliceST_UnsignedInts(_gefea.Value)
			if _fcdcb != nil {
				return _fcdcb
			}
			_dcg.CntAttr = &_bfff
			continue
		}
		if _gefea.Name.Local == "\u0073\u0074\u0065\u0070" {
			_efae, _affe := ParseSliceST_Ints(_gefea.Value)
			if _affe != nil {
				return _affe
			}
			_dcg.StepAttr = &_efae
			continue
		}
	}
_eccfc:
	for {
		_ecagg, _adeag := d.Token()
		if _adeag != nil {
			return _adeag
		}
		switch _gbef := _ecagg.(type) {
		case _a.StartElement:
			switch _gbef.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u006c\u0067"}:
				_fdef := NewCT_WhenChoice()
				if _fcce := d.DecodeElement(&_fdef.Alg, &_gbef); _fcce != nil {
					return _fcce
				}
				_dcg.WhenChoice = append(_dcg.WhenChoice, _fdef)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0068\u0061p\u0065"}:
				_ceea := NewCT_WhenChoice()
				if _cdee := d.DecodeElement(&_ceea.Shape, &_gbef); _cdee != nil {
					return _cdee
				}
				_dcg.WhenChoice = append(_dcg.WhenChoice, _ceea)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}:
				_cfbc := NewCT_WhenChoice()
				if _gfca := d.DecodeElement(&_cfbc.PresOf, &_gbef); _gfca != nil {
					return _gfca
				}
				_dcg.WhenChoice = append(_dcg.WhenChoice, _cfbc)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}:
				_cffbg := NewCT_WhenChoice()
				if _bedca := d.DecodeElement(&_cffbg.ConstrLst, &_gbef); _bedca != nil {
					return _bedca
				}
				_dcg.WhenChoice = append(_dcg.WhenChoice, _cffbg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}:
				_defg := NewCT_WhenChoice()
				if _gcdeg := d.DecodeElement(&_defg.RuleLst, &_gbef); _gcdeg != nil {
					return _gcdeg
				}
				_dcg.WhenChoice = append(_dcg.WhenChoice, _defg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}:
				_acfa := NewCT_WhenChoice()
				if _cecad := d.DecodeElement(&_acfa.ForEach, &_gbef); _cecad != nil {
					return _cecad
				}
				_dcg.WhenChoice = append(_dcg.WhenChoice, _acfa)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				_eadef := NewCT_WhenChoice()
				if _abcg := d.DecodeElement(&_eadef.LayoutNode, &_gbef); _abcg != nil {
					return _abcg
				}
				_dcg.WhenChoice = append(_dcg.WhenChoice, _eadef)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}:
				_bfgda := NewCT_WhenChoice()
				if _eagcg := d.DecodeElement(&_bfgda.Choose, &_gbef); _eagcg != nil {
					return _eagcg
				}
				_dcg.WhenChoice = append(_dcg.WhenChoice, _bfgda)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cfabg := NewCT_WhenChoice()
				if _efgcb := d.DecodeElement(&_cfabg.ExtLst, &_gbef); _efgcb != nil {
					return _efgcb
				}
				_dcg.WhenChoice = append(_dcg.WhenChoice, _cfabg)
			default:
				_ag.Log.Debug("\u0073\u006b\u0069p\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u0057\u0068\u0065\u006e\u0020\u0025\u0076", _gbef.Name)
				if _deccc := d.Skip(); _deccc != nil {
					return _deccc
				}
			}
		case _a.EndElement:
			break _eccfc
		case _a.CharData:
		}
	}
	return nil
}
func (_cffeda *ST_FunctionOperator) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ffcbg, _gcgfg := d.Token()
	if _gcgfg != nil {
		return _gcgfg
	}
	if _deaea, _defaa := _ffcbg.(_a.EndElement); _defaa && _deaea.Name == start.Name {
		*_cffeda = 1
		return nil
	}
	if _ccfcb, _aafbe := _ffcbg.(_a.CharData); !_aafbe {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ffcbg)
	} else {
		switch string(_ccfcb) {
		case "":
			*_cffeda = 0
		case "\u0065\u0071\u0075":
			*_cffeda = 1
		case "\u006e\u0065\u0071":
			*_cffeda = 2
		case "\u0067\u0074":
			*_cffeda = 3
		case "\u006c\u0074":
			*_cffeda = 4
		case "\u0067\u0074\u0065":
			*_cffeda = 5
		case "\u006c\u0074\u0065":
			*_cffeda = 6
		}
	}
	_ffcbg, _gcgfg = d.Token()
	if _gcgfg != nil {
		return _gcgfg
	}
	if _fdeee, _cfbac := _ffcbg.(_a.EndElement); _cfbac && _fdeee.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ffcbg)
}
func (_bgbea ST_ConnectorDimension) ValidateWithPath(path string) error {
	switch _bgbea {
	case 0, 1, 2, 3:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bgbea))
	}
	return nil
}
func (_ddfc ST_Direction) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_ddfc.String(), start)
}
func (_acfc *CT_DiagramDefinition) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _acfc.UniqueIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _e.Sprintf("\u0025\u0076", *_acfc.UniqueIdAttr)})
	}
	if _acfc.MinVerAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _e.Sprintf("\u0025\u0076", *_acfc.MinVerAttr)})
	}
	if _acfc.DefStyleAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065"}, Value: _e.Sprintf("\u0025\u0076", *_acfc.DefStyleAttr)})
	}
	e.EncodeToken(start)
	if _acfc.Title != nil {
		_abbb := _a.StartElement{Name: _a.Name{Local: "\u0074\u0069\u0074l\u0065"}}
		for _, _cafc := range _acfc.Title {
			e.EncodeElement(_cafc, _abbb)
		}
	}
	if _acfc.Desc != nil {
		_ddff := _a.StartElement{Name: _a.Name{Local: "\u0064\u0065\u0073\u0063"}}
		for _, _fcde := range _acfc.Desc {
			e.EncodeElement(_fcde, _ddff)
		}
	}
	if _acfc.CatLst != nil {
		_bdcab := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_acfc.CatLst, _bdcab)
	}
	if _acfc.SampData != nil {
		_abfa := _a.StartElement{Name: _a.Name{Local: "\u0073\u0061\u006d\u0070\u0044\u0061\u0074\u0061"}}
		e.EncodeElement(_acfc.SampData, _abfa)
	}
	if _acfc.StyleData != nil {
		_gfcg := _a.StartElement{Name: _a.Name{Local: "\u0073t\u0079\u006c\u0065\u0044\u0061\u0074a"}}
		e.EncodeElement(_acfc.StyleData, _gfcg)
	}
	if _acfc.ClrData != nil {
		_fagd := _a.StartElement{Name: _a.Name{Local: "\u0063l\u0072\u0044\u0061\u0074\u0061"}}
		e.EncodeElement(_acfc.ClrData, _fagd)
	}
	_deec := _a.StartElement{Name: _a.Name{Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}}
	e.EncodeElement(_acfc.LayoutNode, _deec)
	if _acfc.ExtLst != nil {
		_cad := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_acfc.ExtLst, _cad)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type CT_Cxn struct {

	// Model Identifier
	ModelIdAttr ST_ModelId

	// Point Type
	TypeAttr ST_CxnType

	// Source Identifier
	SrcIdAttr ST_ModelId

	// Destination Identifier
	DestIdAttr ST_ModelId

	// Source Position
	SrcOrdAttr uint32

	// Destination Position
	DestOrdAttr uint32

	// Parent Transition Identifier
	ParTransIdAttr *ST_ModelId

	// Sibling Transition Identifier
	SibTransIdAttr *ST_ModelId

	// Presentation Identifier
	PresIdAttr *string
	ExtLst     *_b.CT_OfficeArtExtensionList
}

func (_beec ST_LinearDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_beec.String(), start)
}
func (_dedd *CT_DiagramDefinitionHeader) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _bcgd := range start.Attr {
		if _bcgd.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_cadb := _bcgd.Value
			_dedd.UniqueIdAttr = _cadb
			continue
		}
		if _bcgd.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_ccgga := _bcgd.Value
			_dedd.MinVerAttr = &_ccgga
			continue
		}
		if _bcgd.Name.Local == "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065" {
			_ccdgf := _bcgd.Value
			_dedd.DefStyleAttr = &_ccdgf
			continue
		}
		if _bcgd.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_bcbc, _egad := _g.ParseInt(_bcgd.Value, 10, 32)
			if _egad != nil {
				return _egad
			}
			_dfef := int32(_bcbc)
			_dedd.ResIdAttr = &_dfef
			continue
		}
	}
_dggdc:
	for {
		_cbf, _ceef := d.Token()
		if _ceef != nil {
			return _ceef
		}
		switch _fddeg := _cbf.(type) {
		case _a.StartElement:
			switch _fddeg.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_acdc := NewCT_Name()
				if _cdcdf := d.DecodeElement(_acdc, &_fddeg); _cdcdf != nil {
					return _cdcdf
				}
				_dedd.Title = append(_dedd.Title, _acdc)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_ffc := NewCT_Description()
				if _ddbd := d.DecodeElement(_ffc, &_fddeg); _ddbd != nil {
					return _ddbd
				}
				_dedd.Desc = append(_dedd.Desc, _ffc)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_dedd.CatLst = NewCT_Categories()
				if _fdggg := d.DecodeElement(_dedd.CatLst, &_fddeg); _fdggg != nil {
					return _fdggg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dedd.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _fec := d.DecodeElement(_dedd.ExtLst, &_fddeg); _fec != nil {
					return _fec
				}
			default:
				_ag.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020o\u006e\u0020\u0043\u0054_\u0044\u0069a\u0067\u0072\u0061\u006d\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065\u0061\u0064\u0065\u0072\u0020\u0025\u0076", _fddeg.Name)
				if _fgc := d.Skip(); _fgc != nil {
					return _fgc
				}
			}
		case _a.EndElement:
			break _dggdc
		case _a.CharData:
		}
	}
	return nil
}
func (_bgage *ST_NodeHorizontalAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cfdb, _dfcbb := d.Token()
	if _dfcbb != nil {
		return _dfcbb
	}
	if _gbga, _gffgc := _cfdb.(_a.EndElement); _gffgc && _gbga.Name == start.Name {
		*_bgage = 1
		return nil
	}
	if _ecdce, _aefca := _cfdb.(_a.CharData); !_aefca {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cfdb)
	} else {
		switch string(_ecdce) {
		case "":
			*_bgage = 0
		case "\u006c":
			*_bgage = 1
		case "\u0063\u0074\u0072":
			*_bgage = 2
		case "\u0072":
			*_bgage = 3
		}
	}
	_cfdb, _dfcbb = d.Token()
	if _dfcbb != nil {
		return _dfcbb
	}
	if _gegb, _gdddb := _cfdb.(_a.EndElement); _gdddb && _gegb.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cfdb)
}

const (
	ST_ChildOrderTypeUnset ST_ChildOrderType = 0
	ST_ChildOrderTypeB     ST_ChildOrderType = 1
	ST_ChildOrderTypeT     ST_ChildOrderType = 2
)

func (_ccce *ST_LinearDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_bdgc, _bbcd := d.Token()
	if _bbcd != nil {
		return _bbcd
	}
	if _degbe, _acag := _bdgc.(_a.EndElement); _acag && _degbe.Name == start.Name {
		*_ccce = 1
		return nil
	}
	if _cgabc, _dbaba := _bdgc.(_a.CharData); !_dbaba {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bdgc)
	} else {
		switch string(_cgabc) {
		case "":
			*_ccce = 0
		case "\u0066\u0072\u006fm\u004c":
			*_ccce = 1
		case "\u0066\u0072\u006fm\u0052":
			*_ccce = 2
		case "\u0066\u0072\u006fm\u0054":
			*_ccce = 3
		case "\u0066\u0072\u006fm\u0042":
			*_ccce = 4
		}
	}
	_bdgc, _bbcd = d.Token()
	if _bbcd != nil {
		return _bbcd
	}
	if _dbbe, _fccc := _bdgc.(_a.EndElement); _fccc && _dbbe.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bdgc)
}
func (_eecb ST_CenterShapeMapping) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_eecb.String(), start)
}
func (_acade ST_AutoTextRotation) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_bfffc := _a.Attr{}
	_bfffc.Name = name
	switch _acade {
	case ST_AutoTextRotationUnset:
		_bfffc.Value = ""
	case ST_AutoTextRotationNone:
		_bfffc.Value = "\u006e\u006f\u006e\u0065"
	case ST_AutoTextRotationUpr:
		_bfffc.Value = "\u0075\u0070\u0072"
	case ST_AutoTextRotationGrav:
		_bfffc.Value = "\u0067\u0072\u0061\u0076"
	}
	return _bfffc, nil
}
func (_bagc ST_ResizeHandlesStr) Validate() error { return _bagc.ValidateWithPath("") }
func (_efcg *CT_ResizeHandles) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _efcg.ValAttr != ST_ResizeHandlesStrUnset {
		_cbfg, _ddbg := _efcg.ValAttr.MarshalXMLAttr(_a.Name{Local: "\u0076\u0061\u006c"})
		if _ddbg != nil {
			return _ddbg
		}
		start.Attr = append(start.Attr, _cbfg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type ST_AnimLvlStr byte

func (_abgf ST_FallbackDimension) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_abgf.String(), start)
}
func NewCT_ElemPropSet() *CT_ElemPropSet { _ceaf := &CT_ElemPropSet{}; return _ceaf }
func NewCT_Parameter() *CT_Parameter {
	_accd := &CT_Parameter{}
	_accd.TypeAttr = ST_ParameterId(1)
	return _accd
}

// ValidateWithPath validates the CT_CTStyleLabel and its children, prefixing error messages with path
func (_ffe *CT_CTStyleLabel) ValidateWithPath(path string) error {
	if _ffe.FillClrLst != nil {
		if _gea := _ffe.FillClrLst.ValidateWithPath(path + "/\u0046\u0069\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"); _gea != nil {
			return _gea
		}
	}
	if _ffe.LinClrLst != nil {
		if _dbf := _ffe.LinClrLst.ValidateWithPath(path + "\u002f\u004c\u0069\u006e\u0043\u006c\u0072\u004c\u0073\u0074"); _dbf != nil {
			return _dbf
		}
	}
	if _ffe.EffectClrLst != nil {
		if _aba := _ffe.EffectClrLst.ValidateWithPath(path + "\u002f\u0045\u0066\u0066\u0065\u0063\u0074\u0043\u006c\u0072\u004c\u0073\u0074"); _aba != nil {
			return _aba
		}
	}
	if _ffe.TxLinClrLst != nil {
		if _ddc := _ffe.TxLinClrLst.ValidateWithPath(path + "\u002f\u0054\u0078L\u0069\u006e\u0043\u006c\u0072\u004c\u0073\u0074"); _ddc != nil {
			return _ddc
		}
	}
	if _ffe.TxFillClrLst != nil {
		if _ecb := _ffe.TxFillClrLst.ValidateWithPath(path + "\u002f\u0054\u0078\u0046\u0069\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"); _ecb != nil {
			return _ecb
		}
	}
	if _ffe.TxEffectClrLst != nil {
		if _ceg := _ffe.TxEffectClrLst.ValidateWithPath(path + "\u002fT\u0078E\u0066\u0066\u0065\u0063\u0074\u0043\u006c\u0072\u004c\u0073\u0074"); _ceg != nil {
			return _ceg
		}
	}
	if _ffe.ExtLst != nil {
		if _dcdg := _ffe.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dcdg != nil {
			return _dcdg
		}
	}
	return nil
}

// Validate validates the CT_Shape and its children
func (_agdc *CT_Shape) Validate() error {
	return _agdc.ValidateWithPath("\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065")
}
func (_dcbfc ST_NodeHorizontalAlignment) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_bbbcb := _a.Attr{}
	_bbbcb.Name = name
	switch _dcbfc {
	case ST_NodeHorizontalAlignmentUnset:
		_bbbcb.Value = ""
	case ST_NodeHorizontalAlignmentL:
		_bbbcb.Value = "\u006c"
	case ST_NodeHorizontalAlignmentCtr:
		_bbbcb.Value = "\u0063\u0074\u0072"
	case ST_NodeHorizontalAlignmentR:
		_bbbcb.Value = "\u0072"
	}
	return _bbbcb, nil
}
func NewCT_ColorTransformHeaderLst() *CT_ColorTransformHeaderLst {
	_dgde := &CT_ColorTransformHeaderLst{}
	return _dgde
}

type StyleDefHdrLst struct{ CT_StyleDefinitionHeaderLst }
type CT_NumericRule struct {

	// Value
	ValAttr *float64

	// Factor
	FactAttr *float64

	// Max Value
	MaxAttr     *float64
	ExtLst      *_b.CT_OfficeArtExtensionList
	TypeAttr    ST_ConstraintType
	ForAttr     ST_ConstraintRelationship
	ForNameAttr *string
	PtTypeAttr  ST_ElementType
}

func (_ddab ST_PyramidAccentTextMargin) ValidateWithPath(path string) error {
	switch _ddab {
	case 0, 1, 2:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ddab))
	}
	return nil
}
func _gfaf(_dbfgg bool) uint8 {
	if _dbfgg {
		return 1
	}
	return 0
}

// ValidateWithPath validates the CT_CTName and its children, prefixing error messages with path
func (_ecde *CT_CTName) ValidateWithPath(path string) error { return nil }
func (_cdfa ST_FunctionOperator) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_edcgd := _a.Attr{}
	_edcgd.Name = name
	switch _cdfa {
	case ST_FunctionOperatorUnset:
		_edcgd.Value = ""
	case ST_FunctionOperatorEqu:
		_edcgd.Value = "\u0065\u0071\u0075"
	case ST_FunctionOperatorNeq:
		_edcgd.Value = "\u006e\u0065\u0071"
	case ST_FunctionOperatorGt:
		_edcgd.Value = "\u0067\u0074"
	case ST_FunctionOperatorLt:
		_edcgd.Value = "\u006c\u0074"
	case ST_FunctionOperatorGte:
		_edcgd.Value = "\u0067\u0074\u0065"
	case ST_FunctionOperatorLte:
		_edcgd.Value = "\u006c\u0074\u0065"
	}
	return _edcgd, nil
}

type CT_Constraints struct {

	// Constraint
	Constr []*CT_Constraint
}

func (_ggcge ST_FlowDirection) Validate() error { return _ggcge.ValidateWithPath("") }
func (_efggf ST_ChildDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_efggf.String(), start)
}

type CT_ColorTransform struct {

	// Unique ID
	UniqueIdAttr *string

	// Minimum Version
	MinVerAttr *string

	// Title
	Title []*CT_CTName

	// Description
	Desc []*CT_CTDescription

	// Color Transform Category List
	CatLst *CT_CTCategories

	// Style Label
	StyleLbl []*CT_CTStyleLabel
	ExtLst   *_b.CT_OfficeArtExtensionList
}

// ValidateWithPath validates the CT_SDDescription and its children, prefixing error messages with path
func (_gagb *CT_SDDescription) ValidateWithPath(path string) error { return nil }

type CT_CTCategory struct {

	// Category Type
	TypeAttr string

	// Priority
	PriAttr uint32
}

func (_ddea *ST_ConstraintType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_fbfe, _ggcg := d.Token()
	if _ggcg != nil {
		return _ggcg
	}
	if _aeced, _bdbbf := _fbfe.(_a.EndElement); _bdbbf && _aeced.Name == start.Name {
		*_ddea = 1
		return nil
	}
	if _begg, _dfafa := _fbfe.(_a.CharData); !_dfafa {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fbfe)
	} else {
		switch string(_begg) {
		case "":
			*_ddea = 0
		case "\u006e\u006f\u006e\u0065":
			*_ddea = 1
		case "\u0061\u006c\u0069\u0067\u006e\u004f\u0066\u0066":
			*_ddea = 2
		case "\u0062e\u0067\u004d\u0061\u0072\u0067":
			*_ddea = 3
		case "\u0062\u0065\u006e\u0064\u0044\u0069\u0073\u0074":
			*_ddea = 4
		case "\u0062\u0065\u0067\u0050\u0061\u0064":
			*_ddea = 5
		case "\u0062":
			*_ddea = 6
		case "\u0062\u004d\u0061r\u0067":
			*_ddea = 7
		case "\u0062\u004f\u0066\u0066":
			*_ddea = 8
		case "\u0063\u0074\u0072\u0058":
			*_ddea = 9
		case "\u0063t\u0072\u0058\u004f\u0066\u0066":
			*_ddea = 10
		case "\u0063\u0074\u0072\u0059":
			*_ddea = 11
		case "\u0063t\u0072\u0059\u004f\u0066\u0066":
			*_ddea = 12
		case "\u0063\u006f\u006e\u006e\u0044\u0069\u0073\u0074":
			*_ddea = 13
		case "\u0064\u0069\u0061\u006d":
			*_ddea = 14
		case "\u0065n\u0064\u004d\u0061\u0072\u0067":
			*_ddea = 15
		case "\u0065\u006e\u0064\u0050\u0061\u0064":
			*_ddea = 16
		case "\u0068":
			*_ddea = 17
		case "\u0068\u0041\u0072\u0048":
			*_ddea = 18
		case "\u0068\u004f\u0066\u0066":
			*_ddea = 19
		case "\u006c":
			*_ddea = 20
		case "\u006c\u004d\u0061r\u0067":
			*_ddea = 21
		case "\u006c\u004f\u0066\u0066":
			*_ddea = 22
		case "\u0072":
			*_ddea = 23
		case "\u0072\u004d\u0061r\u0067":
			*_ddea = 24
		case "\u0072\u004f\u0066\u0066":
			*_ddea = 25
		case "\u0070\u0072\u0069\u006d\u0046\u006f\u006e\u0074\u0053\u007a":
			*_ddea = 26
		case "\u0070\u0079\u0072\u0061\u0041\u0063\u0063\u0074\u0052\u0061\u0074\u0069\u006f":
			*_ddea = 27
		case "\u0073e\u0063\u0046\u006f\u006e\u0074\u0053z":
			*_ddea = 28
		case "\u0073\u0069\u0062S\u0070":
			*_ddea = 29
		case "\u0073\u0065\u0063\u0053\u0069\u0062\u0053\u0070":
			*_ddea = 30
		case "\u0073\u0070":
			*_ddea = 31
		case "\u0073t\u0065\u006d\u0054\u0068\u0069\u0063k":
			*_ddea = 32
		case "\u0074":
			*_ddea = 33
		case "\u0074\u004d\u0061r\u0067":
			*_ddea = 34
		case "\u0074\u004f\u0066\u0066":
			*_ddea = 35
		case "\u0075\u0073\u0065r\u0041":
			*_ddea = 36
		case "\u0075\u0073\u0065r\u0042":
			*_ddea = 37
		case "\u0075\u0073\u0065r\u0043":
			*_ddea = 38
		case "\u0075\u0073\u0065r\u0044":
			*_ddea = 39
		case "\u0075\u0073\u0065r\u0045":
			*_ddea = 40
		case "\u0075\u0073\u0065r\u0046":
			*_ddea = 41
		case "\u0075\u0073\u0065r\u0047":
			*_ddea = 42
		case "\u0075\u0073\u0065r\u0048":
			*_ddea = 43
		case "\u0075\u0073\u0065r\u0049":
			*_ddea = 44
		case "\u0075\u0073\u0065r\u004a":
			*_ddea = 45
		case "\u0075\u0073\u0065r\u004b":
			*_ddea = 46
		case "\u0075\u0073\u0065r\u004c":
			*_ddea = 47
		case "\u0075\u0073\u0065r\u004d":
			*_ddea = 48
		case "\u0075\u0073\u0065r\u004e":
			*_ddea = 49
		case "\u0075\u0073\u0065r\u004f":
			*_ddea = 50
		case "\u0075\u0073\u0065r\u0050":
			*_ddea = 51
		case "\u0075\u0073\u0065r\u0051":
			*_ddea = 52
		case "\u0075\u0073\u0065r\u0052":
			*_ddea = 53
		case "\u0075\u0073\u0065r\u0053":
			*_ddea = 54
		case "\u0075\u0073\u0065r\u0054":
			*_ddea = 55
		case "\u0075\u0073\u0065r\u0055":
			*_ddea = 56
		case "\u0075\u0073\u0065r\u0056":
			*_ddea = 57
		case "\u0075\u0073\u0065r\u0057":
			*_ddea = 58
		case "\u0075\u0073\u0065r\u0058":
			*_ddea = 59
		case "\u0075\u0073\u0065r\u0059":
			*_ddea = 60
		case "\u0075\u0073\u0065r\u005a":
			*_ddea = 61
		case "\u0077":
			*_ddea = 62
		case "\u0077\u0041\u0072\u0048":
			*_ddea = 63
		case "\u0077\u004f\u0066\u0066":
			*_ddea = 64
		}
	}
	_fbfe, _ggcg = d.Token()
	if _ggcg != nil {
		return _ggcg
	}
	if _efffg, _cagd := _fbfe.(_a.EndElement); _cagd && _efffg.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fbfe)
}
func (_geec *ST_ElementType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_geec = 0
	case "\u0061\u006c\u006c":
		*_geec = 1
	case "\u0064\u006f\u0063":
		*_geec = 2
	case "\u006e\u006f\u0064\u0065":
		*_geec = 3
	case "\u006e\u006f\u0072\u006d":
		*_geec = 4
	case "\u006eo\u006e\u004e\u006f\u0072\u006d":
		*_geec = 5
	case "\u0061\u0073\u0073\u0074":
		*_geec = 6
	case "\u006eo\u006e\u0041\u0073\u0073\u0074":
		*_geec = 7
	case "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073":
		*_geec = 8
	case "\u0070\u0072\u0065\u0073":
		*_geec = 9
	case "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073":
		*_geec = 10
	}
	return nil
}
func (_cebfg ST_ChildDirection) String() string {
	switch _cebfg {
	case 0:
		return ""
	case 1:
		return "\u0068\u006f\u0072\u007a"
	case 2:
		return "\u0076\u0065\u0072\u0074"
	}
	return ""
}
func (_aagaa *ST_FallbackDimension) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_aagaa = 0
	case "\u0031\u0044":
		*_aagaa = 1
	case "\u0032\u0044":
		*_aagaa = 2
	}
	return nil
}
func (_efeg ST_FunctionType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_efeg.String(), start)
}
func (_dgcdb *ST_PtType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_edfdb, _cgebf := d.Token()
	if _cgebf != nil {
		return _cgebf
	}
	if _fcbebb, _bdefa := _edfdb.(_a.EndElement); _bdefa && _fcbebb.Name == start.Name {
		*_dgcdb = 1
		return nil
	}
	if _fcdbd, _gdfa := _edfdb.(_a.CharData); !_gdfa {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _edfdb)
	} else {
		switch string(_fcdbd) {
		case "":
			*_dgcdb = 0
		case "\u006e\u006f\u0064\u0065":
			*_dgcdb = 1
		case "\u0061\u0073\u0073\u0074":
			*_dgcdb = 2
		case "\u0064\u006f\u0063":
			*_dgcdb = 3
		case "\u0070\u0072\u0065\u0073":
			*_dgcdb = 4
		case "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073":
			*_dgcdb = 5
		case "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073":
			*_dgcdb = 6
		}
	}
	_edfdb, _cgebf = d.Token()
	if _cgebf != nil {
		return _cgebf
	}
	if _bfcb, _addf := _edfdb.(_a.EndElement); _addf && _bfcb.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _edfdb)
}
func (_gafe *LayoutDefHdr) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_gafe.CT_DiagramDefinitionHeader = *NewCT_DiagramDefinitionHeader()
	for _, _baegg := range start.Attr {
		if _baegg.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_bdce := _baegg.Value
			_gafe.UniqueIdAttr = _bdce
			continue
		}
		if _baegg.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_feaa := _baegg.Value
			_gafe.MinVerAttr = &_feaa
			continue
		}
		if _baegg.Name.Local == "\u0064\u0065\u0066\u0053\u0074\u0079\u006c\u0065" {
			_gcefg := _baegg.Value
			_gafe.DefStyleAttr = &_gcefg
			continue
		}
		if _baegg.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_dcccd, _cfae := _g.ParseInt(_baegg.Value, 10, 32)
			if _cfae != nil {
				return _cfae
			}
			_fdbd := int32(_dcccd)
			_gafe.ResIdAttr = &_fdbd
			continue
		}
	}
_adfb:
	for {
		_efcgf, _agec := d.Token()
		if _agec != nil {
			return _agec
		}
		switch _fbfg := _efcgf.(type) {
		case _a.StartElement:
			switch _fbfg.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_gcgg := NewCT_Name()
				if _gadg := d.DecodeElement(_gcgg, &_fbfg); _gadg != nil {
					return _gadg
				}
				_gafe.Title = append(_gafe.Title, _gcgg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_ccgdg := NewCT_Description()
				if _bddgd := d.DecodeElement(_ccgdg, &_fbfg); _bddgd != nil {
					return _bddgd
				}
				_gafe.Desc = append(_gafe.Desc, _ccgdg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_gafe.CatLst = NewCT_Categories()
				if _cffed := d.DecodeElement(_gafe.CatLst, &_fbfg); _cffed != nil {
					return _cffed
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gafe.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _gebg := d.DecodeElement(_gafe.ExtLst, &_fbfg); _gebg != nil {
					return _gebg
				}
			default:
				_ag.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u004c\u0061yo\u0075\u0074D\u0065\u0066\u0048\u0064\u0072\u0020\u0025\u0076", _fbfg.Name)
				if _bgbd := d.Skip(); _bgbd != nil {
					return _bgbd
				}
			}
		case _a.EndElement:
			break _adfb
		case _a.CharData:
		}
	}
	return nil
}
func (_bfcd *ST_ArrowheadStyle) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bfcd = 0
	case "\u0061\u0075\u0074\u006f":
		*_bfcd = 1
	case "\u0061\u0072\u0072":
		*_bfcd = 2
	case "\u006e\u006f\u0041r\u0072":
		*_bfcd = 3
	}
	return nil
}
func (_bcaf ST_Offset) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_gcbd := _a.Attr{}
	_gcbd.Name = name
	switch _bcaf {
	case ST_OffsetUnset:
		_gcbd.Value = ""
	case ST_OffsetCtr:
		_gcbd.Value = "\u0063\u0074\u0072"
	case ST_OffsetOff:
		_gcbd.Value = "\u006f\u0066\u0066"
	}
	return _gcbd, nil
}
func (_febg ST_StartingElement) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_febg.String(), start)
}
func NewCT_LayoutVariablePropertySet() *CT_LayoutVariablePropertySet {
	_cage := &CT_LayoutVariablePropertySet{}
	return _cage
}
func (_afbdf *CT_StyleDefinitionHeader) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _cegaa := range start.Attr {
		if _cegaa.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_gcde := _cegaa.Value
			_afbdf.UniqueIdAttr = _gcde
			continue
		}
		if _cegaa.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_bdae := _cegaa.Value
			_afbdf.MinVerAttr = &_bdae
			continue
		}
		if _cegaa.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_ced, _bbag := _g.ParseInt(_cegaa.Value, 10, 32)
			if _bbag != nil {
				return _bbag
			}
			_fcab := int32(_ced)
			_afbdf.ResIdAttr = &_fcab
			continue
		}
	}
_cgac:
	for {
		_fegc, _dceg := d.Token()
		if _dceg != nil {
			return _dceg
		}
		switch _cbgcc := _fegc.(type) {
		case _a.StartElement:
			switch _cbgcc.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_eedb := NewCT_SDName()
				if _ccde := d.DecodeElement(_eedb, &_cbgcc); _ccde != nil {
					return _ccde
				}
				_afbdf.Title = append(_afbdf.Title, _eedb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_ecbac := NewCT_SDDescription()
				if _egga := d.DecodeElement(_ecbac, &_cbgcc); _egga != nil {
					return _egga
				}
				_afbdf.Desc = append(_afbdf.Desc, _ecbac)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_afbdf.CatLst = NewCT_SDCategories()
				if _fbac := d.DecodeElement(_afbdf.CatLst, &_cbgcc); _fbac != nil {
					return _fbac
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_afbdf.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _gdd := d.DecodeElement(_afbdf.ExtLst, &_cbgcc); _gdd != nil {
					return _gdd
				}
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048e\u0061\u0064\u0065\u0072\u0020%\u0076", _cbgcc.Name)
				if _cfafc := d.Skip(); _cfafc != nil {
					return _cfafc
				}
			}
		case _a.EndElement:
			break _cgac
		case _a.CharData:
		}
	}
	return nil
}

const (
	ST_OffsetUnset ST_Offset = 0
	ST_OffsetCtr   ST_Offset = 1
	ST_OffsetOff   ST_Offset = 2
)

func NewStyleDefHdrLst() *StyleDefHdrLst {
	_gfdd := &StyleDefHdrLst{}
	_gfdd.CT_StyleDefinitionHeaderLst = *NewCT_StyleDefinitionHeaderLst()
	return _gfdd
}
func (_fgbf *CT_ColorTransformHeader) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _fee := range start.Attr {
		if _fee.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_bbae := _fee.Value
			_fgbf.UniqueIdAttr = _bbae
			continue
		}
		if _fee.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_agc := _fee.Value
			_fgbf.MinVerAttr = &_agc
			continue
		}
		if _fee.Name.Local == "\u0072\u0065\u0073I\u0064" {
			_dba, _fdc := _g.ParseInt(_fee.Value, 10, 32)
			if _fdc != nil {
				return _fdc
			}
			_aafb := int32(_dba)
			_fgbf.ResIdAttr = &_aafb
			continue
		}
	}
_ebed:
	for {
		_daf, _gga := d.Token()
		if _gga != nil {
			return _gga
		}
		switch _cdgf := _daf.(type) {
		case _a.StartElement:
			switch _cdgf.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_ggg := NewCT_CTName()
				if _bdfe := d.DecodeElement(_ggg, &_cdgf); _bdfe != nil {
					return _bdfe
				}
				_fgbf.Title = append(_fgbf.Title, _ggg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_bgga := NewCT_CTDescription()
				if _fdaf := d.DecodeElement(_bgga, &_cdgf); _fdaf != nil {
					return _fdaf
				}
				_fgbf.Desc = append(_fgbf.Desc, _bgga)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_fgbf.CatLst = NewCT_CTCategories()
				if _afa := d.DecodeElement(_fgbf.CatLst, &_cdgf); _afa != nil {
					return _afa
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fgbf.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _ggdb := d.DecodeElement(_fgbf.ExtLst, &_cdgf); _ggdb != nil {
					return _ggdb
				}
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006fn\u0020\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061\u006es\u0066\u006f\u0072\u006d\u0048\u0065a\u0064\u0065\u0072 \u0025\u0076", _cdgf.Name)
				if _aee := d.Skip(); _aee != nil {
					return _aee
				}
			}
		case _a.EndElement:
			break _ebed
		case _a.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Otherwise and its children
func (_aaab *CT_Otherwise) Validate() error {
	return _aaab.ValidateWithPath("\u0043\u0054\u005fO\u0074\u0068\u0065\u0072\u0077\u0069\u0073\u0065")
}
func NewCT_TextProps() *CT_TextProps {
	_bgedg := &CT_TextProps{}
	_bgedg.Text3DChoice = _b.NewEG_Text3DChoice()
	return _bgedg
}

const (
	ST_ConnectorRoutingUnset     ST_ConnectorRouting = 0
	ST_ConnectorRoutingStra      ST_ConnectorRouting = 1
	ST_ConnectorRoutingBend      ST_ConnectorRouting = 2
	ST_ConnectorRoutingCurve     ST_ConnectorRouting = 3
	ST_ConnectorRoutingLongCurve ST_ConnectorRouting = 4
)

// ValidateWithPath validates the CT_CTCategories and its children, prefixing error messages with path
func (_abc *CT_CTCategories) ValidateWithPath(path string) error {
	for _cbed, _agb := range _abc.Cat {
		if _dad := _agb.ValidateWithPath(_e.Sprintf("\u0025\u0073\u002f\u0043\u0061\u0074\u005b\u0025\u0064\u005d", path, _cbed)); _dad != nil {
			return _dad
		}
	}
	return nil
}
func (_bgdgc *ST_ChildAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_edgf, _ageed := d.Token()
	if _ageed != nil {
		return _ageed
	}
	if _ebff, _gfec := _edgf.(_a.EndElement); _gfec && _ebff.Name == start.Name {
		*_bgdgc = 1
		return nil
	}
	if _gbgd, _ecea := _edgf.(_a.CharData); !_ecea {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _edgf)
	} else {
		switch string(_gbgd) {
		case "":
			*_bgdgc = 0
		case "\u0074":
			*_bgdgc = 1
		case "\u0062":
			*_bgdgc = 2
		case "\u006c":
			*_bgdgc = 3
		case "\u0072":
			*_bgdgc = 4
		}
	}
	_edgf, _ageed = d.Token()
	if _ageed != nil {
		return _ageed
	}
	if _gggc, _bgdd := _edgf.(_a.EndElement); _bgdd && _gggc.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _edgf)
}
func NewCT_NumericRule() *CT_NumericRule {
	_gagc := &CT_NumericRule{}
	_gagc.TypeAttr = ST_ConstraintType(1)
	return _gagc
}
func (_cdgaf ST_BendPoint) ValidateWithPath(path string) error {
	switch _cdgaf {
	case 0, 1, 2, 3:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cdgaf))
	}
	return nil
}
func NewCT_Algorithm() *CT_Algorithm {
	_eda := &CT_Algorithm{}
	_eda.TypeAttr = ST_AlgorithmType(1)
	return _eda
}
func NewColorsDefHdrLst() *ColorsDefHdrLst {
	_gaaac := &ColorsDefHdrLst{}
	_gaaac.CT_ColorTransformHeaderLst = *NewCT_ColorTransformHeaderLst()
	return _gaaac
}
func (_bddf ST_FunctionOperator) Validate() error { return _bddf.ValidateWithPath("") }
func (_ffad ST_TextAnchorVertical) ValidateWithPath(path string) error {
	switch _ffad {
	case 0, 1, 2, 3:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ffad))
	}
	return nil
}
func (_bbdb ST_BoolOperator) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_bbdb.String(), start)
}

type ST_VariableType byte

func (_ecbf ST_GrowDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_fbcf := _a.Attr{}
	_fbcf.Name = name
	switch _ecbf {
	case ST_GrowDirectionUnset:
		_fbcf.Value = ""
	case ST_GrowDirectionTL:
		_fbcf.Value = "\u0074\u004c"
	case ST_GrowDirectionTR:
		_fbcf.Value = "\u0074\u0052"
	case ST_GrowDirectionBL:
		_fbcf.Value = "\u0062\u004c"
	case ST_GrowDirectionBR:
		_fbcf.Value = "\u0062\u0052"
	}
	return _fbcf, nil
}
func (_ddfcc ST_HierBranchStyle) String() string {
	switch _ddfcc {
	case 0:
		return ""
	case 1:
		return "\u006c"
	case 2:
		return "\u0072"
	case 3:
		return "\u0068\u0061\u006e\u0067"
	case 4:
		return "\u0073\u0074\u0064"
	case 5:
		return "\u0069\u006e\u0069\u0074"
	}
	return ""
}
func (_ffd ST_FunctionArgument) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _ffd.ST_VariableType != ST_VariableTypeUnset {
		e.EncodeToken(_a.CharData(_ffd.ST_VariableType.String()))
	}
	return e.EncodeToken(_a.EndElement{Name: start.Name})
}
func (_dcac ST_AxisType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_dcac.String(), start)
}

// Validate validates the CT_StyleDefinition and its children
func (_dgad *CT_StyleDefinition) Validate() error {
	return _dgad.ValidateWithPath("\u0043T\u005fS\u0074\u0079\u006c\u0065\u0044e\u0066\u0069n\u0069\u0074\u0069\u006f\u006e")
}

// ST_PrSetCustVal is a union type
type ST_PrSetCustVal struct {
	ST_Percentage *string
	Int32         *int32
}

func (_dccb ST_NodeVerticalAlignment) String() string {
	switch _dccb {
	case 0:
		return ""
	case 1:
		return "\u0074"
	case 2:
		return "\u006d\u0069\u0064"
	case 3:
		return "\u0062"
	}
	return ""
}
func NewCT_Categories() *CT_Categories {
	_ada := &CT_Categories{}
	return _ada
}
func (_gfbb *CT_ResizeHandles) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _fdac := range start.Attr {
		if _fdac.Name.Local == "\u0076\u0061\u006c" {
			_gfbb.ValAttr.UnmarshalXMLAttr(_fdac)
			continue
		}
	}
	for {
		_bfcab, _cebg := d.Token()
		if _cebg != nil {
			return _e.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0052\u0065\u0073\u0069z\u0065H\u0061\u006e\u0064\u006c\u0065\u0073\u003a \u0025\u0073", _cebg)
		}
		if _ccgfb, _ggabd := _bfcab.(_a.EndElement); _ggabd && _ccgfb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_cedgf ST_StartingElement) Validate() error { return _cedgf.ValidateWithPath("") }
func (_bacaa *ST_AnimOneStr) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bacaa = 0
	case "\u006e\u006f\u006e\u0065":
		*_bacaa = 1
	case "\u006f\u006e\u0065":
		*_bacaa = 2
	case "\u0062\u0072\u0061\u006e\u0063\u0068":
		*_bacaa = 3
	}
	return nil
}
func (_eggg *CT_ColorTransform) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _fbd := range start.Attr {
		if _fbd.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_fgg := _fbd.Value
			_eggg.UniqueIdAttr = &_fgg
			continue
		}
		if _fbd.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_ggd := _fbd.Value
			_eggg.MinVerAttr = &_ggd
			continue
		}
	}
_aefg:
	for {
		_facg, _bgb := d.Token()
		if _bgb != nil {
			return _bgb
		}
		switch _dbba := _facg.(type) {
		case _a.StartElement:
			switch _dbba.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_agf := NewCT_CTName()
				if _egag := d.DecodeElement(_agf, &_dbba); _egag != nil {
					return _egag
				}
				_eggg.Title = append(_eggg.Title, _agf)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_cegb := NewCT_CTDescription()
				if _ecbc := d.DecodeElement(_cegb, &_dbba); _ecbc != nil {
					return _ecbc
				}
				_eggg.Desc = append(_eggg.Desc, _cegb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_eggg.CatLst = NewCT_CTCategories()
				if _cabb := d.DecodeElement(_eggg.CatLst, &_dbba); _cabb != nil {
					return _cabb
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}:
				_ffa := NewCT_CTStyleLabel()
				if _dgb := d.DecodeElement(_ffa, &_dbba); _dgb != nil {
					return _dgb
				}
				_eggg.StyleLbl = append(_eggg.StyleLbl, _ffa)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_eggg.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _dab := d.DecodeElement(_eggg.ExtLst, &_dbba); _dab != nil {
					return _dab
				}
			default:
				_ag.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061\u006e\u0073\u0066\u006f\u0072\u006d\u0020\u0025\u0076", _dbba.Name)
				if _bfaf := d.Skip(); _bfaf != nil {
					return _bfaf
				}
			}
		case _a.EndElement:
			break _aefg
		case _a.CharData:
		}
	}
	return nil
}

// Validate validates the CT_PresentationOf and its children
func (_dgaee *CT_PresentationOf) Validate() error {
	return _dgaee.ValidateWithPath("\u0043\u0054\u005f\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u004f\u0066")
}

type ST_AutoTextRotation byte

func (_dafda *ST_FlowDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_dafda = 0
	case "\u0072\u006f\u0077":
		*_dafda = 1
	case "\u0063\u006f\u006c":
		*_dafda = 2
	}
	return nil
}
func (_aaf *CT_CTCategories) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _aaf.Cat != nil {
		_ccgf := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074"}}
		for _, _cbgf := range _aaf.Cat {
			e.EncodeElement(_cbgf, _ccgf)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the RelIds and its children, prefixing error messages with path
func (_cffgc *RelIds) ValidateWithPath(path string) error {
	if _gfdaf := _cffgc.CT_RelIds.ValidateWithPath(path); _gfdaf != nil {
		return _gfdaf
	}
	return nil
}
func (_bcg *CT_ChildMax) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _bcg.ValAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _e.Sprintf("\u0025\u0076", *_bcg.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_cabba ST_HierarchyAlignment) String() string {
	switch _cabba {
	case 0:
		return ""
	case 1:
		return "\u0074\u004c"
	case 2:
		return "\u0074\u0052"
	case 3:
		return "\u0074\u0043\u0074\u0072\u0043\u0068"
	case 4:
		return "\u0074C\u0074\u0072\u0044\u0065\u0073"
	case 5:
		return "\u0062\u004c"
	case 6:
		return "\u0062\u0052"
	case 7:
		return "\u0062\u0043\u0074\u0072\u0043\u0068"
	case 8:
		return "\u0062C\u0074\u0072\u0044\u0065\u0073"
	case 9:
		return "\u006c\u0054"
	case 10:
		return "\u006c\u0042"
	case 11:
		return "\u006c\u0043\u0074\u0072\u0043\u0068"
	case 12:
		return "\u006cC\u0074\u0072\u0044\u0065\u0073"
	case 13:
		return "\u0072\u0054"
	case 14:
		return "\u0072\u0042"
	case 15:
		return "\u0072\u0043\u0074\u0072\u0043\u0068"
	case 16:
		return "\u0072C\u0074\u0072\u0044\u0065\u0073"
	}
	return ""
}
func (_fbc *CT_CTDescription) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _fbc.LangAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006c\u0061\u006e\u0067"}, Value: _e.Sprintf("\u0025\u0076", *_fbc.LangAttr)})
	}
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0076\u0061\u006c"}, Value: _e.Sprintf("\u0025\u0076", _fbc.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func ParseUnionST_FunctionArgument(s string) (ST_FunctionArgument, error) {
	return ST_FunctionArgument{}, nil
}
func NewCT_Direction() *CT_Direction { _gfae := &CT_Direction{}; return _gfae }

// Validate validates the CT_Choose and its children
func (_agae *CT_Choose) Validate() error {
	return _agae.ValidateWithPath("\u0043T\u005f\u0043\u0068\u006f\u006f\u0073e")
}
func (_dead *ST_FunctionOperator) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_dead = 0
	case "\u0065\u0071\u0075":
		*_dead = 1
	case "\u006e\u0065\u0071":
		*_dead = 2
	case "\u0067\u0074":
		*_dead = 3
	case "\u006c\u0074":
		*_dead = 4
	case "\u0067\u0074\u0065":
		*_dead = 5
	case "\u006c\u0074\u0065":
		*_dead = 6
	}
	return nil
}

type CT_Rules struct {

	// Rule
	Rule []*CT_NumericRule
}

func (_bfaab ST_Direction) String() string {
	switch _bfaab {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u0072\u006d"
	case 2:
		return "\u0072\u0065\u0076"
	}
	return ""
}
func NewAG_IteratorAttributes() *AG_IteratorAttributes {
	_ec := &AG_IteratorAttributes{}
	return _ec
}
func (_gedgd ST_PyramidAccentPosition) String() string {
	switch _gedgd {
	case 0:
		return ""
	case 1:
		return "\u0062\u0065\u0066"
	case 2:
		return "\u0061\u0066\u0074"
	}
	return ""
}
func (_ggaa *ST_FunctionValue) Validate() error { return _ggaa.ValidateWithPath("") }
func (_bbb *CT_BulletEnabled) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _adea := range start.Attr {
		if _adea.Name.Local == "\u0076\u0061\u006c" {
			_bfe, _acd := _g.ParseBool(_adea.Value)
			if _acd != nil {
				return _acd
			}
			_bbb.ValAttr = &_bfe
			continue
		}
	}
	for {
		_eeb, _eab := d.Token()
		if _eab != nil {
			return _e.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0042\u0075\u006c\u006ce\u0074E\u006e\u0061\u0062\u006c\u0065\u0064\u003a \u0025\u0073", _eab)
		}
		if _ccg, _ccf := _eeb.(_a.EndElement); _ccf && _ccg.Name == start.Name {
			break
		}
	}
	return nil
}
func (_ffgf ST_ParameterId) Validate() error { return _ffgf.ValidateWithPath("") }
func (_dade *CT_SDCategories) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _dade.Cat != nil {
		_dda := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074"}}
		for _, _gfcfe := range _dade.Cat {
			e.EncodeElement(_gfcfe, _dda)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

const (
	ST_ConnectorDimensionUnset ST_ConnectorDimension = 0
	ST_ConnectorDimension1D    ST_ConnectorDimension = 1
	ST_ConnectorDimension2D    ST_ConnectorDimension = 2
	ST_ConnectorDimensionCust  ST_ConnectorDimension = 3
)

func (_ebcg ST_CenterShapeMapping) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_dedfb := _a.Attr{}
	_dedfb.Name = name
	switch _ebcg {
	case ST_CenterShapeMappingUnset:
		_dedfb.Value = ""
	case ST_CenterShapeMappingNone:
		_dedfb.Value = "\u006e\u006f\u006e\u0065"
	case ST_CenterShapeMappingFNode:
		_dedfb.Value = "\u0066\u004e\u006fd\u0065"
	}
	return _dedfb, nil
}
func (_gbad ST_LinearDirection) Validate() error { return _gbad.ValidateWithPath("") }
func (_abfb ST_ClrAppMethod) Validate() error    { return _abfb.ValidateWithPath("") }

// Validate validates the AG_ConstraintRefAttributes and its children
func (_cc *AG_ConstraintRefAttributes) Validate() error {
	return _cc.ValidateWithPath("\u0041\u0047\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061\u0069n\u0074\u0052\u0065\u0066\u0041\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0073")
}
func (_edaab *ST_Offset) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_baac, _agcgg := d.Token()
	if _agcgg != nil {
		return _agcgg
	}
	if _eggag, _acfe := _baac.(_a.EndElement); _acfe && _eggag.Name == start.Name {
		*_edaab = 1
		return nil
	}
	if _dddec, _eafdb := _baac.(_a.CharData); !_eafdb {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _baac)
	} else {
		switch string(_dddec) {
		case "":
			*_edaab = 0
		case "\u0063\u0074\u0072":
			*_edaab = 1
		case "\u006f\u0066\u0066":
			*_edaab = 2
		}
	}
	_baac, _agcgg = d.Token()
	if _agcgg != nil {
		return _agcgg
	}
	if _bcefc, _egcg := _baac.(_a.EndElement); _egcg && _bcefc.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _baac)
}
func (_fefag ST_VariableType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_fefag.String(), start)
}

type CT_CTDescription struct {

	// Language
	LangAttr *string

	// Description Value
	ValAttr string
}

func (_dggc *ST_ArrowheadStyle) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_eaccc, _adcdg := d.Token()
	if _adcdg != nil {
		return _adcdg
	}
	if _aagedd, _bfacc := _eaccc.(_a.EndElement); _bfacc && _aagedd.Name == start.Name {
		*_dggc = 1
		return nil
	}
	if _daffe, _cfbff := _eaccc.(_a.CharData); !_cfbff {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _eaccc)
	} else {
		switch string(_daffe) {
		case "":
			*_dggc = 0
		case "\u0061\u0075\u0074\u006f":
			*_dggc = 1
		case "\u0061\u0072\u0072":
			*_dggc = 2
		case "\u006e\u006f\u0041r\u0072":
			*_dggc = 3
		}
	}
	_eaccc, _adcdg = d.Token()
	if _adcdg != nil {
		return _adcdg
	}
	if _bdcf, _bgffd := _eaccc.(_a.EndElement); _bgffd && _bdcf.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _eaccc)
}

type CT_PresentationOf struct {
	ExtLst            *_b.CT_OfficeArtExtensionList
	AxisAttr          *ST_AxisTypes
	PtTypeAttr        *ST_ElementTypes
	HideLastTransAttr *ST_Booleans
	StAttr            *ST_Ints
	CntAttr           *ST_UnsignedInts
	StepAttr          *ST_Ints
}

func (_bffbf ST_OutputShapeType) ValidateWithPath(path string) error {
	switch _bffbf {
	case 0, 1, 2:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bffbf))
	}
	return nil
}
func NewDataModel() *DataModel {
	_egge := &DataModel{}
	_egge.CT_DataModel = *NewCT_DataModel()
	return _egge
}
func (_bfdfb *ST_ConnectorPoint) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_bfdfb = 0
	case "\u0061\u0075\u0074\u006f":
		*_bfdfb = 1
	case "\u0062\u0043\u0074\u0072":
		*_bfdfb = 2
	case "\u0063\u0074\u0072":
		*_bfdfb = 3
	case "\u006d\u0069\u0064\u004c":
		*_bfdfb = 4
	case "\u006d\u0069\u0064\u0052":
		*_bfdfb = 5
	case "\u0074\u0043\u0074\u0072":
		*_bfdfb = 6
	case "\u0062\u004c":
		*_bfdfb = 7
	case "\u0062\u0052":
		*_bfdfb = 8
	case "\u0074\u004c":
		*_bfdfb = 9
	case "\u0074\u0052":
		*_bfdfb = 10
	case "\u0072\u0061\u0064\u0069\u0061\u006c":
		*_bfdfb = 11
	}
	return nil
}
func (_daaf ST_RotationPath) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_gbfe := _a.Attr{}
	_gbfe.Name = name
	switch _daaf {
	case ST_RotationPathUnset:
		_gbfe.Value = ""
	case ST_RotationPathNone:
		_gbfe.Value = "\u006e\u006f\u006e\u0065"
	case ST_RotationPathAlongPath:
		_gbfe.Value = "\u0061l\u006f\u006e\u0067\u0050\u0061\u0074h"
	}
	return _gbfe, nil
}
func (_edffa ST_CenterShapeMapping) String() string {
	switch _edffa {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0066\u004e\u006fd\u0065"
	}
	return ""
}

const (
	ST_DirectionUnset ST_Direction = 0
	ST_DirectionNorm  ST_Direction = 1
	ST_DirectionRev   ST_Direction = 2
)

func NewCT_Constraint() *CT_Constraint {
	_gfda := &CT_Constraint{}
	_gfda.TypeAttr = ST_ConstraintType(1)
	return _gfda
}

type ST_ConstraintRelationship byte

// Validate validates the StyleDefHdrLst and its children
func (_bgggbf *StyleDefHdrLst) Validate() error {
	return _bgggbf.ValidateWithPath("\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048d\u0072\u004c\u0073\u0074")
}
func (_fbdc ST_LinearDirection) ValidateWithPath(path string) error {
	switch _fbdc {
	case 0, 1, 2, 3, 4:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fbdc))
	}
	return nil
}
func (_agea *CT_Otherwise) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _ffbg := range start.Attr {
		if _ffbg.Name.Local == "\u006e\u0061\u006d\u0065" {
			_adefg := _ffbg.Value
			_agea.NameAttr = &_adefg
			continue
		}
	}
_ffgg:
	for {
		_cgfg, _cbda := d.Token()
		if _cbda != nil {
			return _cbda
		}
		switch _ggdbgb := _cgfg.(type) {
		case _a.StartElement:
			switch _ggdbgb.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u006c\u0067"}:
				_dgae := NewCT_OtherwiseChoice()
				if _ecgef := d.DecodeElement(&_dgae.Alg, &_ggdbgb); _ecgef != nil {
					return _ecgef
				}
				_agea.OtherwiseChoice = append(_agea.OtherwiseChoice, _dgae)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0068\u0061p\u0065"}:
				_eaee := NewCT_OtherwiseChoice()
				if _bfeed := d.DecodeElement(&_eaee.Shape, &_ggdbgb); _bfeed != nil {
					return _bfeed
				}
				_agea.OtherwiseChoice = append(_agea.OtherwiseChoice, _eaee)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}:
				_efaa := NewCT_OtherwiseChoice()
				if _cgga := d.DecodeElement(&_efaa.PresOf, &_ggdbgb); _cgga != nil {
					return _cgga
				}
				_agea.OtherwiseChoice = append(_agea.OtherwiseChoice, _efaa)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}:
				_ccbe := NewCT_OtherwiseChoice()
				if _faaaa := d.DecodeElement(&_ccbe.ConstrLst, &_ggdbgb); _faaaa != nil {
					return _faaaa
				}
				_agea.OtherwiseChoice = append(_agea.OtherwiseChoice, _ccbe)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}:
				_caba := NewCT_OtherwiseChoice()
				if _fada := d.DecodeElement(&_caba.RuleLst, &_ggdbgb); _fada != nil {
					return _fada
				}
				_agea.OtherwiseChoice = append(_agea.OtherwiseChoice, _caba)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}:
				_edbb := NewCT_OtherwiseChoice()
				if _egab := d.DecodeElement(&_edbb.ForEach, &_ggdbgb); _egab != nil {
					return _egab
				}
				_agea.OtherwiseChoice = append(_agea.OtherwiseChoice, _edbb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				_aebf := NewCT_OtherwiseChoice()
				if _fbaf := d.DecodeElement(&_aebf.LayoutNode, &_ggdbgb); _fbaf != nil {
					return _fbaf
				}
				_agea.OtherwiseChoice = append(_agea.OtherwiseChoice, _aebf)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}:
				_fdae := NewCT_OtherwiseChoice()
				if _aedgbb := d.DecodeElement(&_fdae.Choose, &_ggdbgb); _aedgbb != nil {
					return _aedgbb
				}
				_agea.OtherwiseChoice = append(_agea.OtherwiseChoice, _fdae)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bdef := NewCT_OtherwiseChoice()
				if _eeef := d.DecodeElement(&_bdef.ExtLst, &_ggdbgb); _eeef != nil {
					return _eeef
				}
				_agea.OtherwiseChoice = append(_agea.OtherwiseChoice, _bdef)
			default:
				_ag.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_O\u0074\u0068e\u0072\u0077\u0069\u0073\u0065\u0020\u0025\u0076", _ggdbgb.Name)
				if _cbfe := d.Skip(); _cbfe != nil {
					return _cbfe
				}
			}
		case _a.EndElement:
			break _ffgg
		case _a.CharData:
		}
	}
	return nil
}

type CT_Constraint struct {

	// Operator
	OpAttr ST_BoolOperator

	// Value
	ValAttr *float64

	// Factor
	FactAttr       *float64
	ExtLst         *_b.CT_OfficeArtExtensionList
	TypeAttr       ST_ConstraintType
	ForAttr        ST_ConstraintRelationship
	ForNameAttr    *string
	PtTypeAttr     ST_ElementType
	RefTypeAttr    ST_ConstraintType
	RefForAttr     ST_ConstraintRelationship
	RefForNameAttr *string
	RefPtTypeAttr  ST_ElementType
}
type CT_Adj struct {

	// Adjust Handle Index
	IdxAttr uint32

	// Value
	ValAttr float64
}
type CT_CTCategories struct {

	// Color Transform Category
	Cat []*CT_CTCategory
}
type CT_SDName struct {

	// Natural Language
	LangAttr *string

	// Description Value
	ValAttr string
}

func (_gcd *CT_CTStyleLabel) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _cdce := range start.Attr {
		if _cdce.Name.Local == "\u006e\u0061\u006d\u0065" {
			_afb := _cdce.Value
			_gcd.NameAttr = _afb
			continue
		}
	}
_fcae:
	for {
		_bgag, _dgc := d.Token()
		if _dgc != nil {
			return _dgc
		}
		switch _ebbf := _bgag.(type) {
		case _a.StartElement:
			switch _ebbf.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066\u0069\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"}:
				_gcd.FillClrLst = NewCT_Colors()
				if _eca := d.DecodeElement(_gcd.FillClrLst, &_ebbf); _eca != nil {
					return _eca
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006ci\u006e\u0043\u006c\u0072\u004c\u0073t"}:
				_gcd.LinClrLst = NewCT_Colors()
				if _bgf := d.DecodeElement(_gcd.LinClrLst, &_ebbf); _bgf != nil {
					return _bgf
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0066\u0066e\u0063\u0074\u0043\u006c\u0072\u004c\u0073\u0074"}:
				_gcd.EffectClrLst = NewCT_Colors()
				if _acda := d.DecodeElement(_gcd.EffectClrLst, &_ebbf); _acda != nil {
					return _acda
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "t\u0078\u004c\u0069\u006e\u0043\u006c\u0072\u004c\u0073\u0074"}:
				_gcd.TxLinClrLst = NewCT_Colors()
				if _fga := d.DecodeElement(_gcd.TxLinClrLst, &_ebbf); _fga != nil {
					return _fga
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0078\u0046i\u006c\u006c\u0043\u006c\u0072\u004c\u0073\u0074"}:
				_gcd.TxFillClrLst = NewCT_Colors()
				if _aeb := d.DecodeElement(_gcd.TxFillClrLst, &_ebbf); _aeb != nil {
					return _aeb
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0078\u0045\u0066\u0066\u0065\u0063\u0074\u0043l\u0072\u004c\u0073\u0074"}:
				_gcd.TxEffectClrLst = NewCT_Colors()
				if _bee := d.DecodeElement(_gcd.TxEffectClrLst, &_ebbf); _bee != nil {
					return _bee
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gcd.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _acf := d.DecodeElement(_gcd.ExtLst, &_ebbf); _acf != nil {
					return _acf
				}
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0054\u0053t\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c\u0020\u0025\u0076", _ebbf.Name)
				if _afd := d.Skip(); _afd != nil {
					return _afd
				}
			}
		case _a.EndElement:
			break _fcae
		case _a.CharData:
		}
	}
	return nil
}

const (
	ST_AutoTextRotationUnset ST_AutoTextRotation = 0
	ST_AutoTextRotationNone  ST_AutoTextRotation = 1
	ST_AutoTextRotationUpr   ST_AutoTextRotation = 2
	ST_AutoTextRotationGrav  ST_AutoTextRotation = 3
)

func (_fcba ST_PyramidAccentPosition) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_fcba.String(), start)
}

type CT_ChildMax struct {

	// Maximum Children Value
	ValAttr *int32
}

func (_agcfa ST_TextDirection) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_ffea := _a.Attr{}
	_ffea.Name = name
	switch _agcfa {
	case ST_TextDirectionUnset:
		_ffea.Value = ""
	case ST_TextDirectionFromT:
		_ffea.Value = "\u0066\u0072\u006fm\u0054"
	case ST_TextDirectionFromB:
		_ffea.Value = "\u0066\u0072\u006fm\u0042"
	}
	return _ffea, nil
}

// ST_ModelId is a union type
type ST_ModelId struct {
	Int32   *int32
	ST_Guid *string
}

func (_agbc *CT_ChildMax) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _gdg := range start.Attr {
		if _gdg.Name.Local == "\u0076\u0061\u006c" {
			_bbgf, _dga := _g.ParseInt(_gdg.Value, 10, 32)
			if _dga != nil {
				return _dga
			}
			_dedf := int32(_bbgf)
			_agbc.ValAttr = &_dedf
			continue
		}
	}
	for {
		_adcg, _gfb := d.Token()
		if _gfb != nil {
			return _e.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0043\u0068\u0069\u006c\u0064\u004d\u0061\u0078\u003a\u0020\u0025\u0073", _gfb)
		}
		if _bbf, _bbab := _adcg.(_a.EndElement); _bbab && _bbf.Name == start.Name {
			break
		}
	}
	return nil
}
func (_agfad ST_ArrowheadStyle) ValidateWithPath(path string) error {
	switch _agfad {
	case 0, 1, 2, 3:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_agfad))
	}
	return nil
}

// Validate validates the CT_Rules and its children
func (_ecdd *CT_Rules) Validate() error {
	return _ecdd.ValidateWithPath("\u0043\u0054\u005f\u0052\u0075\u006c\u0065\u0073")
}
func (_aggce ST_FunctionType) ValidateWithPath(path string) error {
	switch _aggce {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_aggce))
	}
	return nil
}
func (_cccb ST_AnimOneStr) String() string {
	switch _cccb {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u006f\u006e\u0065"
	case 3:
		return "\u0062\u0072\u0061\u006e\u0063\u0068"
	}
	return ""
}

type ColorsDefHdrLst struct{ CT_ColorTransformHeaderLst }

func (_ggeb *CT_ForEachChoice) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _ggeb.Alg != nil {
		_dbd := _a.StartElement{Name: _a.Name{Local: "\u0061\u006c\u0067"}}
		e.EncodeElement(_ggeb.Alg, _dbd)
	} else if _ggeb.Shape != nil {
		_feeg := _a.StartElement{Name: _a.Name{Local: "\u0073\u0068\u0061p\u0065"}}
		e.EncodeElement(_ggeb.Shape, _feeg)
	} else if _ggeb.PresOf != nil {
		_aceb := _a.StartElement{Name: _a.Name{Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}}
		e.EncodeElement(_ggeb.PresOf, _aceb)
	} else if _ggeb.ConstrLst != nil {
		_bcad := _a.StartElement{Name: _a.Name{Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}}
		e.EncodeElement(_ggeb.ConstrLst, _bcad)
	} else if _ggeb.RuleLst != nil {
		_bdb := _a.StartElement{Name: _a.Name{Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}}
		e.EncodeElement(_ggeb.RuleLst, _bdb)
	} else if _ggeb.ForEach != nil {
		_baeeb := _a.StartElement{Name: _a.Name{Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}}
		e.EncodeElement(_ggeb.ForEach, _baeeb)
	} else if _ggeb.LayoutNode != nil {
		_ebec := _a.StartElement{Name: _a.Name{Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}}
		e.EncodeElement(_ggeb.LayoutNode, _ebec)
	} else if _ggeb.Choose != nil {
		_ffeg := _a.StartElement{Name: _a.Name{Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}}
		e.EncodeElement(_ggeb.Choose, _ffeg)
	} else if _ggeb.ExtLst != nil {
		_afegc := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ggeb.ExtLst, _afegc)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type CT_SDCategories struct {

	// Category
	Cat []*CT_SDCategory
}

func (_gdeee *ST_PrSetCustVal) ValidateWithPath(path string) error {
	_abeb := []string{}
	if _gdeee.ST_Percentage != nil {
		_abeb = append(_abeb, "\u0053\u0054\u005f\u0050\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065")
	}
	if _gdeee.Int32 != nil {
		_abeb = append(_abeb, "\u0049\u006e\u00743\u0032")
	}
	if len(_abeb) > 1 {
		return _e.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _abeb)
	}
	return nil
}

// ValidateWithPath validates the CT_Shape and its children, prefixing error messages with path
func (_ecgf *CT_Shape) ValidateWithPath(path string) error {
	if _ecgf.TypeAttr != nil {
		if _cgcd := _ecgf.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _cgcd != nil {
			return _cgcd
		}
	}
	if _ecgf.AdjLst != nil {
		if _beea := _ecgf.AdjLst.ValidateWithPath(path + "\u002fA\u0064\u006a\u004c\u0073\u0074"); _beea != nil {
			return _beea
		}
	}
	if _ecgf.ExtLst != nil {
		if _cbbf := _ecgf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cbbf != nil {
			return _cbbf
		}
	}
	return nil
}
func (_dbecf ST_VariableType) ValidateWithPath(path string) error {
	switch _dbecf {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dbecf))
	}
	return nil
}

// Validate validates the CT_TextProps and its children
func (_ffge *CT_TextProps) Validate() error {
	return _ffge.ValidateWithPath("\u0043\u0054\u005fT\u0065\u0078\u0074\u0050\u0072\u006f\u0070\u0073")
}
func (_adgf *CT_DataModel) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_adgf.PtLst = NewCT_PtList()
_aebg:
	for {
		_fgf, _afda := d.Token()
		if _afda != nil {
			return _afda
		}
		switch _gfaa := _fgf.(type) {
		case _a.StartElement:
			switch _gfaa.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0074\u004cs\u0074"}:
				if _bgff := d.DecodeElement(_adgf.PtLst, &_gfaa); _bgff != nil {
					return _bgff
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0078\u006e\u004c\u0073\u0074"}:
				_adgf.CxnLst = NewCT_CxnList()
				if _ecge := d.DecodeElement(_adgf.CxnLst, &_gfaa); _ecge != nil {
					return _ecge
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0062\u0067"}:
				_adgf.Bg = _b.NewCT_BackgroundFormatting()
				if _gaab := d.DecodeElement(_adgf.Bg, &_gfaa); _gaab != nil {
					return _gaab
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0077\u0068\u006fl\u0065"}:
				_adgf.Whole = _b.NewCT_WholeE2oFormatting()
				if _gdf := d.DecodeElement(_adgf.Whole, &_gfaa); _gdf != nil {
					return _gdf
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_adgf.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _ggac := d.DecodeElement(_adgf.ExtLst, &_gfaa); _ggac != nil {
					return _ggac
				}
			default:
				_ag.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_D\u0061\u0074a\u004d\u006f\u0064\u0065\u006c\u0020\u0025\u0076", _gfaa.Name)
				if _ecag := d.Skip(); _ecag != nil {
					return _ecag
				}
			}
		case _a.EndElement:
			break _aebg
		case _a.CharData:
		}
	}
	return nil
}
func (_gcdb *RelIds) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0072\u0065\u006c\u0049\u0064\u0073"
	return _gcdb.CT_RelIds.MarshalXML(e, start)
}
func (_fab *CT_Category) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0074\u0079\u0070\u0065"}, Value: _e.Sprintf("\u0025\u0076", _fab.TypeAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0069"}, Value: _e.Sprintf("\u0025\u0076", _fab.PriAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_cdff *CT_Pt) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006do\u0064\u0065\u006c\u0049\u0064"}, Value: _e.Sprintf("\u0025\u0076", _cdff.ModelIdAttr)})
	if _cdff.TypeAttr != ST_PtTypeUnset {
		_gdee, _gagcf := _cdff.TypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0074\u0079\u0070\u0065"})
		if _gagcf != nil {
			return _gagcf
		}
		start.Attr = append(start.Attr, _gdee)
	}
	if _cdff.CxnIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u0078\u006eI\u0064"}, Value: _e.Sprintf("\u0025\u0076", *_cdff.CxnIdAttr)})
	}
	e.EncodeToken(start)
	if _cdff.PrSet != nil {
		_fffg := _a.StartElement{Name: _a.Name{Local: "\u0070\u0072\u0053e\u0074"}}
		e.EncodeElement(_cdff.PrSet, _fffg)
	}
	if _cdff.SpPr != nil {
		_fdce := _a.StartElement{Name: _a.Name{Local: "\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_cdff.SpPr, _fdce)
	}
	if _cdff.T != nil {
		_agabc := _a.StartElement{Name: _a.Name{Local: "\u0074"}}
		e.EncodeElement(_cdff.T, _agabc)
	}
	if _cdff.ExtLst != nil {
		_ffbgg := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cdff.ExtLst, _ffbgg)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_cfdg *CT_Constraint) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cfdg.TypeAttr = ST_ConstraintType(1)
	for _, _cdgg := range start.Attr {
		if _cdgg.Name.Local == "\u006f\u0070" {
			_cfdg.OpAttr.UnmarshalXMLAttr(_cdgg)
			continue
		}
		if _cdgg.Name.Local == "\u0076\u0061\u006c" {
			_bbbe, _edfcg := _g.ParseFloat(_cdgg.Value, 64)
			if _edfcg != nil {
				return _edfcg
			}
			_cfdg.ValAttr = &_bbbe
			continue
		}
		if _cdgg.Name.Local == "\u0066\u0061\u0063\u0074" {
			_dgca, _bfde := _g.ParseFloat(_cdgg.Value, 64)
			if _bfde != nil {
				return _bfde
			}
			_cfdg.FactAttr = &_dgca
			continue
		}
		if _cdgg.Name.Local == "\u0074\u0079\u0070\u0065" {
			_cfdg.TypeAttr.UnmarshalXMLAttr(_cdgg)
			continue
		}
		if _cdgg.Name.Local == "\u0066\u006f\u0072" {
			_cfdg.ForAttr.UnmarshalXMLAttr(_cdgg)
			continue
		}
		if _cdgg.Name.Local == "\u0066o\u0072\u004e\u0061\u006d\u0065" {
			_aac := _cdgg.Value
			_cfdg.ForNameAttr = &_aac
			continue
		}
		if _cdgg.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_cfdg.PtTypeAttr.UnmarshalXMLAttr(_cdgg)
			continue
		}
		if _cdgg.Name.Local == "\u0072e\u0066\u0054\u0079\u0070\u0065" {
			_cfdg.RefTypeAttr.UnmarshalXMLAttr(_cdgg)
			continue
		}
		if _cdgg.Name.Local == "\u0072\u0065\u0066\u0046\u006f\u0072" {
			_cfdg.RefForAttr.UnmarshalXMLAttr(_cdgg)
			continue
		}
		if _cdgg.Name.Local == "\u0072\u0065\u0066\u0046\u006f\u0072\u004e\u0061\u006d\u0065" {
			_eaf := _cdgg.Value
			_cfdg.RefForNameAttr = &_eaf
			continue
		}
		if _cdgg.Name.Local == "\u0072e\u0066\u0050\u0074\u0054\u0079\u0070e" {
			_cfdg.RefPtTypeAttr.UnmarshalXMLAttr(_cdgg)
			continue
		}
	}
_fadg:
	for {
		_bceb, _egfa := d.Token()
		if _egfa != nil {
			return _egfa
		}
		switch _efc := _bceb.(type) {
		case _a.StartElement:
			switch _efc.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cfdg.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _gbb := d.DecodeElement(_cfdg.ExtLst, &_efc); _gbb != nil {
					return _gbb
				}
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043o\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074 \u0025\u0076", _efc.Name)
				if _aaag := d.Skip(); _aaag != nil {
					return _aaag
				}
			}
		case _a.EndElement:
			break _fadg
		case _a.CharData:
		}
	}
	return nil
}
func NewCT_ColorTransformHeader() *CT_ColorTransformHeader {
	_bege := &CT_ColorTransformHeader{}
	return _bege
}
func (_abbe ST_VerticalAlignment) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_abbe.String(), start)
}
func NewAG_ConstraintRefAttributes() *AG_ConstraintRefAttributes {
	_ee := &AG_ConstraintRefAttributes{}
	return _ee
}
func (_eegfd ST_CxnType) ValidateWithPath(path string) error {
	switch _eegfd {
	case 0, 1, 2, 3, 4:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_eegfd))
	}
	return nil
}

// Validate validates the CT_AnimLvl and its children
func (_geg *CT_AnimLvl) Validate() error {
	return _geg.ValidateWithPath("\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004c\u0076\u006c")
}

type ST_ChildOrderType byte

// Validate validates the CT_Cxn and its children
func (_cgab *CT_Cxn) Validate() error {
	return _cgab.ValidateWithPath("\u0043\u0054\u005f\u0043\u0078\u006e")
}
func (_acdg *ST_FlowDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_efdc, _caef := d.Token()
	if _caef != nil {
		return _caef
	}
	if _afdee, _bgbbc := _efdc.(_a.EndElement); _bgbbc && _afdee.Name == start.Name {
		*_acdg = 1
		return nil
	}
	if _fgde, _gcbe := _efdc.(_a.CharData); !_gcbe {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _efdc)
	} else {
		switch string(_fgde) {
		case "":
			*_acdg = 0
		case "\u0072\u006f\u0077":
			*_acdg = 1
		case "\u0063\u006f\u006c":
			*_acdg = 2
		}
	}
	_efdc, _caef = d.Token()
	if _caef != nil {
		return _caef
	}
	if _abba, _bfcf := _efdc.(_a.EndElement); _bfcf && _abba.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _efdc)
}

// ValidateWithPath validates the CT_ColorTransform and its children, prefixing error messages with path
func (_fcb *CT_ColorTransform) ValidateWithPath(path string) error {
	for _aae, _fabg := range _fcb.Title {
		if _cbedc := _fabg.ValidateWithPath(_e.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _aae)); _cbedc != nil {
			return _cbedc
		}
	}
	for _caeb, _dfb := range _fcb.Desc {
		if _fabd := _dfb.ValidateWithPath(_e.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _caeb)); _fabd != nil {
			return _fabd
		}
	}
	if _fcb.CatLst != nil {
		if _cca := _fcb.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _cca != nil {
			return _cca
		}
	}
	for _bdf, _cdef := range _fcb.StyleLbl {
		if _gdc := _cdef.ValidateWithPath(_e.Sprintf("\u0025s\u002fS\u0074\u0079\u006c\u0065\u004c\u0062\u006c\u005b\u0025\u0064\u005d", path, _bdf)); _gdc != nil {
			return _gdc
		}
	}
	if _fcb.ExtLst != nil {
		if _fae := _fcb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fae != nil {
			return _fae
		}
	}
	return nil
}
func (_fbfab *ST_AxisType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_eadb, _aaged := d.Token()
	if _aaged != nil {
		return _aaged
	}
	if _fdacf, _cddbg := _eadb.(_a.EndElement); _cddbg && _fdacf.Name == start.Name {
		*_fbfab = 1
		return nil
	}
	if _cebf, _cacea := _eadb.(_a.CharData); !_cacea {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _eadb)
	} else {
		switch string(_cebf) {
		case "":
			*_fbfab = 0
		case "\u0073\u0065\u006c\u0066":
			*_fbfab = 1
		case "\u0063\u0068":
			*_fbfab = 2
		case "\u0064\u0065\u0073":
			*_fbfab = 3
		case "\u0064e\u0073\u004f\u0072\u0053\u0065\u006cf":
			*_fbfab = 4
		case "\u0070\u0061\u0072":
			*_fbfab = 5
		case "\u0061\u006e\u0063s\u0074":
			*_fbfab = 6
		case "a\u006e\u0063\u0073\u0074\u004f\u0072\u0053\u0065\u006c\u0066":
			*_fbfab = 7
		case "\u0066o\u006c\u006c\u006f\u0077\u0053\u0069b":
			*_fbfab = 8
		case "\u0070r\u0065\u0063\u0065\u0064\u0053\u0069b":
			*_fbfab = 9
		case "\u0066\u006f\u006c\u006c\u006f\u0077":
			*_fbfab = 10
		case "\u0070\u0072\u0065\u0063\u0065\u0064":
			*_fbfab = 11
		case "\u0072\u006f\u006f\u0074":
			*_fbfab = 12
		case "\u006e\u006f\u006e\u0065":
			*_fbfab = 13
		}
	}
	_eadb, _aaged = d.Token()
	if _aaged != nil {
		return _aaged
	}
	if _dagee, _aeaa := _eadb.(_a.EndElement); _aeaa && _dagee.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _eadb)
}

// ValidateWithPath validates the CT_CxnList and its children, prefixing error messages with path
func (_adbf *CT_CxnList) ValidateWithPath(path string) error {
	for _geb, _faa := range _adbf.Cxn {
		if _gcfa := _faa.ValidateWithPath(_e.Sprintf("\u0025\u0073\u002f\u0043\u0078\u006e\u005b\u0025\u0064\u005d", path, _geb)); _gcfa != nil {
			return _gcfa
		}
	}
	return nil
}
func (_deef *ST_OutputShapeType) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_ceefg, _dcdfa := d.Token()
	if _dcdfa != nil {
		return _dcdfa
	}
	if _debcb, _dfeca := _ceefg.(_a.EndElement); _dfeca && _debcb.Name == start.Name {
		*_deef = 1
		return nil
	}
	if _cbbg, _bbad := _ceefg.(_a.CharData); !_bbad {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ceefg)
	} else {
		switch string(_cbbg) {
		case "":
			*_deef = 0
		case "\u006e\u006f\u006e\u0065":
			*_deef = 1
		case "\u0063\u006f\u006e\u006e":
			*_deef = 2
		}
	}
	_ceefg, _dcdfa = d.Token()
	if _dcdfa != nil {
		return _dcdfa
	}
	if _fedf, _fabec := _ceefg.(_a.EndElement); _fabec && _fedf.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ceefg)
}
func (_dgfab ST_ConnectorPoint) String() string {
	switch _dgfab {
	case 0:
		return ""
	case 1:
		return "\u0061\u0075\u0074\u006f"
	case 2:
		return "\u0062\u0043\u0074\u0072"
	case 3:
		return "\u0063\u0074\u0072"
	case 4:
		return "\u006d\u0069\u0064\u004c"
	case 5:
		return "\u006d\u0069\u0064\u0052"
	case 6:
		return "\u0074\u0043\u0074\u0072"
	case 7:
		return "\u0062\u004c"
	case 8:
		return "\u0062\u0052"
	case 9:
		return "\u0074\u004c"
	case 10:
		return "\u0074\u0052"
	case 11:
		return "\u0072\u0061\u0064\u0069\u0061\u006c"
	}
	return ""
}

const (
	ST_ParameterIdUnset            ST_ParameterId = 0
	ST_ParameterIdHorzAlign        ST_ParameterId = 1
	ST_ParameterIdVertAlign        ST_ParameterId = 2
	ST_ParameterIdChDir            ST_ParameterId = 3
	ST_ParameterIdChAlign          ST_ParameterId = 4
	ST_ParameterIdSecChAlign       ST_ParameterId = 5
	ST_ParameterIdLinDir           ST_ParameterId = 6
	ST_ParameterIdSecLinDir        ST_ParameterId = 7
	ST_ParameterIdStElem           ST_ParameterId = 8
	ST_ParameterIdBendPt           ST_ParameterId = 9
	ST_ParameterIdConnRout         ST_ParameterId = 10
	ST_ParameterIdBegSty           ST_ParameterId = 11
	ST_ParameterIdEndSty           ST_ParameterId = 12
	ST_ParameterIdDim              ST_ParameterId = 13
	ST_ParameterIdRotPath          ST_ParameterId = 14
	ST_ParameterIdCtrShpMap        ST_ParameterId = 15
	ST_ParameterIdNodeHorzAlign    ST_ParameterId = 16
	ST_ParameterIdNodeVertAlign    ST_ParameterId = 17
	ST_ParameterIdFallback         ST_ParameterId = 18
	ST_ParameterIdTxDir            ST_ParameterId = 19
	ST_ParameterIdPyraAcctPos      ST_ParameterId = 20
	ST_ParameterIdPyraAcctTxMar    ST_ParameterId = 21
	ST_ParameterIdTxBlDir          ST_ParameterId = 22
	ST_ParameterIdTxAnchorHorz     ST_ParameterId = 23
	ST_ParameterIdTxAnchorVert     ST_ParameterId = 24
	ST_ParameterIdTxAnchorHorzCh   ST_ParameterId = 25
	ST_ParameterIdTxAnchorVertCh   ST_ParameterId = 26
	ST_ParameterIdParTxLTRAlign    ST_ParameterId = 27
	ST_ParameterIdParTxRTLAlign    ST_ParameterId = 28
	ST_ParameterIdShpTxLTRAlignCh  ST_ParameterId = 29
	ST_ParameterIdShpTxRTLAlignCh  ST_ParameterId = 30
	ST_ParameterIdAutoTxRot        ST_ParameterId = 31
	ST_ParameterIdGrDir            ST_ParameterId = 32
	ST_ParameterIdFlowDir          ST_ParameterId = 33
	ST_ParameterIdContDir          ST_ParameterId = 34
	ST_ParameterIdBkpt             ST_ParameterId = 35
	ST_ParameterIdOff              ST_ParameterId = 36
	ST_ParameterIdHierAlign        ST_ParameterId = 37
	ST_ParameterIdBkPtFixedVal     ST_ParameterId = 38
	ST_ParameterIdStBulletLvl      ST_ParameterId = 39
	ST_ParameterIdStAng            ST_ParameterId = 40
	ST_ParameterIdSpanAng          ST_ParameterId = 41
	ST_ParameterIdAr               ST_ParameterId = 42
	ST_ParameterIdLnSpPar          ST_ParameterId = 43
	ST_ParameterIdLnSpAfParP       ST_ParameterId = 44
	ST_ParameterIdLnSpCh           ST_ParameterId = 45
	ST_ParameterIdLnSpAfChP        ST_ParameterId = 46
	ST_ParameterIdRtShortDist      ST_ParameterId = 47
	ST_ParameterIdAlignTx          ST_ParameterId = 48
	ST_ParameterIdPyraLvlNode      ST_ParameterId = 49
	ST_ParameterIdPyraAcctBkgdNode ST_ParameterId = 50
	ST_ParameterIdPyraAcctTxNode   ST_ParameterId = 51
	ST_ParameterIdSrcNode          ST_ParameterId = 52
	ST_ParameterIdDstNode          ST_ParameterId = 53
	ST_ParameterIdBegPts           ST_ParameterId = 54
	ST_ParameterIdEndPts           ST_ParameterId = 55
)

func NewCT_ColorTransform() *CT_ColorTransform { _ebac := &CT_ColorTransform{}; return _ebac }

// ValidateWithPath validates the CT_OrgChart and its children, prefixing error messages with path
func (_ceafc *CT_OrgChart) ValidateWithPath(path string) error { return nil }
func (_dcgb *ST_ModelId) Validate() error                      { return _dcgb.ValidateWithPath("") }
func (_bca *CT_ForEach) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _cgec := range start.Attr {
		if _cgec.Name.Local == "\u006e\u0061\u006d\u0065" {
			_dagf := _cgec.Value
			_bca.NameAttr = &_dagf
			continue
		}
		if _cgec.Name.Local == "\u0072\u0065\u0066" {
			_fdff := _cgec.Value
			_bca.RefAttr = &_fdff
			continue
		}
		if _cgec.Name.Local == "\u0061\u0078\u0069\u0073" {
			_adaa, _defe := ParseSliceST_AxisTypes(_cgec.Value)
			if _defe != nil {
				return _defe
			}
			_bca.AxisAttr = &_adaa
			continue
		}
		if _cgec.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_aaeb, _ggab := ParseSliceST_ElementTypes(_cgec.Value)
			if _ggab != nil {
				return _ggab
			}
			_bca.PtTypeAttr = &_aaeb
			continue
		}
		if _cgec.Name.Local == "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073" {
			_aca, _gegc := ParseSliceST_Booleans(_cgec.Value)
			if _gegc != nil {
				return _gegc
			}
			_bca.HideLastTransAttr = &_aca
			continue
		}
		if _cgec.Name.Local == "\u0073\u0074" {
			_cfad, _efee := ParseSliceST_Ints(_cgec.Value)
			if _efee != nil {
				return _efee
			}
			_bca.StAttr = &_cfad
			continue
		}
		if _cgec.Name.Local == "\u0063\u006e\u0074" {
			_gebd, _decc := ParseSliceST_UnsignedInts(_cgec.Value)
			if _decc != nil {
				return _decc
			}
			_bca.CntAttr = &_gebd
			continue
		}
		if _cgec.Name.Local == "\u0073\u0074\u0065\u0070" {
			_gbedg, _fddec := ParseSliceST_Ints(_cgec.Value)
			if _fddec != nil {
				return _fddec
			}
			_bca.StepAttr = &_gbedg
			continue
		}
	}
_bagbg:
	for {
		_fcee, _gda := d.Token()
		if _gda != nil {
			return _gda
		}
		switch _ddgd := _fcee.(type) {
		case _a.StartElement:
			switch _ddgd.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u006c\u0067"}:
				_fdcda := NewCT_ForEachChoice()
				if _dddc := d.DecodeElement(&_fdcda.Alg, &_ddgd); _dddc != nil {
					return _dddc
				}
				_bca.ForEachChoice = append(_bca.ForEachChoice, _fdcda)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0068\u0061p\u0065"}:
				_dbca := NewCT_ForEachChoice()
				if _fcc := d.DecodeElement(&_dbca.Shape, &_ddgd); _fcc != nil {
					return _fcc
				}
				_bca.ForEachChoice = append(_bca.ForEachChoice, _dbca)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}:
				_aedgb := NewCT_ForEachChoice()
				if _decd := d.DecodeElement(&_aedgb.PresOf, &_ddgd); _decd != nil {
					return _decd
				}
				_bca.ForEachChoice = append(_bca.ForEachChoice, _aedgb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}:
				_gcdda := NewCT_ForEachChoice()
				if _fbbb := d.DecodeElement(&_gcdda.ConstrLst, &_ddgd); _fbbb != nil {
					return _fbbb
				}
				_bca.ForEachChoice = append(_bca.ForEachChoice, _gcdda)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}:
				_dcdca := NewCT_ForEachChoice()
				if _cfab := d.DecodeElement(&_dcdca.RuleLst, &_ddgd); _cfab != nil {
					return _cfab
				}
				_bca.ForEachChoice = append(_bca.ForEachChoice, _dcdca)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}:
				_feaea := NewCT_ForEachChoice()
				if _gedg := d.DecodeElement(&_feaea.ForEach, &_ddgd); _gedg != nil {
					return _gedg
				}
				_bca.ForEachChoice = append(_bca.ForEachChoice, _feaea)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				_fdgaf := NewCT_ForEachChoice()
				if _dbcd := d.DecodeElement(&_fdgaf.LayoutNode, &_ddgd); _dbcd != nil {
					return _dbcd
				}
				_bca.ForEachChoice = append(_bca.ForEachChoice, _fdgaf)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}:
				_gcb := NewCT_ForEachChoice()
				if _dfea := d.DecodeElement(&_gcb.Choose, &_ddgd); _dfea != nil {
					return _dfea
				}
				_bca.ForEachChoice = append(_bca.ForEachChoice, _gcb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_beaf := NewCT_ForEachChoice()
				if _gaeb := d.DecodeElement(&_beaf.ExtLst, &_ddgd); _gaeb != nil {
					return _gaeb
				}
				_bca.ForEachChoice = append(_bca.ForEachChoice, _beaf)
			default:
				_ag.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fF\u006f\u0072\u0045\u0061\u0063\u0068\u0020\u0025\u0076", _ddgd.Name)
				if _eeecd := d.Skip(); _eeecd != nil {
					return _eeecd
				}
			}
		case _a.EndElement:
			break _bagbg
		case _a.CharData:
		}
	}
	return nil
}

// Validate validates the CT_Constraint and its children
func (_cgaf *CT_Constraint) Validate() error {
	return _cgaf.ValidateWithPath("\u0043\u0054\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074")
}

type ST_RotationPath byte

// Validate validates the LayoutDefHdrLst and its children
func (_ecdca *LayoutDefHdrLst) Validate() error {
	return _ecdca.ValidateWithPath("\u004ca\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074")
}
func NewCT_Name() *CT_Name { _dfaf := &CT_Name{}; return _dfaf }

type ST_SecondaryLinearDirection byte

const (
	ST_ArrowheadStyleUnset ST_ArrowheadStyle = 0
	ST_ArrowheadStyleAuto  ST_ArrowheadStyle = 1
	ST_ArrowheadStyleArr   ST_ArrowheadStyle = 2
	ST_ArrowheadStyleNoArr ST_ArrowheadStyle = 3
)

func (_egfb *CT_OtherwiseChoice) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_agfc := start
	switch start.Name {
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u006c\u0067"}:
		_egfb.Alg = NewCT_Algorithm()
		if _gccb := d.DecodeElement(_egfb.Alg, &_agfc); _gccb != nil {
			return _gccb
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0068\u0061p\u0065"}:
		_egfb.Shape = NewCT_Shape()
		if _adfg := d.DecodeElement(_egfb.Shape, &_agfc); _adfg != nil {
			return _adfg
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}:
		_egfb.PresOf = NewCT_PresentationOf()
		if _ddcg := d.DecodeElement(_egfb.PresOf, &_agfc); _ddcg != nil {
			return _ddcg
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}:
		_egfb.ConstrLst = NewCT_Constraints()
		if _baca := d.DecodeElement(_egfb.ConstrLst, &_agfc); _baca != nil {
			return _baca
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}:
		_egfb.RuleLst = NewCT_Rules()
		if _agfcb := d.DecodeElement(_egfb.RuleLst, &_agfc); _agfcb != nil {
			return _agfcb
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}:
		_egfb.ForEach = NewCT_ForEach()
		if _fbae := d.DecodeElement(_egfb.ForEach, &_agfc); _fbae != nil {
			return _fbae
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
		_egfb.LayoutNode = NewCT_LayoutNode()
		if _eece := d.DecodeElement(_egfb.LayoutNode, &_agfc); _eece != nil {
			return _eece
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}:
		_egfb.Choose = NewCT_Choose()
		if _ebce := d.DecodeElement(_egfb.Choose, &_agfc); _ebce != nil {
			return _ebce
		}
	case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
		_egfb.ExtLst = _b.NewCT_OfficeArtExtensionList()
		if _gaae := d.DecodeElement(_egfb.ExtLst, &_agfc); _gaae != nil {
			return _gaae
		}
	default:
		_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004f\u0074\u0068\u0065\u0072\u0077i\u0073\u0065\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _agfc.Name)
		if _afdd := d.Skip(); _afdd != nil {
			return _afdd
		}
	}
	return nil
}
func (_fgbfe ST_ArrowheadStyle) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_fgbfe.String(), start)
}
func NewCT_AdjLst() *CT_AdjLst {
	_feae := &CT_AdjLst{}
	return _feae
}
func ParseUnionST_ModelId(s string) (ST_ModelId, error) { return ST_ModelId{}, nil }
func (_ffefd *ST_HierBranchStyle) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_ffefd = 0
	case "\u006c":
		*_ffefd = 1
	case "\u0072":
		*_ffefd = 2
	case "\u0068\u0061\u006e\u0067":
		*_ffefd = 3
	case "\u0073\u0074\u0064":
		*_ffefd = 4
	case "\u0069\u006e\u0069\u0074":
		*_ffefd = 5
	}
	return nil
}
func (_eegf *CT_SDDescription) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _dbdc := range start.Attr {
		if _dbdc.Name.Local == "\u006c\u0061\u006e\u0067" {
			_gadac := _dbdc.Value
			_eegf.LangAttr = &_gadac
			continue
		}
		if _dbdc.Name.Local == "\u0076\u0061\u006c" {
			_aggc := _dbdc.Value
			_eegf.ValAttr = _aggc
			continue
		}
	}
	for {
		_bcab, _bbdag := d.Token()
		if _bbdag != nil {
			return _e.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0044\u0044\u0065s\u0063r\u0069\u0070\u0074\u0069\u006f\u006e\u003a \u0025\u0073", _bbdag)
		}
		if _bcgc, _aaaf := _bcab.(_a.EndElement); _aaaf && _bcgc.Name == start.Name {
			break
		}
	}
	return nil
}
func (_dbe *CT_AdjLst) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_ccd:
	for {
		_bag, _deb := d.Token()
		if _deb != nil {
			return _deb
		}
		switch _ade := _bag.(type) {
		case _a.StartElement:
			switch _ade.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u0064\u006a"}:
				_eea := NewCT_Adj()
				if _afcc := d.DecodeElement(_eea, &_ade); _afcc != nil {
					return _afcc
				}
				_dbe.Adj = append(_dbe.Adj, _eea)
			default:
				_ag.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0041\u0064\u006aL\u0073\u0074 \u0025\u0076", _ade.Name)
				if _fda := d.Skip(); _fda != nil {
					return _fda
				}
			}
		case _a.EndElement:
			break _ccd
		case _a.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_DiagramDefinitionHeaderLst and its children, prefixing error messages with path
func (_gedf *CT_DiagramDefinitionHeaderLst) ValidateWithPath(path string) error {
	for _bbefg, _gagd := range _gedf.LayoutDefHdr {
		if _abaf := _gagd.ValidateWithPath(_e.Sprintf("\u0025\u0073\u002f\u004cay\u006f\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072\u005b\u0025\u0064\u005d", path, _bbefg)); _abaf != nil {
			return _abaf
		}
	}
	return nil
}
func (_fbdg *CT_SDCategory) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0074\u0079\u0070\u0065"}, Value: _e.Sprintf("\u0025\u0076", _fbdg.TypeAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0069"}, Value: _e.Sprintf("\u0025\u0076", _fbdg.PriAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type ColorsDefHdr struct{ CT_ColorTransformHeader }

// Validate validates the AG_ConstraintAttributes and its children
func (_gbd *AG_ConstraintAttributes) Validate() error {
	return _gbd.ValidateWithPath("\u0041\u0047\u005fCo\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074\u0041\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0073")
}

type ST_TextDirection byte

func ParseUnionST_LayoutShapeType(s string) (ST_LayoutShapeType, error) {
	return ST_LayoutShapeType{}, nil
}
func (_adff ST_AlgorithmType) ValidateWithPath(path string) error {
	switch _adff {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_adff))
	}
	return nil
}
func (_cdcge ST_TextAnchorHorizontal) ValidateWithPath(path string) error {
	switch _cdcge {
	case 0, 1, 2:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cdcge))
	}
	return nil
}
func NewCT_CTDescription() *CT_CTDescription { _ebef := &CT_CTDescription{}; return _ebef }
func (_eaaec *ST_CenterShapeMapping) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_eaaec = 0
	case "\u006e\u006f\u006e\u0065":
		*_eaaec = 1
	case "\u0066\u004e\u006fd\u0065":
		*_eaaec = 2
	}
	return nil
}
func (_bbc *AG_IteratorAttributes) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _fc := range start.Attr {
		if _fc.Name.Local == "\u0061\u0078\u0069\u0073" {
			_baf, _df := ParseSliceST_AxisTypes(_fc.Value)
			if _df != nil {
				return _df
			}
			_bbc.AxisAttr = &_baf
			continue
		}
		if _fc.Name.Local == "\u0070\u0074\u0054\u0079\u0070\u0065" {
			_cb, _fbg := ParseSliceST_ElementTypes(_fc.Value)
			if _fbg != nil {
				return _fbg
			}
			_bbc.PtTypeAttr = &_cb
			continue
		}
		if _fc.Name.Local == "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073" {
			_dec, _fbe := ParseSliceST_Booleans(_fc.Value)
			if _fbe != nil {
				return _fbe
			}
			_bbc.HideLastTransAttr = &_dec
			continue
		}
		if _fc.Name.Local == "\u0073\u0074" {
			_bedc, _ga := ParseSliceST_Ints(_fc.Value)
			if _ga != nil {
				return _ga
			}
			_bbc.StAttr = &_bedc
			continue
		}
		if _fc.Name.Local == "\u0063\u006e\u0074" {
			_cgg, _fdd := ParseSliceST_UnsignedInts(_fc.Value)
			if _fdd != nil {
				return _fdd
			}
			_bbc.CntAttr = &_cgg
			continue
		}
		if _fc.Name.Local == "\u0073\u0074\u0065\u0070" {
			_gd, _dc := ParseSliceST_Ints(_fc.Value)
			if _dc != nil {
				return _dc
			}
			_bbc.StepAttr = &_gd
			continue
		}
	}
	for {
		_ed, _ded := d.Token()
		if _ded != nil {
			return _e.Errorf("\u0070\u0061\u0072\u0073\u0069\u006eg\u0020\u0041\u0047\u005f\u0049\u0074\u0065\u0072\u0061\u0074\u006f\u0072\u0041t\u0074\u0072\u0069\u0062\u0075\u0074\u0065s\u003a\u0020\u0025\u0073", _ded)
		}
		if _beb, _gf := _ed.(_a.EndElement); _gf && _beb.Name == start.Name {
			break
		}
	}
	return nil
}
func (_daaa ST_ArrowheadStyle) Validate() error { return _daaa.ValidateWithPath("") }
func (_gcef *CT_StyleDefinitionHeaderLst) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _gcef.StyleDefHdr != nil {
		_efca := _a.StartElement{Name: _a.Name{Local: "s\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072"}}
		for _, _bgfa := range _gcef.StyleDefHdr {
			e.EncodeElement(_bgfa, _efca)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_fgfdb *ST_LayoutShapeType) Validate() error { return _fgfdb.ValidateWithPath("") }

// Validate validates the CT_HierBranchStyle and its children
func (_gabaa *CT_HierBranchStyle) Validate() error {
	return _gabaa.ValidateWithPath("\u0043T\u005fH\u0069\u0065\u0072\u0042\u0072a\u006e\u0063h\u0053\u0074\u0079\u006c\u0065")
}
func (_gcgd *ST_AnimLvlStr) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_gcgd = 0
	case "\u006e\u006f\u006e\u0065":
		*_gcgd = 1
	case "\u006c\u0076\u006c":
		*_gcgd = 2
	case "\u0063\u0074\u0072":
		*_gcgd = 3
	}
	return nil
}
func (_cedc ST_StartingElement) String() string {
	switch _cedc {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u0064\u0065"
	case 2:
		return "\u0074\u0072\u0061n\u0073"
	}
	return ""
}
func (_edddg *ST_RotationPath) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_edddg = 0
	case "\u006e\u006f\u006e\u0065":
		*_edddg = 1
	case "\u0061l\u006f\u006e\u0067\u0050\u0061\u0074h":
		*_edddg = 2
	}
	return nil
}

type StyleDefHdr struct{ CT_StyleDefinitionHeader }

// ValidateWithPath validates the CT_DiagramDefinition and its children, prefixing error messages with path
func (_fcfe *CT_DiagramDefinition) ValidateWithPath(path string) error {
	for _ecgg, _cgcb := range _fcfe.Title {
		if _ccbb := _cgcb.ValidateWithPath(_e.Sprintf("\u0025\u0073\u002fT\u0069\u0074\u006c\u0065\u005b\u0025\u0064\u005d", path, _ecgg)); _ccbb != nil {
			return _ccbb
		}
	}
	for _aggg, _cecee := range _fcfe.Desc {
		if _eec := _cecee.ValidateWithPath(_e.Sprintf("%\u0073\u002f\u0044\u0065\u0073\u0063\u005b\u0025\u0064\u005d", path, _aggg)); _eec != nil {
			return _eec
		}
	}
	if _fcfe.CatLst != nil {
		if _gecb := _fcfe.CatLst.ValidateWithPath(path + "\u002fC\u0061\u0074\u004c\u0073\u0074"); _gecb != nil {
			return _gecb
		}
	}
	if _fcfe.SampData != nil {
		if _fdgg := _fcfe.SampData.ValidateWithPath(path + "\u002fS\u0061\u006d\u0070\u0044\u0061\u0074a"); _fdgg != nil {
			return _fdgg
		}
	}
	if _fcfe.StyleData != nil {
		if _bge := _fcfe.StyleData.ValidateWithPath(path + "\u002f\u0053\u0074\u0079\u006c\u0065\u0044\u0061\u0074\u0061"); _bge != nil {
			return _bge
		}
	}
	if _fcfe.ClrData != nil {
		if _fbead := _fcfe.ClrData.ValidateWithPath(path + "\u002f\u0043\u006c\u0072\u0044\u0061\u0074\u0061"); _fbead != nil {
			return _fbead
		}
	}
	if _gffg := _fcfe.LayoutNode.ValidateWithPath(path + "/\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"); _gffg != nil {
		return _gffg
	}
	if _fcfe.ExtLst != nil {
		if _becd := _fcfe.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _becd != nil {
			return _becd
		}
	}
	return nil
}
func (_daa *CT_Cxn) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006do\u0064\u0065\u006c\u0049\u0064"}, Value: _e.Sprintf("\u0025\u0076", _daa.ModelIdAttr)})
	if _daa.TypeAttr != ST_CxnTypeUnset {
		_bcdb, _bacf := _daa.TypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0074\u0079\u0070\u0065"})
		if _bacf != nil {
			return _bacf
		}
		start.Attr = append(start.Attr, _bcdb)
	}
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0072\u0063I\u0064"}, Value: _e.Sprintf("\u0025\u0076", _daa.SrcIdAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0064\u0065\u0073\u0074\u0049\u0064"}, Value: _e.Sprintf("\u0025\u0076", _daa.DestIdAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0072\u0063\u004f\u0072\u0064"}, Value: _e.Sprintf("\u0025\u0076", _daa.SrcOrdAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0064e\u0073\u0074\u004f\u0072\u0064"}, Value: _e.Sprintf("\u0025\u0076", _daa.DestOrdAttr)})
	if _daa.ParTransIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073\u0049\u0064"}, Value: _e.Sprintf("\u0025\u0076", *_daa.ParTransIdAttr)})
	}
	if _daa.SibTransIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073\u0049\u0064"}, Value: _e.Sprintf("\u0025\u0076", *_daa.SibTransIdAttr)})
	}
	if _daa.PresIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0072\u0065\u0073\u0049\u0064"}, Value: _e.Sprintf("\u0025\u0076", *_daa.PresIdAttr)})
	}
	e.EncodeToken(start)
	if _daa.ExtLst != nil {
		_egdg := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_daa.ExtLst, _egdg)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_bedef ST_ChildAlignment) ValidateWithPath(path string) error {
	switch _bedef {
	case 0, 1, 2, 3, 4:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bedef))
	}
	return nil
}
func NewColorsDef() *ColorsDef {
	_faab := &ColorsDef{}
	_faab.CT_ColorTransform = *NewCT_ColorTransform()
	return _faab
}
func (_dfgbc ST_TextBlockDirection) Validate() error { return _dfgbc.ValidateWithPath("") }
func (_bfcdd *ST_Breakpoint) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_afcgb, _bfcc := d.Token()
	if _bfcc != nil {
		return _bfcc
	}
	if _cdfe, _febaf := _afcgb.(_a.EndElement); _febaf && _cdfe.Name == start.Name {
		*_bfcdd = 1
		return nil
	}
	if _ccdgef, _cfgca := _afcgb.(_a.CharData); !_cfgca {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _afcgb)
	} else {
		switch string(_ccdgef) {
		case "":
			*_bfcdd = 0
		case "\u0065\u006e\u0064\u0043\u006e\u0076":
			*_bfcdd = 1
		case "\u0062\u0061\u006c":
			*_bfcdd = 2
		case "\u0066\u0069\u0078e\u0064":
			*_bfcdd = 3
		}
	}
	_afcgb, _bfcc = d.Token()
	if _bfcc != nil {
		return _bfcc
	}
	if _fcfag, _gaaga := _afcgb.(_a.EndElement); _gaaga && _fcfag.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _afcgb)
}
func (_feabe *ST_BendPoint) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_feabe = 0
	case "\u0062\u0065\u0067":
		*_feabe = 1
	case "\u0064\u0065\u0066":
		*_feabe = 2
	case "\u0065\u006e\u0064":
		*_feabe = 3
	}
	return nil
}

// ValidateWithPath validates the CT_Direction and its children, prefixing error messages with path
func (_ggdbg *CT_Direction) ValidateWithPath(path string) error {
	if _daag := _ggdbg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _daag != nil {
		return _daag
	}
	return nil
}
func (_adbdg *ST_HueDir) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_adbdg = 0
	case "\u0063\u0077":
		*_adbdg = 1
	case "\u0063\u0063\u0077":
		*_adbdg = 2
	}
	return nil
}

type ST_ResizeHandlesStr byte
type CT_LayoutNode struct {

	// Name
	NameAttr *string

	// Style Label
	StyleLblAttr *string

	// Child Order
	ChOrderAttr ST_ChildOrderType

	// Move With
	MoveWithAttr     *string
	LayoutNodeChoice []*CT_LayoutNodeChoice
}

func (_eegc ST_ModelId) String() string {
	if _eegc.Int32 != nil {
		return _e.Sprintf("\u0025\u0076", *_eegc.Int32)
	}
	if _eegc.ST_Guid != nil {
		return _e.Sprintf("\u0025\u0076", *_eegc.ST_Guid)
	}
	return ""
}
func (_bccc ST_DiagramTextAlignment) String() string {
	switch _bccc {
	case 0:
		return ""
	case 1:
		return "\u006c"
	case 2:
		return "\u0063\u0074\u0072"
	case 3:
		return "\u0072"
	}
	return ""
}
func (_cdbag ST_ChildOrderType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_cdbag.String(), start)
}
func (_cbg *CT_Adj) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_cbg.IdxAttr = 1
	for _, _fdg := range start.Attr {
		if _fdg.Name.Local == "\u0069\u0064\u0078" {
			_gdb, _gcf := _g.ParseUint(_fdg.Value, 10, 32)
			if _gcf != nil {
				return _gcf
			}
			_cbg.IdxAttr = uint32(_gdb)
			continue
		}
		if _fdg.Name.Local == "\u0076\u0061\u006c" {
			_bc, _abb := _g.ParseFloat(_fdg.Value, 64)
			if _abb != nil {
				return _abb
			}
			_cbg.ValAttr = _bc
			continue
		}
	}
	for {
		_eeg, _ca := d.Token()
		if _ca != nil {
			return _e.Errorf("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0043T\u005f\u0041d\u006a\u003a\u0020\u0025\u0073", _ca)
		}
		if _bcf, _fbeb := _eeg.(_a.EndElement); _fbeb && _bcf.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_StyleDefinitionHeaderLst() *CT_StyleDefinitionHeaderLst {
	_acaa := &CT_StyleDefinitionHeaderLst{}
	return _acaa
}
func NewCT_StyleDefinition() *CT_StyleDefinition {
	_fded := &CT_StyleDefinition{}
	return _fded
}
func (_acgfe ST_BendPoint) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_daff := _a.Attr{}
	_daff.Name = name
	switch _acgfe {
	case ST_BendPointUnset:
		_daff.Value = ""
	case ST_BendPointBeg:
		_daff.Value = "\u0062\u0065\u0067"
	case ST_BendPointDef:
		_daff.Value = "\u0064\u0065\u0066"
	case ST_BendPointEnd:
		_daff.Value = "\u0065\u006e\u0064"
	}
	return _daff, nil
}
func (_bcced ST_RotationPath) Validate() error { return _bcced.ValidateWithPath("") }

type ST_PyramidAccentTextMargin byte

// ValidateWithPath validates the CT_Otherwise and its children, prefixing error messages with path
func (_bfdg *CT_Otherwise) ValidateWithPath(path string) error {
	for _deed, _bccg := range _bfdg.OtherwiseChoice {
		if _aagd := _bccg.ValidateWithPath(_e.Sprintf("\u0025\u0073\u002f\u004fth\u0065\u0072\u0077\u0069\u0073\u0065\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025d\u005d", path, _deed)); _aagd != nil {
			return _aagd
		}
	}
	return nil
}
func (_cffg *CT_RelIds) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u003a\u0064\u006d"}, Value: _e.Sprintf("\u0025\u0076", _cffg.DmAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u003a\u006c\u006f"}, Value: _e.Sprintf("\u0025\u0076", _cffg.LoAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u003a\u0071\u0073"}, Value: _e.Sprintf("\u0025\u0076", _cffg.QsAttr)})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u003a\u0063\u0073"}, Value: _e.Sprintf("\u0025\u0076", _cffg.CsAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_bfae ST_ClrAppMethod) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_bfae.String(), start)
}
func (_adede ST_ContinueDirection) Validate() error { return _adede.ValidateWithPath("") }

// Validate validates the AG_IteratorAttributes and its children
func (_ceb *AG_IteratorAttributes) Validate() error {
	return _ceb.ValidateWithPath("A\u0047\u005f\u0049\u0074er\u0061t\u006f\u0072\u0041\u0074\u0074r\u0069\u0062\u0075\u0074\u0065\u0073")
}
func (_ecbga *ST_ConstraintRelationship) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_ecbga = 0
	case "\u0073\u0065\u006c\u0066":
		*_ecbga = 1
	case "\u0063\u0068":
		*_ecbga = 2
	case "\u0064\u0065\u0073":
		*_ecbga = 3
	}
	return nil
}
func NewCT_CxnList() *CT_CxnList { _dfc := &CT_CxnList{}; return _dfc }

type CT_Parameter struct {

	// Parameter Type
	TypeAttr ST_ParameterId

	// Value
	ValAttr ST_ParameterVal
}

// Validate validates the CT_ChildMax and its children
func (_deee *CT_ChildMax) Validate() error {
	return _deee.ValidateWithPath("C\u0054\u005f\u0043\u0068\u0069\u006c\u0064\u004d\u0061\u0078")
}
func (_adaga ST_SecondaryLinearDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_adaga.String(), start)
}

// ValidateWithPath validates the CT_Pt and its children, prefixing error messages with path
func (_beca *CT_Pt) ValidateWithPath(path string) error {
	if _bfab := _beca.ModelIdAttr.ValidateWithPath(path + "\u002f\u004d\u006fd\u0065\u006c\u0049\u0064\u0041\u0074\u0074\u0072"); _bfab != nil {
		return _bfab
	}
	if _acbcb := _beca.TypeAttr.ValidateWithPath(path + "\u002fT\u0079\u0070\u0065\u0041\u0074\u0074r"); _acbcb != nil {
		return _acbcb
	}
	if _beca.CxnIdAttr != nil {
		if _gcad := _beca.CxnIdAttr.ValidateWithPath(path + "\u002f\u0043\u0078\u006e\u0049\u0064\u0041\u0074\u0074\u0072"); _gcad != nil {
			return _gcad
		}
	}
	if _beca.PrSet != nil {
		if _aafc := _beca.PrSet.ValidateWithPath(path + "\u002f\u0050\u0072\u0053\u0065\u0074"); _aafc != nil {
			return _aafc
		}
	}
	if _beca.SpPr != nil {
		if _bgce := _beca.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _bgce != nil {
			return _bgce
		}
	}
	if _beca.T != nil {
		if _gaea := _beca.T.ValidateWithPath(path + "\u002f\u0054"); _gaea != nil {
			return _gaea
		}
	}
	if _beca.ExtLst != nil {
		if _abfc := _beca.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _abfc != nil {
			return _abfc
		}
	}
	return nil
}
func (_daddg ST_DiagramTextAlignment) Validate() error { return _daddg.ValidateWithPath("") }

const (
	ST_PyramidAccentPositionUnset ST_PyramidAccentPosition = 0
	ST_PyramidAccentPositionBef   ST_PyramidAccentPosition = 1
	ST_PyramidAccentPositionAft   ST_PyramidAccentPosition = 2
)

func NewCT_SampleData() *CT_SampleData                      { _addg := &CT_SampleData{}; return _addg }
func ParseSliceST_AxisTypes(s string) (ST_AxisTypes, error) { return ST_AxisTypes{}, nil }

// Validate validates the CT_SDDescription and its children
func (_gbdd *CT_SDDescription) Validate() error {
	return _gbdd.ValidateWithPath("\u0043\u0054_\u0053\u0044\u0044e\u0073\u0063\u0072\u0069\u0070\u0074\u0069\u006f\u006e")
}
func (_fgeda *LayoutDefHdr) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u006c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072"
	return _fgeda.CT_DiagramDefinitionHeader.MarshalXML(e, start)
}
func (_bfad ST_BendPoint) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_bfad.String(), start)
}

type CT_StyleLabel struct {

	// Style Name
	NameAttr string

	// 3-D Scene
	Scene3d *_b.CT_Scene3D

	// 3-D Shape Properties
	Sp3d *_b.CT_Shape3D

	// Text Properties
	TxPr *CT_TextProps

	// Shape Style
	Style  *_b.CT_ShapeStyle
	ExtLst *_b.CT_OfficeArtExtensionList
}

func (_eef *AG_IteratorAttributes) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _eef.AxisAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0061\u0078\u0069\u0073"}, Value: _e.Sprintf("\u0025\u0076", *_eef.AxisAttr)})
	}
	if _eef.PtTypeAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"}, Value: _e.Sprintf("\u0025\u0076", *_eef.PtTypeAttr)})
	}
	if _eef.HideLastTransAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073"}, Value: _e.Sprintf("\u0025\u0076", *_eef.HideLastTransAttr)})
	}
	if _eef.StAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074"}, Value: _e.Sprintf("\u0025\u0076", *_eef.StAttr)})
	}
	if _eef.CntAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u006e\u0074"}, Value: _e.Sprintf("\u0025\u0076", *_eef.CntAttr)})
	}
	if _eef.StepAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074\u0065\u0070"}, Value: _e.Sprintf("\u0025\u0076", *_eef.StepAttr)})
	}
	return nil
}
func NewCT_Cxn() *CT_Cxn { _eccd := &CT_Cxn{}; return _eccd }

// ValidateWithPath validates the CT_LayoutVariablePropertySet and its children, prefixing error messages with path
func (_bfge *CT_LayoutVariablePropertySet) ValidateWithPath(path string) error {
	if _bfge.OrgChart != nil {
		if _fead := _bfge.OrgChart.ValidateWithPath(path + "\u002fO\u0072\u0067\u0043\u0068\u0061\u0072t"); _fead != nil {
			return _fead
		}
	}
	if _bfge.ChMax != nil {
		if _dacg := _bfge.ChMax.ValidateWithPath(path + "\u002f\u0043\u0068\u004d\u0061\u0078"); _dacg != nil {
			return _dacg
		}
	}
	if _bfge.ChPref != nil {
		if _dgdb := _bfge.ChPref.ValidateWithPath(path + "\u002fC\u0068\u0050\u0072\u0065\u0066"); _dgdb != nil {
			return _dgdb
		}
	}
	if _bfge.BulletEnabled != nil {
		if _afbe := _bfge.BulletEnabled.ValidateWithPath(path + "\u002f\u0042\u0075\u006c\u006c\u0065\u0074\u0045\u006ea\u0062\u006c\u0065\u0064"); _afbe != nil {
			return _afbe
		}
	}
	if _bfge.Dir != nil {
		if _eadg := _bfge.Dir.ValidateWithPath(path + "\u002f\u0044\u0069\u0072"); _eadg != nil {
			return _eadg
		}
	}
	if _bfge.HierBranch != nil {
		if _fff := _bfge.HierBranch.ValidateWithPath(path + "/\u0048\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068"); _fff != nil {
			return _fff
		}
	}
	if _bfge.AnimOne != nil {
		if _defb := _bfge.AnimOne.ValidateWithPath(path + "\u002f\u0041\u006e\u0069\u006d\u004f\u006e\u0065"); _defb != nil {
			return _defb
		}
	}
	if _bfge.AnimLvl != nil {
		if _gaeg := _bfge.AnimLvl.ValidateWithPath(path + "\u002f\u0041\u006e\u0069\u006d\u004c\u0076\u006c"); _gaeg != nil {
			return _gaeg
		}
	}
	if _bfge.ResizeHandles != nil {
		if _aeea := _bfge.ResizeHandles.ValidateWithPath(path + "\u002f\u0052\u0065\u0073\u0069\u007a\u0065\u0048\u0061n\u0064\u006c\u0065\u0073"); _aeea != nil {
			return _aeea
		}
	}
	return nil
}

// ValidateWithPath validates the AG_IteratorAttributes and its children, prefixing error messages with path
func (_fcd *AG_IteratorAttributes) ValidateWithPath(path string) error { return nil }
func (_bcadc ST_AxisType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_cfdcfe := _a.Attr{}
	_cfdcfe.Name = name
	switch _bcadc {
	case ST_AxisTypeUnset:
		_cfdcfe.Value = ""
	case ST_AxisTypeSelf:
		_cfdcfe.Value = "\u0073\u0065\u006c\u0066"
	case ST_AxisTypeCh:
		_cfdcfe.Value = "\u0063\u0068"
	case ST_AxisTypeDes:
		_cfdcfe.Value = "\u0064\u0065\u0073"
	case ST_AxisTypeDesOrSelf:
		_cfdcfe.Value = "\u0064e\u0073\u004f\u0072\u0053\u0065\u006cf"
	case ST_AxisTypePar:
		_cfdcfe.Value = "\u0070\u0061\u0072"
	case ST_AxisTypeAncst:
		_cfdcfe.Value = "\u0061\u006e\u0063s\u0074"
	case ST_AxisTypeAncstOrSelf:
		_cfdcfe.Value = "a\u006e\u0063\u0073\u0074\u004f\u0072\u0053\u0065\u006c\u0066"
	case ST_AxisTypeFollowSib:
		_cfdcfe.Value = "\u0066o\u006c\u006c\u006f\u0077\u0053\u0069b"
	case ST_AxisTypePrecedSib:
		_cfdcfe.Value = "\u0070r\u0065\u0063\u0065\u0064\u0053\u0069b"
	case ST_AxisTypeFollow:
		_cfdcfe.Value = "\u0066\u006f\u006c\u006c\u006f\u0077"
	case ST_AxisTypePreced:
		_cfdcfe.Value = "\u0070\u0072\u0065\u0063\u0065\u0064"
	case ST_AxisTypeRoot:
		_cfdcfe.Value = "\u0072\u006f\u006f\u0074"
	case ST_AxisTypeNone:
		_cfdcfe.Value = "\u006e\u006f\u006e\u0065"
	}
	return _cfdcfe, nil
}
func (_gagg ST_HueDir) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_gagg.String(), start)
}

type ST_GrowDirection byte

func (_aff *CT_ForEach) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _aff.NameAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _e.Sprintf("\u0025\u0076", *_aff.NameAttr)})
	}
	if _aff.RefAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u0065\u0066"}, Value: _e.Sprintf("\u0025\u0076", *_aff.RefAttr)})
	}
	if _aff.AxisAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0061\u0078\u0069\u0073"}, Value: _e.Sprintf("\u0025\u0076", *_aff.AxisAttr)})
	}
	if _aff.PtTypeAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0070\u0074\u0054\u0079\u0070\u0065"}, Value: _e.Sprintf("\u0025\u0076", *_aff.PtTypeAttr)})
	}
	if _aff.HideLastTransAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0068\u0069\u0064\u0065\u004c\u0061\u0073\u0074\u0054\u0072\u0061\u006e\u0073"}, Value: _e.Sprintf("\u0025\u0076", *_aff.HideLastTransAttr)})
	}
	if _aff.StAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074"}, Value: _e.Sprintf("\u0025\u0076", *_aff.StAttr)})
	}
	if _aff.CntAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0063\u006e\u0074"}, Value: _e.Sprintf("\u0025\u0076", *_aff.CntAttr)})
	}
	if _aff.StepAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0073\u0074\u0065\u0070"}, Value: _e.Sprintf("\u0025\u0076", *_aff.StepAttr)})
	}
	e.EncodeToken(start)
	if _aff.ForEachChoice != nil {
		for _, _abff := range _aff.ForEachChoice {
			_abff.MarshalXML(e, _a.StartElement{})
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_efage ST_DiagramHorizontalAlignment) Validate() error { return _efage.ValidateWithPath("") }
func (_efag *CT_LayoutNode) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _gabe := range start.Attr {
		if _gabe.Name.Local == "\u006e\u0061\u006d\u0065" {
			_fdcdf := _gabe.Value
			_efag.NameAttr = &_fdcdf
			continue
		}
		if _gabe.Name.Local == "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c" {
			_ebbeg := _gabe.Value
			_efag.StyleLblAttr = &_ebbeg
			continue
		}
		if _gabe.Name.Local == "\u0063h\u004f\u0072\u0064\u0065\u0072" {
			_efag.ChOrderAttr.UnmarshalXMLAttr(_gabe)
			continue
		}
		if _gabe.Name.Local == "\u006d\u006f\u0076\u0065\u0057\u0069\u0074\u0068" {
			_aad := _gabe.Value
			_efag.MoveWithAttr = &_aad
			continue
		}
	}
_cgag:
	for {
		_add, _aafd := d.Token()
		if _aafd != nil {
			return _aafd
		}
		switch _gdgc := _add.(type) {
		case _a.StartElement:
			switch _gdgc.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061\u006c\u0067"}:
				_fbebf := NewCT_LayoutNodeChoice()
				if _becb := d.DecodeElement(&_fbebf.Alg, &_gdgc); _becb != nil {
					return _becb
				}
				_efag.LayoutNodeChoice = append(_efag.LayoutNodeChoice, _fbebf)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0068\u0061p\u0065"}:
				_gcag := NewCT_LayoutNodeChoice()
				if _eeagc := d.DecodeElement(&_gcag.Shape, &_gdgc); _eeagc != nil {
					return _eeagc
				}
				_efag.LayoutNodeChoice = append(_efag.LayoutNodeChoice, _gcag)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0070\u0072\u0065\u0073\u004f\u0066"}:
				_gdbdf := NewCT_LayoutNodeChoice()
				if _bfee := d.DecodeElement(&_gdbdf.PresOf, &_gdgc); _bfee != nil {
					return _bfee
				}
				_efag.LayoutNodeChoice = append(_efag.LayoutNodeChoice, _gdbdf)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063o\u006e\u0073\u0074\u0072\u004c\u0073t"}:
				_aebad := NewCT_LayoutNodeChoice()
				if _cgebc := d.DecodeElement(&_aebad.ConstrLst, &_gdgc); _cgebc != nil {
					return _cgebc
				}
				_efag.LayoutNodeChoice = append(_efag.LayoutNodeChoice, _aebad)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072u\u006c\u0065\u004c\u0073\u0074"}:
				_bebg := NewCT_LayoutNodeChoice()
				if _gadde := d.DecodeElement(&_bebg.RuleLst, &_gdgc); _gadde != nil {
					return _gadde
				}
				_efag.LayoutNodeChoice = append(_efag.LayoutNodeChoice, _bebg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0076\u0061\u0072\u004c\u0073\u0074"}:
				_dcfg := NewCT_LayoutNodeChoice()
				if _ebcbg := d.DecodeElement(&_dcfg.VarLst, &_gdgc); _ebcbg != nil {
					return _ebcbg
				}
				_efag.LayoutNodeChoice = append(_efag.LayoutNodeChoice, _dcfg)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0066o\u0072\u0045\u0061\u0063\u0068"}:
				_aacd := NewCT_LayoutNodeChoice()
				if _fedg := d.DecodeElement(&_aacd.ForEach, &_gdgc); _fedg != nil {
					return _fedg
				}
				_efag.LayoutNodeChoice = append(_efag.LayoutNodeChoice, _aacd)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065"}:
				_gabae := NewCT_LayoutNodeChoice()
				if _bedbf := d.DecodeElement(&_gabae.LayoutNode, &_gdgc); _bedbf != nil {
					return _bedbf
				}
				_efag.LayoutNodeChoice = append(_efag.LayoutNodeChoice, _gabae)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u006f\u006f\u0073\u0065"}:
				_fcaf := NewCT_LayoutNodeChoice()
				if _bggc := d.DecodeElement(&_fcaf.Choose, &_gdgc); _bggc != nil {
					return _bggc
				}
				_efag.LayoutNodeChoice = append(_efag.LayoutNodeChoice, _fcaf)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_caaeb := NewCT_LayoutNodeChoice()
				if _feab := d.DecodeElement(&_caaeb.ExtLst, &_gdgc); _feab != nil {
					return _feab
				}
				_efag.LayoutNodeChoice = append(_efag.LayoutNodeChoice, _caaeb)
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004ca\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065 \u0025\u0076", _gdgc.Name)
				if _fcff := d.Skip(); _fcff != nil {
					return _fcff
				}
			}
		case _a.EndElement:
			break _cgag
		case _a.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_DataModel and its children, prefixing error messages with path
func (_dbgd *CT_DataModel) ValidateWithPath(path string) error {
	if _gefc := _dbgd.PtLst.ValidateWithPath(path + "\u002f\u0050\u0074\u004c\u0073\u0074"); _gefc != nil {
		return _gefc
	}
	if _dbgd.CxnLst != nil {
		if _gca := _dbgd.CxnLst.ValidateWithPath(path + "\u002fC\u0078\u006e\u004c\u0073\u0074"); _gca != nil {
			return _gca
		}
	}
	if _dbgd.Bg != nil {
		if _dfaee := _dbgd.Bg.ValidateWithPath(path + "\u002f\u0042\u0067"); _dfaee != nil {
			return _dfaee
		}
	}
	if _dbgd.Whole != nil {
		if _dafd := _dbgd.Whole.ValidateWithPath(path + "\u002f\u0057\u0068\u006f\u006c\u0065"); _dafd != nil {
			return _dafd
		}
	}
	if _dbgd.ExtLst != nil {
		if _ffef := _dbgd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ffef != nil {
			return _ffef
		}
	}
	return nil
}
func (_egbbg ST_ArrowheadStyle) String() string {
	switch _egbbg {
	case 0:
		return ""
	case 1:
		return "\u0061\u0075\u0074\u006f"
	case 2:
		return "\u0061\u0072\u0072"
	case 3:
		return "\u006e\u006f\u0041r\u0072"
	}
	return ""
}

// ValidateWithPath validates the CT_CTCategory and its children, prefixing error messages with path
func (_ace *CT_CTCategory) ValidateWithPath(path string) error { return nil }
func (_dbdef ST_OutputShapeType) Validate() error              { return _dbdef.ValidateWithPath("") }
func (_egfg ST_ChildAlignment) Validate() error                { return _egfg.ValidateWithPath("") }
func (_fede ST_ModelId) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _fede.Int32 != nil {
		e.EncodeToken(_a.CharData(_e.Sprintf("\u0025\u0064", *_fede.Int32)))
	}
	if _fede.ST_Guid != nil {
		e.EncodeToken(_a.CharData(*_fede.ST_Guid))
	}
	return e.EncodeToken(_a.EndElement{Name: start.Name})
}
func (_fcf *CT_AnimLvl) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	if _fcf.ValAttr != ST_AnimLvlStrUnset {
		_dbc, _ebb := _fcf.ValAttr.MarshalXMLAttr(_a.Name{Local: "\u0076\u0061\u006c"})
		if _ebb != nil {
			return _ebb
		}
		start.Attr = append(start.Attr, _dbc)
	}
	e.EncodeToken(start)
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

type LayoutDef struct{ CT_DiagramDefinition }

// Validate validates the CT_CTStyleLabel and its children
func (_abdf *CT_CTStyleLabel) Validate() error {
	return _abdf.ValidateWithPath("\u0043T\u005fC\u0054\u0053\u0074\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c")
}
func (_fgfd *CT_StyleLabel) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006e\u0061\u006d\u0065"}, Value: _e.Sprintf("\u0025\u0076", _fgfd.NameAttr)})
	e.EncodeToken(start)
	if _fgfd.Scene3d != nil {
		_gdce := _a.StartElement{Name: _a.Name{Local: "\u0073c\u0065\u006e\u0065\u0033\u0064"}}
		e.EncodeElement(_fgfd.Scene3d, _gdce)
	}
	if _fgfd.Sp3d != nil {
		_badg := _a.StartElement{Name: _a.Name{Local: "\u0073\u0070\u0033\u0064"}}
		e.EncodeElement(_fgfd.Sp3d, _badg)
	}
	if _fgfd.TxPr != nil {
		_deca := _a.StartElement{Name: _a.Name{Local: "\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_fgfd.TxPr, _deca)
	}
	if _fgfd.Style != nil {
		_acbd := _a.StartElement{Name: _a.Name{Local: "\u0073\u0074\u0079l\u0065"}}
		e.EncodeElement(_fgfd.Style, _acbd)
	}
	if _fgfd.ExtLst != nil {
		_cfba := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fgfd.ExtLst, _cfba)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the AG_ConstraintRefAttributes and its children, prefixing error messages with path
func (_ebe *AG_ConstraintRefAttributes) ValidateWithPath(path string) error {
	if _db := _ebe.RefTypeAttr.ValidateWithPath(path + "\u002f\u0052\u0065f\u0054\u0079\u0070\u0065\u0041\u0074\u0074\u0072"); _db != nil {
		return _db
	}
	if _adg := _ebe.RefForAttr.ValidateWithPath(path + "/\u0052\u0065\u0066\u0046\u006f\u0072\u0041\u0074\u0074\u0072"); _adg != nil {
		return _adg
	}
	if _cec := _ebe.RefPtTypeAttr.ValidateWithPath(path + "\u002f\u0052\u0065\u0066\u0050\u0074\u0054\u0079\u0070e\u0041\u0074\u0074\u0072"); _cec != nil {
		return _cec
	}
	return nil
}
func (_cedd *ST_PrSetCustVal) Validate() error { return _cedd.ValidateWithPath("") }
func (_ebgc ST_ElementType) String() string {
	switch _ebgc {
	case 0:
		return ""
	case 1:
		return "\u0061\u006c\u006c"
	case 2:
		return "\u0064\u006f\u0063"
	case 3:
		return "\u006e\u006f\u0064\u0065"
	case 4:
		return "\u006e\u006f\u0072\u006d"
	case 5:
		return "\u006eo\u006e\u004e\u006f\u0072\u006d"
	case 6:
		return "\u0061\u0073\u0073\u0074"
	case 7:
		return "\u006eo\u006e\u0041\u0073\u0073\u0074"
	case 8:
		return "\u0070\u0061\u0072\u0054\u0072\u0061\u006e\u0073"
	case 9:
		return "\u0070\u0072\u0065\u0073"
	case 10:
		return "\u0073\u0069\u0062\u0054\u0072\u0061\u006e\u0073"
	}
	return ""
}

// ST_ParameterVal is a union type
type ST_ParameterVal struct {
	ST_DiagramHorizontalAlignment ST_DiagramHorizontalAlignment
	ST_VerticalAlignment          ST_VerticalAlignment
	ST_ChildDirection             ST_ChildDirection
	ST_ChildAlignment             ST_ChildAlignment
	ST_SecondaryChildAlignment    ST_SecondaryChildAlignment
	ST_LinearDirection            ST_LinearDirection
	ST_SecondaryLinearDirection   ST_SecondaryLinearDirection
	ST_StartingElement            ST_StartingElement
	ST_BendPoint                  ST_BendPoint
	ST_ConnectorRouting           ST_ConnectorRouting
	ST_ArrowheadStyle             ST_ArrowheadStyle
	ST_ConnectorDimension         ST_ConnectorDimension
	ST_RotationPath               ST_RotationPath
	ST_CenterShapeMapping         ST_CenterShapeMapping
	ST_NodeHorizontalAlignment    ST_NodeHorizontalAlignment
	ST_NodeVerticalAlignment      ST_NodeVerticalAlignment
	ST_FallbackDimension          ST_FallbackDimension
	ST_TextDirection              ST_TextDirection
	ST_PyramidAccentPosition      ST_PyramidAccentPosition
	ST_PyramidAccentTextMargin    ST_PyramidAccentTextMargin
	ST_TextBlockDirection         ST_TextBlockDirection
	ST_TextAnchorHorizontal       ST_TextAnchorHorizontal
	ST_TextAnchorVertical         ST_TextAnchorVertical
	ST_DiagramTextAlignment       ST_DiagramTextAlignment
	ST_AutoTextRotation           ST_AutoTextRotation
	ST_GrowDirection              ST_GrowDirection
	ST_FlowDirection              ST_FlowDirection
	ST_ContinueDirection          ST_ContinueDirection
	ST_Breakpoint                 ST_Breakpoint
	ST_Offset                     ST_Offset
	ST_HierarchyAlignment         ST_HierarchyAlignment
	Int32                         *int32
	Float64                       *float64
	Bool                          *bool
	StringVal                     *string
	ST_ConnectorPoint             ST_ConnectorPoint
}

func (_bbgb *CT_Algorithm) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	_edaa, _dff := _bbgb.TypeAttr.MarshalXMLAttr(_a.Name{Local: "\u0074\u0079\u0070\u0065"})
	if _dff != nil {
		return _dff
	}
	start.Attr = append(start.Attr, _edaa)
	if _bbgb.RevAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u0065\u0076"}, Value: _e.Sprintf("\u0025\u0076", *_bbgb.RevAttr)})
	}
	e.EncodeToken(start)
	if _bbgb.Param != nil {
		_gad := _a.StartElement{Name: _a.Name{Local: "\u0070\u0061\u0072a\u006d"}}
		for _, _cce := range _bbgb.Param {
			e.EncodeElement(_cce, _gad)
		}
	}
	if _bbgb.ExtLst != nil {
		_cde := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bbgb.ExtLst, _cde)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}
func (_gebc ST_SecondaryChildAlignment) String() string {
	switch _gebc {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u0074"
	case 3:
		return "\u0062"
	case 4:
		return "\u006c"
	case 5:
		return "\u0072"
	}
	return ""
}

type RelIds struct{ CT_RelIds }
type CT_WhenChoice struct {

	// Algorithm
	Alg *CT_Algorithm

	// Shape
	Shape *CT_Shape

	// Presentation Of
	PresOf *CT_PresentationOf

	// Constraint List
	ConstrLst *CT_Constraints

	// Rule List
	RuleLst *CT_Rules

	// For Each
	ForEach *CT_ForEach

	// Layout Node
	LayoutNode *CT_LayoutNode

	// Choose Element
	Choose *CT_Choose
	ExtLst *_b.CT_OfficeArtExtensionList
}

const (
	ST_ResizeHandlesStrUnset ST_ResizeHandlesStr = 0
	ST_ResizeHandlesStrExact ST_ResizeHandlesStr = 1
	ST_ResizeHandlesStrRel   ST_ResizeHandlesStr = 2
)

// ValidateWithPath validates the ColorsDef and its children, prefixing error messages with path
func (_aaafb *ColorsDef) ValidateWithPath(path string) error {
	if _aedcc := _aaafb.CT_ColorTransform.ValidateWithPath(path); _aedcc != nil {
		return _aedcc
	}
	return nil
}
func (_aeagd *CT_OrgChart) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _cgdb := range start.Attr {
		if _cgdb.Name.Local == "\u0076\u0061\u006c" {
			_ecae, _fdgafg := _g.ParseBool(_cgdb.Value)
			if _fdgafg != nil {
				return _fdgafg
			}
			_aeagd.ValAttr = &_ecae
			continue
		}
	}
	for {
		_egggd, _bfbf := d.Token()
		if _bfbf != nil {
			return _e.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u004f\u0072\u0067\u0043\u0068\u0061\u0072\u0074\u003a\u0020\u0025\u0073", _bfbf)
		}
		if _ecad, _gfgfb := _egggd.(_a.EndElement); _gfgfb && _ecad.Name == start.Name {
			break
		}
	}
	return nil
}
func (_fcdc *CT_Categories) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_aab:
	for {
		_fdb, _dbb := d.Token()
		if _dbb != nil {
			return _dbb
		}
		switch _bgc := _fdb.(type) {
		case _a.StartElement:
			switch _bgc.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074"}:
				_bfg := NewCT_Category()
				if _bbda := d.DecodeElement(_bfg, &_bgc); _bbda != nil {
					return _bbda
				}
				_fcdc.Cat = append(_fcdc.Cat, _bfg)
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043a\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073 \u0025\u0076", _bgc.Name)
				if _fdgad := d.Skip(); _fdgad != nil {
					return _fdgad
				}
			}
		case _a.EndElement:
			break _aab
		case _a.CharData:
		}
	}
	return nil
}
func (_geag *ST_LayoutShapeType) ValidateWithPath(path string) error {
	_gddd := []string{}
	if _geag.ST_ShapeType != _b.ST_ShapeTypeUnset {
		_gddd = append(_gddd, "\u0053\u0054\u005fS\u0068\u0061\u0070\u0065\u0054\u0079\u0070\u0065")
	}
	if _geag.ST_OutputShapeType != ST_OutputShapeTypeUnset {
		_gddd = append(_gddd, "\u0053T\u005fO\u0075\u0074\u0070\u0075\u0074S\u0068\u0061p\u0065\u0054\u0079\u0070\u0065")
	}
	if len(_gddd) > 1 {
		return _e.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _gddd)
	}
	return nil
}
func (_aabcf ST_ConnectorRouting) Validate() error { return _aabcf.ValidateWithPath("") }

type ST_FlowDirection byte

func NewStyleDefHdr() *StyleDefHdr {
	_gcbf := &StyleDefHdr{}
	_gcbf.CT_StyleDefinitionHeader = *NewCT_StyleDefinitionHeader()
	return _gcbf
}
func (_dggg ST_AnimLvlStr) ValidateWithPath(path string) error {
	switch _dggg {
	case 0, 1, 2, 3:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dggg))
	}
	return nil
}

const (
	ST_TextDirectionUnset ST_TextDirection = 0
	ST_TextDirectionFromT ST_TextDirection = 1
	ST_TextDirectionFromB ST_TextDirection = 2
)

type ST_TextAnchorHorizontal byte
type ST_Booleans []bool

func (_fgga *ST_AlgorithmType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_fgga = 0
	case "\u0063o\u006d\u0070\u006f\u0073\u0069\u0074e":
		*_fgga = 1
	case "\u0063\u006f\u006e\u006e":
		*_fgga = 2
	case "\u0063\u0079\u0063l\u0065":
		*_fgga = 3
	case "\u0068i\u0065\u0072\u0043\u0068\u0069\u006cd":
		*_fgga = 4
	case "\u0068\u0069\u0065\u0072\u0052\u006f\u006f\u0074":
		*_fgga = 5
	case "\u0070\u0079\u0072\u0061":
		*_fgga = 6
	case "\u006c\u0069\u006e":
		*_fgga = 7
	case "\u0073\u0070":
		*_fgga = 8
	case "\u0074\u0078":
		*_fgga = 9
	case "\u0073\u006e\u0061k\u0065":
		*_fgga = 10
	}
	return nil
}
func (_egf *CT_ColorTransformHeader) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064"}, Value: _e.Sprintf("\u0025\u0076", _egf.UniqueIdAttr)})
	if _egf.MinVerAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u006d\u0069\u006e\u0056\u0065\u0072"}, Value: _e.Sprintf("\u0025\u0076", *_egf.MinVerAttr)})
	}
	if _egf.ResIdAttr != nil {
		start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0072\u0065\u0073I\u0064"}, Value: _e.Sprintf("\u0025\u0076", *_egf.ResIdAttr)})
	}
	e.EncodeToken(start)
	_dacc := _a.StartElement{Name: _a.Name{Local: "\u0074\u0069\u0074l\u0065"}}
	for _, _aea := range _egf.Title {
		e.EncodeElement(_aea, _dacc)
	}
	_dbee := _a.StartElement{Name: _a.Name{Local: "\u0064\u0065\u0073\u0063"}}
	for _, _ceba := range _egf.Desc {
		e.EncodeElement(_ceba, _dbee)
	}
	if _egf.CatLst != nil {
		_eddb := _a.StartElement{Name: _a.Name{Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_egf.CatLst, _eddb)
	}
	if _egf.ExtLst != nil {
		_dea := _a.StartElement{Name: _a.Name{Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_egf.ExtLst, _dea)
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Algorithm and its children
func (_bba *CT_Algorithm) Validate() error {
	return _bba.ValidateWithPath("\u0043\u0054\u005fA\u006c\u0067\u006f\u0072\u0069\u0074\u0068\u006d")
}
func (_fbfafg *CT_StyleDefinition) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	for _, _egfd := range start.Attr {
		if _egfd.Name.Local == "\u0075\u006e\u0069\u0071\u0075\u0065\u0049\u0064" {
			_cagf := _egfd.Value
			_fbfafg.UniqueIdAttr = &_cagf
			continue
		}
		if _egfd.Name.Local == "\u006d\u0069\u006e\u0056\u0065\u0072" {
			_bffg := _egfd.Value
			_fbfafg.MinVerAttr = &_bffg
			continue
		}
	}
_bdfa:
	for {
		_cfbd, _adedb := d.Token()
		if _adedb != nil {
			return _adedb
		}
		switch _fcgc := _cfbd.(type) {
		case _a.StartElement:
			switch _fcgc.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0074\u0069\u0074l\u0065"}:
				_ebcf := NewCT_SDName()
				if _dbde := d.DecodeElement(_ebcf, &_fcgc); _dbde != nil {
					return _dbde
				}
				_fbfafg.Title = append(_fbfafg.Title, _ebcf)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0065\u0073\u0063"}:
				_gfbd := NewCT_SDDescription()
				if _ceeb := d.DecodeElement(_gfbd, &_fcgc); _ceeb != nil {
					return _ceeb
				}
				_fbfafg.Desc = append(_fbfafg.Desc, _gfbd)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0061\u0074\u004c\u0073\u0074"}:
				_fbfafg.CatLst = NewCT_SDCategories()
				if _ggff := d.DecodeElement(_fbfafg.CatLst, &_fcgc); _ggff != nil {
					return _ggff
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073c\u0065\u006e\u0065\u0033\u0064"}:
				_fbfafg.Scene3d = _b.NewCT_Scene3D()
				if _ffggg := d.DecodeElement(_fbfafg.Scene3d, &_fcgc); _ffggg != nil {
					return _ffggg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0073\u0074\u0079\u006c\u0065\u004c\u0062\u006c"}:
				_dcbb := NewCT_StyleLabel()
				if _cgegg := d.DecodeElement(_dcbb, &_fcgc); _cgegg != nil {
					return _cgegg
				}
				_fbfafg.StyleLbl = append(_fbfafg.StyleLbl, _dcbb)
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fbfafg.ExtLst = _b.NewCT_OfficeArtExtensionList()
				if _gdeaf := d.DecodeElement(_fbfafg.ExtLst, &_fcgc); _gdeaf != nil {
					return _gdeaf
				}
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065\u0044e\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0020\u0025\u0076", _fcgc.Name)
				if _egee := d.Skip(); _egee != nil {
					return _egee
				}
			}
		case _a.EndElement:
			break _bdfa
		case _a.CharData:
		}
	}
	return nil
}
func NewCT_PresentationOf() *CT_PresentationOf { _bbea := &CT_PresentationOf{}; return _bbea }
func (_eabb *ST_CxnType) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_eabb = 0
	case "\u0070\u0061\u0072O\u0066":
		*_eabb = 1
	case "\u0070\u0072\u0065\u0073\u004f\u0066":
		*_eabb = 2
	case "\u0070r\u0065\u0073\u0050\u0061\u0072\u004ff":
		*_eabb = 3
	case "\u0075\u006e\u006b\u006eow\u006e\u0052\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070":
		*_eabb = 4
	}
	return nil
}
func (_abdcc *ColorsDef) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0064\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _a.Attr{Name: _a.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063o\u006c\u006f\u0072\u0073\u0044\u0065f"
	return _abdcc.CT_ColorTransform.MarshalXML(e, start)
}

const (
	ST_TextAnchorVerticalUnset ST_TextAnchorVertical = 0
	ST_TextAnchorVerticalT     ST_TextAnchorVertical = 1
	ST_TextAnchorVerticalMid   ST_TextAnchorVertical = 2
	ST_TextAnchorVerticalB     ST_TextAnchorVertical = 3
)
const (
	ST_PyramidAccentTextMarginUnset ST_PyramidAccentTextMargin = 0
	ST_PyramidAccentTextMarginStep  ST_PyramidAccentTextMargin = 1
	ST_PyramidAccentTextMarginStack ST_PyramidAccentTextMargin = 2
)

type ST_HueDir byte

const (
	ST_ClrAppMethodUnset  ST_ClrAppMethod = 0
	ST_ClrAppMethodSpan   ST_ClrAppMethod = 1
	ST_ClrAppMethodCycle  ST_ClrAppMethod = 2
	ST_ClrAppMethodRepeat ST_ClrAppMethod = 3
)

type ST_LinearDirection byte

// Validate validates the CT_ColorTransformHeaderLst and its children
func (_gfe *CT_ColorTransformHeaderLst) Validate() error {
	return _gfe.ValidateWithPath("\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061n\u0073\u0066\u006f\u0072\u006d\u0048\u0065\u0061\u0064\u0065r\u004c\u0073\u0074")
}
func (_cgbd *CT_LayoutVariablePropertySet) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_adag:
	for {
		_gfgb, _dgbg := d.Token()
		if _dgbg != nil {
			return _dgbg
		}
		switch _bedbg := _gfgb.(type) {
		case _a.StartElement:
			switch _bedbg.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u006f\u0072\u0067\u0043\u0068\u0061\u0072\u0074"}:
				_cgbd.OrgChart = NewCT_OrgChart()
				if _ccae := d.DecodeElement(_cgbd.OrgChart, &_bedbg); _ccae != nil {
					return _ccae
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u004da\u0078"}:
				_cgbd.ChMax = NewCT_ChildMax()
				if _faeb := d.DecodeElement(_cgbd.ChMax, &_bedbg); _faeb != nil {
					return _faeb
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0063\u0068\u0050\u0072\u0065\u0066"}:
				_cgbd.ChPref = NewCT_ChildPref()
				if _ccaf := d.DecodeElement(_cgbd.ChPref, &_bedbg); _ccaf != nil {
					return _ccaf
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0062\u0075\u006c\u006c\u0065\u0074\u0045\u006e\u0061\u0062\u006c\u0065\u0064"}:
				_cgbd.BulletEnabled = NewCT_BulletEnabled()
				if _aeee := d.DecodeElement(_cgbd.BulletEnabled, &_bedbg); _aeee != nil {
					return _aeee
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0064\u0069\u0072"}:
				_cgbd.Dir = NewCT_Direction()
				if _ebfg := d.DecodeElement(_cgbd.Dir, &_bedbg); _ebfg != nil {
					return _ebfg
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0068\u0069\u0065\u0072\u0042\u0072\u0061\u006e\u0063\u0068"}:
				_cgbd.HierBranch = NewCT_HierBranchStyle()
				if _cded := d.DecodeElement(_cgbd.HierBranch, &_bedbg); _cded != nil {
					return _cded
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061n\u0069\u006d\u004f\u006e\u0065"}:
				_cgbd.AnimOne = NewCT_AnimOne()
				if _gfgf := d.DecodeElement(_cgbd.AnimOne, &_bedbg); _gfgf != nil {
					return _gfgf
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0061n\u0069\u006d\u004c\u0076\u006c"}:
				_cgbd.AnimLvl = NewCT_AnimLvl()
				if _ccgfe := d.DecodeElement(_cgbd.AnimLvl, &_bedbg); _ccgfe != nil {
					return _ccgfe
				}
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072\u0065\u0073\u0069\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073"}:
				_cgbd.ResizeHandles = NewCT_ResizeHandles()
				if _afege := d.DecodeElement(_cgbd.ResizeHandles, &_bedbg); _afege != nil {
					return _afege
				}
			default:
				_ag.Log.Debug("\u0073k\u0069\u0070\u0070\u0069\u006e\u0067\u0020un\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006de\u006e\u0074 \u006f\u006e\u0020C\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u0056\u0061\u0072\u0069\u0061\u0062\u006c\u0065P\u0072\u006fpe\u0072\u0074\u0079S\u0065\u0074\u0020\u0025\u0076", _bedbg.Name)
				if _cfda := d.Skip(); _cfda != nil {
					return _cfda
				}
			}
		case _a.EndElement:
			break _adag
		case _a.CharData:
		}
	}
	return nil
}
func (_cgffb ST_OutputShapeType) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_gdfe := _a.Attr{}
	_gdfe.Name = name
	switch _cgffb {
	case ST_OutputShapeTypeUnset:
		_gdfe.Value = ""
	case ST_OutputShapeTypeNone:
		_gdfe.Value = "\u006e\u006f\u006e\u0065"
	case ST_OutputShapeTypeConn:
		_gdfe.Value = "\u0063\u006f\u006e\u006e"
	}
	return _gdfe, nil
}

const (
	ST_VerticalAlignmentUnset ST_VerticalAlignment = 0
	ST_VerticalAlignmentT     ST_VerticalAlignment = 1
	ST_VerticalAlignmentMid   ST_VerticalAlignment = 2
	ST_VerticalAlignmentB     ST_VerticalAlignment = 3
	ST_VerticalAlignmentNone  ST_VerticalAlignment = 4
)

// ValidateWithPath validates the CT_AdjLst and its children, prefixing error messages with path
func (_cdc *CT_AdjLst) ValidateWithPath(path string) error {
	for _gg, _beg := range _cdc.Adj {
		if _edf := _beg.ValidateWithPath(_e.Sprintf("\u0025\u0073\u002f\u0041\u0064\u006a\u005b\u0025\u0064\u005d", path, _gg)); _edf != nil {
			return _edf
		}
	}
	return nil
}
func (_cdbab ST_AnimLvlStr) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_bdaa := _a.Attr{}
	_bdaa.Name = name
	switch _cdbab {
	case ST_AnimLvlStrUnset:
		_bdaa.Value = ""
	case ST_AnimLvlStrNone:
		_bdaa.Value = "\u006e\u006f\u006e\u0065"
	case ST_AnimLvlStrLvl:
		_bdaa.Value = "\u006c\u0076\u006c"
	case ST_AnimLvlStrCtr:
		_bdaa.Value = "\u0063\u0074\u0072"
	}
	return _bdaa, nil
}
func (_cbagd ST_ParameterVal) String() string {
	if _cbagd.ST_DiagramHorizontalAlignment != ST_DiagramHorizontalAlignmentUnset {
		return _cbagd.ST_DiagramHorizontalAlignment.String()
	}
	if _cbagd.ST_VerticalAlignment != ST_VerticalAlignmentUnset {
		return _cbagd.ST_VerticalAlignment.String()
	}
	if _cbagd.ST_ChildDirection != ST_ChildDirectionUnset {
		return _cbagd.ST_ChildDirection.String()
	}
	if _cbagd.ST_ChildAlignment != ST_ChildAlignmentUnset {
		return _cbagd.ST_ChildAlignment.String()
	}
	if _cbagd.ST_SecondaryChildAlignment != ST_SecondaryChildAlignmentUnset {
		return _cbagd.ST_SecondaryChildAlignment.String()
	}
	if _cbagd.ST_LinearDirection != ST_LinearDirectionUnset {
		return _cbagd.ST_LinearDirection.String()
	}
	if _cbagd.ST_SecondaryLinearDirection != ST_SecondaryLinearDirectionUnset {
		return _cbagd.ST_SecondaryLinearDirection.String()
	}
	if _cbagd.ST_StartingElement != ST_StartingElementUnset {
		return _cbagd.ST_StartingElement.String()
	}
	if _cbagd.ST_BendPoint != ST_BendPointUnset {
		return _cbagd.ST_BendPoint.String()
	}
	if _cbagd.ST_ConnectorRouting != ST_ConnectorRoutingUnset {
		return _cbagd.ST_ConnectorRouting.String()
	}
	if _cbagd.ST_ArrowheadStyle != ST_ArrowheadStyleUnset {
		return _cbagd.ST_ArrowheadStyle.String()
	}
	if _cbagd.ST_ConnectorDimension != ST_ConnectorDimensionUnset {
		return _cbagd.ST_ConnectorDimension.String()
	}
	if _cbagd.ST_RotationPath != ST_RotationPathUnset {
		return _cbagd.ST_RotationPath.String()
	}
	if _cbagd.ST_CenterShapeMapping != ST_CenterShapeMappingUnset {
		return _cbagd.ST_CenterShapeMapping.String()
	}
	if _cbagd.ST_NodeHorizontalAlignment != ST_NodeHorizontalAlignmentUnset {
		return _cbagd.ST_NodeHorizontalAlignment.String()
	}
	if _cbagd.ST_NodeVerticalAlignment != ST_NodeVerticalAlignmentUnset {
		return _cbagd.ST_NodeVerticalAlignment.String()
	}
	if _cbagd.ST_FallbackDimension != ST_FallbackDimensionUnset {
		return _cbagd.ST_FallbackDimension.String()
	}
	if _cbagd.ST_TextDirection != ST_TextDirectionUnset {
		return _cbagd.ST_TextDirection.String()
	}
	if _cbagd.ST_PyramidAccentPosition != ST_PyramidAccentPositionUnset {
		return _cbagd.ST_PyramidAccentPosition.String()
	}
	if _cbagd.ST_PyramidAccentTextMargin != ST_PyramidAccentTextMarginUnset {
		return _cbagd.ST_PyramidAccentTextMargin.String()
	}
	if _cbagd.ST_TextBlockDirection != ST_TextBlockDirectionUnset {
		return _cbagd.ST_TextBlockDirection.String()
	}
	if _cbagd.ST_TextAnchorHorizontal != ST_TextAnchorHorizontalUnset {
		return _cbagd.ST_TextAnchorHorizontal.String()
	}
	if _cbagd.ST_TextAnchorVertical != ST_TextAnchorVerticalUnset {
		return _cbagd.ST_TextAnchorVertical.String()
	}
	if _cbagd.ST_DiagramTextAlignment != ST_DiagramTextAlignmentUnset {
		return _cbagd.ST_DiagramTextAlignment.String()
	}
	if _cbagd.ST_AutoTextRotation != ST_AutoTextRotationUnset {
		return _cbagd.ST_AutoTextRotation.String()
	}
	if _cbagd.ST_GrowDirection != ST_GrowDirectionUnset {
		return _cbagd.ST_GrowDirection.String()
	}
	if _cbagd.ST_FlowDirection != ST_FlowDirectionUnset {
		return _cbagd.ST_FlowDirection.String()
	}
	if _cbagd.ST_ContinueDirection != ST_ContinueDirectionUnset {
		return _cbagd.ST_ContinueDirection.String()
	}
	if _cbagd.ST_Breakpoint != ST_BreakpointUnset {
		return _cbagd.ST_Breakpoint.String()
	}
	if _cbagd.ST_Offset != ST_OffsetUnset {
		return _cbagd.ST_Offset.String()
	}
	if _cbagd.ST_HierarchyAlignment != ST_HierarchyAlignmentUnset {
		return _cbagd.ST_HierarchyAlignment.String()
	}
	if _cbagd.Int32 != nil {
		return _e.Sprintf("\u0025\u0076", *_cbagd.Int32)
	}
	if _cbagd.Float64 != nil {
		return _e.Sprintf("\u0025\u0076", *_cbagd.Float64)
	}
	if _cbagd.Bool != nil {
		return _e.Sprintf("\u0025\u0076", *_cbagd.Bool)
	}
	if _cbagd.StringVal != nil {
		return _e.Sprintf("\u0025\u0076", *_cbagd.StringVal)
	}
	if _cbagd.ST_ConnectorPoint != ST_ConnectorPointUnset {
		return _cbagd.ST_ConnectorPoint.String()
	}
	return ""
}
func (_gebeg ST_CenterShapeMapping) ValidateWithPath(path string) error {
	switch _gebeg {
	case 0, 1, 2:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gebeg))
	}
	return nil
}

const (
	ST_SecondaryLinearDirectionUnset ST_SecondaryLinearDirection = 0
	ST_SecondaryLinearDirectionNone  ST_SecondaryLinearDirection = 1
	ST_SecondaryLinearDirectionFromL ST_SecondaryLinearDirection = 2
	ST_SecondaryLinearDirectionFromR ST_SecondaryLinearDirection = 3
	ST_SecondaryLinearDirectionFromT ST_SecondaryLinearDirection = 4
	ST_SecondaryLinearDirectionFromB ST_SecondaryLinearDirection = 5
)

type ST_ChildDirection byte

const (
	ST_SecondaryChildAlignmentUnset ST_SecondaryChildAlignment = 0
	ST_SecondaryChildAlignmentNone  ST_SecondaryChildAlignment = 1
	ST_SecondaryChildAlignmentT     ST_SecondaryChildAlignment = 2
	ST_SecondaryChildAlignmentB     ST_SecondaryChildAlignment = 3
	ST_SecondaryChildAlignmentL     ST_SecondaryChildAlignment = 4
	ST_SecondaryChildAlignmentR     ST_SecondaryChildAlignment = 5
)

func (_dabag ST_ConstraintType) Validate() error { return _dabag.ValidateWithPath("") }
func NewCT_ForEachChoice() *CT_ForEachChoice     { _cgdf := &CT_ForEachChoice{}; return _cgdf }
func (_bedda ST_SecondaryLinearDirection) ValidateWithPath(path string) error {
	switch _bedda {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bedda))
	}
	return nil
}
func (_cdbe ST_NodeVerticalAlignment) Validate() error { return _cdbe.ValidateWithPath("") }

const (
	ST_CxnTypeUnset               ST_CxnType = 0
	ST_CxnTypeParOf               ST_CxnType = 1
	ST_CxnTypePresOf              ST_CxnType = 2
	ST_CxnTypePresParOf           ST_CxnType = 3
	ST_CxnTypeUnknownRelationship ST_CxnType = 4
)

func (_abda *ST_TextBlockDirection) UnmarshalXMLAttr(attr _a.Attr) error {
	switch attr.Value {
	case "":
		*_abda = 0
	case "\u0068\u006f\u0072\u007a":
		*_abda = 1
	case "\u0076\u0065\u0072\u0074":
		*_abda = 2
	}
	return nil
}

// ValidateWithPath validates the CT_ElemPropSet and its children, prefixing error messages with path
func (_fecd *CT_ElemPropSet) ValidateWithPath(path string) error {
	if _fecd.PresAssocIDAttr != nil {
		if _dge := _fecd.PresAssocIDAttr.ValidateWithPath(path + "\u002f\u0050r\u0065\u0073\u0041s\u0073\u006f\u0063\u0049\u0044\u0041\u0074\u0074\u0072"); _dge != nil {
			return _dge
		}
	}
	if _fecd.CustScaleXAttr != nil {
		if _bdge := _fecd.CustScaleXAttr.ValidateWithPath(path + "\u002fC\u0075s\u0074\u0053\u0063\u0061\u006c\u0065\u0058\u0041\u0074\u0074\u0072"); _bdge != nil {
			return _bdge
		}
	}
	if _fecd.CustScaleYAttr != nil {
		if _fbgcc := _fecd.CustScaleYAttr.ValidateWithPath(path + "\u002fC\u0075s\u0074\u0053\u0063\u0061\u006c\u0065\u0059\u0041\u0074\u0074\u0072"); _fbgcc != nil {
			return _fbgcc
		}
	}
	if _fecd.CustLinFactXAttr != nil {
		if _dbaa := _fecd.CustLinFactXAttr.ValidateWithPath(path + "\u002f\u0043\u0075\u0073\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074X\u0041\u0074\u0074\u0072"); _dbaa != nil {
			return _dbaa
		}
	}
	if _fecd.CustLinFactYAttr != nil {
		if _ggda := _fecd.CustLinFactYAttr.ValidateWithPath(path + "\u002f\u0043\u0075\u0073\u0074\u004c\u0069\u006e\u0046\u0061\u0063\u0074Y\u0041\u0074\u0074\u0072"); _ggda != nil {
			return _ggda
		}
	}
	if _fecd.CustLinFactNeighborXAttr != nil {
		if _cgadd := _fecd.CustLinFactNeighborXAttr.ValidateWithPath(path + "\u002fC\u0075\u0073\u0074\u004ci\u006e\u0046\u0061\u0063\u0074N\u0065i\u0067h\u0062\u006f\u0072\u0058\u0041\u0074\u0074r"); _cgadd != nil {
			return _cgadd
		}
	}
	if _fecd.CustLinFactNeighborYAttr != nil {
		if _bcda := _fecd.CustLinFactNeighborYAttr.ValidateWithPath(path + "\u002fC\u0075\u0073\u0074\u004ci\u006e\u0046\u0061\u0063\u0074N\u0065i\u0067h\u0062\u006f\u0072\u0059\u0041\u0074\u0074r"); _bcda != nil {
			return _bcda
		}
	}
	if _fecd.CustRadScaleRadAttr != nil {
		if _feda := _fecd.CustRadScaleRadAttr.ValidateWithPath(path + "/\u0043u\u0073\u0074\u0052\u0061\u0064\u0053\u0063\u0061l\u0065\u0052\u0061\u0064At\u0074\u0072"); _feda != nil {
			return _feda
		}
	}
	if _fecd.CustRadScaleIncAttr != nil {
		if _gegaf := _fecd.CustRadScaleIncAttr.ValidateWithPath(path + "/\u0043u\u0073\u0074\u0052\u0061\u0064\u0053\u0063\u0061l\u0065\u0049\u006e\u0063At\u0074\u0072"); _gegaf != nil {
			return _gegaf
		}
	}
	if _fecd.PresLayoutVars != nil {
		if _ebefb := _fecd.PresLayoutVars.ValidateWithPath(path + "\u002fP\u0072e\u0073\u004c\u0061\u0079\u006f\u0075\u0074\u0056\u0061\u0072\u0073"); _ebefb != nil {
			return _ebefb
		}
	}
	if _fecd.Style != nil {
		if _fcdb := _fecd.Style.ValidateWithPath(path + "\u002f\u0053\u0074\u0079\u006c\u0065"); _fcdb != nil {
			return _fcdb
		}
	}
	return nil
}
func (_aeaeb ST_ConnectorPoint) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_aeaeb.String(), start)
}

type CT_StyleDefinition struct {

	// Unique Style ID
	UniqueIdAttr *string

	// Minimum Version
	MinVerAttr *string

	// Title
	Title []*CT_SDName

	// Style Label Description
	Desc []*CT_SDDescription

	// Category List
	CatLst *CT_SDCategories

	// 3-D Scene
	Scene3d *_b.CT_Scene3D

	// Style Label
	StyleLbl []*CT_StyleLabel
	ExtLst   *_b.CT_OfficeArtExtensionList
}

func (_gcdd *CT_Constraints) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	e.EncodeToken(start)
	if _gcdd.Constr != nil {
		_cag := _a.StartElement{Name: _a.Name{Local: "\u0063\u006f\u006e\u0073\u0074\u0072"}}
		for _, _aegb := range _gcdd.Constr {
			e.EncodeElement(_aegb, _cag)
		}
	}
	e.EncodeToken(_a.EndElement{Name: start.Name})
	return nil
}

const (
	ST_ConstraintRelationshipUnset ST_ConstraintRelationship = 0
	ST_ConstraintRelationshipSelf  ST_ConstraintRelationship = 1
	ST_ConstraintRelationshipCh    ST_ConstraintRelationship = 2
	ST_ConstraintRelationshipDes   ST_ConstraintRelationship = 3
)
const (
	ST_NodeVerticalAlignmentUnset ST_NodeVerticalAlignment = 0
	ST_NodeVerticalAlignmentT     ST_NodeVerticalAlignment = 1
	ST_NodeVerticalAlignmentMid   ST_NodeVerticalAlignment = 2
	ST_NodeVerticalAlignmentB     ST_NodeVerticalAlignment = 3
)

func (_agbf *CT_Rules) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
_aacg:
	for {
		_faga, _ggc := d.Token()
		if _ggc != nil {
			return _ggc
		}
		switch _cggd := _faga.(type) {
		case _a.StartElement:
			switch _cggd.Name {
			case _a.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", Local: "\u0072\u0075\u006c\u0065"}:
				_bgbg := NewCT_NumericRule()
				if _dae := d.DecodeElement(_bgbg, &_cggd); _dae != nil {
					return _dae
				}
				_agbf.Rule = append(_agbf.Rule, _bgbg)
			default:
				_ag.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052\u0075\u006c\u0065\u0073\u0020\u0025\u0076", _cggd.Name)
				if _gbfc := d.Skip(); _gbfc != nil {
					return _gbfc
				}
			}
		case _a.EndElement:
			break _aacg
		case _a.CharData:
		}
	}
	return nil
}
func NewCT_SDDescription() *CT_SDDescription { _bafbf := &CT_SDDescription{}; return _bafbf }
func (_efdab ST_AnimLvlStr) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_efdab.String(), start)
}

// ValidateWithPath validates the CT_Colors and its children, prefixing error messages with path
func (_gfeb *CT_Colors) ValidateWithPath(path string) error {
	if _eag := _gfeb.MethAttr.ValidateWithPath(path + "\u002fM\u0065\u0074\u0068\u0041\u0074\u0074r"); _eag != nil {
		return _eag
	}
	if _gab := _gfeb.HueDirAttr.ValidateWithPath(path + "/\u0048\u0075\u0065\u0044\u0069\u0072\u0041\u0074\u0074\u0072"); _gab != nil {
		return _gab
	}
	for _ecbd, _gged := range _gfeb.EG_ColorChoice {
		if _bedb := _gged.ValidateWithPath(_e.Sprintf("%\u0073\u002f\u0045\u0047_C\u006fl\u006f\u0072\u0043\u0068\u006fi\u0063\u0065\u005b\u0025\u0064\u005d", path, _ecbd)); _bedb != nil {
			return _bedb
		}
	}
	return nil
}
func (_cade *ST_ContinueDirection) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_fgece, _dffgf := d.Token()
	if _dffgf != nil {
		return _dffgf
	}
	if _daagd, _faefe := _fgece.(_a.EndElement); _faefe && _daagd.Name == start.Name {
		*_cade = 1
		return nil
	}
	if _bbfc, _ageaa := _fgece.(_a.CharData); !_ageaa {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _fgece)
	} else {
		switch string(_bbfc) {
		case "":
			*_cade = 0
		case "\u0072\u0065\u0076\u0044\u0069\u0072":
			*_cade = 1
		case "\u0073a\u006d\u0065\u0044\u0069\u0072":
			*_cade = 2
		}
	}
	_fgece, _dffgf = d.Token()
	if _dffgf != nil {
		return _dffgf
	}
	if _fcbg, _bdff := _fgece.(_a.EndElement); _bdff && _fcbg.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _fgece)
}
func (_ccgfba ST_PyramidAccentPosition) MarshalXMLAttr(name _a.Name) (_a.Attr, error) {
	_dbffb := _a.Attr{}
	_dbffb.Name = name
	switch _ccgfba {
	case ST_PyramidAccentPositionUnset:
		_dbffb.Value = ""
	case ST_PyramidAccentPositionBef:
		_dbffb.Value = "\u0062\u0065\u0066"
	case ST_PyramidAccentPositionAft:
		_dbffb.Value = "\u0061\u0066\u0074"
	}
	return _dbffb, nil
}

type CT_Name struct {

	// Language
	LangAttr *string

	// Value
	ValAttr string
}
type ST_StartingElement byte

func (_fedd *ST_DiagramHorizontalAlignment) UnmarshalXML(d *_a.Decoder, start _a.StartElement) error {
	_baba, _ecdg := d.Token()
	if _ecdg != nil {
		return _ecdg
	}
	if _fafe, _degdaa := _baba.(_a.EndElement); _degdaa && _fafe.Name == start.Name {
		*_fedd = 1
		return nil
	}
	if _fcfg, _ebdda := _baba.(_a.CharData); !_ebdda {
		return _e.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _baba)
	} else {
		switch string(_fcfg) {
		case "":
			*_fedd = 0
		case "\u006c":
			*_fedd = 1
		case "\u0063\u0074\u0072":
			*_fedd = 2
		case "\u0072":
			*_fedd = 3
		case "\u006e\u006f\u006e\u0065":
			*_fedd = 4
		}
	}
	_baba, _ecdg = d.Token()
	if _ecdg != nil {
		return _ecdg
	}
	if _ccda, _ecca := _baba.(_a.EndElement); _ecca && _ccda.Name == start.Name {
		return nil
	}
	return _e.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _baba)
}
func (_gaace ST_AlgorithmType) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_gaace.String(), start)
}
func (_dddg ST_NodeVerticalAlignment) ValidateWithPath(path string) error {
	switch _dddg {
	case 0, 1, 2, 3:
	default:
		return _e.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dddg))
	}
	return nil
}
func init() {
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0043\u0054\u004e\u0061\u006de", NewCT_CTName)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054_\u0043\u0054\u0044e\u0073\u0063\u0072\u0069\u0070\u0074\u0069\u006f\u006e", NewCT_CTDescription)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u0054\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079", NewCT_CTCategory)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005fC\u0054\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073", NewCT_CTCategories)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0043\u006f\u006c\u006f\u0072s", NewCT_Colors)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005fC\u0054\u0053\u0074\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c", NewCT_CTStyleLabel)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061\u006es\u0066\u006f\u0072\u006d", NewCT_ColorTransform)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fCo\u006c\u006f\u0072\u0054\u0072\u0061\u006e\u0073\u0066\u006f\u0072\u006d\u0048\u0065\u0061\u0064\u0065\u0072", NewCT_ColorTransformHeader)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u006f\u006c\u006f\u0072\u0054\u0072\u0061n\u0073\u0066\u006f\u0072\u006d\u0048\u0065\u0061\u0064\u0065r\u004c\u0073\u0074", NewCT_ColorTransformHeaderLst)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fP\u0074", NewCT_Pt)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0050\u0074\u004c\u0069\u0073t", NewCT_PtList)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u0078\u006e", NewCT_Cxn)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u0078\u006e\u004c\u0069\u0073\u0074", NewCT_CxnList)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fD\u0061\u0074\u0061\u004d\u006f\u0064\u0065\u006c", NewCT_DataModel)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074", NewCT_Constraint)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u006f\u006e\u0073\u0074\u0072a\u0069\u006e\u0074\u0073", NewCT_Constraints)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u004e\u0075\u006d\u0065\u0072\u0069c\u0052\u0075\u006c\u0065", NewCT_NumericRule)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0052\u0075\u006c\u0065\u0073", NewCT_Rules)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u004f\u0066", NewCT_PresentationOf)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0041\u0064\u006a", NewCT_Adj)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0041\u0064\u006a\u004c\u0073t", NewCT_AdjLst)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065", NewCT_Shape)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fP\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072", NewCT_Parameter)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fA\u006c\u0067\u006f\u0072\u0069\u0074\u0068\u006d", NewCT_Algorithm)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u004e\u006f\u0064\u0065", NewCT_LayoutNode)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0046\u006f\u0072\u0045\u0061\u0063\u0068", NewCT_ForEach)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0057\u0068\u0065\u006e", NewCT_When)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fO\u0074\u0068\u0065\u0072\u0077\u0069\u0073\u0065", NewCT_Otherwise)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0043\u0068\u006f\u006f\u0073e", NewCT_Choose)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0053\u0061\u006d\u0070\u006c\u0065\u0044\u0061\u0074\u0061", NewCT_SampleData)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "C\u0054\u005f\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079", NewCT_Category)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073", NewCT_Categories)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u004e\u0061\u006d\u0065", NewCT_Name)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0044\u0065\u0073\u0063\u0072\u0069p\u0074\u0069\u006f\u006e", NewCT_Description)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "C\u0054_\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044e\u0066\u0069\u006e\u0069ti\u006f\u006e", NewCT_DiagramDefinition)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044e\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065a\u0064\u0065\u0072", NewCT_DiagramDefinitionHeader)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054_\u0044\u0069\u0061\u0067\u0072\u0061\u006d\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u0048\u0065\u0061\u0064\u0065rL\u0073\u0074", NewCT_DiagramDefinitionHeaderLst)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0052\u0065\u006c\u0049\u0064s", NewCT_RelIds)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0045\u006c\u0065\u006d\u0050\u0072o\u0070\u0053\u0065\u0074", NewCT_ElemPropSet)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "C\u0054\u005f\u004f\u0072\u0067\u0043\u0068\u0061\u0072\u0074", NewCT_OrgChart)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "C\u0054\u005f\u0043\u0068\u0069\u006c\u0064\u004d\u0061\u0078", NewCT_ChildMax)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fC\u0068\u0069\u006c\u0064\u0050\u0072\u0065\u0066", NewCT_ChildPref)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054_\u0042\u0075\u006cl\u0065\u0074\u0045\u006e\u0061\u0062\u006c\u0065\u0064", NewCT_BulletEnabled)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fD\u0069\u0072\u0065\u0063\u0074\u0069\u006f\u006e", NewCT_Direction)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005fH\u0069\u0065\u0072\u0042\u0072a\u006e\u0063h\u0053\u0074\u0079\u006c\u0065", NewCT_HierBranchStyle)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004f\u006e\u0065", NewCT_AnimOne)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0041\u006e\u0069\u006d\u004c\u0076\u006c", NewCT_AnimLvl)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054_\u0052\u0065\u0073i\u007a\u0065\u0048\u0061\u006e\u0064\u006c\u0065\u0073", NewCT_ResizeHandles)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u004ca\u0079\u006f\u0075\u0074\u0056\u0061\u0072\u0069\u0061\u0062l\u0065P\u0072\u006f\u0070\u0065\u0072\u0074\u0079S\u0065\u0074", NewCT_LayoutVariablePropertySet)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0053\u0044\u004e\u0061\u006de", NewCT_SDName)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054_\u0053\u0044\u0044e\u0073\u0063\u0072\u0069\u0070\u0074\u0069\u006f\u006e", NewCT_SDDescription)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0053\u0044\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0079", NewCT_SDCategory)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005fS\u0044\u0043\u0061\u0074\u0065\u0067\u006f\u0072\u0069\u0065\u0073", NewCT_SDCategories)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005fT\u0065\u0078\u0074\u0050\u0072\u006f\u0070\u0073", NewCT_TextProps)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065\u004c\u0061\u0062\u0065\u006c", NewCT_StyleLabel)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005fS\u0074\u0079\u006c\u0065\u0044e\u0066\u0069n\u0069\u0074\u0069\u006f\u006e", NewCT_StyleDefinition)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0043T\u005f\u0053\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0069\u006ei\u0074\u0069\u006f\u006e\u0048\u0065\u0061\u0064\u0065\u0072", NewCT_StyleDefinitionHeader)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "C\u0054\u005f\u0053\u0074\u0079\u006ce\u0044\u0065\u0066\u0069\u006e\u0069\u0074\u0069\u006fn\u0048\u0065\u0061d\u0065r\u004c\u0073\u0074", NewCT_StyleDefinitionHeaderLst)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0063o\u006c\u006f\u0072\u0073\u0044\u0065f", NewColorsDef)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0063\u006f\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072", NewColorsDefHdr)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0063o\u006co\u0072\u0073\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074", NewColorsDefHdrLst)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0064a\u0074\u0061\u004d\u006f\u0064\u0065l", NewDataModel)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u006ca\u0079\u006f\u0075\u0074\u0044\u0065f", NewLayoutDef)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u006c\u0061\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072", NewLayoutDefHdr)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u006ca\u0079o\u0075\u0074\u0044\u0065\u0066\u0048\u0064\u0072\u004c\u0073\u0074", NewLayoutDefHdrLst)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0072\u0065\u006c\u0049\u0064\u0073", NewRelIds)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0073\u0074\u0079\u006c\u0065\u0044\u0065\u0066", NewStyleDef)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "s\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048\u0064\u0072", NewStyleDefHdr)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0073\u0074\u0079\u006c\u0065\u0044\u0065\u0066\u0048d\u0072\u004c\u0073\u0074", NewStyleDefHdrLst)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "A\u0047\u005f\u0049\u0074er\u0061t\u006f\u0072\u0041\u0074\u0074r\u0069\u0062\u0075\u0074\u0065\u0073", NewAG_IteratorAttributes)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0041\u0047\u005fCo\u006e\u0073\u0074\u0072\u0061\u0069\u006e\u0074\u0041\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0073", NewAG_ConstraintAttributes)
	_f.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0064\u0069\u0061\u0067\u0072\u0061\u006d", "\u0041\u0047\u005f\u0043\u006f\u006e\u0073\u0074\u0072\u0061\u0069n\u0074\u0052\u0065\u0066\u0041\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0073", NewAG_ConstraintRefAttributes)
}

type ST_BendPoint byte

func (_fgbca ST_ContinueDirection) MarshalXML(e *_a.Encoder, start _a.StartElement) error {
	return e.EncodeElement(_fgbca.String(), start)
}

// ValidateWithPath validates the CT_When and its children, prefixing error messages with path
func (_gebec *CT_When) ValidateWithPath(path string) error {
	if _gebec.FuncAttr == ST_FunctionTypeUnset {
		return _e.Errorf("\u0025\u0073\u002f\u0046\u0075\u006e\u0063\u0041\u0074\u0074\u0072\u0020\u0069\u0073\u0020a\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _bagfa := _gebec.FuncAttr.ValidateWithPath(path + "\u002fF\u0075\u006e\u0063\u0041\u0074\u0074r"); _bagfa != nil {
		return _bagfa
	}
	if _gebec.ArgAttr != nil {
		if _dadea := _gebec.ArgAttr.ValidateWithPath(path + "\u002f\u0041\u0072\u0067\u0041\u0074\u0074\u0072"); _dadea != nil {
			return _dadea
		}
	}
	if _gebec.OpAttr == ST_FunctionOperatorUnset {
		return _e.Errorf("\u0025\u0073\u002f\u004f\u0070\u0041\u0074\u0074\u0072\u0020i\u0073\u0020\u0061\u0020\u006d\u0061\u006ed\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _fcag := _gebec.OpAttr.ValidateWithPath(path + "\u002fO\u0070\u0041\u0074\u0074\u0072"); _fcag != nil {
		return _fcag
	}
	if _eceba := _gebec.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _eceba != nil {
		return _eceba
	}
	for _cagg, _gbba := range _gebec.WhenChoice {
		if _aaga := _gbba.ValidateWithPath(_e.Sprintf("\u0025\u0073\u002f\u0057\u0068\u0065\u006e\u0043\u0068\u006f\u0069\u0063e\u005b\u0025\u0064\u005d", path, _cagg)); _aaga != nil {
			return _aaga
		}
	}
	return nil
}

type ST_TextAnchorVertical byte
type CT_DiagramDefinition struct {

	// Unique Identifier
	UniqueIdAttr *string

	// Minimum Version
	MinVerAttr *string

	// Default Style
	DefStyleAttr *string

	// Title
	Title []*CT_Name

	// Description
	Desc []*CT_Description

	// Category List
	CatLst *CT_Categories

	// Sample Data
	SampData *CT_SampleData

	// Style Data
	StyleData *CT_SampleData

	// Color Transform Sample Data
	ClrData *CT_SampleData

	// Layout Node
	LayoutNode *CT_LayoutNode
	ExtLst     *_b.CT_OfficeArtExtensionList
}
