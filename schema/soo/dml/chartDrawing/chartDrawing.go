//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chartDrawing

import (
	_c "encoding/xml"
	_g "fmt"
	_b "strconv"

	_gd "github.com/gou-jjjj/unioffice"
	_f "github.com/gou-jjjj/unioffice/common/logger"
	_e "github.com/gou-jjjj/unioffice/schema/soo/dml"
)

func (_cec *CT_GraphicFrame) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_cec.NvGraphicFramePr = NewCT_GraphicFrameNonVisual()
	_cec.Xfrm = _e.NewCT_Transform2D()
	_cec.Graphic = _e.NewGraphic()
	for _, _ga := range start.Attr {
		if _ga.Name.Local == "\u006d\u0061\u0063r\u006f" {
			_bea := _ga.Value
			_cec.MacroAttr = &_bea
			continue
		}
		if _ga.Name.Local == "\u0066\u0050\u0075\u0062\u006c\u0069\u0073\u0068\u0065\u0064" {
			_baa, _gbg := _b.ParseBool(_ga.Value)
			if _gbg != nil {
				return _gbg
			}
			_cec.FPublishedAttr = &_baa
			continue
		}
	}
_gf:
	for {
		_gdg, _add := d.Token()
		if _add != nil {
			return _add
		}
		switch _dbdf := _gdg.(type) {
		case _c.StartElement:
			switch _dbdf.Name {
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u006e\u0076G\u0072\u0061\u0070h\u0069\u0063\u0046\u0072\u0061\u006d\u0065\u0050\u0072"}:
				if _aa := d.DecodeElement(_cec.NvGraphicFramePr, &_dbdf); _aa != nil {
					return _aa
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0078\u0066\u0072\u006d"}:
				if _bg := d.DecodeElement(_cec.Xfrm, &_dbdf); _bg != nil {
					return _bg
				}
			case _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e", Local: "\u0067r\u0061\u0070\u0068\u0069\u0063"}, _c.Name{Space: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072g\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u006d\u0061\u0069\u006e", Local: "\u0067r\u0061\u0070\u0068\u0069\u0063"}:
				if _fcb := d.DecodeElement(_cec.Graphic, &_dbdf); _fcb != nil {
					return _fcb
				}
			default:
				_f.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0047\u0072\u0061p\u0068\u0069\u0063\u0046\u0072\u0061\u006d\u0065\u0020\u0025\u0076", _dbdf.Name)
				if _bda := d.Skip(); _bda != nil {
					return _bda
				}
			}
		case _c.EndElement:
			break _gf
		case _c.CharData:
		}
	}
	return nil
}
func (_debc *EG_Anchor) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_debc.AnchorChoice = NewEG_AnchorChoice()
_bfg:
	for {
		_ccbc, _daffe := d.Token()
		if _daffe != nil {
			return _daffe
		}
		switch _cfc := _ccbc.(type) {
		case _c.StartElement:
			switch _cfc.Name {
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0072\u0065\u006c\u0053\u0069\u007a\u0065\u0041\u006e\u0063\u0068\u006f\u0072"}:
				_debc.AnchorChoice = NewEG_AnchorChoice()
				if _ddb := d.DecodeElement(&_debc.AnchorChoice.RelSizeAnchor, &_cfc); _ddb != nil {
					return _ddb
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0061\u0062\u0073\u0053\u0069\u007a\u0065\u0041\u006e\u0063\u0068\u006f\u0072"}:
				_debc.AnchorChoice = NewEG_AnchorChoice()
				if _afec := d.DecodeElement(&_debc.AnchorChoice.AbsSizeAnchor, &_cfc); _afec != nil {
					return _afec
				}
			default:
				_f.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0045\u0047\u005f\u0041\u006e\u0063h\u006f\u0072 \u0025\u0076", _cfc.Name)
				if _fga := d.Skip(); _fga != nil {
					return _fga
				}
			}
		case _c.EndElement:
			break _bfg
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_GroupShapeNonVisual() *CT_GroupShapeNonVisual {
	_gaea := &CT_GroupShapeNonVisual{}
	_gaea.CNvPr = _e.NewCT_NonVisualDrawingProps()
	_gaea.CNvGrpSpPr = _e.NewCT_NonVisualGroupDrawingShapeProps()
	return _gaea
}

// ValidateWithPath validates the CT_ConnectorNonVisual and its children, prefixing error messages with path
func (_ff *CT_ConnectorNonVisual) ValidateWithPath(path string) error {
	if _def := _ff.CNvPr.ValidateWithPath(path + "\u002f\u0043\u004e\u0076\u0050\u0072"); _def != nil {
		return _def
	}
	if _fa := _ff.CNvCxnSpPr.ValidateWithPath(path + "/\u0043\u004e\u0076\u0043\u0078\u006e\u0053\u0070\u0050\u0072"); _fa != nil {
		return _fa
	}
	return nil
}

type EG_Anchor struct{ AnchorChoice *EG_AnchorChoice }

func (_deff *CT_Marker) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_deff.X = 0.0
	_deff.Y = 0.0
_af:
	for {
		_bgf, _bde := d.Token()
		if _bde != nil {
			return _bde
		}
		switch _gfe := _bgf.(type) {
		case _c.StartElement:
			switch _gfe.Name {
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0078"}:
				if _dfg := d.DecodeElement(&_deff.X, &_gfe); _dfg != nil {
					return _dfg
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0079"}:
				if _ggcb := d.DecodeElement(&_deff.Y, &_gfe); _ggcb != nil {
					return _ggcb
				}
			default:
				_f.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004d\u0061\u0072k\u0065\u0072 \u0025\u0076", _gfe.Name)
				if _aded := d.Skip(); _aded != nil {
					return _aded
				}
			}
		case _c.EndElement:
			break _af
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_PictureNonVisual() *CT_PictureNonVisual {
	_cbf := &CT_PictureNonVisual{}
	_cbf.CNvPr = _e.NewCT_NonVisualDrawingProps()
	_cbf.CNvPicPr = _e.NewCT_NonVisualPictureProperties()
	return _cbf
}

// ValidateWithPath validates the EG_Anchor and its children, prefixing error messages with path
func (_gfbe *EG_Anchor) ValidateWithPath(path string) error {
	if _bdeg := _gfbe.AnchorChoice.ValidateWithPath(path + "\u002f\u0041\u006e\u0063\u0068\u006f\u0072\u0043\u0068\u006f\u0069\u0063\u0065"); _bdeg != nil {
		return _bdeg
	}
	return nil
}

type EG_AnchorChoice struct {

	// Relative Anchor Shape Size
	RelSizeAnchor *CT_RelSizeAnchor

	// Absolute Anchor Shape Size
	AbsSizeAnchor *CT_AbsSizeAnchor
}

func (_edg *CT_ConnectorNonVisual) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_gea := _c.StartElement{Name: _c.Name{Local: "\u0063\u004e\u0076P\u0072"}}
	e.EncodeElement(_edg.CNvPr, _gea)
	_gge := _c.StartElement{Name: _c.Name{Local: "\u0063\u004e\u0076\u0043\u0078\u006e\u0053\u0070\u0050\u0072"}}
	e.EncodeElement(_edg.CNvCxnSpPr, _gge)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Drawing and its children
func (_ggef *CT_Drawing) Validate() error {
	return _ggef.ValidateWithPath("\u0043\u0054\u005f\u0044\u0072\u0061\u0077\u0069\u006e\u0067")
}

type EG_ObjectChoices struct{ ObjectChoicesChoice *EG_ObjectChoicesChoice }
type CT_Connector struct {

	// Reference to Custom Function
	MacroAttr *string

	// Publish to Server
	FPublishedAttr *bool

	// Connector Non Visual Properties
	NvCxnSpPr *CT_ConnectorNonVisual

	// Shape Properties
	SpPr *_e.CT_ShapeProperties

	// Connection Shape Style
	Style *_e.CT_ShapeStyle
}

func (_aea *EG_AnchorChoice) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	if _aea.RelSizeAnchor != nil {
		_ebe := _c.StartElement{Name: _c.Name{Local: "\u0072\u0065\u006c\u0053\u0069\u007a\u0065\u0041\u006e\u0063\u0068\u006f\u0072"}}
		e.EncodeElement(_aea.RelSizeAnchor, _ebe)
	} else if _aea.AbsSizeAnchor != nil {
		_daag := _c.StartElement{Name: _c.Name{Local: "\u0061\u0062\u0073\u0053\u0069\u007a\u0065\u0041\u006e\u0063\u0068\u006f\u0072"}}
		e.EncodeElement(_aea.AbsSizeAnchor, _daag)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_bfa *CT_ConnectorNonVisual) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_bfa.CNvPr = _e.NewCT_NonVisualDrawingProps()
	_bfa.CNvCxnSpPr = _e.NewCT_NonVisualConnectorProperties()
_efcc:
	for {
		_fce, _efa := d.Token()
		if _efa != nil {
			return _efa
		}
		switch _feg := _fce.(type) {
		case _c.StartElement:
			switch _feg.Name {
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0063\u004e\u0076P\u0072"}:
				if _ege := d.DecodeElement(_bfa.CNvPr, &_feg); _ege != nil {
					return _ege
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0063\u004e\u0076\u0043\u0078\u006e\u0053\u0070\u0050\u0072"}:
				if _bed := d.DecodeElement(_bfa.CNvCxnSpPr, &_feg); _bed != nil {
					return _bed
				}
			default:
				_f.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075n\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u006f\u006e C\u0054\u005f\u0043\u006f\u006e\u006e\u0065\u0063\u0074\u006f\u0072\u004e\u006f\u006e\u0056\u0069\u0073\u0075\u0061\u006c\u0020\u0025\u0076", _feg.Name)
				if _de := d.Skip(); _de != nil {
					return _de
				}
			}
		case _c.EndElement:
			break _efcc
		case _c.CharData:
		}
	}
	return nil
}
func (_eef *CT_GraphicFrameNonVisual) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_fab := _c.StartElement{Name: _c.Name{Local: "\u0063\u004e\u0076P\u0072"}}
	e.EncodeElement(_eef.CNvPr, _fab)
	_gae := _c.StartElement{Name: _c.Name{Local: "\u0063\u004e\u0076\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0046\u0072a\u006d\u0065\u0050\u0072"}}
	e.EncodeElement(_eef.CNvGraphicFramePr, _gae)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_ShapeNonVisual and its children, prefixing error messages with path
func (_bdae *CT_ShapeNonVisual) ValidateWithPath(path string) error {
	if _cbff := _bdae.CNvPr.ValidateWithPath(path + "\u002f\u0043\u004e\u0076\u0050\u0072"); _cbff != nil {
		return _cbff
	}
	if _dee := _bdae.CNvSpPr.ValidateWithPath(path + "\u002f\u0043\u004e\u0076\u0053\u0070\u0050\u0072"); _dee != nil {
		return _dee
	}
	return nil
}

type CT_PictureNonVisual struct {
	CNvPr *_e.CT_NonVisualDrawingProps

	// Non-Visual Picture Drawing Properties
	CNvPicPr *_e.CT_NonVisualPictureProperties
}

func (_ae *CT_Drawing) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Name.Local = "\u0043\u0054\u005f\u0044\u0072\u0061\u0077\u0069\u006e\u0067"
	e.EncodeToken(start)
	if _ae.EG_Anchor != nil {
		for _, _caa := range _ae.EG_Anchor {
			_caa.MarshalXML(e, _c.StartElement{})
		}
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the EG_AnchorChoice and its children, prefixing error messages with path
func (_aade *EG_AnchorChoice) ValidateWithPath(path string) error {
	if _aade.RelSizeAnchor != nil {
		if _dff := _aade.RelSizeAnchor.ValidateWithPath(path + "\u002f\u0052\u0065\u006c\u0053\u0069\u007a\u0065\u0041n\u0063\u0068\u006f\u0072"); _dff != nil {
			return _dff
		}
	}
	if _aade.AbsSizeAnchor != nil {
		if _ggbc := _aade.AbsSizeAnchor.ValidateWithPath(path + "\u002f\u0041\u0062\u0073\u0053\u0069\u007a\u0065\u0041n\u0063\u0068\u006f\u0072"); _ggbc != nil {
			return _ggbc
		}
	}
	return nil
}
func (_fdc *CT_GroupShapeChoice) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_bdd := start
	switch start.Name {
	case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0073\u0070"}:
		_fdc.Sp = NewCT_Shape()
		if _cfd := d.DecodeElement(_fdc.Sp, &_bdd); _cfd != nil {
			return _cfd
		}
	case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0067\u0072\u0070S\u0070"}:
		_fdc.GrpSp = NewCT_GroupShape()
		if _aag := d.DecodeElement(_fdc.GrpSp, &_bdd); _aag != nil {
			return _aag
		}
	case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0067\u0072\u0061p\u0068\u0069\u0063\u0046\u0072\u0061\u006d\u0065"}:
		_fdc.GraphicFrame = NewCT_GraphicFrame()
		if _cfe := d.DecodeElement(_fdc.GraphicFrame, &_bdd); _cfe != nil {
			return _cfe
		}
	case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0063\u0078\u006eS\u0070"}:
		_fdc.CxnSp = NewCT_Connector()
		if _adde := d.DecodeElement(_fdc.CxnSp, &_bdd); _adde != nil {
			return _adde
		}
	case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0070\u0069\u0063"}:
		_fdc.Pic = NewCT_Picture()
		if _bbf := d.DecodeElement(_fdc.Pic, &_bdd); _bbf != nil {
			return _bbf
		}
	default:
		_f.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020o\u006e\u0020\u0043\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0053\u0068ap\u0065\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _bdd.Name)
		if _cbc := d.Skip(); _cbc != nil {
			return _cbc
		}
	}
	return nil
}

// Validate validates the CT_GroupShapeNonVisual and its children
func (_aaf *CT_GroupShapeNonVisual) Validate() error {
	return _aaf.ValidateWithPath("\u0043\u0054\u005f\u0047ro\u0075\u0070\u0053\u0068\u0061\u0070\u0065\u004e\u006f\u006e\u0056\u0069\u0073\u0075a\u006c")
}
func (_cde *CT_GroupShapeNonVisual) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_dce := _c.StartElement{Name: _c.Name{Local: "\u0063\u004e\u0076P\u0072"}}
	e.EncodeElement(_cde.CNvPr, _dce)
	_cggc := _c.StartElement{Name: _c.Name{Local: "\u0063\u004e\u0076\u0047\u0072\u0070\u0053\u0070\u0050\u0072"}}
	e.EncodeElement(_cde.CNvGrpSpPr, _cggc)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func NewEG_AnchorChoice() *EG_AnchorChoice { _dcab := &EG_AnchorChoice{}; return _dcab }

type CT_AbsSizeAnchor struct {
	From *CT_Marker

	// Shape Extent
	Ext                 *_e.CT_PositiveSize2D
	ObjectChoicesChoice *EG_ObjectChoicesChoice
}

// Validate validates the CT_AbsSizeAnchor and its children
func (_ddf *CT_AbsSizeAnchor) Validate() error {
	return _ddf.ValidateWithPath("\u0043\u0054_\u0041\u0062\u0073S\u0069\u007a\u0065\u0041\u006e\u0063\u0068\u006f\u0072")
}
func NewCT_GroupShape() *CT_GroupShape {
	_fcbb := &CT_GroupShape{}
	_fcbb.NvGrpSpPr = NewCT_GroupShapeNonVisual()
	_fcbb.GrpSpPr = _e.NewCT_GroupShapeProperties()
	return _fcbb
}
func (_ge *CT_Connector) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_ge.NvCxnSpPr = NewCT_ConnectorNonVisual()
	_ge.SpPr = _e.NewCT_ShapeProperties()
	for _, _fg := range start.Attr {
		if _fg.Name.Local == "\u006d\u0061\u0063r\u006f" {
			_dfc := _fg.Value
			_ge.MacroAttr = &_dfc
			continue
		}
		if _fg.Name.Local == "\u0066\u0050\u0075\u0062\u006c\u0069\u0073\u0068\u0065\u0064" {
			_ddd, _cce := _b.ParseBool(_fg.Value)
			if _cce != nil {
				return _cce
			}
			_ge.FPublishedAttr = &_ddd
			continue
		}
	}
_ca:
	for {
		_ebd, _bf := d.Token()
		if _bf != nil {
			return _bf
		}
		switch _bef := _ebd.(type) {
		case _c.StartElement:
			switch _bef.Name {
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u006ev\u0043\u0078\u006e\u0053\u0070\u0050r"}:
				if _bd := d.DecodeElement(_ge.NvCxnSpPr, &_bef); _bd != nil {
					return _bd
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0073\u0070\u0050\u0072"}:
				if _ebf := d.DecodeElement(_ge.SpPr, &_bef); _ebf != nil {
					return _ebf
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0073\u0074\u0079l\u0065"}:
				_ge.Style = _e.NewCT_ShapeStyle()
				if _efc := d.DecodeElement(_ge.Style, &_bef); _efc != nil {
					return _efc
				}
			default:
				_f.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_C\u006f\u006en\u0065\u0063\u0074\u006f\u0072\u0020\u0025\u0076", _bef.Name)
				if _ab := d.Skip(); _ab != nil {
					return _ab
				}
			}
		case _c.EndElement:
			break _ca
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_Shape() *CT_Shape {
	_dcdbd := &CT_Shape{}
	_dcdbd.NvSpPr = NewCT_ShapeNonVisual()
	_dcdbd.SpPr = _e.NewCT_ShapeProperties()
	return _dcdbd
}
func (_gad *EG_AnchorChoice) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_dgb := start
	switch start.Name {
	case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0072\u0065\u006c\u0053\u0069\u007a\u0065\u0041\u006e\u0063\u0068\u006f\u0072"}:
		_gad.RelSizeAnchor = NewCT_RelSizeAnchor()
		if _bga := d.DecodeElement(_gad.RelSizeAnchor, &_dgb); _bga != nil {
			return _bga
		}
	case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0061\u0062\u0073\u0053\u0069\u007a\u0065\u0041\u006e\u0063\u0068\u006f\u0072"}:
		_gad.AbsSizeAnchor = NewCT_AbsSizeAnchor()
		if _gdab := d.DecodeElement(_gad.AbsSizeAnchor, &_dgb); _gdab != nil {
			return _gdab
		}
	default:
		_f.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0041\u006e\u0063h\u006f\u0072\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _dgb.Name)
		if _bdege := d.Skip(); _bdege != nil {
			return _bdege
		}
	}
	return nil
}
func (_ffg *CT_PictureNonVisual) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_ffg.CNvPr = _e.NewCT_NonVisualDrawingProps()
	_ffg.CNvPicPr = _e.NewCT_NonVisualPictureProperties()
_ebc:
	for {
		_ceg, _afcg := d.Token()
		if _afcg != nil {
			return _afcg
		}
		switch _dbdce := _ceg.(type) {
		case _c.StartElement:
			switch _dbdce.Name {
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0063\u004e\u0076P\u0072"}:
				if _beaf := d.DecodeElement(_ffg.CNvPr, &_dbdce); _beaf != nil {
					return _beaf
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0063\u004e\u0076\u0050\u0069\u0063\u0050\u0072"}:
				if _cgc := d.DecodeElement(_ffg.CNvPicPr, &_dbdce); _cgc != nil {
					return _cgc
				}
			default:
				_f.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020o\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065No\u006e\u0056\u0069\u0073\u0075\u0061\u006c\u0020\u0025\u0076", _dbdce.Name)
				if _eaba := d.Skip(); _eaba != nil {
					return _eaba
				}
			}
		case _c.EndElement:
			break _ebc
		case _c.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Marker and its children, prefixing error messages with path
func (_eddc *CT_Marker) ValidateWithPath(path string) error {
	if _eddc.X < 0.0 {
		return _g.Errorf("\u0025\u0073\u002fm\u002e\u0058\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0030\u002e\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _eddc.X)
	}
	if _eddc.X > 1.0 {
		return _g.Errorf("\u0025\u0073\u002fm\u002e\u0058\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003c=\u0020\u0031\u002e\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _eddc.X)
	}
	if _eddc.Y < 0.0 {
		return _g.Errorf("\u0025\u0073\u002fm\u002e\u0059\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0030\u002e\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _eddc.Y)
	}
	if _eddc.Y > 1.0 {
		return _g.Errorf("\u0025\u0073\u002fm\u002e\u0059\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003c=\u0020\u0031\u002e\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _eddc.Y)
	}
	return nil
}
func (_bgg *CT_Picture) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _bgg.MacroAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u006d\u0061\u0063r\u006f"}, Value: _g.Sprintf("\u0025\u0076", *_bgg.MacroAttr)})
	}
	if _bgg.FPublishedAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0066\u0050\u0075\u0062\u006c\u0069\u0073\u0068\u0065\u0064"}, Value: _g.Sprintf("\u0025\u0064", _dfgd(*_bgg.FPublishedAttr))})
	}
	e.EncodeToken(start)
	_afc := _c.StartElement{Name: _c.Name{Local: "\u006ev\u0050\u0069\u0063\u0050\u0072"}}
	e.EncodeElement(_bgg.NvPicPr, _afc)
	_cbe := _c.StartElement{Name: _c.Name{Local: "\u0062\u006c\u0069\u0070\u0046\u0069\u006c\u006c"}}
	e.EncodeElement(_bgg.BlipFill, _cbe)
	_dae := _c.StartElement{Name: _c.Name{Local: "\u0073\u0070\u0050\u0072"}}
	e.EncodeElement(_bgg.SpPr, _dae)
	if _bgg.Style != nil {
		_acad := _c.StartElement{Name: _c.Name{Local: "\u0073\u0074\u0079l\u0065"}}
		e.EncodeElement(_bgg.Style, _acad)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_fed *CT_Picture) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_fed.NvPicPr = NewCT_PictureNonVisual()
	_fed.BlipFill = _e.NewCT_BlipFillProperties()
	_fed.SpPr = _e.NewCT_ShapeProperties()
	for _, _daf := range start.Attr {
		if _daf.Name.Local == "\u006d\u0061\u0063r\u006f" {
			_deffg := _daf.Value
			_fed.MacroAttr = &_deffg
			continue
		}
		if _daf.Name.Local == "\u0066\u0050\u0075\u0062\u006c\u0069\u0073\u0068\u0065\u0064" {
			_eae, _ccb := _b.ParseBool(_daf.Value)
			if _ccb != nil {
				return _ccb
			}
			_fed.FPublishedAttr = &_eae
			continue
		}
	}
_ada:
	for {
		_cag, _fbe := d.Token()
		if _fbe != nil {
			return _fbe
		}
		switch _cfg := _cag.(type) {
		case _c.StartElement:
			switch _cfg.Name {
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u006ev\u0050\u0069\u0063\u0050\u0072"}:
				if _dcd := d.DecodeElement(_fed.NvPicPr, &_cfg); _dcd != nil {
					return _dcd
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0062\u006c\u0069\u0070\u0046\u0069\u006c\u006c"}:
				if _fgcc := d.DecodeElement(_fed.BlipFill, &_cfg); _fgcc != nil {
					return _fgcc
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0073\u0070\u0050\u0072"}:
				if _fgef := d.DecodeElement(_fed.SpPr, &_cfg); _fgef != nil {
					return _fgef
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0073\u0074\u0079l\u0065"}:
				_fed.Style = _e.NewCT_ShapeStyle()
				if _ggd := d.DecodeElement(_fed.Style, &_cfg); _ggd != nil {
					return _ggd
				}
			default:
				_f.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fP\u0069\u0063\u0074\u0075\u0072\u0065\u0020\u0025\u0076", _cfg.Name)
				if _daa := d.Skip(); _daa != nil {
					return _daa
				}
			}
		case _c.EndElement:
			break _ada
		case _c.CharData:
		}
	}
	return nil
}

type CT_GroupShapeNonVisual struct {

	// Chart Non Visual Properties
	CNvPr *_e.CT_NonVisualDrawingProps

	// Non-Visual Group Shape Drawing Properties
	CNvGrpSpPr *_e.CT_NonVisualGroupDrawingShapeProps
}

func (_fc *CT_AbsSizeAnchor) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_fc.From = NewCT_Marker()
	_fc.Ext = _e.NewCT_PositiveSize2D()
	_fc.ObjectChoicesChoice = NewEG_ObjectChoicesChoice()
_dd:
	for {
		_a, _df := d.Token()
		if _df != nil {
			return _df
		}
		switch _be := _a.(type) {
		case _c.StartElement:
			switch _be.Name {
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0066\u0072\u006f\u006d"}:
				if _da := d.DecodeElement(_fc.From, &_be); _da != nil {
					return _da
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0065\u0078\u0074"}:
				if _ea := d.DecodeElement(_fc.Ext, &_be); _ea != nil {
					return _ea
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0073\u0070"}:
				_fc.ObjectChoicesChoice = NewEG_ObjectChoicesChoice()
				if _beb := d.DecodeElement(&_fc.ObjectChoicesChoice.Sp, &_be); _beb != nil {
					return _beb
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0067\u0072\u0070S\u0070"}:
				_fc.ObjectChoicesChoice = NewEG_ObjectChoicesChoice()
				if _cb := d.DecodeElement(&_fc.ObjectChoicesChoice.GrpSp, &_be); _cb != nil {
					return _cb
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0067\u0072\u0061p\u0068\u0069\u0063\u0046\u0072\u0061\u006d\u0065"}:
				_fc.ObjectChoicesChoice = NewEG_ObjectChoicesChoice()
				if _db := d.DecodeElement(&_fc.ObjectChoicesChoice.GraphicFrame, &_be); _db != nil {
					return _db
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0063\u0078\u006eS\u0070"}:
				_fc.ObjectChoicesChoice = NewEG_ObjectChoicesChoice()
				if _ed := d.DecodeElement(&_fc.ObjectChoicesChoice.CxnSp, &_be); _ed != nil {
					return _ed
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0070\u0069\u0063"}:
				_fc.ObjectChoicesChoice = NewEG_ObjectChoicesChoice()
				if _ef := d.DecodeElement(&_fc.ObjectChoicesChoice.Pic, &_be); _ef != nil {
					return _ef
				}
			default:
				_f.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0041\u0062\u0073\u0053\u0069\u007a\u0065\u0041\u006e\u0063\u0068\u006f\u0072\u0020\u0025v", _be.Name)
				if _gb := d.Skip(); _gb != nil {
					return _gb
				}
			}
		case _c.EndElement:
			break _dd
		case _c.CharData:
		}
	}
	return nil
}

// Validate validates the EG_Anchor and its children
func (_age *EG_Anchor) Validate() error {
	return _age.ValidateWithPath("\u0045G\u005f\u0041\u006e\u0063\u0068\u006fr")
}
func NewCT_GroupShapeChoice() *CT_GroupShapeChoice { _dbdc := &CT_GroupShapeChoice{}; return _dbdc }

type CT_GraphicFrame struct {

	// Reference to Custom Function
	MacroAttr *string

	// Publish To Server
	FPublishedAttr *bool

	// Non-Visual Graphic Frame Properties
	NvGraphicFramePr *CT_GraphicFrameNonVisual

	// Graphic Frame Transform
	Xfrm    *_e.CT_Transform2D
	Graphic *_e.Graphic
}

func NewCT_Connector() *CT_Connector {
	_fb := &CT_Connector{}
	_fb.NvCxnSpPr = NewCT_ConnectorNonVisual()
	_fb.SpPr = _e.NewCT_ShapeProperties()
	return _fb
}
func (_efg *CT_RelSizeAnchor) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_dba := _c.StartElement{Name: _c.Name{Local: "\u0066\u0072\u006f\u006d"}}
	e.EncodeElement(_efg.From, _dba)
	_cca := _c.StartElement{Name: _c.Name{Local: "\u0074\u006f"}}
	e.EncodeElement(_efg.To, _cca)
	_efg.ObjectChoicesChoice.MarshalXML(e, _c.StartElement{})
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_ConnectorNonVisual and its children
func (_fba *CT_ConnectorNonVisual) Validate() error {
	return _fba.ValidateWithPath("C\u0054\u005f\u0043\u006fnn\u0065c\u0074\u006f\u0072\u004e\u006fn\u0056\u0069\u0073\u0075\u0061\u006c")
}

// ValidateWithPath validates the CT_GraphicFrame and its children, prefixing error messages with path
func (_aaa *CT_GraphicFrame) ValidateWithPath(path string) error {
	if _fff := _aaa.NvGraphicFramePr.ValidateWithPath(path + "\u002f\u004e\u0076\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0046\u0072a\u006d\u0065\u0050\u0072"); _fff != nil {
		return _fff
	}
	if _bedda := _aaa.Xfrm.ValidateWithPath(path + "\u002f\u0058\u0066r\u006d"); _bedda != nil {
		return _bedda
	}
	if _abc := _aaa.Graphic.ValidateWithPath(path + "\u002f\u0047\u0072\u0061\u0070\u0068\u0069\u0063"); _abc != nil {
		return _abc
	}
	return nil
}

// Validate validates the CT_GraphicFrameNonVisual and its children
func (_feb *CT_GraphicFrameNonVisual) Validate() error {
	return _feb.ValidateWithPath("\u0043T\u005f\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0046\u0072\u0061m\u0065\u004e\u006f\u006e\u0056\u0069\u0073\u0075\u0061\u006c")
}

// Validate validates the CT_RelSizeAnchor and its children
func (_ebdd *CT_RelSizeAnchor) Validate() error {
	return _ebdd.ValidateWithPath("\u0043\u0054_\u0052\u0065\u006cS\u0069\u007a\u0065\u0041\u006e\u0063\u0068\u006f\u0072")
}

// ValidateWithPath validates the CT_Picture and its children, prefixing error messages with path
func (_fdaf *CT_Picture) ValidateWithPath(path string) error {
	if _ffc := _fdaf.NvPicPr.ValidateWithPath(path + "\u002f\u004e\u0076\u0050\u0069\u0063\u0050\u0072"); _ffc != nil {
		return _ffc
	}
	if _ede := _fdaf.BlipFill.ValidateWithPath(path + "\u002fB\u006c\u0069\u0070\u0046\u0069\u006cl"); _ede != nil {
		return _ede
	}
	if _eee := _fdaf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _eee != nil {
		return _eee
	}
	if _fdaf.Style != nil {
		if _ced := _fdaf.Style.ValidateWithPath(path + "\u002f\u0053\u0074\u0079\u006c\u0065"); _ced != nil {
			return _ced
		}
	}
	return nil
}

type CT_Picture struct {

	// Reference to Custom Function
	MacroAttr *string

	// Publish to Server
	FPublishedAttr *bool

	// Non-Visual Picture Properties
	NvPicPr *CT_PictureNonVisual

	// Picture Fill
	BlipFill *_e.CT_BlipFillProperties
	SpPr     *_e.CT_ShapeProperties
	Style    *_e.CT_ShapeStyle
}

func (_cac *CT_GraphicFrame) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _cac.MacroAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u006d\u0061\u0063r\u006f"}, Value: _g.Sprintf("\u0025\u0076", *_cac.MacroAttr)})
	}
	if _cac.FPublishedAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0066\u0050\u0075\u0062\u006c\u0069\u0073\u0068\u0065\u0064"}, Value: _g.Sprintf("\u0025\u0064", _dfgd(*_cac.FPublishedAttr))})
	}
	e.EncodeToken(start)
	_adg := _c.StartElement{Name: _c.Name{Local: "\u006e\u0076G\u0072\u0061\u0070h\u0069\u0063\u0046\u0072\u0061\u006d\u0065\u0050\u0072"}}
	e.EncodeElement(_cac.NvGraphicFramePr, _adg)
	_gc := _c.StartElement{Name: _c.Name{Local: "\u0078\u0066\u0072\u006d"}}
	e.EncodeElement(_cac.Xfrm, _gc)
	_dfcb := _c.StartElement{Name: _c.Name{Local: "\u0061:\u0067\u0072\u0061\u0070\u0068\u0069c"}}
	_dfcb.Attr = append(_dfcb.Attr, _c.Attr{Name: _c.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	e.EncodeElement(_cac.Graphic, _dfcb)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_Marker struct {

	// Relative X Coordinate
	X float64

	// Relative Y Coordinate
	Y float64
}
type CT_GroupShape struct {

	// Non-Visual Group Shape Properties
	NvGrpSpPr *CT_GroupShapeNonVisual

	// Group Shape Properties
	GrpSpPr          *_e.CT_GroupShapeProperties
	GroupShapeChoice []*CT_GroupShapeChoice
}
type CT_ShapeNonVisual struct {

	// Chart Non Visual Properties
	CNvPr *_e.CT_NonVisualDrawingProps

	// Non-Visual Shape Drawing Properties
	CNvSpPr *_e.CT_NonVisualDrawingShapeProps
}

func (_gaf *CT_Marker) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_egg := _c.StartElement{Name: _c.Name{Local: "\u0078"}}
	e.EncodeElement(_gaf.X, _egg)
	_ecd := _c.StartElement{Name: _c.Name{Local: "\u0079"}}
	e.EncodeElement(_gaf.Y, _ecd)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_GroupShape and its children, prefixing error messages with path
func (_edgb *CT_GroupShape) ValidateWithPath(path string) error {
	if _bcc := _edgb.NvGrpSpPr.ValidateWithPath(path + "\u002f\u004e\u0076\u0047\u0072\u0070\u0053\u0070\u0050\u0072"); _bcc != nil {
		return _bcc
	}
	if _deg := _edgb.GrpSpPr.ValidateWithPath(path + "\u002f\u0047\u0072\u0070\u0053\u0070\u0050\u0072"); _deg != nil {
		return _deg
	}
	for _eaf, _dbe := range _edgb.GroupShapeChoice {
		if _fgg := _dbe.ValidateWithPath(_g.Sprintf("\u0025\u0073\u002fGr\u006f\u0075\u0070\u0053\u0068\u0061\u0070\u0065\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d", path, _eaf)); _fgg != nil {
			return _fgg
		}
	}
	return nil
}
func (_fgf *CT_ShapeNonVisual) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_fgf.CNvPr = _e.NewCT_NonVisualDrawingProps()
	_fgf.CNvSpPr = _e.NewCT_NonVisualDrawingShapeProps()
_bba:
	for {
		_cbca, _bgbb := d.Token()
		if _bgbb != nil {
			return _bgbb
		}
		switch _gac := _cbca.(type) {
		case _c.StartElement:
			switch _gac.Name {
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0063\u004e\u0076P\u0072"}:
				if _fec := d.DecodeElement(_fgf.CNvPr, &_gac); _fec != nil {
					return _fec
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0063N\u0076\u0053\u0070\u0050\u0072"}:
				if _eede := d.DecodeElement(_fgf.CNvSpPr, &_gac); _eede != nil {
					return _eede
				}
			default:
				_f.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065\u004e\u006f\u006e\u0056\u0069\u0073\u0075\u0061\u006c\u0020\u0025\u0076", _gac.Name)
				if _eba := d.Skip(); _eba != nil {
					return _eba
				}
			}
		case _c.EndElement:
			break _bba
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_ConnectorNonVisual() *CT_ConnectorNonVisual {
	_ec := &CT_ConnectorNonVisual{}
	_ec.CNvPr = _e.NewCT_NonVisualDrawingProps()
	_ec.CNvCxnSpPr = _e.NewCT_NonVisualConnectorProperties()
	return _ec
}

// Validate validates the EG_ObjectChoices and its children
func (_edbe *EG_ObjectChoices) Validate() error {
	return _edbe.ValidateWithPath("\u0045\u0047_\u004f\u0062\u006ae\u0063\u0074\u0043\u0068\u006f\u0069\u0063\u0065\u0073")
}

type CT_RelSizeAnchor struct {

	// Starting Anchor Point
	From *CT_Marker

	// Ending Anchor Point
	To                  *CT_Marker
	ObjectChoicesChoice *EG_ObjectChoicesChoice
}

func NewCT_AbsSizeAnchor() *CT_AbsSizeAnchor {
	_gdc := &CT_AbsSizeAnchor{}
	_gdc.From = NewCT_Marker()
	_gdc.Ext = _e.NewCT_PositiveSize2D()
	_gdc.ObjectChoicesChoice = NewEG_ObjectChoicesChoice()
	return _gdc
}

// ValidateWithPath validates the CT_GroupShapeChoice and its children, prefixing error messages with path
func (_cda *CT_GroupShapeChoice) ValidateWithPath(path string) error {
	if _cda.Sp != nil {
		if _dbf := _cda.Sp.ValidateWithPath(path + "\u002f\u0053\u0070"); _dbf != nil {
			return _dbf
		}
	}
	if _cda.GrpSp != nil {
		if _baec := _cda.GrpSp.ValidateWithPath(path + "\u002f\u0047\u0072\u0070\u0053\u0070"); _baec != nil {
			return _baec
		}
	}
	if _cda.GraphicFrame != nil {
		if _fda := _cda.GraphicFrame.ValidateWithPath(path + "\u002f\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0046\u0072\u0061\u006d\u0065"); _fda != nil {
			return _fda
		}
	}
	if _cda.CxnSp != nil {
		if _ade := _cda.CxnSp.ValidateWithPath(path + "\u002f\u0043\u0078\u006e\u0053\u0070"); _ade != nil {
			return _ade
		}
	}
	if _cda.Pic != nil {
		if _abb := _cda.Pic.ValidateWithPath(path + "\u002f\u0050\u0069\u0063"); _abb != nil {
			return _abb
		}
	}
	return nil
}
func (_egeg *CT_PictureNonVisual) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_eafe := _c.StartElement{Name: _c.Name{Local: "\u0063\u004e\u0076P\u0072"}}
	e.EncodeElement(_egeg.CNvPr, _eafe)
	_acc := _c.StartElement{Name: _c.Name{Local: "\u0063\u004e\u0076\u0050\u0069\u0063\u0050\u0072"}}
	e.EncodeElement(_egeg.CNvPicPr, _acc)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type EG_ObjectChoicesChoice struct {
	Sp           *CT_Shape
	GrpSp        *CT_GroupShape
	GraphicFrame *CT_GraphicFrame
	CxnSp        *CT_Connector
	Pic          *CT_Picture
}

// ValidateWithPath validates the CT_GraphicFrameNonVisual and its children, prefixing error messages with path
func (_gda *CT_GraphicFrameNonVisual) ValidateWithPath(path string) error {
	if _bdc := _gda.CNvPr.ValidateWithPath(path + "\u002f\u0043\u004e\u0076\u0050\u0072"); _bdc != nil {
		return _bdc
	}
	if _eab := _gda.CNvGraphicFramePr.ValidateWithPath(path + "\u002fC\u004ev\u0047\u0072\u0061\u0070\u0068i\u0063\u0046r\u0061\u006d\u0065\u0050\u0072"); _eab != nil {
		return _eab
	}
	return nil
}
func (_bbc *EG_Anchor) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	_bbc.AnchorChoice.MarshalXML(e, _c.StartElement{})
	return nil
}

// ValidateWithPath validates the CT_Connector and its children, prefixing error messages with path
func (_eg *CT_Connector) ValidateWithPath(path string) error {
	if _dc := _eg.NvCxnSpPr.ValidateWithPath(path + "\u002f\u004e\u0076\u0043\u0078\u006e\u0053\u0070\u0050\u0072"); _dc != nil {
		return _dc
	}
	if _dbd := _eg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _dbd != nil {
		return _dbd
	}
	if _eg.Style != nil {
		if _gg := _eg.Style.ValidateWithPath(path + "\u002f\u0053\u0074\u0079\u006c\u0065"); _gg != nil {
			return _gg
		}
	}
	return nil
}
func NewCT_RelSizeAnchor() *CT_RelSizeAnchor {
	_dcde := &CT_RelSizeAnchor{}
	_dcde.From = NewCT_Marker()
	_dcde.To = NewCT_Marker()
	_dcde.ObjectChoicesChoice = NewEG_ObjectChoicesChoice()
	return _dcde
}
func (_cc *CT_AbsSizeAnchor) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_cg := _c.StartElement{Name: _c.Name{Local: "\u0066\u0072\u006f\u006d"}}
	e.EncodeElement(_cc.From, _cg)
	_ba := _c.StartElement{Name: _c.Name{Local: "\u0065\u0078\u0074"}}
	e.EncodeElement(_cc.Ext, _ba)
	_cc.ObjectChoicesChoice.MarshalXML(e, _c.StartElement{})
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_cbfd *EG_ObjectChoices) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_cbfd.ObjectChoicesChoice = NewEG_ObjectChoicesChoice()
_cdd:
	for {
		_ffe, _fgea := d.Token()
		if _fgea != nil {
			return _fgea
		}
		switch _dfaf := _ffe.(type) {
		case _c.StartElement:
			switch _dfaf.Name {
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0073\u0070"}:
				_cbfd.ObjectChoicesChoice = NewEG_ObjectChoicesChoice()
				if _gggb := d.DecodeElement(&_cbfd.ObjectChoicesChoice.Sp, &_dfaf); _gggb != nil {
					return _gggb
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0067\u0072\u0070S\u0070"}:
				_cbfd.ObjectChoicesChoice = NewEG_ObjectChoicesChoice()
				if _agef := d.DecodeElement(&_cbfd.ObjectChoicesChoice.GrpSp, &_dfaf); _agef != nil {
					return _agef
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0067\u0072\u0061p\u0068\u0069\u0063\u0046\u0072\u0061\u006d\u0065"}:
				_cbfd.ObjectChoicesChoice = NewEG_ObjectChoicesChoice()
				if _dbcd := d.DecodeElement(&_cbfd.ObjectChoicesChoice.GraphicFrame, &_dfaf); _dbcd != nil {
					return _dbcd
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0063\u0078\u006eS\u0070"}:
				_cbfd.ObjectChoicesChoice = NewEG_ObjectChoicesChoice()
				if _aggf := d.DecodeElement(&_cbfd.ObjectChoicesChoice.CxnSp, &_dfaf); _aggf != nil {
					return _aggf
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0070\u0069\u0063"}:
				_cbfd.ObjectChoicesChoice = NewEG_ObjectChoicesChoice()
				if _eeg := d.DecodeElement(&_cbfd.ObjectChoicesChoice.Pic, &_dfaf); _eeg != nil {
					return _eeg
				}
			default:
				_f.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u004f\u0062\u006a\u0065\u0063\u0074\u0043\u0068\u006f\u0069\u0063\u0065\u0073\u0020\u0025v", _dfaf.Name)
				if _bbb := d.Skip(); _bbb != nil {
					return _bbb
				}
			}
		case _c.EndElement:
			break _cdd
		case _c.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Drawing and its children, prefixing error messages with path
func (_bc *CT_Drawing) ValidateWithPath(path string) error {
	for _bedd, _ce := range _bc.EG_Anchor {
		if _ecb := _ce.ValidateWithPath(_g.Sprintf("\u0025\u0073/\u0045\u0047\u005fA\u006e\u0063\u0068\u006f\u0072\u005b\u0025\u0064\u005d", path, _bedd)); _ecb != nil {
			return _ecb
		}
	}
	return nil
}
func NewCT_Marker() *CT_Marker { _cacc := &CT_Marker{}; _cacc.X = 0.0; _cacc.Y = 0.0; return _cacc }
func (_gdbd *CT_RelSizeAnchor) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_gdbd.From = NewCT_Marker()
	_gdbd.To = NewCT_Marker()
	_gdbd.ObjectChoicesChoice = NewEG_ObjectChoicesChoice()
_dcdb:
	for {
		_dcc, _gaa := d.Token()
		if _gaa != nil {
			return _gaa
		}
		switch _ggb := _dcc.(type) {
		case _c.StartElement:
			switch _ggb.Name {
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0066\u0072\u006f\u006d"}:
				if _gbfc := d.DecodeElement(_gdbd.From, &_ggb); _gbfc != nil {
					return _gbfc
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0074\u006f"}:
				if _gege := d.DecodeElement(_gdbd.To, &_ggb); _gege != nil {
					return _gege
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0073\u0070"}:
				_gdbd.ObjectChoicesChoice = NewEG_ObjectChoicesChoice()
				if _aad := d.DecodeElement(&_gdbd.ObjectChoicesChoice.Sp, &_ggb); _aad != nil {
					return _aad
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0067\u0072\u0070S\u0070"}:
				_gdbd.ObjectChoicesChoice = NewEG_ObjectChoicesChoice()
				if _dbaf := d.DecodeElement(&_gdbd.ObjectChoicesChoice.GrpSp, &_ggb); _dbaf != nil {
					return _dbaf
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0067\u0072\u0061p\u0068\u0069\u0063\u0046\u0072\u0061\u006d\u0065"}:
				_gdbd.ObjectChoicesChoice = NewEG_ObjectChoicesChoice()
				if _dbc := d.DecodeElement(&_gdbd.ObjectChoicesChoice.GraphicFrame, &_ggb); _dbc != nil {
					return _dbc
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0063\u0078\u006eS\u0070"}:
				_gdbd.ObjectChoicesChoice = NewEG_ObjectChoicesChoice()
				if _egc := d.DecodeElement(&_gdbd.ObjectChoicesChoice.CxnSp, &_ggb); _egc != nil {
					return _egc
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0070\u0069\u0063"}:
				_gdbd.ObjectChoicesChoice = NewEG_ObjectChoicesChoice()
				if _fca := d.DecodeElement(&_gdbd.ObjectChoicesChoice.Pic, &_ggb); _fca != nil {
					return _fca
				}
			default:
				_f.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052\u0065\u006c\u0053\u0069\u007a\u0065\u0041\u006e\u0063\u0068\u006f\u0072\u0020\u0025v", _ggb.Name)
				if _aga := d.Skip(); _aga != nil {
					return _aga
				}
			}
		case _c.EndElement:
			break _dcdb
		case _c.CharData:
		}
	}
	return nil
}

// Validate validates the CT_GroupShapeChoice and its children
func (_dcb *CT_GroupShapeChoice) Validate() error {
	return _dcb.ValidateWithPath("\u0043\u0054\u005f\u0047ro\u0075\u0070\u0053\u0068\u0061\u0070\u0065\u0043\u0068\u006f\u0069\u0063\u0065")
}

type CT_ConnectorNonVisual struct {

	// Chart Non Visual Properties
	CNvPr *_e.CT_NonVisualDrawingProps

	// Non-Visual Connection Shape Drawing Properties
	CNvCxnSpPr *_e.CT_NonVisualConnectorProperties
}

// ValidateWithPath validates the CT_GroupShapeNonVisual and its children, prefixing error messages with path
func (_dgd *CT_GroupShapeNonVisual) ValidateWithPath(path string) error {
	if _fgc := _dgd.CNvPr.ValidateWithPath(path + "\u002f\u0043\u004e\u0076\u0050\u0072"); _fgc != nil {
		return _fgc
	}
	if _befc := _dgd.CNvGrpSpPr.ValidateWithPath(path + "/\u0043\u004e\u0076\u0047\u0072\u0070\u0053\u0070\u0050\u0072"); _befc != nil {
		return _befc
	}
	return nil
}
func (_bbd *CT_Drawing) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_defb:
	for {
		_dfa, _fbg := d.Token()
		if _fbg != nil {
			return _fbg
		}
		switch _dca := _dfa.(type) {
		case _c.StartElement:
			switch _dca.Name {
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0072\u0065\u006c\u0053\u0069\u007a\u0065\u0041\u006e\u0063\u0068\u006f\u0072"}:
				_ee := NewEG_Anchor()
				_ee.AnchorChoice = NewEG_AnchorChoice()
				_bbd.EG_Anchor = append(_bbd.EG_Anchor, _ee)
				if _bbg := d.DecodeElement(&_ee.AnchorChoice.RelSizeAnchor, &_dca); _bbg != nil {
					return _bbg
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0061\u0062\u0073\u0053\u0069\u007a\u0065\u0041\u006e\u0063\u0068\u006f\u0072"}:
				_cf := NewEG_Anchor()
				_cf.AnchorChoice = NewEG_AnchorChoice()
				_bbd.EG_Anchor = append(_bbd.EG_Anchor, _cf)
				if _cceb := d.DecodeElement(&_cf.AnchorChoice.AbsSizeAnchor, &_dca); _cceb != nil {
					return _cceb
				}
			default:
				_f.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fD\u0072\u0061\u0077\u0069\u006e\u0067\u0020\u0025\u0076", _dca.Name)
				if _aec := d.Skip(); _aec != nil {
					return _aec
				}
			}
		case _c.EndElement:
			break _defb
		case _c.CharData:
		}
	}
	return nil
}
func (_edb *CT_GraphicFrameNonVisual) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_edb.CNvPr = _e.NewCT_NonVisualDrawingProps()
	_edb.CNvGraphicFramePr = _e.NewCT_NonVisualGraphicFrameProperties()
_aca:
	for {
		_aaab, _cd := d.Token()
		if _cd != nil {
			return _cd
		}
		switch _ebfa := _aaab.(type) {
		case _c.StartElement:
			switch _ebfa.Name {
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0063\u004e\u0076P\u0072"}:
				if _bec := d.DecodeElement(_edb.CNvPr, &_ebfa); _bec != nil {
					return _bec
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0063\u004e\u0076\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0046\u0072a\u006d\u0065\u0050\u0072"}:
				if _ggc := d.DecodeElement(_edb.CNvGraphicFramePr, &_ebfa); _ggc != nil {
					return _ggc
				}
			default:
				_f.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0046\u0072\u0061\u006d\u0065\u004e\u006f\u006e\u0056i\u0073\u0075\u0061\u006c\u0020%\u0076", _ebfa.Name)
				if _eed := d.Skip(); _eed != nil {
					return _eed
				}
			}
		case _c.EndElement:
			break _aca
		case _c.CharData:
		}
	}
	return nil
}

type CT_Drawing struct{ EG_Anchor []*EG_Anchor }

// ValidateWithPath validates the EG_ObjectChoices and its children, prefixing error messages with path
func (_fbef *EG_ObjectChoices) ValidateWithPath(path string) error {
	if _dagg := _fbef.ObjectChoicesChoice.ValidateWithPath(path + "/\u004fb\u006a\u0065\u0063\u0074\u0043\u0068\u006f\u0069c\u0065\u0073\u0043\u0068oi\u0063\u0065"); _dagg != nil {
		return _dagg
	}
	return nil
}
func NewCT_GraphicFrameNonVisual() *CT_GraphicFrameNonVisual {
	_fcg := &CT_GraphicFrameNonVisual{}
	_fcg.CNvPr = _e.NewCT_NonVisualDrawingProps()
	_fcg.CNvGraphicFramePr = _e.NewCT_NonVisualGraphicFrameProperties()
	return _fcg
}
func NewCT_Drawing() *CT_Drawing {
	_cbb := &CT_Drawing{}
	return _cbb
}
func NewEG_Anchor() *EG_Anchor {
	_baf := &EG_Anchor{}
	_baf.AnchorChoice = NewEG_AnchorChoice()
	return _baf
}

// Validate validates the CT_Shape and its children
func (_eabd *CT_Shape) Validate() error {
	return _eabd.ValidateWithPath("\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065")
}
func (_febd *CT_GroupShape) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_ceb := _c.StartElement{Name: _c.Name{Local: "\u006ev\u0047\u0072\u0070\u0053\u0070\u0050r"}}
	e.EncodeElement(_febd.NvGrpSpPr, _ceb)
	_gdaf := _c.StartElement{Name: _c.Name{Local: "\u0067r\u0070\u0053\u0070\u0050\u0072"}}
	e.EncodeElement(_febd.GrpSpPr, _gdaf)
	if _febd.GroupShapeChoice != nil {
		for _, _edge := range _febd.GroupShapeChoice {
			_edge.MarshalXML(e, _c.StartElement{})
		}
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_GraphicFrameNonVisual struct {

	// Non-Visual Drawing Properties
	CNvPr *_e.CT_NonVisualDrawingProps

	// Non-Visual Graphic Frame Drawing Properties
	CNvGraphicFramePr *_e.CT_NonVisualGraphicFrameProperties
}

func (_dfcbd *CT_ShapeNonVisual) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	e.EncodeToken(start)
	_cfa := _c.StartElement{Name: _c.Name{Local: "\u0063\u004e\u0076P\u0072"}}
	e.EncodeElement(_dfcbd.CNvPr, _cfa)
	_gbbe := _c.StartElement{Name: _c.Name{Local: "\u0063N\u0076\u0053\u0070\u0050\u0072"}}
	e.EncodeElement(_dfcbd.CNvSpPr, _gbbe)
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_AbsSizeAnchor and its children, prefixing error messages with path
func (_eb *CT_AbsSizeAnchor) ValidateWithPath(path string) error {
	if _bb := _eb.From.ValidateWithPath(path + "\u002f\u0046\u0072o\u006d"); _bb != nil {
		return _bb
	}
	if _fe := _eb.Ext.ValidateWithPath(path + "\u002f\u0045\u0078\u0074"); _fe != nil {
		return _fe
	}
	if _dg := _eb.ObjectChoicesChoice.ValidateWithPath(path + "/\u004fb\u006a\u0065\u0063\u0074\u0043\u0068\u006f\u0069c\u0065\u0073\u0043\u0068oi\u0063\u0065"); _dg != nil {
		return _dg
	}
	return nil
}
func (_cgf *CT_Connector) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _cgf.MacroAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u006d\u0061\u0063r\u006f"}, Value: _g.Sprintf("\u0025\u0076", *_cgf.MacroAttr)})
	}
	if _cgf.FPublishedAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0066\u0050\u0075\u0062\u006c\u0069\u0073\u0068\u0065\u0064"}, Value: _g.Sprintf("\u0025\u0064", _dfgd(*_cgf.FPublishedAttr))})
	}
	e.EncodeToken(start)
	_cgg := _c.StartElement{Name: _c.Name{Local: "\u006ev\u0043\u0078\u006e\u0053\u0070\u0050r"}}
	e.EncodeElement(_cgf.NvCxnSpPr, _cgg)
	_ad := _c.StartElement{Name: _c.Name{Local: "\u0073\u0070\u0050\u0072"}}
	e.EncodeElement(_cgf.SpPr, _ad)
	if _cgf.Style != nil {
		_gbf := _c.StartElement{Name: _c.Name{Local: "\u0073\u0074\u0079l\u0065"}}
		e.EncodeElement(_cgf.Style, _gbf)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func (_bgb *CT_GroupShapeNonVisual) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_bgb.CNvPr = _e.NewCT_NonVisualDrawingProps()
	_bgb.CNvGrpSpPr = _e.NewCT_NonVisualGroupDrawingShapeProps()
_gbb:
	for {
		_fge, _caf := d.Token()
		if _caf != nil {
			return _caf
		}
		switch _bfe := _fge.(type) {
		case _c.StartElement:
			switch _bfe.Name {
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0063\u004e\u0076P\u0072"}:
				if _begg := d.DecodeElement(_bgb.CNvPr, &_bfe); _begg != nil {
					return _begg
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0063\u004e\u0076\u0047\u0072\u0070\u0053\u0070\u0050\u0072"}:
				if _dbdfg := d.DecodeElement(_bgb.CNvGrpSpPr, &_bfe); _dbdfg != nil {
					return _dbdfg
				}
			default:
				_f.Log.Debug("\u0073\u006b\u0069\u0070p\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u0047\u0072\u006f\u0075p\u0053\u0068\u0061\u0070\u0065\u004e\u006f\u006e\u0056\u0069\u0073\u0075\u0061\u006c\u0020\u0025\u0076", _bfe.Name)
				if _gfb := d.Skip(); _gfb != nil {
					return _gfb
				}
			}
		case _c.EndElement:
			break _gbb
		case _c.CharData:
		}
	}
	return nil
}
func (_ffb *CT_GroupShapeChoice) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _ffb.Sp != nil {
		_egd := _c.StartElement{Name: _c.Name{Local: "\u0073\u0070"}}
		e.EncodeElement(_ffb.Sp, _egd)
	} else if _ffb.GrpSp != nil {
		_fag := _c.StartElement{Name: _c.Name{Local: "\u0067\u0072\u0070S\u0070"}}
		e.EncodeElement(_ffb.GrpSp, _fag)
	} else if _ffb.GraphicFrame != nil {
		_edgd := _c.StartElement{Name: _c.Name{Local: "\u0067\u0072\u0061p\u0068\u0069\u0063\u0046\u0072\u0061\u006d\u0065"}}
		e.EncodeElement(_ffb.GraphicFrame, _edgd)
	} else if _ffb.CxnSp != nil {
		_cef := _c.StartElement{Name: _c.Name{Local: "\u0063\u0078\u006eS\u0070"}}
		e.EncodeElement(_ffb.CxnSp, _cef)
	} else if _ffb.Pic != nil {
		_gdb := _c.StartElement{Name: _c.Name{Local: "\u0070\u0069\u0063"}}
		e.EncodeElement(_ffb.Pic, _gdb)
	}
	return nil
}
func (_dbca *EG_ObjectChoicesChoice) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _dbca.Sp != nil {
		_fbgc := _c.StartElement{Name: _c.Name{Local: "\u0073\u0070"}}
		e.EncodeElement(_dbca.Sp, _fbgc)
	} else if _dbca.GrpSp != nil {
		_gaeaa := _c.StartElement{Name: _c.Name{Local: "\u0067\u0072\u0070S\u0070"}}
		e.EncodeElement(_dbca.GrpSp, _gaeaa)
	} else if _dbca.GraphicFrame != nil {
		_begd := _c.StartElement{Name: _c.Name{Local: "\u0067\u0072\u0061p\u0068\u0069\u0063\u0046\u0072\u0061\u006d\u0065"}}
		e.EncodeElement(_dbca.GraphicFrame, _begd)
	} else if _dbca.CxnSp != nil {
		_gfd := _c.StartElement{Name: _c.Name{Local: "\u0063\u0078\u006eS\u0070"}}
		e.EncodeElement(_dbca.CxnSp, _gfd)
	} else if _dbca.Pic != nil {
		_aafc := _c.StartElement{Name: _c.Name{Local: "\u0070\u0069\u0063"}}
		e.EncodeElement(_dbca.Pic, _aafc)
	}
	return nil
}
func NewCT_GraphicFrame() *CT_GraphicFrame {
	_faf := &CT_GraphicFrame{}
	_faf.NvGraphicFramePr = NewCT_GraphicFrameNonVisual()
	_faf.Xfrm = _e.NewCT_Transform2D()
	_faf.Graphic = _e.NewGraphic()
	return _faf
}

// Validate validates the CT_Picture and its children
func (_gcdg *CT_Picture) Validate() error {
	return _gcdg.ValidateWithPath("\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065")
}
func (_bgfc *EG_ObjectChoicesChoice) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_ebb := start
	switch start.Name {
	case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0073\u0070"}:
		_bgfc.Sp = NewCT_Shape()
		if _dcfb := d.DecodeElement(_bgfc.Sp, &_ebb); _dcfb != nil {
			return _dcfb
		}
	case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0067\u0072\u0070S\u0070"}:
		_bgfc.GrpSp = NewCT_GroupShape()
		if _cefd := d.DecodeElement(_bgfc.GrpSp, &_ebb); _cefd != nil {
			return _cefd
		}
	case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0067\u0072\u0061p\u0068\u0069\u0063\u0046\u0072\u0061\u006d\u0065"}:
		_bgfc.GraphicFrame = NewCT_GraphicFrame()
		if _fggf := d.DecodeElement(_bgfc.GraphicFrame, &_ebb); _fggf != nil {
			return _fggf
		}
	case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0063\u0078\u006eS\u0070"}:
		_bgfc.CxnSp = NewCT_Connector()
		if _feca := d.DecodeElement(_bgfc.CxnSp, &_ebb); _feca != nil {
			return _feca
		}
	case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0070\u0069\u0063"}:
		_bgfc.Pic = NewCT_Picture()
		if _dcea := d.DecodeElement(_bgfc.Pic, &_ebb); _dcea != nil {
			return _dcea
		}
	default:
		_f.Log.Debug("\u0073\u006b\u0069\u0070p\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045G\u005f\u004f\u0062\u006a\u0065c\u0074\u0043\u0068\u006f\u0069\u0063\u0065\u0073\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _ebb.Name)
		if _cdab := d.Skip(); _cdab != nil {
			return _cdab
		}
	}
	return nil
}

// Validate validates the CT_ShapeNonVisual and its children
func (_ccba *CT_ShapeNonVisual) Validate() error {
	return _ccba.ValidateWithPath("\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065\u004e\u006f\u006e\u0056i\u0073\u0075\u0061\u006c")
}
func (_edf *EG_ObjectChoices) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	_edf.ObjectChoicesChoice.MarshalXML(e, _c.StartElement{})
	return nil
}
func NewCT_Picture() *CT_Picture {
	_adc := &CT_Picture{}
	_adc.NvPicPr = NewCT_PictureNonVisual()
	_adc.BlipFill = _e.NewCT_BlipFillProperties()
	_adc.SpPr = _e.NewCT_ShapeProperties()
	return _adc
}

type CT_Shape struct {

	// Reference to Custom Function
	MacroAttr *string

	// Text Link
	TextlinkAttr *string

	// Lock Text
	FLocksTextAttr *bool

	// Publish to Server
	FPublishedAttr *bool

	// Non-Visual Shape Properties
	NvSpPr *CT_ShapeNonVisual

	// Shape Properties
	SpPr *_e.CT_ShapeProperties

	// Shape Style
	Style *_e.CT_ShapeStyle

	// Shape Text Body
	TxBody *_e.CT_TextBody
}

func (_bbgd *CT_Shape) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _bbgd.MacroAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u006d\u0061\u0063r\u006f"}, Value: _g.Sprintf("\u0025\u0076", *_bbgd.MacroAttr)})
	}
	if _bbgd.TextlinkAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0074\u0065\u0078\u0074\u006c\u0069\u006e\u006b"}, Value: _g.Sprintf("\u0025\u0076", *_bbgd.TextlinkAttr)})
	}
	if _bbgd.FLocksTextAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0066\u004c\u006f\u0063\u006b\u0073\u0054\u0065\u0078\u0074"}, Value: _g.Sprintf("\u0025\u0064", _dfgd(*_bbgd.FLocksTextAttr))})
	}
	if _bbgd.FPublishedAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0066\u0050\u0075\u0062\u006c\u0069\u0073\u0068\u0065\u0064"}, Value: _g.Sprintf("\u0025\u0064", _dfgd(*_bbgd.FPublishedAttr))})
	}
	e.EncodeToken(start)
	_ffa := _c.StartElement{Name: _c.Name{Local: "\u006e\u0076\u0053\u0070\u0050\u0072"}}
	e.EncodeElement(_bbgd.NvSpPr, _ffa)
	_afcb := _c.StartElement{Name: _c.Name{Local: "\u0073\u0070\u0050\u0072"}}
	e.EncodeElement(_bbgd.SpPr, _afcb)
	if _bbgd.Style != nil {
		_ecgc := _c.StartElement{Name: _c.Name{Local: "\u0073\u0074\u0079l\u0065"}}
		e.EncodeElement(_bbgd.Style, _ecgc)
	}
	if _bbgd.TxBody != nil {
		_beae := _c.StartElement{Name: _c.Name{Local: "\u0074\u0078\u0042\u006f\u0064\u0079"}}
		e.EncodeElement(_bbgd.TxBody, _beae)
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

// Validate validates the EG_ObjectChoicesChoice and its children
func (_dcdg *EG_ObjectChoicesChoice) Validate() error {
	return _dcdg.ValidateWithPath("\u0045\u0047\u005f\u004fbj\u0065\u0063\u0074\u0043\u0068\u006f\u0069\u0063\u0065\u0073\u0043\u0068\u006f\u0069c\u0065")
}

// Validate validates the CT_PictureNonVisual and its children
func (_bca *CT_PictureNonVisual) Validate() error {
	return _bca.ValidateWithPath("\u0043\u0054\u005f\u0050ic\u0074\u0075\u0072\u0065\u004e\u006f\u006e\u0056\u0069\u0073\u0075\u0061\u006c")
}

// ValidateWithPath validates the CT_Shape and its children, prefixing error messages with path
func (_ebca *CT_Shape) ValidateWithPath(path string) error {
	if _afce := _ebca.NvSpPr.ValidateWithPath(path + "\u002fN\u0076\u0053\u0070\u0050\u0072"); _afce != nil {
		return _afce
	}
	if _ecgd := _ebca.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ecgd != nil {
		return _ecgd
	}
	if _ebca.Style != nil {
		if _bfab := _ebca.Style.ValidateWithPath(path + "\u002f\u0053\u0074\u0079\u006c\u0065"); _bfab != nil {
			return _bfab
		}
	}
	if _ebca.TxBody != nil {
		if _bge := _ebca.TxBody.ValidateWithPath(path + "\u002fT\u0078\u0042\u006f\u0064\u0079"); _bge != nil {
			return _bge
		}
	}
	return nil
}

type CT_GroupShapeChoice struct {
	Sp           *CT_Shape
	GrpSp        *CT_GroupShape
	GraphicFrame *CT_GraphicFrame
	CxnSp        *CT_Connector
	Pic          *CT_Picture
}

func NewEG_ObjectChoicesChoice() *EG_ObjectChoicesChoice {
	_dgdc := &EG_ObjectChoicesChoice{}
	return _dgdc
}

// Validate validates the CT_Marker and its children
func (_edd *CT_Marker) Validate() error {
	return _edd.ValidateWithPath("\u0043T\u005f\u004d\u0061\u0072\u006b\u0065r")
}

// ValidateWithPath validates the EG_ObjectChoicesChoice and its children, prefixing error messages with path
func (_aba *EG_ObjectChoicesChoice) ValidateWithPath(path string) error {
	if _aba.Sp != nil {
		if _ega := _aba.Sp.ValidateWithPath(path + "\u002f\u0053\u0070"); _ega != nil {
			return _ega
		}
	}
	if _aba.GrpSp != nil {
		if _cfaa := _aba.GrpSp.ValidateWithPath(path + "\u002f\u0047\u0072\u0070\u0053\u0070"); _cfaa != nil {
			return _cfaa
		}
	}
	if _aba.GraphicFrame != nil {
		if _dbcad := _aba.GraphicFrame.ValidateWithPath(path + "\u002f\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0046\u0072\u0061\u006d\u0065"); _dbcad != nil {
			return _dbcad
		}
	}
	if _aba.CxnSp != nil {
		if _bdcg := _aba.CxnSp.ValidateWithPath(path + "\u002f\u0043\u0078\u006e\u0053\u0070"); _bdcg != nil {
			return _bdcg
		}
	}
	if _aba.Pic != nil {
		if _ebef := _aba.Pic.ValidateWithPath(path + "\u002f\u0050\u0069\u0063"); _ebef != nil {
			return _ebef
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PictureNonVisual and its children, prefixing error messages with path
func (_bdde *CT_PictureNonVisual) ValidateWithPath(path string) error {
	if _fgb := _bdde.CNvPr.ValidateWithPath(path + "\u002f\u0043\u004e\u0076\u0050\u0072"); _fgb != nil {
		return _fgb
	}
	if _dafc := _bdde.CNvPicPr.ValidateWithPath(path + "\u002fC\u004e\u0076\u0050\u0069\u0063\u0050r"); _dafc != nil {
		return _dafc
	}
	return nil
}
func NewEG_ObjectChoices() *EG_ObjectChoices {
	_becb := &EG_ObjectChoices{}
	_becb.ObjectChoicesChoice = NewEG_ObjectChoicesChoice()
	return _becb
}

// Validate validates the CT_GroupShape and its children
func (_dea *CT_GroupShape) Validate() error {
	return _dea.ValidateWithPath("\u0043\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0053\u0068\u0061\u0070\u0065")
}
func (_bdb *CT_Shape) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_bdb.NvSpPr = NewCT_ShapeNonVisual()
	_bdb.SpPr = _e.NewCT_ShapeProperties()
	for _, _agg := range start.Attr {
		if _agg.Name.Local == "\u006d\u0061\u0063r\u006f" {
			_deab := _agg.Value
			_bdb.MacroAttr = &_deab
			continue
		}
		if _agg.Name.Local == "\u0074\u0065\u0078\u0074\u006c\u0069\u006e\u006b" {
			_cgge := _agg.Value
			_bdb.TextlinkAttr = &_cgge
			continue
		}
		if _agg.Name.Local == "\u0066\u004c\u006f\u0063\u006b\u0073\u0054\u0065\u0078\u0074" {
			_gegb, _afe := _b.ParseBool(_agg.Value)
			if _afe != nil {
				return _afe
			}
			_bdb.FLocksTextAttr = &_gegb
			continue
		}
		if _agg.Name.Local == "\u0066\u0050\u0075\u0062\u006c\u0069\u0073\u0068\u0065\u0064" {
			_dgc, _edda := _b.ParseBool(_agg.Value)
			if _edda != nil {
				return _edda
			}
			_bdb.FPublishedAttr = &_dgc
			continue
		}
	}
_afed:
	for {
		_dcfe, _gef := d.Token()
		if _gef != nil {
			return _gef
		}
		switch _dcfc := _dcfe.(type) {
		case _c.StartElement:
			switch _dcfc.Name {
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u006e\u0076\u0053\u0070\u0050\u0072"}:
				if _dag := d.DecodeElement(_bdb.NvSpPr, &_dcfc); _dag != nil {
					return _dag
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0073\u0070\u0050\u0072"}:
				if _gec := d.DecodeElement(_bdb.SpPr, &_dcfc); _gec != nil {
					return _gec
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0073\u0074\u0079l\u0065"}:
				_bdb.Style = _e.NewCT_ShapeStyle()
				if _cagd := d.DecodeElement(_bdb.Style, &_dcfc); _cagd != nil {
					return _cagd
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0074\u0078\u0042\u006f\u0064\u0079"}:
				_bdb.TxBody = _e.NewCT_TextBody()
				if _ggg := d.DecodeElement(_bdb.TxBody, &_dcfc); _ggg != nil {
					return _ggg
				}
			default:
				_f.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065\u0020\u0025\u0076", _dcfc.Name)
				if _fgda := d.Skip(); _fgda != nil {
					return _fgda
				}
			}
		case _c.EndElement:
			break _afed
		case _c.CharData:
		}
	}
	return nil
}
func (_gdae *CT_GroupShape) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	_gdae.NvGrpSpPr = NewCT_GroupShapeNonVisual()
	_gdae.GrpSpPr = _e.NewCT_GroupShapeProperties()
_dge:
	for {
		_ag, _eabb := d.Token()
		if _eabb != nil {
			return _eabb
		}
		switch _fgd := _ag.(type) {
		case _c.StartElement:
			switch _fgd.Name {
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u006ev\u0047\u0072\u0070\u0053\u0070\u0050r"}:
				if _ddg := d.DecodeElement(_gdae.NvGrpSpPr, &_fgd); _ddg != nil {
					return _ddg
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0067r\u0070\u0053\u0070\u0050\u0072"}:
				if _deb := d.DecodeElement(_gdae.GrpSpPr, &_fgd); _deb != nil {
					return _deb
				}
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0073\u0070"}:
				_fd := NewCT_GroupShapeChoice()
				if _gcd := d.DecodeElement(&_fd.Sp, &_fgd); _gcd != nil {
					return _gcd
				}
				_gdae.GroupShapeChoice = append(_gdae.GroupShapeChoice, _fd)
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0067\u0072\u0070S\u0070"}:
				_fdg := NewCT_GroupShapeChoice()
				if _gdd := d.DecodeElement(&_fdg.GrpSp, &_fgd); _gdd != nil {
					return _gdd
				}
				_gdae.GroupShapeChoice = append(_gdae.GroupShapeChoice, _fdg)
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0067\u0072\u0061p\u0068\u0069\u0063\u0046\u0072\u0061\u006d\u0065"}:
				_bfc := NewCT_GroupShapeChoice()
				if _bae := d.DecodeElement(&_bfc.GraphicFrame, &_fgd); _bae != nil {
					return _bae
				}
				_gdae.GroupShapeChoice = append(_gdae.GroupShapeChoice, _bfc)
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0063\u0078\u006eS\u0070"}:
				_gdga := NewCT_GroupShapeChoice()
				if _dbb := d.DecodeElement(&_gdga.CxnSp, &_fgd); _dbb != nil {
					return _dbb
				}
				_gdae.GroupShapeChoice = append(_gdae.GroupShapeChoice, _gdga)
			case _c.Name{Space: "h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", Local: "\u0070\u0069\u0063"}:
				_eac := NewCT_GroupShapeChoice()
				if _dcf := d.DecodeElement(&_eac.Pic, &_fgd); _dcf != nil {
					return _dcf
				}
				_gdae.GroupShapeChoice = append(_gdae.GroupShapeChoice, _eac)
			default:
				_f.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0047r\u006f\u0075\u0070\u0053\u0068\u0061\u0070\u0065 \u0025\u0076", _fgd.Name)
				if _gcg := d.Skip(); _gcg != nil {
					return _gcg
				}
			}
		case _c.EndElement:
			break _dge
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_ShapeNonVisual() *CT_ShapeNonVisual {
	_daff := &CT_ShapeNonVisual{}
	_daff.CNvPr = _e.NewCT_NonVisualDrawingProps()
	_daff.CNvSpPr = _e.NewCT_NonVisualDrawingShapeProps()
	return _daff
}

// Validate validates the CT_GraphicFrame and its children
func (_beg *CT_GraphicFrame) Validate() error {
	return _beg.ValidateWithPath("\u0043T\u005fG\u0072\u0061\u0070\u0068\u0069\u0063\u0046\u0072\u0061\u006d\u0065")
}
func _dfgd(_adce bool) uint8 {
	if _adce {
		return 1
	}
	return 0
}

// ValidateWithPath validates the CT_RelSizeAnchor and its children, prefixing error messages with path
func (_gaff *CT_RelSizeAnchor) ValidateWithPath(path string) error {
	if _ecg := _gaff.From.ValidateWithPath(path + "\u002f\u0046\u0072o\u006d"); _ecg != nil {
		return _ecg
	}
	if _dccf := _gaff.To.ValidateWithPath(path + "\u002f\u0054\u006f"); _dccf != nil {
		return _dccf
	}
	if _ded := _gaff.ObjectChoicesChoice.ValidateWithPath(path + "/\u004fb\u006a\u0065\u0063\u0074\u0043\u0068\u006f\u0069c\u0065\u0073\u0043\u0068oi\u0063\u0065"); _ded != nil {
		return _ded
	}
	return nil
}

// Validate validates the EG_AnchorChoice and its children
func (_fgfb *EG_AnchorChoice) Validate() error {
	return _fgfb.ValidateWithPath("\u0045G\u005fA\u006e\u0063\u0068\u006f\u0072\u0043\u0068\u006f\u0069\u0063\u0065")
}

// Validate validates the CT_Connector and its children
func (_eag *CT_Connector) Validate() error {
	return _eag.ValidateWithPath("\u0043\u0054\u005fC\u006f\u006e\u006e\u0065\u0063\u0074\u006f\u0072")
}
func init() {
	_gd.RegisterConstructor("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", "\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065\u004e\u006f\u006e\u0056i\u0073\u0075\u0061\u006c", NewCT_ShapeNonVisual)
	_gd.RegisterConstructor("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", "\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065", NewCT_Shape)
	_gd.RegisterConstructor("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", "C\u0054\u005f\u0043\u006fnn\u0065c\u0074\u006f\u0072\u004e\u006fn\u0056\u0069\u0073\u0075\u0061\u006c", NewCT_ConnectorNonVisual)
	_gd.RegisterConstructor("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", "\u0043\u0054\u005fC\u006f\u006e\u006e\u0065\u0063\u0074\u006f\u0072", NewCT_Connector)
	_gd.RegisterConstructor("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", "\u0043\u0054\u005f\u0050ic\u0074\u0075\u0072\u0065\u004e\u006f\u006e\u0056\u0069\u0073\u0075\u0061\u006c", NewCT_PictureNonVisual)
	_gd.RegisterConstructor("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", "\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065", NewCT_Picture)
	_gd.RegisterConstructor("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", "\u0043T\u005f\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0046\u0072\u0061m\u0065\u004e\u006f\u006e\u0056\u0069\u0073\u0075\u0061\u006c", NewCT_GraphicFrameNonVisual)
	_gd.RegisterConstructor("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", "\u0043T\u005fG\u0072\u0061\u0070\u0068\u0069\u0063\u0046\u0072\u0061\u006d\u0065", NewCT_GraphicFrame)
	_gd.RegisterConstructor("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", "\u0043\u0054\u005f\u0047ro\u0075\u0070\u0053\u0068\u0061\u0070\u0065\u004e\u006f\u006e\u0056\u0069\u0073\u0075a\u006c", NewCT_GroupShapeNonVisual)
	_gd.RegisterConstructor("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", "\u0043\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0053\u0068\u0061\u0070\u0065", NewCT_GroupShape)
	_gd.RegisterConstructor("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", "\u0043T\u005f\u004d\u0061\u0072\u006b\u0065r", NewCT_Marker)
	_gd.RegisterConstructor("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", "\u0043\u0054_\u0052\u0065\u006cS\u0069\u007a\u0065\u0041\u006e\u0063\u0068\u006f\u0072", NewCT_RelSizeAnchor)
	_gd.RegisterConstructor("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", "\u0043\u0054_\u0041\u0062\u0073S\u0069\u007a\u0065\u0041\u006e\u0063\u0068\u006f\u0072", NewCT_AbsSizeAnchor)
	_gd.RegisterConstructor("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", "\u0043\u0054\u005f\u0044\u0072\u0061\u0077\u0069\u006e\u0067", NewCT_Drawing)
	_gd.RegisterConstructor("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", "\u0045\u0047_\u004f\u0062\u006ae\u0063\u0074\u0043\u0068\u006f\u0069\u0063\u0065\u0073", NewEG_ObjectChoices)
	_gd.RegisterConstructor("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061t\u0073.\u006f\u0072\u0067\u002fd\u0072\u0061w\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074\u0044\u0072\u0061\u0077\u0069\u006e\u0067", "\u0045G\u005f\u0041\u006e\u0063\u0068\u006fr", NewEG_Anchor)
}
