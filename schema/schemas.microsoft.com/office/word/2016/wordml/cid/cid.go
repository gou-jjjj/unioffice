//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cid

import (
	_e "encoding/xml"
	_f "fmt"
	_d "strconv"
	_af "unioffice"
	_ee "unioffice/common/logger"
)

func (_bc *CommentsIds) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bc.CT_CommentsIds = *NewCT_CommentsIds()
_fa:
	for {
		_agc, _ec := d.Token()
		if _ec != nil {
			return _ec
		}
		switch _ea := _agc.(type) {
		case _e.StartElement:
			switch _ea.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006d\u0069\u0063\u0072\u006f\u0073\u006f\u0066\u0074\u002ec\u006f\u006d\u002f\u006f\u0066fi\u0063\u0065\u002f\u0077\u006f\u0072\u0064\u002f\u0032\u0030\u0031\u0036\u002f\u0077\u006f\u0072\u0064\u006d\u006c\u002f\u0063\u0069\u0064", Local: "\u0063o\u006d\u006d\u0065\u006e\u0074\u0049d"}:
				_ac := NewCT_CommentId()
				if _cg := d.DecodeElement(_ac, &_ea); _cg != nil {
					return _cg
				}
				_bc.CommentId = append(_bc.CommentId, _ac)
			default:
				_ee.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u006f\u006d\u006d\u0065\u006e\u0074\u0073\u0049\u0064\u0073\u0020\u0025\u0076", _ea.Name)
				if _gb := d.Skip(); _gb != nil {
					return _gb
				}
			}
		case _e.EndElement:
			break _fa
		case _e.CharData:
		}
	}
	return nil
}

type CT_CommentId struct {
	ParaIdAttr    string
	DurableIdAttr string
}

// Validate validates the CT_CommentsIds and its children
func (_gc *CT_CommentsIds) Validate() error {
	return _gc.ValidateWithPath("\u0043\u0054\u005f\u0043\u006f\u006d\u006d\u0065\u006et\u0073\u0049\u0064\u0073")
}

func (_ff *CT_CommentId) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _ae := range start.Attr {
		if _ae.Name.Local == "\u0070\u0061\u0072\u0061\u0049\u0064" {
			_aa := _ae.Value
			_ff.ParaIdAttr = _aa
			continue
		}
		if _ae.Name.Local == "\u0064u\u0072\u0061\u0062\u006c\u0065\u0049d" {
			_fd := _ae.Value
			_ff.DurableIdAttr = _fd
			continue
		}
	}
	for {
		_ffa, _fc := d.Token()
		if _fc != nil {
			return _f.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0043\u006fm\u006d\u0065\u006e\u0074\u0049\u0064\u003a\u0020\u0025\u0073", _fc)
		}
		if _gac, _ab := _ffa.(_e.EndElement); _ab && _gac.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the DecimaldurableId and its children
func (_ggc *DecimaldurableId) Validate() error {
	return _ggc.ValidateWithPath("\u0044\u0065c\u0069\u006d\u0061l\u0064\u0075\u0072\u0061\u0062\u006c\u0065\u0049\u0064")
}

func (_g *CT_CommentId) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0063i\u003a\u0070\u0061\u0072\u0061\u0049d"}, Value: _f.Sprintf("\u0025\u0076", _g.ParaIdAttr)})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0063\u0069\u003ad\u0075\u0072\u0061\u0062\u006c\u0065\u0049\u0064"}, Value: _f.Sprintf("\u0025\u0076", _g.DurableIdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type DecimaldurableId struct{ DurableIdAttr *int64 }

// ValidateWithPath validates the CT_CommentsIds and its children, prefixing error messages with path
func (_gg *CT_CommentsIds) ValidateWithPath(path string) error {
	for _eb, _ef := range _gg.CommentId {
		if _ffaa := _ef.ValidateWithPath(_f.Sprintf("\u0025\u0073/\u0043\u006f\u006dm\u0065\u006e\u0074\u0049\u0064\u005b\u0025\u0064\u005d", path, _eb)); _ffaa != nil {
			return _ffaa
		}
	}
	return nil
}

func NewCT_CommentId() *CT_CommentId { _fe := &CT_CommentId{}; return _fe }

func (_df *CT_CommentsIds) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _df.CommentId != nil {
		_aag := _e.StartElement{Name: _e.Name{Local: "\u0063\u0069\u003ac\u006f\u006d\u006d\u0065\u006e\u0074\u0049\u0064"}}
		for _, _dd := range _df.CommentId {
			e.EncodeElement(_dd, _aag)
		}
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_efc *CommentsIds) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006d\u0069\u0063\u0072\u006f\u0073\u006f\u0066\u0074\u002ec\u006f\u006d\u002f\u006f\u0066fi\u0063\u0065\u002f\u0077\u006f\u0072\u0064\u002f\u0032\u0030\u0031\u0036\u002f\u0077\u006f\u0072\u0064\u006d\u006c\u002f\u0063\u0069\u0064"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0063\u0069"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006d\u0069\u0063\u0072\u006f\u0073\u006f\u0066\u0074\u002ec\u006f\u006d\u002f\u006f\u0066fi\u0063\u0065\u002f\u0077\u006f\u0072\u0064\u002f\u0032\u0030\u0031\u0036\u002f\u0077\u006f\u0072\u0064\u006d\u006c\u002f\u0063\u0069\u0064"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0077"}, Value: "ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065s\u0073i\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u00306\u002fm\u0061\u0069n"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063\u0069\u003a\u0063\u006f\u006d\u006d\u0065\u006et\u0073\u0049\u0064\u0073"
	return _efc.CT_CommentsIds.MarshalXML(e, start)
}

func (_fcb *DecimaldurableId) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fcb.DurableIdAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0063\u0069\u003ad\u0075\u0072\u0061\u0062\u006c\u0065\u0049\u0064"}, Value: _f.Sprintf("\u0025\u0076", *_fcb.DurableIdAttr)})
	}
	start.Name.Local = "\u0063\u0069\u003a\u0064ec\u0069\u006d\u0061\u006c\u0064\u0075\u0072\u0061\u0062\u006c\u0065\u0049\u0064"
	return nil
}

// Validate validates the CT_CommentId and its children
func (_afd *CT_CommentId) Validate() error {
	return _afd.ValidateWithPath("\u0043\u0054\u005fC\u006f\u006d\u006d\u0065\u006e\u0074\u0049\u0064")
}

func NewCT_CommentsIds() *CT_CommentsIds { _aab := &CT_CommentsIds{}; return _aab }

func NewDecimaldurableId() *DecimaldurableId {
	_ed := &DecimaldurableId{}
	return _ed
}

func NewCommentsIds() *CommentsIds {
	_efg := &CommentsIds{}
	_efg.CT_CommentsIds = *NewCT_CommentsIds()
	return _efg
}

// Validate validates the CommentsIds and its children
func (_gd *CommentsIds) Validate() error {
	return _gd.ValidateWithPath("C\u006f\u006d\u006d\u0065\u006e\u0074\u0073\u0049\u0064\u0073")
}

// ValidateWithPath validates the CT_CommentId and its children, prefixing error messages with path
func (_de *CT_CommentId) ValidateWithPath(path string) error { return nil }

func (_cge *DecimaldurableId) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _abe := range start.Attr {
		if _abe.Name.Local == "\u0064u\u0072\u0061\u0062\u006c\u0065\u0049d" {
			_fae, _dg := _d.ParseInt(_abe.Value, 10, 64)
			if _dg != nil {
				return _dg
			}
			_cge.DurableIdAttr = &_fae
			continue
		}
	}
	for {
		_efb, _be := d.Token()
		if _be != nil {
			return _f.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0044\u0065\u0063\u0069\u006d\u0061\u006cd\u0075r\u0061\u0062\u006c\u0065\u0049\u0064\u003a \u0025\u0073", _be)
		}
		if _bd, _dgd := _efb.(_e.EndElement); _dgd && _bd.Name == start.Name {
			break
		}
	}
	return nil
}

func (_b *CT_CommentsIds) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_eeg:
	for {
		_ag, _bg := d.Token()
		if _bg != nil {
			return _bg
		}
		switch _aed := _ag.(type) {
		case _e.StartElement:
			switch _aed.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006d\u0069\u0063\u0072\u006f\u0073\u006f\u0066\u0074\u002ec\u006f\u006d\u002f\u006f\u0066fi\u0063\u0065\u002f\u0077\u006f\u0072\u0064\u002f\u0032\u0030\u0031\u0036\u002f\u0077\u006f\u0072\u0064\u006d\u006c\u002f\u0063\u0069\u0064", Local: "\u0063o\u006d\u006d\u0065\u006e\u0074\u0049d"}:
				_aac := NewCT_CommentId()
				if _ca := d.DecodeElement(_aac, &_aed); _ca != nil {
					return _ca
				}
				_b.CommentId = append(_b.CommentId, _aac)
			default:
				_ee.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u006f\u006d\u006d\u0065\u006e\u0074s\u0049d\u0073\u0020\u0025\u0076", _aed.Name)
				if _ffc := d.Skip(); _ffc != nil {
					return _ffc
				}
			}
		case _e.EndElement:
			break _eeg
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CommentsIds and its children, prefixing error messages with path
func (_deg *CommentsIds) ValidateWithPath(path string) error {
	if _cf := _deg.CT_CommentsIds.ValidateWithPath(path); _cf != nil {
		return _cf
	}
	return nil
}

type CommentsIds struct{ CT_CommentsIds }

type CT_CommentsIds struct {
	CommentId []*CT_CommentId
}

// ValidateWithPath validates the DecimaldurableId and its children, prefixing error messages with path
func (_gdg *DecimaldurableId) ValidateWithPath(path string) error { return nil }

func init() {
	_af.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006d\u0069\u0063\u0072\u006f\u0073\u006f\u0066\u0074\u002ec\u006f\u006d\u002f\u006f\u0066fi\u0063\u0065\u002f\u0077\u006f\u0072\u0064\u002f\u0032\u0030\u0031\u0036\u002f\u0077\u006f\u0072\u0064\u006d\u006c\u002f\u0063\u0069\u0064", "\u0043\u0054\u005f\u0043\u006f\u006d\u006d\u0065\u006et\u0073\u0049\u0064\u0073", NewCT_CommentsIds)
	_af.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006d\u0069\u0063\u0072\u006f\u0073\u006f\u0066\u0074\u002ec\u006f\u006d\u002f\u006f\u0066fi\u0063\u0065\u002f\u0077\u006f\u0072\u0064\u002f\u0032\u0030\u0031\u0036\u002f\u0077\u006f\u0072\u0064\u006d\u006c\u002f\u0063\u0069\u0064", "\u0043\u0054\u005fC\u006f\u006d\u006d\u0065\u006e\u0074\u0049\u0064", NewCT_CommentId)
	_af.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006d\u0069\u0063\u0072\u006f\u0073\u006f\u0066\u0074\u002ec\u006f\u006d\u002f\u006f\u0066fi\u0063\u0065\u002f\u0077\u006f\u0072\u0064\u002f\u0032\u0030\u0031\u0036\u002f\u0077\u006f\u0072\u0064\u006d\u006c\u002f\u0063\u0069\u0064", "c\u006f\u006d\u006d\u0065\u006e\u0074\u0073\u0049\u0064\u0073", NewCommentsIds)
	_af.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006d\u0069\u0063\u0072\u006f\u0073\u006f\u0066\u0074\u002ec\u006f\u006d\u002f\u006f\u0066fi\u0063\u0065\u002f\u0077\u006f\u0072\u0064\u002f\u0032\u0030\u0031\u0036\u002f\u0077\u006f\u0072\u0064\u006d\u006c\u002f\u0063\u0069\u0064", "\u0064\u0065c\u0069\u006d\u0061l\u0064\u0075\u0072\u0061\u0062\u006c\u0065\u0049\u0064", NewDecimaldurableId)
}
