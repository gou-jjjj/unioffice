//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package wordml

import (
	_c "encoding/xml"
	_b "fmt"
	_db "time"

	_g "github.com/gou-jjjj/unioffice"
	_dg "github.com/gou-jjjj/unioffice/common/logger"
	_gf "github.com/gou-jjjj/unioffice/schema/soo/dml"
	_de "github.com/gou-jjjj/unioffice/schema/soo/ofc/sharedTypes"
)

// ValidateWithPath validates the CT_Extension and its children, prefixing error messages with path
func (_deg *CT_Extension) ValidateWithPath(path string) error { return nil }
func ParseUnionST_OnOff(s string) (_de.ST_OnOff, error)       { return _de.ST_OnOff{}, nil }
func (_ef *CT_ExtensionList) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	start.Name.Local = "\u0077\u006f\u003a\u0043T_\u0045\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074"
	e.EncodeToken(start)
	if _ef.Ext != nil {
		_ae := _c.StartElement{Name: _c.Name{Local: "\u0077\u006f\u003a\u0065\u0078\u0074"}}
		for _, _bc := range _ef.Ext {
			e.EncodeElement(_bc, _ae)
		}
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}

type CT_ExtensionList struct{ Ext []*CT_Extension }

func ParseUnionST_TextSpacingPercentOrPercentString(s string) (_gf.ST_TextSpacingPercentOrPercentString, error) {
	return _gf.ParseUnionST_TextSpacingPercentOrPercentString(s)
}
func NewCT_ExtensionList() *CT_ExtensionList {
	_ag := &CT_ExtensionList{}
	return _ag
}
func ParseUnionST_TextFontScalePercentOrPercentString(s string) (_gf.ST_TextFontScalePercentOrPercentString, error) {
	return _gf.ParseUnionST_TextFontScalePercentOrPercentString(s)
}
func ParseUnionST_PositivePercentage(s string) (_gf.ST_PositivePercentage, error) {
	return _gf.ParseUnionST_PositivePercentage(s)
}

// Validate validates the CT_Extension and its children
func (_cc *CT_Extension) Validate() error {
	return _cc.ValidateWithPath("\u0043\u0054\u005fE\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e")
}
func ParseUnionST_AnimationDgmBuildType(s string) (_gf.ST_AnimationDgmBuildType, error) {
	return _gf.ParseUnionST_AnimationDgmBuildType(s)
}

type CT_Extension struct {
	UriAttr *string
	Any     _g.Any
}

func ParseUnionST_FixedPercentage(s string) (_gf.ST_FixedPercentage, error) {
	return _gf.ParseUnionST_FixedPercentage(s)
}

// ValidateWithPath validates the CT_ExtensionList and its children, prefixing error messages with path
func (_dc *CT_ExtensionList) ValidateWithPath(path string) error {
	for _be, _dbd := range _dc.Ext {
		if _fe := _dbd.ValidateWithPath(_b.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u005b\u0025\u0064\u005d", path, _be)); _fe != nil {
			return _fe
		}
	}
	return nil
}
func ParseUnionST_AnimationChartBuildType(s string) (_gf.ST_AnimationChartBuildType, error) {
	return _gf.ParseUnionST_AnimationChartBuildType(s)
}
func ParseUnionST_AdjAngle(s string) (_gf.ST_AdjAngle, error) { return _gf.ParseUnionST_AdjAngle(s) }
func ParseUnionST_Coordinate32(s string) (_gf.ST_Coordinate32, error) {
	return _gf.ParseUnionST_Coordinate32(s)
}
func ParseUnionST_Percentage(s string) (_gf.ST_Percentage, error) {
	return _gf.ParseUnionST_Percentage(s)
}
func (_dae *CT_ExtensionList) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
_bff:
	for {
		_eef, _bg := d.Token()
		if _bg != nil {
			return _bg
		}
		switch _ca := _eef.(type) {
		case _c.StartElement:
			switch _ca.Name {
			case _c.Name{Space: "\u0068\u0074t\u0070\u003a\u002f\u002f\u0073c\u0068\u0065\u006d\u0061\u0073.\u006d\u0069\u0063\u0072\u006f\u0073\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u002f\u0077\u006f\u0072\u0064\u002f\u0032\u0030\u0031\u0038\u002f\u0077\u006f\u0072\u0064\u006d\u006c", Local: "\u0065\u0078\u0074"}:
				_bgf := NewCT_Extension()
				if _caa := d.DecodeElement(_bgf, &_ca); _caa != nil {
					return _caa
				}
				_dae.Ext = append(_dae.Ext, _bgf)
			default:
				_dg.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0045\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074\u0020\u0025v", _ca.Name)
				if _efg := d.Skip(); _efg != nil {
					return _efg
				}
			}
		case _c.EndElement:
			break _bff
		case _c.CharData:
		}
	}
	return nil
}
func NewCT_Extension() *CT_Extension { _bf := &CT_Extension{}; return _bf }

// Validate validates the CT_ExtensionList and its children
func (_fg *CT_ExtensionList) Validate() error {
	return _fg.ValidateWithPath("\u0043\u0054_\u0045\u0078\u0074e\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074")
}
func (_e *CT_Extension) UnmarshalXML(d *_c.Decoder, start _c.StartElement) error {
	for _, _da := range start.Attr {
		if _da.Name.Local == "\u0075\u0072\u0069" {
			_fb := _da.Value
			_e.UriAttr = &_fb
			continue
		}
	}
_eed:
	for {
		_ed, _a := d.Token()
		if _a != nil {
			return _a
		}
		switch _dac := _ed.(type) {
		case _c.StartElement:
			switch _dac.Name {
			default:
				if _cf, _gff := _g.CreateElement(_dac); _gff != nil {
					return _gff
				} else {
					if _df := d.DecodeElement(_cf, &_dac); _df != nil {
						return _df
					}
					_e.Any = _cf
				}
			}
		case _c.EndElement:
			break _eed
		case _c.CharData:
		}
	}
	return nil
}
func ParseStdlibTime(s string) (_db.Time, error) { return _de.ParseStdlibTime(s) }
func ParseUnionST_PositiveFixedPercentage(s string) (_gf.ST_PositiveFixedPercentage, error) {
	return _gf.ParseUnionST_PositiveFixedPercentage(s)
}
func ParseUnionST_TextPoint(s string) (_gf.ST_TextPoint, error) { return _gf.ParseUnionST_TextPoint(s) }
func ParseUnionST_Coordinate(s string) (_gf.ST_Coordinate, error) {
	return _gf.ParseUnionST_Coordinate(s)
}
func (_f *CT_Extension) MarshalXML(e *_c.Encoder, start _c.StartElement) error {
	if _f.UriAttr != nil {
		start.Attr = append(start.Attr, _c.Attr{Name: _c.Name{Local: "\u0077\u006f\u003a\u0075\u0072\u0069"}, Value: _b.Sprintf("\u0025\u0076", *_f.UriAttr)})
	}
	e.EncodeToken(start)
	if _f.Any != nil {
		_f.Any.MarshalXML(e, _c.StartElement{})
	}
	e.EncodeToken(_c.EndElement{Name: start.Name})
	return nil
}
func ParseUnionST_AdjCoordinate(s string) (_gf.ST_AdjCoordinate, error) {
	return _gf.ParseUnionST_AdjCoordinate(s)
}
func _gfb(_gc bool) uint8 {
	if _gc {
		return 1
	}
	return 0
}

type Any interface {
	MarshalXML(_cb *_c.Encoder, _aa _c.StartElement) error
	UnmarshalXML(_cbg *_c.Decoder, _gg _c.StartElement) error
}

func init() {
	_g.RegisterConstructor("\u0068\u0074t\u0070\u003a\u002f\u002f\u0073c\u0068\u0065\u006d\u0061\u0073.\u006d\u0069\u0063\u0072\u006f\u0073\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u002f\u0077\u006f\u0072\u0064\u002f\u0032\u0030\u0031\u0038\u002f\u0077\u006f\u0072\u0064\u006d\u006c", "\u0043\u0054\u005fE\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e", NewCT_Extension)
	_g.RegisterConstructor("\u0068\u0074t\u0070\u003a\u002f\u002f\u0073c\u0068\u0065\u006d\u0061\u0073.\u006d\u0069\u0063\u0072\u006f\u0073\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u002f\u0077\u006f\u0072\u0064\u002f\u0032\u0030\u0031\u0038\u002f\u0077\u006f\u0072\u0064\u006d\u006c", "\u0043\u0054_\u0045\u0078\u0074e\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074", NewCT_ExtensionList)
}
