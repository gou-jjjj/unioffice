//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package symex

import (
	_e "encoding/xml"
	_a "fmt"

	_cd "github.com/gou-jjjj/unioffice"
)

type CT_SymEx struct {
	FontAttr *string
	CharAttr *string
}

func (_g *CT_SymEx) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _ce := range start.Attr {
		if _ce.Name.Local == "\u0066\u006f\u006e\u0074" {
			_ge := _ce.Value
			_g.FontAttr = &_ge
			continue
		}
		if _ce.Name.Local == "\u0063\u0068\u0061\u0072" {
			_af := _ce.Value
			_g.CharAttr = &_af
			continue
		}
	}
	for {
		_f, _b := d.Token()
		if _b != nil {
			return _a.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fS\u0079\u006d\u0045\u0078: \u0025\u0073", _b)
		}
		if _df, _cc := _f.(_e.EndElement); _cc && _df.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the SymEx and its children, prefixing error messages with path
func (_cca *SymEx) ValidateWithPath(path string) error {
	if _ab := _cca.CT_SymEx.ValidateWithPath(path); _ab != nil {
		return _ab
	}
	return nil
}
func (_d *CT_SymEx) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _d.FontAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0073\u003a\u0066\u006f\u006e\u0074"}, Value: _a.Sprintf("\u0025\u0076", *_d.FontAttr)})
	}
	if _d.CharAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0073\u003a\u0063\u0068\u0061\u0072"}, Value: _a.Sprintf("\u0025\u0076", *_d.CharAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}
func NewSymEx() *SymEx { _bd := &SymEx{}; _bd.CT_SymEx = *NewCT_SymEx(); return _bd }
func (_aa *SymEx) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_aa.CT_SymEx = *NewCT_SymEx()
	for _, _dd := range start.Attr {
		if _dd.Name.Local == "\u0066\u006f\u006e\u0074" {
			_bb := _dd.Value
			_aa.FontAttr = &_bb
			continue
		}
		if _dd.Name.Local == "\u0063\u0068\u0061\u0072" {
			_cf := _dd.Value
			_aa.CharAttr = &_cf
			continue
		}
	}
	for {
		_da, _ee := d.Token()
		if _ee != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0053\u0079\u006d\u0045x\u003a\u0020\u0025\u0073", _ee)
		}
		if _cbf, _dg := _da.(_e.EndElement); _dg && _cbf.Name == start.Name {
			break
		}
	}
	return nil
}
func NewCT_SymEx() *CT_SymEx { _cb := &CT_SymEx{}; return _cb }

// Validate validates the CT_SymEx and its children
func (_fc *CT_SymEx) Validate() error {
	return _fc.ValidateWithPath("\u0043\u0054\u005f\u0053\u0079\u006d\u0045\u0078")
}

// Validate validates the SymEx and its children
func (_ef *SymEx) Validate() error { return _ef.ValidateWithPath("\u0053\u0079\u006dE\u0078") }

// ValidateWithPath validates the CT_SymEx and its children, prefixing error messages with path
func (_fg *CT_SymEx) ValidateWithPath(path string) error { return nil }
func (_bf *SymEx) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006d\u0069\u0063\u0072\u006fs\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006ff\u0066\u0069\u0063\u0065\u002f\u0077\u006f\u0072\u0064\u002f\u0032\u0030\u00315\u002f\u0077\u006f\u0072\u0064\u006dl\u002f\u0073\u0079m\u0065\u0078"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006d\u0069\u0063\u0072\u006fs\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006ff\u0066\u0069\u0063\u0065\u002f\u0077\u006f\u0072\u0064\u002f\u0032\u0030\u00315\u002f\u0077\u006f\u0072\u0064\u006dl\u002f\u0073\u0079m\u0065\u0078"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078\u006d\u006c\u006e\u0073\u003a\u0073\u0068"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0077"}, Value: "ht\u0074\u0070:\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065s\u0073i\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u00306\u002fm\u0061\u0069n"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0073:\u0073\u0079\u006d\u0045\u0078"
	return _bf.CT_SymEx.MarshalXML(e, start)
}

type SymEx struct{ CT_SymEx }

func init() {
	_cd.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006d\u0069\u0063\u0072\u006fs\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006ff\u0066\u0069\u0063\u0065\u002f\u0077\u006f\u0072\u0064\u002f\u0032\u0030\u00315\u002f\u0077\u006f\u0072\u0064\u006dl\u002f\u0073\u0079m\u0065\u0078", "\u0043\u0054\u005f\u0053\u0079\u006d\u0045\u0078", NewCT_SymEx)
	_cd.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006d\u0069\u0063\u0072\u006fs\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006ff\u0066\u0069\u0063\u0065\u002f\u0077\u006f\u0072\u0064\u002f\u0032\u0030\u00315\u002f\u0077\u006f\u0072\u0064\u006dl\u002f\u0073\u0079m\u0065\u0078", "\u0073\u0079\u006dE\u0078", NewSymEx)
}
