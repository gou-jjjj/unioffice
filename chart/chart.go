//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart

import (
	_g "fmt"
	_a "math/rand"

	_e "github.com/gou-jjjj/unioffice"
	_af "github.com/gou-jjjj/unioffice/color"
	_gc "github.com/gou-jjjj/unioffice/drawing"
	_cf "github.com/gou-jjjj/unioffice/measurement"
	_ad "github.com/gou-jjjj/unioffice/schema/soo/dml"
	_cd "github.com/gou-jjjj/unioffice/schema/soo/dml/chart"
)

// SetText sets the series text.
func (_bdc BubbleChartSeries) SetText(s string) {
	_bdc._bc.Tx = _cd.NewCT_SerTx()
	_bdc._bc.Tx.SerTxChoice.V = &s
}

// InitializeDefaults the bar chart to its defaults
func (_dgf BarChart) InitializeDefaults() { _dgf.SetDirection(_cd.ST_BarDirCol) }

// SetText sets the series text.
func (_adc AreaChartSeries) SetText(s string) {
	_adc._gd.Tx = _cd.NewCT_SerTx()
	_adc._gd.Tx.SerTxChoice.V = &s
}

// InitializeDefaults initializes an area series to the default values.
func (_df AreaChartSeries) InitializeDefaults() {}

// RadarChart is an Radar chart that has a shaded Radar underneath a curve.
type RadarChart struct {
	chartBase
	_cfb *_cd.CT_RadarChart
}

// InitializeDefaults initializes a Bubble chart series to the default values.
func (_ea BubbleChartSeries) InitializeDefaults() {}

// InitializeDefaults the bar chart to its defaults
func (_fgad PieOfPieChart) InitializeDefaults() {
	_fgad._dgb.VaryColors = _cd.NewCT_Boolean()
	_fgad._dgb.VaryColors.ValAttr = _e.Bool(true)
	_fgad.SetType(_cd.ST_OfPieTypePie)
	_fgad._dgb.SecondPieSize = _cd.NewCT_SecondPieSize()
	_fgad._dgb.SecondPieSize.ValAttr = &_cd.ST_SecondPieSize{}
	_fgad._dgb.SecondPieSize.ValAttr.ST_SecondPieSizeUShort = _e.Uint16(75)
	_fdce := _cd.NewCT_ChartLines()
	_fdce.SpPr = _ad.NewCT_ShapeProperties()
	_fagc := _gc.MakeShapeProperties(_fdce.SpPr)
	_fagc.LineProperties().SetSolidFill(_af.Auto)
	_fgad._dgb.SerLines = append(_fgad._dgb.SerLines, _fdce)
}

// SetIndex sets the index of the series
func (_eebc SurfaceChartSeries) SetIndex(idx uint32) { _eebc._ccg.Idx.ValAttr = idx }
func (_agg DateAxis) MajorGridLines() GridLines {
	if _agg._fdg.MajorGridlines == nil {
		_agg._fdg.MajorGridlines = _cd.NewCT_ChartLines()
	}
	return GridLines{_agg._fdg.MajorGridlines}
}

// MakeAxisDataSource constructs an AxisDataSource wrapper.
func MakeAxisDataSource(x *_cd.CT_AxDataSource) CategoryAxisDataSource {
	return CategoryAxisDataSource{x}
}

// X returns the inner wrapped XML type.
func (_bdaf Line3DChart) X() *_cd.CT_Line3DChart { return _bdaf._aae }
func (_gfd ScatterChartSeries) CategoryAxis() CategoryAxisDataSource {
	if _gfd._fed.XVal == nil {
		_gfd._fed.XVal = _cd.NewCT_AxDataSource()
	}
	return MakeAxisDataSource(_gfd._fed.XVal)
}

// Axis is the interface implemented by different axes when assigning to a
// chart.
type Axis interface{ AxisID() uint32 }

// AddSeries adds a default series to an Doughnut chart.
func (_eba DoughnutChart) AddSeries() PieChartSeries {
	_ecb := _cd.NewCT_PieSer()
	_eba._aea.Ser = append(_eba._aea.Ser, _ecb)
	_ecb.Idx.ValAttr = uint32(len(_eba._aea.Ser) - 1)
	_ecb.Order.ValAttr = uint32(len(_eba._aea.Ser) - 1)
	_ece := PieChartSeries{_ecb}
	_ece.InitializeDefaults()
	return _ece
}

// X returns the inner wrapped XML type.
func (_dgg DateAxis) X() *_cd.CT_DateAx { return _dgg._fdg }

// X returns the inner wrapped XML type.
func (_abc PieOfPieChart) X() *_cd.CT_OfPieChart { return _abc._dgb }

// AddRadarChart adds a new radar chart to a chart.
func (_ddd Chart) AddRadarChart() RadarChart {
	_gdc := _cd.NewCT_PlotAreaChoice()
	_ddd._afag.Chart.PlotArea.PlotAreaChoice = append(_ddd._afag.Chart.PlotArea.PlotAreaChoice, _gdc)
	_gdc.RadarChart = _cd.NewCT_RadarChart()
	_ced := RadarChart{_cfb: _gdc.RadarChart}
	_ced.InitializeDefaults()
	return _ced
}

// Properties returns the bar chart series shape properties.
func (_adb AreaChartSeries) Properties() _gc.ShapeProperties {
	if _adb._gd.SpPr == nil {
		_adb._gd.SpPr = _ad.NewCT_ShapeProperties()
	}
	return _gc.MakeShapeProperties(_adb._gd.SpPr)
}

// SetDisplayBlanksAs controls how missing values are displayed.
func (_acf Chart) SetDisplayBlanksAs(v _cd.ST_DispBlanksAs) {
	_acf._afag.Chart.DispBlanksAs = _cd.NewCT_DispBlanksAs()
	_acf._afag.Chart.DispBlanksAs.ValAttr = v
}

// StockChart is a 2D Stock chart.
type StockChart struct {
	chartBase
	_dgbd *_cd.CT_StockChart
}

// Properties returns the line chart series shape properties.
func (_deac SurfaceChartSeries) Properties() _gc.ShapeProperties {
	if _deac._ccg.SpPr == nil {
		_deac._ccg.SpPr = _ad.NewCT_ShapeProperties()
	}
	return _gc.MakeShapeProperties(_deac._ccg.SpPr)
}

var _daa = []_af.Color{_af.RGB(0x33, 0x66, 0xcc), _af.RGB(0xDC, 0x39, 0x12), _af.RGB(0xFF, 0x99, 0x00), _af.RGB(0x10, 0x96, 0x18), _af.RGB(0x99, 0x00, 0x99), _af.RGB(0x3B, 0x3E, 0xAC), _af.RGB(0x00, 0x99, 0xC6), _af.RGB(0xDD, 0x44, 0x77), _af.RGB(0x66, 0xAA, 0x00), _af.RGB(0xB8, 0x2E, 0x2E), _af.RGB(0x31, 0x63, 0x95), _af.RGB(0x99, 0x44, 0x99), _af.RGB(0x22, 0xAA, 0x99), _af.RGB(0xAA, 0xAA, 0x11), _af.RGB(0x66, 0x33, 0xCC), _af.RGB(0xE6, 0x73, 0x00), _af.RGB(0x8B, 0x07, 0x07), _af.RGB(0x32, 0x92, 0x62), _af.RGB(0x55, 0x74, 0xA6), _af.RGB(0x3B, 0x3E, 0xAC)}

// X returns the inner wrapped XML type.
func (_b Area3DChart) X() *_cd.CT_Area3DChart { return _b._f }

// Order returns the order of the series
func (_cdea ScatterChartSeries) Order() uint32 { return _cdea._fed.Order.ValAttr }
func (_cda Marker) SetSymbol(s _cd.ST_MarkerStyle) {
	if s == _cd.ST_MarkerStyleUnset {
		_cda._abfd.Symbol = nil
	} else {
		_cda._abfd.Symbol = _cd.NewCT_MarkerStyle()
		_cda._abfd.Symbol.ValAttr = s
	}
}
func (_fge Bar3DChart) AddAxis(axis Axis) {
	_ce := _cd.NewCT_UnsignedInt()
	_ce.ValAttr = axis.AxisID()
	_fge._ecg.AxId = append(_fge._ecg.AxId, _ce)
}
func (_fedd ScatterChartSeries) InitializeDefaults() {
	_fedd.Properties().LineProperties().SetNoFill()
	_fedd.Marker().SetSymbol(_cd.ST_MarkerStyleAuto)
	_fedd.Labels().SetShowLegendKey(false)
	_fedd.Labels().SetShowValue(true)
	_fedd.Labels().SetShowPercent(false)
	_fedd.Labels().SetShowCategoryName(false)
	_fedd.Labels().SetShowSeriesName(false)
	_fedd.Labels().SetShowLeaderLines(false)
}

// SetText sets the series text.
func (_eeb BarChartSeries) SetText(s string) {
	_eeb._dgd.Tx = _cd.NewCT_SerTx()
	_eeb._dgd.Tx.SerTxChoice.V = &s
}

// Values returns the value data source.
func (_de BarChartSeries) Values() NumberDataSource {
	if _de._dgd.Val == nil {
		_de._dgd.Val = _cd.NewCT_NumDataSource()
	}
	return MakeNumberDataSource(_de._dgd.Val)
}
func (_fea DataLabels) SetShowLeaderLines(b bool) {
	_fea.ensureChoice()
	_fea._bcf.DLblsChoice.ShowLeaderLines = _cd.NewCT_Boolean()
	_fea._bcf.DLblsChoice.ShowLeaderLines.ValAttr = _e.Bool(b)
}
func (_feg Legend) SetPosition(p _cd.ST_LegendPos) {
	if p == _cd.ST_LegendPosUnset {
		_feg._egba.LegendPos = nil
	} else {
		_feg._egba.LegendPos = _cd.NewCT_LegendPos()
		_feg._egba.LegendPos.ValAttr = p
	}
}
func (_dea CategoryAxis) AxisID() uint32 { return _dea._cfef.AxId.ValAttr }

// InitializeDefaults the bar chart to its defaults
func (_cfe AreaChart) InitializeDefaults() {}

// AddSeries adds a default series to a Surface chart.
func (_ebdec Surface3DChart) AddSeries() SurfaceChartSeries {
	_cfefe := _ebdec.nextColor(len(_ebdec._gfgd.Ser))
	_adcb := _cd.NewCT_SurfaceSer()
	_ebdec._gfgd.Ser = append(_ebdec._gfgd.Ser, _adcb)
	_adcb.Idx.ValAttr = uint32(len(_ebdec._gfgd.Ser) - 1)
	_adcb.Order.ValAttr = uint32(len(_ebdec._gfgd.Ser) - 1)
	_cdb := SurfaceChartSeries{_adcb}
	_cdb.InitializeDefaults()
	_cdb.Properties().LineProperties().SetSolidFill(_cfefe)
	return _cdb
}

// AddSurfaceChart adds a new surface chart to a chart.
func (_fe Chart) AddSurfaceChart() SurfaceChart {
	_abd := _cd.NewCT_PlotAreaChoice()
	_fe._afag.Chart.PlotArea.PlotAreaChoice = append(_fe._afag.Chart.PlotArea.PlotAreaChoice, _abd)
	_abd.SurfaceChart = _cd.NewCT_SurfaceChart()
	_gfc(_fe._afag.Chart)
	_fe._afag.Chart.View3D.RotX.ValAttr = _e.Int8(90)
	_fe._afag.Chart.View3D.RotY.ValAttr = _e.Uint16(0)
	_fe._afag.Chart.View3D.Perspective = _cd.NewCT_Perspective()
	_fe._afag.Chart.View3D.Perspective.ValAttr = _e.Uint8(0)
	_eaa := SurfaceChart{_gdf: _abd.SurfaceChart}
	_eaa.InitializeDefaults()
	return _eaa
}
func (_fbd DataLabels) SetShowSeriesName(b bool) {
	_fbd.ensureChoice()
	_fbd._bcf.DLblsChoice.ShowSerName = _cd.NewCT_Boolean()
	_fbd._bcf.DLblsChoice.ShowSerName.ValAttr = _e.Bool(b)
}

// InitializeDefaults the bar chart to its defaults
func (_d Area3DChart) InitializeDefaults() {}

// X returns the inner wrapped XML type.
func (_gg Bar3DChart) X() *_cd.CT_Bar3DChart { return _gg._ecg }

type nullAxis byte

// CategoryAxis returns the category data source.
func (_da AreaChartSeries) CategoryAxis() CategoryAxisDataSource {
	if _da._gd.Cat == nil {
		_da._gd.Cat = _cd.NewCT_AxDataSource()
	}
	return MakeAxisDataSource(_da._gd.Cat)
}
func (_fgba DataLabels) SetShowLegendKey(b bool) {
	_fgba.ensureChoice()
	_fgba._bcf.DLblsChoice.ShowLegendKey = _cd.NewCT_Boolean()
	_fgba._bcf.DLblsChoice.ShowLegendKey.ValAttr = _e.Bool(b)
}

type Marker struct{ _abfd *_cd.CT_Marker }

func (_geg ValueAxis) SetTickLabelPosition(p _cd.ST_TickLblPos) {
	if p == _cd.ST_TickLblPosUnset {
		_geg._bced.TickLblPos = nil
	} else {
		_geg._bced.TickLblPos = _cd.NewCT_TickLblPos()
		_geg._bced.TickLblPos.ValAttr = p
	}
}

// X returns the inner wrapped XML type.
func (_dgc DoughnutChart) X() *_cd.CT_DoughnutChart { return _dgc._aea }

type CategoryAxis struct{ _cfef *_cd.CT_CatAx }

// SetHoleSize controls the hole size in the pie chart and is measured in percent.
func (_cgf DoughnutChart) SetHoleSize(pct uint8) {
	if _cgf._aea.HoleSize == nil {
		_cgf._aea.HoleSize = _cd.NewCT_HoleSize()
	}
	if _cgf._aea.HoleSize.ValAttr == nil {
		_cgf._aea.HoleSize.ValAttr = &_cd.ST_HoleSize{}
	}
	_cgf._aea.HoleSize.ValAttr.ST_HoleSizeUByte = &pct
}

// CategoryAxis returns the category data source.
func (_cgde RadarChartSeries) CategoryAxis() CategoryAxisDataSource {
	if _cgde._afb.Cat == nil {
		_cgde._afb.Cat = _cd.NewCT_AxDataSource()
	}
	return MakeAxisDataSource(_cgde._afb.Cat)
}

// AddSeries adds a default series to a line chart.
func (_abf Line3DChart) AddSeries() LineChartSeries {
	_adf := _abf.nextColor(len(_abf._aae.Ser))
	_fag := _cd.NewCT_LineSer()
	_abf._aae.Ser = append(_abf._aae.Ser, _fag)
	_fag.Idx.ValAttr = uint32(len(_abf._aae.Ser) - 1)
	_fag.Order.ValAttr = uint32(len(_abf._aae.Ser) - 1)
	_age := LineChartSeries{_fag}
	_age.InitializeDefaults()
	_age.Properties().LineProperties().SetSolidFill(_adf)
	_age.Properties().SetSolidFill(_adf)
	return _age
}

// AddCategoryAxis adds a category axis.
func (_gad Chart) AddCategoryAxis() CategoryAxis {
	_acb := _cd.NewCT_CatAx()
	if _gad._afag.Chart.PlotArea.PlotAreaChoice1 == nil {
		_gad._afag.Chart.PlotArea.PlotAreaChoice1 = []*_cd.CT_PlotAreaChoice1{}
	}
	_acb.AxId = _cd.NewCT_UnsignedInt()
	_acb.AxId.ValAttr = 0x7FFFFFFF & _a.Uint32()
	_gad._afag.Chart.PlotArea.PlotAreaChoice1 = append(_gad._afag.Chart.PlotArea.PlotAreaChoice1, &_cd.CT_PlotAreaChoice1{CatAx: _acb})
	_acb.Auto = _cd.NewCT_Boolean()
	_acb.Auto.ValAttr = _e.Bool(true)
	_acb.Delete = _cd.NewCT_Boolean()
	_acb.Delete.ValAttr = _e.Bool(false)
	_gbf := MakeCategoryAxis(_acb)
	_gbf.InitializeDefaults()
	return _gbf
}

// CreateEmptyNumberCache creates an empty number cache, which is used sometimes
// to increase file format compatibility.  It should actually contain the
// computed cell data, but just creating an empty one is good enough.
func (_bdfe NumberDataSource) CreateEmptyNumberCache() {
	_bdfe.ensureChoice()
	if _bdfe._cadd.NumDataSourceChoice.NumRef == nil {
		_bdfe._cadd.NumDataSourceChoice.NumRef = _cd.NewCT_NumRef()
	}
	_bdfe._cadd.NumDataSourceChoice.NumLit = nil
	_bdfe._cadd.NumDataSourceChoice.NumRef.NumCache = _cd.NewCT_NumData()
	_bdfe._cadd.NumDataSourceChoice.NumRef.NumCache.PtCount = _cd.NewCT_UnsignedInt()
	_bdfe._cadd.NumDataSourceChoice.NumRef.NumCache.PtCount.ValAttr = 0
}

// InitializeDefaults initializes an Radar series to the default values.
func (_dbbd RadarChartSeries) InitializeDefaults() {}

// Index returns the index of the series
func (_cdf SurfaceChartSeries) Index() uint32 { return _cdf._ccg.Idx.ValAttr }
func (_eebb SurfaceChartSeries) Values() NumberDataSource {
	if _eebb._ccg.Val == nil {
		_eebb._ccg.Val = _cd.NewCT_NumDataSource()
	}
	_bee := MakeNumberDataSource(_eebb._ccg.Val)
	_bee.CreateEmptyNumberCache()
	return _bee
}

// RemoveTitle removes any existing title from the chart.
func (_aafb Chart) RemoveTitle() {
	_aafb._afag.Chart.Title = nil
	_aafb._afag.Chart.AutoTitleDeleted = _cd.NewCT_Boolean()
	_aafb._afag.Chart.AutoTitleDeleted.ValAttr = _e.Bool(true)
}

// Properties returns the line chart series shape properties.
func (_gfce LineChartSeries) Properties() _gc.ShapeProperties {
	if _gfce._gcc.SpPr == nil {
		_gfce._gcc.SpPr = _ad.NewCT_ShapeProperties()
	}
	return _gc.MakeShapeProperties(_gfce._gcc.SpPr)
}
func (_eagb Title) SetText(s string) {
	if _eagb._bgb.Tx == nil {
		_eagb._bgb.Tx = _cd.NewCT_Tx()
	}
	if _eagb._bgb.Tx.TxChoice.Rich == nil {
		_eagb._bgb.Tx.TxChoice.Rich = _ad.NewCT_TextBody()
	}
	var _aabc *_ad.CT_TextParagraph
	if len(_eagb._bgb.Tx.TxChoice.Rich.P) == 0 {
		_aabc = _ad.NewCT_TextParagraph()
		_eagb._bgb.Tx.TxChoice.Rich.P = []*_ad.CT_TextParagraph{_aabc}
	} else {
		_aabc = _eagb._bgb.Tx.TxChoice.Rich.P[0]
	}
	var _gfag *_ad.EG_TextRun
	if len(_aabc.EG_TextRun) == 0 {
		_gfag = _ad.NewEG_TextRun()
		_aabc.EG_TextRun = []*_ad.EG_TextRun{_gfag}
	} else {
		_gfag = _aabc.EG_TextRun[0]
	}
	if _gfag.TextRunChoice.R == nil {
		_gfag.TextRunChoice.R = _ad.NewCT_RegularTextRun()
	}
	_gfag.TextRunChoice.R.T = s
}

type chartBase struct{}

// AddSeries adds a default series to a bar chart.
func (_dbb BarChart) AddSeries() BarChartSeries {
	_fga := _dbb.nextColor(len(_dbb._dga.Ser))
	_ee := _cd.NewCT_BarSer()
	_dbb._dga.Ser = append(_dbb._dga.Ser, _ee)
	_ee.Idx.ValAttr = uint32(len(_dbb._dga.Ser) - 1)
	_ee.Order.ValAttr = uint32(len(_dbb._dga.Ser) - 1)
	_dab := BarChartSeries{_ee}
	_dab.InitializeDefaults()
	_dab.Properties().SetSolidFill(_fga)
	return _dab
}

// InitializeDefaults the bar chart to its defaults
func (_cdcg RadarChart) InitializeDefaults() { _cdcg._cfb.RadarStyle.ValAttr = _cd.ST_RadarStyleMarker }

// SetOrder sets the order of the series
func (_dba ScatterChartSeries) SetOrder(idx uint32) { _dba._fed.Order.ValAttr = idx }

// AddAxis adds an axis to a Scatter chart.
func (_gfga ScatterChart) AddAxis(axis Axis) {
	_egg := _cd.NewCT_UnsignedInt()
	_egg.ValAttr = axis.AxisID()
	_gfga._defe.AxId = append(_gfga._defe.AxId, _egg)
}

type Legend struct{ _egba *_cd.CT_Legend }

// InitializeDefaults the Stock chart to its defaults
func (_bade StockChart) InitializeDefaults() {
	_bade._dgbd.HiLowLines = _cd.NewCT_ChartLines()
	_bade._dgbd.UpDownBars = _cd.NewCT_UpDownBars()
	_bade._dgbd.UpDownBars.GapWidth = _cd.NewCT_GapAmount()
	_bade._dgbd.UpDownBars.GapWidth.ValAttr = &_cd.ST_GapAmount{}
	_bade._dgbd.UpDownBars.GapWidth.ValAttr.ST_GapAmountUShort = _e.Uint16(150)
	_bade._dgbd.UpDownBars.UpBars = _cd.NewCT_UpDownBar()
	_bade._dgbd.UpDownBars.DownBars = _cd.NewCT_UpDownBar()
}

// CategoryAxis returns the category data source.
func (_be BarChartSeries) CategoryAxis() CategoryAxisDataSource {
	if _be._dgd.Cat == nil {
		_be._dgd.Cat = _cd.NewCT_AxDataSource()
	}
	return MakeAxisDataSource(_be._dgd.Cat)
}

// InitializeDefaults the bar chart to its defaults
func (_bfcf PieChart) InitializeDefaults() {
	_bfcf._cec.VaryColors = _cd.NewCT_Boolean()
	_bfcf._cec.VaryColors.ValAttr = _e.Bool(true)
}

// AddSeries adds a default series to an area chart.
func (_dd Area3DChart) AddSeries() AreaChartSeries {
	_eb := _dd.nextColor(len(_dd._f.Ser))
	_bg := _cd.NewCT_AreaSer()
	_dd._f.Ser = append(_dd._f.Ser, _bg)
	_bg.Idx.ValAttr = uint32(len(_dd._f.Ser) - 1)
	_bg.Order.ValAttr = uint32(len(_dd._f.Ser) - 1)
	_db := AreaChartSeries{_bg}
	_db.InitializeDefaults()
	_db.Properties().SetSolidFill(_eb)
	return _db
}

// SetText sets the series text.
func (_deg RadarChartSeries) SetText(s string) {
	_deg._afb.Tx = _cd.NewCT_SerTx()
	_deg._afb.Tx.SerTxChoice.V = &s
}

// RemoveLegend removes the legend if the chart has one.
func (_bdfc Chart) RemoveLegend()           { _bdfc._afag.Chart.Legend = nil }
func (_fcb SeriesAxis) InitializeDefaults() {}

type DataLabels struct{ _bcf *_cd.CT_DLbls }

func (_efe CategoryAxis) SetMajorTickMark(m _cd.ST_TickMark) {
	if m == _cd.ST_TickMarkUnset {
		_efe._cfef.MajorTickMark = nil
	} else {
		_efe._cfef.MajorTickMark = _cd.NewCT_TickMark()
		_efe._cfef.MajorTickMark.ValAttr = m
	}
}

// AddSeries adds a default series to an area chart.
func (_dg AreaChart) AddSeries() AreaChartSeries {
	_fd := _dg.nextColor(len(_dg._fa.Ser))
	_fg := _cd.NewCT_AreaSer()
	_dg._fa.Ser = append(_dg._fa.Ser, _fg)
	_fg.Idx.ValAttr = uint32(len(_dg._fa.Ser) - 1)
	_fg.Order.ValAttr = uint32(len(_dg._fa.Ser) - 1)
	_eg := AreaChartSeries{_fg}
	_eg.InitializeDefaults()
	_eg.Properties().SetSolidFill(_fd)
	return _eg
}

// Index returns the index of the series
func (_fbca LineChartSeries) Index() uint32 { return _fbca._gcc.Idx.ValAttr }
func (_ec Area3DChart) AddAxis(axis Axis) {
	_gf := _cd.NewCT_UnsignedInt()
	_gf.ValAttr = axis.AxisID()
	_ec._f.AxId = append(_ec._f.AxId, _gf)
}

// Properties returns the bar chart series shape properties.
func (_aaa RadarChartSeries) Properties() _gc.ShapeProperties {
	if _aaa._afb.SpPr == nil {
		_aaa._afb.SpPr = _ad.NewCT_ShapeProperties()
	}
	return _gc.MakeShapeProperties(_aaa._afb.SpPr)
}

// Pie3DChart is a Pie3D chart.
type Pie3DChart struct {
	chartBase
	_cacg *_cd.CT_Pie3DChart
}

func (_bec DateAxis) SetTickLabelPosition(p _cd.ST_TickLblPos) {
	if p == _cd.ST_TickLblPosUnset {
		_bec._fdg.TickLblPos = nil
	} else {
		_bec._fdg.TickLblPos = _cd.NewCT_TickLblPos()
		_bec._fdg.TickLblPos.ValAttr = p
	}
}

// SetOrder sets the order of the series
func (_geb LineChartSeries) SetOrder(idx uint32) { _geb._gcc.Order.ValAttr = idx }

// AddSeries adds a default series to an Pie3D chart.
func (_eag Pie3DChart) AddSeries() PieChartSeries {
	_acfb := _cd.NewCT_PieSer()
	_eag._cacg.Ser = append(_eag._cacg.Ser, _acfb)
	_acfb.Idx.ValAttr = uint32(len(_eag._cacg.Ser) - 1)
	_acfb.Order.ValAttr = uint32(len(_eag._cacg.Ser) - 1)
	_aegg := PieChartSeries{_acfb}
	_aegg.InitializeDefaults()
	return _aegg
}
func (_bdf CategoryAxis) SetMinorTickMark(m _cd.ST_TickMark) {
	if m == _cd.ST_TickMarkUnset {
		_bdf._cfef.MinorTickMark = nil
	} else {
		_bdf._cfef.MinorTickMark = _cd.NewCT_TickMark()
		_bdf._cfef.MinorTickMark.ValAttr = m
	}
}

// X returns the inner wrapped XML type.
func (_ab Chart) X() *_cd.ChartSpace     { return _ab._afag }
func MakeMarker(x *_cd.CT_Marker) Marker { return Marker{x} }

// AddDateAxis adds a value axis to the chart.
func (_eegc Chart) AddDateAxis() DateAxis {
	_ceg := _cd.NewCT_DateAx()
	if _eegc._afag.Chart.PlotArea.PlotAreaChoice1 == nil {
		_eegc._afag.Chart.PlotArea.PlotAreaChoice1 = []*_cd.CT_PlotAreaChoice1{}
	}
	_ceg.AxId = _cd.NewCT_UnsignedInt()
	_ceg.AxId.ValAttr = 0x7FFFFFFF & _a.Uint32()
	_eegc._afag.Chart.PlotArea.PlotAreaChoice1 = append(_eegc._afag.Chart.PlotArea.PlotAreaChoice1, &_cd.CT_PlotAreaChoice1{DateAx: _ceg})
	_ceg.Delete = _cd.NewCT_Boolean()
	_ceg.Delete.ValAttr = _e.Bool(false)
	_ceg.Scaling = _cd.NewCT_Scaling()
	_ceg.Scaling.Orientation = _cd.NewCT_Orientation()
	_ceg.Scaling.Orientation.ValAttr = _cd.ST_OrientationMinMax
	_ceg.AxSharedChoice = &_cd.EG_AxSharedChoice{}
	_ceg.AxSharedChoice.Crosses = _cd.NewCT_Crosses()
	_ceg.AxSharedChoice.Crosses.ValAttr = _cd.ST_CrossesAutoZero
	_ged := DateAxis{_ceg}
	_ged.MajorGridLines().Properties().LineProperties().SetSolidFill(_af.LightGray)
	_ged.SetMajorTickMark(_cd.ST_TickMarkOut)
	_ged.SetMinorTickMark(_cd.ST_TickMarkIn)
	_ged.SetTickLabelPosition(_cd.ST_TickLblPosNextTo)
	_ged.Properties().LineProperties().SetSolidFill(_af.Black)
	_ged.SetPosition(_cd.ST_AxPosL)
	return _ged
}

// PieChartSeries is a series to be used on an Pie chart.
type PieChartSeries struct{ _ccbf *_cd.CT_PieSer }

// AddBarChart adds a new bar chart to a chart.
func (_dbbc Chart) AddBarChart() BarChart {
	_caa := _cd.NewCT_PlotAreaChoice()
	_dbbc._afag.Chart.PlotArea.PlotAreaChoice = append(_dbbc._afag.Chart.PlotArea.PlotAreaChoice, _caa)
	_caa.BarChart = _cd.NewCT_BarChart()
	_caa.BarChart.Grouping = _cd.NewCT_BarGrouping()
	_caa.BarChart.Grouping.ValAttr = _cd.ST_BarGroupingStandard
	_aaf := BarChart{_dga: _caa.BarChart}
	_aaf.InitializeDefaults()
	return _aaf
}

type GridLines struct{ _dfce *_cd.CT_ChartLines }

// AddSeries adds a default series to an Pie chart.
func (_dbde PieChart) AddSeries() PieChartSeries {
	_dffa := _cd.NewCT_PieSer()
	_dbde._cec.Ser = append(_dbde._cec.Ser, _dffa)
	_dffa.Idx.ValAttr = uint32(len(_dbde._cec.Ser) - 1)
	_dffa.Order.ValAttr = uint32(len(_dbde._cec.Ser) - 1)
	_agb := PieChartSeries{_dffa}
	_agb.InitializeDefaults()
	return _agb
}
func (_ddca Title) ParagraphProperties() _gc.ParagraphProperties {
	if _ddca._bgb.Tx == nil {
		_ddca.SetText("")
	}
	if _ddca._bgb.Tx.TxChoice.Rich.P[0].PPr == nil {
		_ddca._bgb.Tx.TxChoice.Rich.P[0].PPr = _ad.NewCT_TextParagraphProperties()
	}
	return _gc.MakeParagraphProperties(_ddca._bgb.Tx.TxChoice.Rich.P[0].PPr)
}
func MakeDataLabels(x *_cd.CT_DLbls) DataLabels { return DataLabels{x} }

// InitializeDefaults initializes a bar chart series to the default values.
func (_aff BarChartSeries) InitializeDefaults() {}

type SurfaceChartSeries struct{ _ccg *_cd.CT_SurfaceSer }

// AddAxis adds an axis to a line chart.
func (_affg LineChart) AddAxis(axis Axis) {
	_agd := _cd.NewCT_UnsignedInt()
	_agd.ValAttr = axis.AxisID()
	_affg._bbf.AxId = append(_affg._bbf.AxId, _agd)
}

// InitializeDefaults the bar chart to its defaults
func (_dgge Pie3DChart) InitializeDefaults() {
	_dgge._cacg.VaryColors = _cd.NewCT_Boolean()
	_dgge._cacg.VaryColors.ValAttr = _e.Bool(true)
}
func (_eff Marker) SetSize(sz uint8) {
	_eff._abfd.Size = _cd.NewCT_MarkerSize()
	_eff._abfd.Size.ValAttr = &sz
}

// AddSeries adds a default series to a line chart.
func (_aafa LineChart) AddSeries() LineChartSeries {
	_fac := _aafa.nextColor(len(_aafa._bbf.Ser))
	_ebd := _cd.NewCT_LineSer()
	_aafa._bbf.Ser = append(_aafa._bbf.Ser, _ebd)
	_ebd.Idx.ValAttr = uint32(len(_aafa._bbf.Ser) - 1)
	_ebd.Order.ValAttr = uint32(len(_aafa._bbf.Ser) - 1)
	_gbb := LineChartSeries{_ebd}
	_gbb.InitializeDefaults()
	_gbb.Properties().LineProperties().SetSolidFill(_fac)
	return _gbb
}

// AddStockChart adds a new stock chart.
func (_gbe Chart) AddStockChart() StockChart {
	_edd := _cd.NewCT_PlotAreaChoice()
	_gbe._afag.Chart.PlotArea.PlotAreaChoice = append(_gbe._afag.Chart.PlotArea.PlotAreaChoice, _edd)
	_edd.StockChart = _cd.NewCT_StockChart()
	_cea := StockChart{_dgbd: _edd.StockChart}
	_cea.InitializeDefaults()
	return _cea
}

type DateAxis struct{ _fdg *_cd.CT_DateAx }

// X returns the inner wrapped XML type.
func (_ega RadarChart) X() *_cd.CT_RadarChart { return _ega._cfb }

// AddScatterChart adds a scatter (X/Y) chart.
func (_eed Chart) AddScatterChart() ScatterChart {
	_fde := _cd.NewCT_PlotAreaChoice()
	_eed._afag.Chart.PlotArea.PlotAreaChoice = append(_eed._afag.Chart.PlotArea.PlotAreaChoice, _fde)
	_fde.ScatterChart = _cd.NewCT_ScatterChart()
	_bbg := ScatterChart{_defe: _fde.ScatterChart}
	_bbg.InitializeDefaults()
	return _bbg
}

// Values returns the value data source.
func (_afa AreaChartSeries) Values() NumberDataSource {
	if _afa._gd.Val == nil {
		_afa._gd.Val = _cd.NewCT_NumDataSource()
	}
	return MakeNumberDataSource(_afa._gd.Val)
}
func MakeNumberDataSource(x *_cd.CT_NumDataSource) NumberDataSource { return NumberDataSource{x} }

// PieOfPieChart is a Pie chart with an extra Pie chart.
type PieOfPieChart struct {
	chartBase
	_dgb *_cd.CT_OfPieChart
}

// AddAxis adds an axis to a line chart.
func (_bge Line3DChart) AddAxis(axis Axis) {
	_fad := _cd.NewCT_UnsignedInt()
	_fad.ValAttr = axis.AxisID()
	_bge._aae.AxId = append(_bge._aae.AxId, _fad)
}
func (_affc ValueAxis) SetMajorTickMark(m _cd.ST_TickMark) {
	if m == _cd.ST_TickMarkUnset {
		_affc._bced.MajorTickMark = nil
	} else {
		_affc._bced.MajorTickMark = _cd.NewCT_TickMark()
		_affc._bced.MajorTickMark.ValAttr = m
	}
}
func (_gcb LineChartSeries) SetSmooth(b bool) {
	_gcb._gcc.Smooth = _cd.NewCT_Boolean()
	_gcb._gcc.Smooth.ValAttr = &b
}

// InitializeDefaults the Bubble chart to its defaults
func (_fc BubbleChart) InitializeDefaults() {}

// Order returns the order of the series
func (_afe LineChartSeries) Order() uint32 { return _afe._gcc.Order.ValAttr }

// AddLegend adds a legend to a chart, replacing any existing legend.
func (_dad Chart) AddLegend() Legend {
	_dad._afag.Chart.Legend = _cd.NewCT_Legend()
	_cbc := MakeLegend(_dad._afag.Chart.Legend)
	_cbc.InitializeDefaults()
	return _cbc
}

// AddSeries adds a default series to an Pie chart.
func (_gcbf PieOfPieChart) AddSeries() PieChartSeries {
	_daf := _cd.NewCT_PieSer()
	_gcbf._dgb.Ser = append(_gcbf._dgb.Ser, _daf)
	_daf.Idx.ValAttr = uint32(len(_gcbf._dgb.Ser) - 1)
	_daf.Order.ValAttr = uint32(len(_gcbf._dgb.Ser) - 1)
	_ggb := PieChartSeries{_daf}
	_ggb.InitializeDefaults()
	return _ggb
}

var NullAxis Axis = nullAxis(0)

func (_ada BubbleChart) AddAxis(axis Axis) {
	_edg := _cd.NewCT_UnsignedInt()
	_edg.ValAttr = axis.AxisID()
	_ada._bba.AxId = append(_ada._bba.AxId, _edg)
}

// X returns the inner wrapped XML type.
func (_egec GridLines) X() *_cd.CT_ChartLines { return _egec._dfce }

// X returns the inner wrapped XML type.
func (_bgac ScatterChartSeries) X() *_cd.CT_ScatterSer { return _bgac._fed }

// BubbleChartSeries is a series to be used on a Bubble chart.
type BubbleChartSeries struct{ _bc *_cd.CT_BubbleSer }

func (_dac chartBase) nextColor(_gab int) _af.Color { return _daa[_gab%len(_daa)] }
func (_edc Legend) InitializeDefaults() {
	_edc.SetPosition(_cd.ST_LegendPosR)
	_edc.SetOverlay(false)
	_edc.Properties().SetNoFill()
	_edc.Properties().LineProperties().SetNoFill()
}
func (_fb CategoryAxis) MajorGridLines() GridLines {
	if _fb._cfef.MajorGridlines == nil {
		_fb._cfef.MajorGridlines = _cd.NewCT_ChartLines()
	}
	return GridLines{_fb._cfef.MajorGridlines}
}

// AreaChartSeries is a series to be used on an area chart.
type AreaChartSeries struct{ _gd *_cd.CT_AreaSer }

// CategoryAxisDataSource specifies the data for an axis.  It's commonly used with
// SetReference to set the axis data to a range of cells.
type CategoryAxisDataSource struct{ _egb *_cd.CT_AxDataSource }

// AddAxis adds an axis to a Surface chart.
func (_ceeb Surface3DChart) AddAxis(axis Axis) {
	_gac := _cd.NewCT_UnsignedInt()
	_gac.ValAttr = axis.AxisID()
	_ceeb._gfgd.AxId = append(_ceeb._gfgd.AxId, _gac)
}
func (_abg ValueAxis) SetMinorTickMark(m _cd.ST_TickMark) {
	if m == _cd.ST_TickMarkUnset {
		_abg._bced.MinorTickMark = nil
	} else {
		_abg._bced.MinorTickMark = _cd.NewCT_TickMark()
		_abg._bced.MinorTickMark.ValAttr = m
	}
}

// Chart is a generic chart.
type Chart struct{ _afag *_cd.ChartSpace }

// SetOrder sets the order of the series
func (_cdbg SurfaceChartSeries) SetOrder(idx uint32) { _cdbg._ccg.Order.ValAttr = idx }

// AddSeries adds a default series to an Radar chart.
func (_eca RadarChart) AddSeries() RadarChartSeries {
	_cgd := _eca.nextColor(len(_eca._cfb.Ser))
	_aadf := _cd.NewCT_RadarSer()
	_eca._cfb.Ser = append(_eca._cfb.Ser, _aadf)
	_aadf.Idx.ValAttr = uint32(len(_eca._cfb.Ser) - 1)
	_aadf.Order.ValAttr = uint32(len(_eca._cfb.Ser) - 1)
	_cca := RadarChartSeries{_aadf}
	_cca.InitializeDefaults()
	_cca.Properties().SetSolidFill(_cgd)
	return _cca
}

// SetIndex sets the index of the series
func (_edb LineChartSeries) SetIndex(idx uint32) { _edb._gcc.Idx.ValAttr = idx }

// SetText sets the series text
func (_ggea LineChartSeries) SetText(s string) {
	_ggea._gcc.Tx = _cd.NewCT_SerTx()
	_ggea._gcc.Tx.SerTxChoice.V = &s
}
func _gfc(_dcb *_cd.CT_Chart) {
	_dcb.View3D = _cd.NewCT_View3D()
	_dcb.View3D.RotX = _cd.NewCT_RotX()
	_dcb.View3D.RotX.ValAttr = _e.Int8(15)
	_dcb.View3D.RotY = _cd.NewCT_RotY()
	_dcb.View3D.RotY.ValAttr = _e.Uint16(20)
	_dcb.View3D.RAngAx = _cd.NewCT_Boolean()
	_dcb.View3D.RAngAx.ValAttr = _e.Bool(false)
	_dcb.Floor = _cd.NewCT_Surface()
	_dcb.Floor.Thickness = _cd.NewCT_Thickness()
	_dcb.Floor.Thickness.ValAttr.Uint32 = _e.Uint32(0)
	_dcb.SideWall = _cd.NewCT_Surface()
	_dcb.SideWall.Thickness = _cd.NewCT_Thickness()
	_dcb.SideWall.Thickness.ValAttr.Uint32 = _e.Uint32(0)
	_dcb.BackWall = _cd.NewCT_Surface()
	_dcb.BackWall.Thickness = _cd.NewCT_Thickness()
	_dcb.BackWall.Thickness.ValAttr.Uint32 = _e.Uint32(0)
}

// SetText sets the series text.
func (_beba PieChartSeries) SetText(s string) {
	_beba._ccbf.Tx = _cd.NewCT_SerTx()
	_beba._ccbf.Tx.SerTxChoice.V = &s
}
func (_aab LineChartSeries) InitializeDefaults() {
	_aab.Properties().LineProperties().SetWidth(1 * _cf.Point)
	_aab.Properties().LineProperties().SetSolidFill(_af.Black)
	_aab.Properties().LineProperties().SetJoin(_gc.LineJoinRound)
	_aab.Marker().SetSymbol(_cd.ST_MarkerStyleNone)
	_aab.Labels().SetShowLegendKey(false)
	_aab.Labels().SetShowValue(false)
	_aab.Labels().SetShowPercent(false)
	_aab.Labels().SetShowCategoryName(false)
	_aab.Labels().SetShowSeriesName(false)
	_aab.Labels().SetShowLeaderLines(false)
}

// X returns the inner wrapped XML type.
func (_fcbf Title) X() *_cd.CT_Title { return _fcbf._bgb }

// Properties returns the bar chart series shape properties.
func (_fgb BarChartSeries) Properties() _gc.ShapeProperties {
	if _fgb._dgd.SpPr == nil {
		_fgb._dgd.SpPr = _ad.NewCT_ShapeProperties()
	}
	return _gc.MakeShapeProperties(_fgb._dgd.SpPr)
}

// Values returns the value data source.
func (_ac BubbleChartSeries) Values() NumberDataSource {
	if _ac._bc.YVal == nil {
		_ac._bc.YVal = _cd.NewCT_NumDataSource()
	}
	return MakeNumberDataSource(_ac._bc.YVal)
}

// AddArea3DChart adds a new area chart to a chart.
func (_aeg Chart) AddArea3DChart() Area3DChart {
	_gfc(_aeg._afag.Chart)
	_fdf := _cd.NewCT_PlotAreaChoice()
	_aeg._afag.Chart.PlotArea.PlotAreaChoice = append(_aeg._afag.Chart.PlotArea.PlotAreaChoice, _fdf)
	_fdf.Area3DChart = _cd.NewCT_Area3DChart()
	_cdc := Area3DChart{_f: _fdf.Area3DChart}
	_cdc.InitializeDefaults()
	return _cdc
}

// AddBar3DChart adds a new 3D bar chart to a chart.
func (_bga Chart) AddBar3DChart() Bar3DChart {
	_gfc(_bga._afag.Chart)
	_ccb := _cd.NewCT_PlotAreaChoice()
	_bga._afag.Chart.PlotArea.PlotAreaChoice = append(_bga._afag.Chart.PlotArea.PlotAreaChoice, _ccb)
	_ccb.Bar3DChart = _cd.NewCT_Bar3DChart()
	_ccb.Bar3DChart.Grouping = _cd.NewCT_BarGrouping()
	_ccb.Bar3DChart.Grouping.ValAttr = _cd.ST_BarGroupingStandard
	_ba := Bar3DChart{_ecg: _ccb.Bar3DChart}
	_ba.InitializeDefaults()
	return _ba
}

// Values returns the bubble size data source.
func (_dda BubbleChartSeries) BubbleSizes() NumberDataSource {
	if _dda._bc.BubbleSize == nil {
		_dda._bc.BubbleSize = _cd.NewCT_NumDataSource()
	}
	return MakeNumberDataSource(_dda._bc.BubbleSize)
}

// PieChart is a Pie chart.
type PieChart struct {
	chartBase
	_cec *_cd.CT_PieChart
}

func (_adac ValueAxis) Properties() _gc.ShapeProperties {
	if _adac._bced.SpPr == nil {
		_adac._bced.SpPr = _ad.NewCT_ShapeProperties()
	}
	return _gc.MakeShapeProperties(_adac._bced.SpPr)
}

// SetText sets the series text
func (_ddg SurfaceChartSeries) SetText(s string) {
	_ddg._ccg.Tx = _cd.NewCT_SerTx()
	_ddg._ccg.Tx.SerTxChoice.V = &s
}

// Index returns the index of the series
func (_ggba ScatterChartSeries) Index() uint32 { return _ggba._fed.Idx.ValAttr }

// Properties returns the Bubble chart series shape properties.
func (_bda BubbleChartSeries) Properties() _gc.ShapeProperties {
	if _bda._bc.SpPr == nil {
		_bda._bc.SpPr = _ad.NewCT_ShapeProperties()
	}
	return _gc.MakeShapeProperties(_bda._bc.SpPr)
}

// X returns the inner wrapped XML type.
func (_eede LineChart) X() *_cd.CT_LineChart { return _eede._bbf }
func (_daae Title) RunProperties() _gc.RunProperties {
	if _daae._bgb.Tx == nil {
		_daae.SetText("")
	}
	if _daae._bgb.Tx.TxChoice.Rich.P[0].EG_TextRun[0].TextRunChoice.R.RPr == nil {
		_daae._bgb.Tx.TxChoice.Rich.P[0].EG_TextRun[0].TextRunChoice.R.RPr = _ad.NewCT_TextCharacterProperties()
	}
	return _gc.MakeRunProperties(_daae._bgb.Tx.TxChoice.Rich.P[0].EG_TextRun[0].TextRunChoice.R.RPr)
}

// SetValues is used to set the source data to a set of values.
func (_cad CategoryAxisDataSource) SetValues(v []string) {
	_cad._egb.AxDataSourceChoice = _cd.NewCT_AxDataSourceChoice()
	_cad._egb.AxDataSourceChoice.StrLit = _cd.NewCT_StrData()
	_cad._egb.AxDataSourceChoice.StrLit.PtCount = _cd.NewCT_UnsignedInt()
	_cad._egb.AxDataSourceChoice.StrLit.PtCount.ValAttr = uint32(len(v))
	for _fdc, _efg := range v {
		_cad._egb.AxDataSourceChoice.StrLit.Pt = append(_cad._egb.AxDataSourceChoice.StrLit.Pt, &_cd.CT_StrVal{IdxAttr: uint32(_fdc), V: _efg})
	}
}

// LineChartSeries is the data series for a line chart.
type LineChartSeries struct{ _gcc *_cd.CT_LineSer }

// AddLineChart adds a new line chart to a chart.
func (_def Chart) AddLineChart() LineChart {
	_gfg := _cd.NewCT_PlotAreaChoice()
	_def._afag.Chart.PlotArea.PlotAreaChoice = append(_def._afag.Chart.PlotArea.PlotAreaChoice, _gfg)
	_gfg.LineChart = _cd.NewCT_LineChart()
	_gfg.LineChart.Grouping = _cd.NewCT_Grouping()
	_gfg.LineChart.Grouping.ValAttr = _cd.ST_GroupingStandard
	return LineChart{_bbf: _gfg.LineChart}
}
func (_bfg StockChart) AddAxis(axis Axis) {
	_gde := _cd.NewCT_UnsignedInt()
	_gde.ValAttr = axis.AxisID()
	_bfg._dgbd.AxId = append(_bfg._dgbd.AxId, _gde)
}

// Values returns the value data source.
func (_febc RadarChartSeries) Values() NumberDataSource {
	if _febc._afb.Val == nil {
		_febc._afb.Val = _cd.NewCT_NumDataSource()
	}
	return MakeNumberDataSource(_febc._afb.Val)
}

// DoughnutChart is a Doughnut chart.
type DoughnutChart struct {
	chartBase
	_aea *_cd.CT_DoughnutChart
}

func (_cbb Marker) Properties() _gc.ShapeProperties {
	if _cbb._abfd.SpPr == nil {
		_cbb._abfd.SpPr = _ad.NewCT_ShapeProperties()
	}
	return _gc.MakeShapeProperties(_cbb._abfd.SpPr)
}
func (_bdec ValueAxis) SetPosition(p _cd.ST_AxPos) {
	_bdec._bced.AxPos = _cd.NewCT_AxPos()
	_bdec._bced.AxPos.ValAttr = p
}
func (_ddc DataLabels) ensureChoice() {
	if _ddc._bcf.DLblsChoice == nil {
		_ddc._bcf.DLblsChoice = _cd.NewCT_DLblsChoice()
	}
}

// AddValueAxis adds a value axis to the chart.
func (_dcd Chart) AddValueAxis() ValueAxis {
	_gbda := _cd.NewCT_ValAx()
	if _dcd._afag.Chart.PlotArea.PlotAreaChoice1 == nil {
		_dcd._afag.Chart.PlotArea.PlotAreaChoice1 = []*_cd.CT_PlotAreaChoice1{}
	}
	_gbda.AxId = _cd.NewCT_UnsignedInt()
	_gbda.AxId.ValAttr = 0x7FFFFFFF & _a.Uint32()
	_dcd._afag.Chart.PlotArea.PlotAreaChoice1 = append(_dcd._afag.Chart.PlotArea.PlotAreaChoice1, &_cd.CT_PlotAreaChoice1{ValAx: _gbda})
	_gbda.Delete = _cd.NewCT_Boolean()
	_gbda.Delete.ValAttr = _e.Bool(false)
	_gbda.Scaling = _cd.NewCT_Scaling()
	_gbda.Scaling.Orientation = _cd.NewCT_Orientation()
	_gbda.Scaling.Orientation.ValAttr = _cd.ST_OrientationMinMax
	_gbda.AxSharedChoice = &_cd.EG_AxSharedChoice{}
	_gbda.AxSharedChoice.Crosses = _cd.NewCT_Crosses()
	_gbda.AxSharedChoice.Crosses.ValAttr = _cd.ST_CrossesAutoZero
	_gbda.CrossBetween = _cd.NewCT_CrossBetween()
	_gbda.CrossBetween.ValAttr = _cd.ST_CrossBetweenBetween
	_ddae := MakeValueAxis(_gbda)
	_ddae.MajorGridLines().Properties().LineProperties().SetSolidFill(_af.LightGray)
	_ddae.SetMajorTickMark(_cd.ST_TickMarkOut)
	_ddae.SetMinorTickMark(_cd.ST_TickMarkIn)
	_ddae.SetTickLabelPosition(_cd.ST_TickLblPosNextTo)
	_ddae.Properties().LineProperties().SetSolidFill(_af.Black)
	_ddae.SetPosition(_cd.ST_AxPosL)
	return _ddae
}
func (_gdaa DateAxis) SetMinorTickMark(m _cd.ST_TickMark) {
	if m == _cd.ST_TickMarkUnset {
		_gdaa._fdg.MinorTickMark = nil
	} else {
		_gdaa._fdg.MinorTickMark = _cd.NewCT_TickMark()
		_gdaa._fdg.MinorTickMark.ValAttr = m
	}
}
func (_efb LineChartSeries) CategoryAxis() CategoryAxisDataSource {
	if _efb._gcc.Cat == nil {
		_efb._gcc.Cat = _cd.NewCT_AxDataSource()
	}
	return MakeAxisDataSource(_efb._gcc.Cat)
}

// X returns the inner wrapped XML type.
func (_bed PieChart) X() *_cd.CT_PieChart { return _bed._cec }

// Values returns the value data source.
func (_ddcd PieChartSeries) Values() NumberDataSource {
	if _ddcd._ccbf.Val == nil {
		_ddcd._ccbf.Val = _cd.NewCT_NumDataSource()
	}
	return MakeNumberDataSource(_ddcd._ccbf.Val)
}

// X returns the inner wrapped XML type.
func (_ggf StockChart) X() *_cd.CT_StockChart { return _ggf._dgbd }

// CategoryAxis returns the category data source.
func (_ef BubbleChartSeries) CategoryAxis() CategoryAxisDataSource {
	if _ef._bc.XVal == nil {
		_ef._bc.XVal = _cd.NewCT_AxDataSource()
	}
	return MakeAxisDataSource(_ef._bc.XVal)
}

// X returns the inner wrapped XML type.
func (_bb AreaChart) X() *_cd.CT_AreaChart { return _bb._fa }

// AddSeries adds a default series to a Bubble chart.
func (_fcd BubbleChart) AddSeries() BubbleChartSeries {
	_dc := _fcd.nextColor(len(_fcd._bba.Ser))
	_fda := _cd.NewCT_BubbleSer()
	_fcd._bba.Ser = append(_fcd._bba.Ser, _fda)
	_fda.Idx.ValAttr = uint32(len(_fcd._bba.Ser) - 1)
	_fda.Order.ValAttr = uint32(len(_fcd._bba.Ser) - 1)
	_cee := BubbleChartSeries{_fda}
	_cee.InitializeDefaults()
	_cee.Properties().SetSolidFill(_dc)
	return _cee
}
func (_cgc DateAxis) SetPosition(p _cd.ST_AxPos) {
	_cgc._fdg.AxPos = _cd.NewCT_AxPos()
	_cgc._fdg.AxPos.ValAttr = p
}

// InitializeDefaults the bar chart to its defaults
func (_cc Bar3DChart) InitializeDefaults() { _cc.SetDirection(_cd.ST_BarDirCol) }
func (_dbd nullAxis) AxisID() uint32       { return 0 }
func (_cab SurfaceChart) InitializeDefaults() {
	_cab._gdf.Wireframe = _cd.NewCT_Boolean()
	_cab._gdf.Wireframe.ValAttr = _e.Bool(false)
	_cab._gdf.BandFmts = _cd.NewCT_BandFmts()
	for _fbe := 0; _fbe < 15; _fbe++ {
		_edgb := _cd.NewCT_BandFmt()
		_edgb.Idx.ValAttr = uint32(_fbe)
		_edgb.SpPr = _ad.NewCT_ShapeProperties()
		_eaae := _gc.MakeShapeProperties(_edgb.SpPr)
		_eaae.SetSolidFill(_cab.nextColor(_fbe))
		_cab._gdf.BandFmts.BandFmt = append(_cab._gdf.BandFmts.BandFmt, _edgb)
	}
}

type ScatterChart struct {
	chartBase
	_defe *_cd.CT_ScatterChart
}

// BarChart is a 2D bar chart.
type BarChart struct {
	chartBase
	_dga *_cd.CT_BarChart
}

// SetIndex sets the index of the series
func (_aac ScatterChartSeries) SetIndex(idx uint32) { _aac._fed.Idx.ValAttr = idx }
func (_eaag ValueAxis) AxisID() uint32              { return _eaag._bced.AxId.ValAttr }
func (_bf CategoryAxis) Properties() _gc.ShapeProperties {
	if _bf._cfef.SpPr == nil {
		_bf._cfef.SpPr = _ad.NewCT_ShapeProperties()
	}
	return _gc.MakeShapeProperties(_bf._cfef.SpPr)
}

// AreaChart is an area chart that has a shaded area underneath a curve.
type AreaChart struct {
	chartBase
	_fa *_cd.CT_AreaChart
}

// Marker returns the marker properties.
func (_bdafa ScatterChartSeries) Marker() Marker {
	if _bdafa._fed.Marker == nil {
		_bdafa._fed.Marker = _cd.NewCT_Marker()
	}
	return MakeMarker(_bdafa._fed.Marker)
}

// SetLabelReference is used to set the source data to a range of cells
// containing strings.
func (_dfc CategoryAxisDataSource) SetLabelReference(s string) {
	_dfc._egb.AxDataSourceChoice = _cd.NewCT_AxDataSourceChoice()
	_dfc._egb.AxDataSourceChoice.StrRef = _cd.NewCT_StrRef()
	_dfc._egb.AxDataSourceChoice.StrRef.F = s
}

// Surface3DChart is a 3D view of a surface chart.
type Surface3DChart struct {
	chartBase
	_gfgd *_cd.CT_Surface3DChart
}

// SetValues sets values directly on a source.
func (_fefd NumberDataSource) SetValues(v []float64) {
	_fefd.ensureChoice()
	_fefd._cadd.NumDataSourceChoice.NumRef = nil
	_fefd._cadd.NumDataSourceChoice.NumLit = _cd.NewCT_NumData()
	_fefd._cadd.NumDataSourceChoice.NumLit.PtCount = _cd.NewCT_UnsignedInt()
	_fefd._cadd.NumDataSourceChoice.NumLit.PtCount.ValAttr = uint32(len(v))
	for _fbce, _agc := range v {
		_fefd._cadd.NumDataSourceChoice.NumLit.Pt = append(_fefd._cadd.NumDataSourceChoice.NumLit.Pt, &_cd.CT_NumVal{IdxAttr: uint32(_fbce), V: _g.Sprintf("\u0025\u0067", _agc)})
	}
}

// AddAreaChart adds a new area chart to a chart.
func (_eeg Chart) AddAreaChart() AreaChart {
	_ag := _cd.NewCT_PlotAreaChoice()
	_eeg._afag.Chart.PlotArea.PlotAreaChoice = append(_eeg._afag.Chart.PlotArea.PlotAreaChoice, _ag)
	_ag.AreaChart = _cd.NewCT_AreaChart()
	_cef := AreaChart{_fa: _ag.AreaChart}
	_cef.InitializeDefaults()
	return _cef
}

// X returns the inner wrapped XML type.
func (_ebe BubbleChart) X() *_cd.CT_BubbleChart { return _ebe._bba }
func (_dfe DateAxis) SetMajorTickMark(m _cd.ST_TickMark) {
	if m == _cd.ST_TickMarkUnset {
		_dfe._fdg.MajorTickMark = nil
	} else {
		_dfe._fdg.MajorTickMark = _cd.NewCT_TickMark()
		_dfe._fdg.MajorTickMark.ValAttr = m
	}
}

type Line3DChart struct {
	chartBase
	_aae *_cd.CT_Line3DChart
}

func (_cg DataLabels) SetShowValue(b bool) {
	_cg.ensureChoice()
	_cg._bcf.DLblsChoice.ShowVal = _cd.NewCT_Boolean()
	_cg._bcf.DLblsChoice.ShowVal.ValAttr = _e.Bool(b)
}

// X returns the inner wrapped XML type.
func (_cbf SeriesAxis) X() *_cd.CT_SerAx { return _cbf._dbaa }

// InitializeDefaults initializes an Pie series to the default values.
func (_bad PieChartSeries) InitializeDefaults() {}

// AddSeries adds a default series to a Surface chart.
func (_gfgdf SurfaceChart) AddSeries() SurfaceChartSeries {
	_fadc := _gfgdf.nextColor(len(_gfgdf._gdf.Ser))
	_bbac := _cd.NewCT_SurfaceSer()
	_gfgdf._gdf.Ser = append(_gfgdf._gdf.Ser, _bbac)
	_bbac.Idx.ValAttr = uint32(len(_gfgdf._gdf.Ser) - 1)
	_bbac.Order.ValAttr = uint32(len(_gfgdf._gdf.Ser) - 1)
	_gdag := SurfaceChartSeries{_bbac}
	_gdag.InitializeDefaults()
	_gdag.Properties().LineProperties().SetSolidFill(_fadc)
	return _gdag
}

// AddPieOfPieChart adds a new pie chart to a chart.
func (_afc Chart) AddPieOfPieChart() PieOfPieChart {
	_fgc := _cd.NewCT_PlotAreaChoice()
	_afc._afag.Chart.PlotArea.PlotAreaChoice = append(_afc._afag.Chart.PlotArea.PlotAreaChoice, _fgc)
	_fgc.OfPieChart = _cd.NewCT_OfPieChart()
	_beb := PieOfPieChart{_dgb: _fgc.OfPieChart}
	_beb.InitializeDefaults()
	return _beb
}
func (_aga GridLines) Properties() _gc.ShapeProperties {
	if _aga._dfce.SpPr == nil {
		_aga._dfce.SpPr = _ad.NewCT_ShapeProperties()
	}
	return _gc.MakeShapeProperties(_aga._dfce.SpPr)
}

// X returns the inner wrapped XML type.
func (_adfg SurfaceChart) X() *_cd.CT_SurfaceChart { return _adfg._gdf }
func (_bbd Legend) SetOverlay(b bool) {
	_bbd._egba.Overlay = _cd.NewCT_Boolean()
	_bbd._egba.Overlay.ValAttr = _e.Bool(b)
}
func (_fec NumberDataSource) ensureChoice() {
	if _fec._cadd.NumDataSourceChoice == nil {
		_fec._cadd.NumDataSourceChoice = _cd.NewCT_NumDataSourceChoice()
	}
}

// RadarChartSeries is a series to be used on an Radar chart.
type RadarChartSeries struct{ _afb *_cd.CT_RadarSer }

func (_dff DateAxis) SetCrosses(axis Axis) { _dff._fdg.CrossAx.ValAttr = axis.AxisID() }

type LineChart struct {
	chartBase
	_bbf *_cd.CT_LineChart
}

// Labels returns the data label properties.
func (_efff ScatterChartSeries) Labels() DataLabels {
	if _efff._fed.DLbls == nil {
		_efff._fed.DLbls = _cd.NewCT_DLbls()
	}
	return MakeDataLabels(_efff._fed.DLbls)
}
func (_cbcd DateAxis) AxisID() uint32 { return _cbcd._fdg.AxId.ValAttr }

// AddAxis adds an axis to a Surface chart.
func (_bdcg SurfaceChart) AddAxis(axis Axis) {
	_bfde := _cd.NewCT_UnsignedInt()
	_bfde.ValAttr = axis.AxisID()
	_bdcg._gdf.AxId = append(_bdcg._gdf.AxId, _bfde)
}

// X returns the inner wrapped XML type.
func (_dbc LineChartSeries) X() *_cd.CT_LineSer { return _dbc._gcc }

// AddSeries adds a default series to a Scatter chart.
func (_dgdf ScatterChart) AddSeries() ScatterChartSeries {
	_fbg := _dgdf.nextColor(len(_dgdf._defe.Ser))
	_fegg := _cd.NewCT_ScatterSer()
	_dgdf._defe.Ser = append(_dgdf._defe.Ser, _fegg)
	_fegg.Idx.ValAttr = uint32(len(_dgdf._defe.Ser) - 1)
	_fegg.Order.ValAttr = uint32(len(_dgdf._defe.Ser) - 1)
	_bdg := ScatterChartSeries{_fegg}
	_bdg.InitializeDefaults()
	_bdg.Marker().Properties().LineProperties().SetSolidFill(_fbg)
	_bdg.Marker().Properties().SetSolidFill(_fbg)
	return _bdg
}
func (_gcg LineChartSeries) Values() NumberDataSource {
	if _gcg._gcc.Val == nil {
		_gcg._gcc.Val = _cd.NewCT_NumDataSource()
	}
	return MakeNumberDataSource(_gcg._gcc.Val)
}
func (_bde CategoryAxis) InitializeDefaults() {
	_bde.SetPosition(_cd.ST_AxPosB)
	_bde.SetMajorTickMark(_cd.ST_TickMarkOut)
	_bde.SetMinorTickMark(_cd.ST_TickMarkIn)
	_bde.SetTickLabelPosition(_cd.ST_TickLblPosNextTo)
	_bde.MajorGridLines().Properties().LineProperties().SetSolidFill(_af.LightGray)
	_bde.Properties().LineProperties().SetSolidFill(_af.Black)
}

type ValueAxis struct{ _bced *_cd.CT_ValAx }

func (_dge ValueAxis) MajorGridLines() GridLines {
	if _dge._bced.MajorGridlines == nil {
		_dge._bced.MajorGridlines = _cd.NewCT_ChartLines()
	}
	return GridLines{_dge._bced.MajorGridlines}
}
func (_cefg DataLabels) SetShowCategoryName(b bool) {
	_cefg.ensureChoice()
	_cefg._bcf.DLblsChoice.ShowCatName = _cd.NewCT_Boolean()
	_cefg._bcf.DLblsChoice.ShowCatName.ValAttr = _e.Bool(b)
}
func (_fagd SeriesAxis) SetCrosses(axis Axis) { _fagd._dbaa.CrossAx.ValAttr = axis.AxisID() }
func (_fdcc ValueAxis) SetCrosses(axis Axis)  { _fdcc._bced.CrossAx.ValAttr = axis.AxisID() }
func (_efa ScatterChartSeries) Values() NumberDataSource {
	if _efa._fed.YVal == nil {
		_efa._fed.YVal = _cd.NewCT_NumDataSource()
	}
	return MakeNumberDataSource(_efa._fed.YVal)
}

// AddLine3DChart adds a new 3D line chart to a chart.
func (_aa Chart) AddLine3DChart() Line3DChart {
	_gfc(_aa._afag.Chart)
	_gfa := _cd.NewCT_PlotAreaChoice()
	_aa._afag.Chart.PlotArea.PlotAreaChoice = append(_aa._afag.Chart.PlotArea.PlotAreaChoice, _gfa)
	_gfa.Line3DChart = _cd.NewCT_Line3DChart()
	_gfa.Line3DChart.Grouping = _cd.NewCT_Grouping()
	_gfa.Line3DChart.Grouping.ValAttr = _cd.ST_GroupingStandard
	return Line3DChart{_aae: _gfa.Line3DChart}
}

// SetDirection changes the direction of the bar chart (bar or column).
func (_ca Bar3DChart) SetDirection(d _cd.ST_BarDir) { _ca._ecg.BarDir.ValAttr = d }
func (_ae CategoryAxis) SetCrosses(axis Axis) {
	_ae._cfef.AxSharedChoice = _cd.NewEG_AxSharedChoice()
	_ae._cfef.AxSharedChoice.Crosses = _cd.NewCT_Crosses()
	_ae._cfef.AxSharedChoice.Crosses.ValAttr = _cd.ST_CrossesAutoZero
	_ae._cfef.CrossAx.ValAttr = axis.AxisID()
}
func MakeTitle(x *_cd.CT_Title) Title { return Title{x} }

// Bar3DChart is a 3D bar chart.
type Bar3DChart struct {
	chartBase
	_ecg *_cd.CT_Bar3DChart
}

// Properties returns the bar chart series shape properties.
func (_bgc PieChartSeries) Properties() _gc.ShapeProperties {
	if _bgc._ccbf.SpPr == nil {
		_bgc._ccbf.SpPr = _ad.NewCT_ShapeProperties()
	}
	return _gc.MakeShapeProperties(_bgc._ccbf.SpPr)
}
func (_gec SurfaceChartSeries) CategoryAxis() CategoryAxisDataSource {
	if _gec._ccg.Cat == nil {
		_gec._ccg.Cat = _cd.NewCT_AxDataSource()
	}
	return MakeAxisDataSource(_gec._ccg.Cat)
}

// X returns the inner wrapped XML type.
func (_cdg BarChart) X() *_cd.CT_BarChart { return _cdg._dga }
func (_ebdb Title) InitializeDefaults() {
	_ebdb.SetText("\u0054\u0069\u0074l\u0065")
	_ebdb.RunProperties().SetSize(16 * _cf.Point)
	_ebdb.RunProperties().SetSolidFill(_af.Black)
	_ebdb.RunProperties().SetFont("\u0043\u0061\u006c\u0069\u0062\u0020\u0072\u0069")
	_ebdb.RunProperties().SetBold(false)
}

// Area3DChart is an area chart that has a shaded area underneath a curve.
type Area3DChart struct {
	chartBase
	_f *_cd.CT_Area3DChart
}

func MakeValueAxis(x *_cd.CT_ValAx) ValueAxis { return ValueAxis{x} }
func (_ge BarChart) AddAxis(axis Axis) {
	_bd := _cd.NewCT_UnsignedInt()
	_bd.ValAttr = axis.AxisID()
	_ge._dga.AxId = append(_ge._dga.AxId, _bd)
}

// InitializeDefaults the bar chart to its defaults
func (_efge DoughnutChart) InitializeDefaults() {
	_efge._aea.VaryColors = _cd.NewCT_Boolean()
	_efge._aea.VaryColors.ValAttr = _e.Bool(true)
	_efge._aea.HoleSize = _cd.NewCT_HoleSize()
	_efge._aea.HoleSize.ValAttr = &_cd.ST_HoleSize{}
	_efge._aea.HoleSize.ValAttr.ST_HoleSizeUByte = _e.Uint8(50)
}

// X returns the inner wrapped XML type.
func (_gae Pie3DChart) X() *_cd.CT_Pie3DChart { return _gae._cacg }

// SetNumberReference is used to set the source data to a range of cells containing
// numbers.
func (_gb CategoryAxisDataSource) SetNumberReference(s string) {
	_gb._egb.AxDataSourceChoice = _cd.NewCT_AxDataSourceChoice()
	_gb._egb.AxDataSourceChoice.NumRef = _cd.NewCT_NumRef()
	_gb._egb.AxDataSourceChoice.NumRef.F = s
}
func (_eda CategoryAxis) SetTickLabelPosition(p _cd.ST_TickLblPos) {
	if p == _cd.ST_TickLblPosUnset {
		_eda._cfef.TickLblPos = nil
	} else {
		_eda._cfef.TickLblPos = _cd.NewCT_TickLblPos()
		_eda._cfef.TickLblPos.ValAttr = p
	}
}
func (_deag Legend) Properties() _gc.ShapeProperties {
	if _deag._egba.SpPr == nil {
		_deag._egba.SpPr = _ad.NewCT_ShapeProperties()
	}
	return _gc.MakeShapeProperties(_deag._egba.SpPr)
}
func (_eee CategoryAxis) SetPosition(p _cd.ST_AxPos) {
	_eee._cfef.AxPos = _cd.NewCT_AxPos()
	_eee._cfef.AxPos.ValAttr = p
}

// AddDoughnutChart adds a new doughnut (pie with a hole in the center) chart to a chart.
func (_bdcb Chart) AddDoughnutChart() DoughnutChart {
	_gge := _cd.NewCT_PlotAreaChoice()
	_bdcb._afag.Chart.PlotArea.PlotAreaChoice = append(_bdcb._afag.Chart.PlotArea.PlotAreaChoice, _gge)
	_gge.DoughnutChart = _cd.NewCT_DoughnutChart()
	_gea := DoughnutChart{_aea: _gge.DoughnutChart}
	_gea.InitializeDefaults()
	return _gea
}

// SetType sets the type the secone pie to either pie or bar
func (_bdfef PieOfPieChart) SetType(t _cd.ST_OfPieType) { _bdfef._dgb.OfPieType.ValAttr = t }

// Properties returns the chart's shape properties.
func (_feb Chart) Properties() _gc.ShapeProperties {
	if _feb._afag.SpPr == nil {
		_feb._afag.SpPr = _ad.NewCT_ShapeProperties()
	}
	return _gc.MakeShapeProperties(_feb._afag.SpPr)
}
func MakeSeriesAxis(x *_cd.CT_SerAx) SeriesAxis { return SeriesAxis{x} }

// BubbleChart is a 2D Bubble chart.
type BubbleChart struct {
	chartBase
	_bba *_cd.CT_BubbleChart
}

func (_dfeg ScatterChart) InitializeDefaults() {
	_dfeg._defe.ScatterStyle.ValAttr = _cd.ST_ScatterStyleMarker
}
func MakeLegend(l *_cd.CT_Legend) Legend { return Legend{l} }

type NumberDataSource struct{ _cadd *_cd.CT_NumDataSource }

// AddTitle sets a new title on the chart.
func (_efee Chart) AddTitle() Title {
	_efee._afag.Chart.Title = _cd.NewCT_Title()
	_efee._afag.Chart.Title.Overlay = _cd.NewCT_Boolean()
	_efee._afag.Chart.Title.Overlay.ValAttr = _e.Bool(false)
	_efee._afag.Chart.AutoTitleDeleted = _cd.NewCT_Boolean()
	_efee._afag.Chart.AutoTitleDeleted.ValAttr = _e.Bool(false)
	_dcdd := MakeTitle(_efee._afag.Chart.Title)
	_dcdd.InitializeDefaults()
	return _dcdd
}
func (_dca Surface3DChart) InitializeDefaults() {
	_dca._gfgd.Wireframe = _cd.NewCT_Boolean()
	_dca._gfgd.Wireframe.ValAttr = _e.Bool(false)
	_dca._gfgd.BandFmts = _cd.NewCT_BandFmts()
	for _bcg := 0; _bcg < 15; _bcg++ {
		_bcd := _cd.NewCT_BandFmt()
		_bcd.Idx.ValAttr = uint32(_bcg)
		_bcd.SpPr = _ad.NewCT_ShapeProperties()
		_ebde := _gc.MakeShapeProperties(_bcd.SpPr)
		_ebde.SetSolidFill(_dca.nextColor(_bcg))
		_dca._gfgd.BandFmts.BandFmt = append(_dca._gfgd.BandFmts.BandFmt, _bcd)
	}
}
func (_cgca NumberDataSource) SetReference(s string) {
	_cgca.ensureChoice()
	if _cgca._cadd.NumDataSourceChoice.NumRef == nil {
		_cgca._cadd.NumDataSourceChoice.NumRef = _cd.NewCT_NumRef()
	}
	_cgca._cadd.NumDataSourceChoice.NumRef.F = s
}

// X returns the inner wrapped XML type.
func (_bfc Legend) X() *_cd.CT_Legend { return _bfc._egba }

// CategoryAxis returns the category data source.
func (_agf PieChartSeries) CategoryAxis() CategoryAxisDataSource {
	if _agf._ccbf.Cat == nil {
		_agf._ccbf.Cat = _cd.NewCT_AxDataSource()
	}
	return MakeAxisDataSource(_agf._ccbf.Cat)
}

// X returns the inner wrapped XML type.
func (_bbaa BubbleChartSeries) X() *_cd.CT_BubbleSer { return _bbaa._bc }

// BarChartSeries is a series to be used on a bar chart.
type BarChartSeries struct{ _dgd *_cd.CT_BarSer }

// AddSurface3DChart adds a new 3D surface chart to a chart.
func (_cdec Chart) AddSurface3DChart() Surface3DChart {
	_eafa := _cd.NewCT_PlotAreaChoice()
	_cdec._afag.Chart.PlotArea.PlotAreaChoice = append(_cdec._afag.Chart.PlotArea.PlotAreaChoice, _eafa)
	_eafa.Surface3DChart = _cd.NewCT_Surface3DChart()
	_gfc(_cdec._afag.Chart)
	_fce := Surface3DChart{_gfgd: _eafa.Surface3DChart}
	_fce.InitializeDefaults()
	return _fce
}

// X returns the inner wrapped XML type.
func (_gce RadarChartSeries) X() *_cd.CT_RadarSer { return _gce._afb }

// Marker returns the marker properties.
func (_daac LineChartSeries) Marker() Marker {
	if _daac._gcc.Marker == nil {
		_daac._gcc.Marker = _cd.NewCT_Marker()
	}
	return MakeMarker(_daac._gcc.Marker)
}
func (_efgb Chart) AddSeriesAxis() SeriesAxis {
	_aee := _cd.NewCT_SerAx()
	if _efgb._afag.Chart.PlotArea.PlotAreaChoice1 == nil {
		_efgb._afag.Chart.PlotArea.PlotAreaChoice1 = []*_cd.CT_PlotAreaChoice1{}
	}
	_aee.AxId = _cd.NewCT_UnsignedInt()
	_aee.AxId.ValAttr = 0x7FFFFFFF & _a.Uint32()
	_efgb._afag.Chart.PlotArea.PlotAreaChoice1 = append(_efgb._afag.Chart.PlotArea.PlotAreaChoice1, &_cd.CT_PlotAreaChoice1{SerAx: _aee})
	_aee.Delete = _cd.NewCT_Boolean()
	_aee.Delete.ValAttr = _e.Bool(false)
	_fbc := MakeSeriesAxis(_aee)
	_fbc.InitializeDefaults()
	return _fbc
}

// X returns the inner wrapped XML type.
func (_ed AreaChartSeries) X() *_cd.CT_AreaSer { return _ed._gd }
func (_gfaf ScatterChartSeries) SetSmooth(b bool) {
	_gfaf._fed.Smooth = _cd.NewCT_Boolean()
	_gfaf._fed.Smooth.ValAttr = &b
}

// X returns the inner wrapped XML type.
func (_gaef SurfaceChartSeries) X() *_cd.CT_SurfaceSer { return _gaef._ccg }

// AddBubbleChart adds a new bubble chart.
func (_bff Chart) AddBubbleChart() BubbleChart {
	_egc := _cd.NewCT_PlotAreaChoice()
	_bff._afag.Chart.PlotArea.PlotAreaChoice = append(_bff._afag.Chart.PlotArea.PlotAreaChoice, _egc)
	_egc.BubbleChart = _cd.NewCT_BubbleChart()
	_cb := BubbleChart{_bba: _egc.BubbleChart}
	_cb.InitializeDefaults()
	return _cb
}

// X returns the inner wrapped XML type.
func (_bfd Surface3DChart) X() *_cd.CT_Surface3DChart { return _bfd._gfgd }
func (_dcg DataLabels) SetShowPercent(b bool) {
	_dcg.ensureChoice()
	_dcg._bcf.DLblsChoice.ShowPercent = _cd.NewCT_Boolean()
	_dcg._bcf.DLblsChoice.ShowPercent.ValAttr = _e.Bool(b)
}

type SeriesAxis struct{ _dbaa *_cd.CT_SerAx }

// AddPieChart adds a new pie chart to a chart.
func (_gbd Chart) AddPieChart() PieChart {
	_gda := _cd.NewCT_PlotAreaChoice()
	_gbd._afag.Chart.PlotArea.PlotAreaChoice = append(_gbd._afag.Chart.PlotArea.PlotAreaChoice, _gda)
	_gda.PieChart = _cd.NewCT_PieChart()
	_eaf := PieChart{_cec: _gda.PieChart}
	_eaf.InitializeDefaults()
	return _eaf
}

// AddPie3DChart adds a new pie chart to a chart.
func (_gdcb Chart) AddPie3DChart() Pie3DChart {
	_gfc(_gdcb._afag.Chart)
	_cdef := _cd.NewCT_PlotAreaChoice()
	_gdcb._afag.Chart.PlotArea.PlotAreaChoice = append(_gdcb._afag.Chart.PlotArea.PlotAreaChoice, _cdef)
	_cdef.Pie3DChart = _cd.NewCT_Pie3DChart()
	_ga := Pie3DChart{_cacg: _cdef.Pie3DChart}
	_ga.InitializeDefaults()
	return _ga
}
func (_cac DataLabels) SetPosition(p _cd.ST_DLblPos) {
	_cac.ensureChoice()
	_cac._bcf.DLblsChoice.DLblPos = _cd.NewCT_DLblPos()
	_cac._bcf.DLblsChoice.DLblPos.ValAttr = p
}

// Properties returns the line chart series shape properties.
func (_bfa ScatterChartSeries) Properties() _gc.ShapeProperties {
	if _bfa._fed.SpPr == nil {
		_bfa._fed.SpPr = _ad.NewCT_ShapeProperties()
	}
	return _gc.MakeShapeProperties(_bfa._fed.SpPr)
}

// AddSeries adds a default series to a Stock chart.
func (_eab StockChart) AddSeries() LineChartSeries {
	_dffd := _cd.NewCT_LineSer()
	_eab._dgbd.Ser = append(_eab._dgbd.Ser, _dffd)
	_dffd.Idx.ValAttr = uint32(len(_eab._dgbd.Ser) - 1)
	_dffd.Order.ValAttr = uint32(len(_eab._dgbd.Ser) - 1)
	_ffe := LineChartSeries{_dffd}
	_ffe.Values().CreateEmptyNumberCache()
	_ffe.Properties().LineProperties().SetNoFill()
	return _ffe
}
func (_ff AreaChart) AddAxis(axis Axis) {
	_ebb := _cd.NewCT_UnsignedInt()
	_ebb.ValAttr = axis.AxisID()
	_ff._fa.AxId = append(_ff._fa.AxId, _ebb)
}

// SetExplosion sets the value that the segements of the pie are 'exploded' by
func (_aad PieChartSeries) SetExplosion(v uint32) {
	_aad._ccbf.Explosion = _cd.NewCT_UnsignedInt()
	_aad._ccbf.Explosion.ValAttr = v
}

// Labels returns the data label properties.
func (_fef LineChartSeries) Labels() DataLabels {
	if _fef._gcc.DLbls == nil {
		_fef._gcc.DLbls = _cd.NewCT_DLbls()
	}
	return MakeDataLabels(_fef._gcc.DLbls)
}

// X returns the inner wrapped XML type.
func (_ecc ValueAxis) X() *_cd.CT_ValAx { return _ecc._bced }

// SurfaceChart is a 3D surface chart, viewed from the top-down.
type SurfaceChart struct {
	chartBase
	_gdf *_cd.CT_SurfaceChart
}

// SetDirection changes the direction of the bar chart (bar or column).
func (_cde BarChart) SetDirection(d _cd.ST_BarDir) { _cde._dga.BarDir.ValAttr = d }
func (_acc RadarChart) AddAxis(axis Axis) {
	_dbbcc := _cd.NewCT_UnsignedInt()
	_dbbcc.ValAttr = axis.AxisID()
	_acc._cfb.AxId = append(_acc._cfb.AxId, _dbbcc)
}

type Title struct{ _bgb *_cd.CT_Title }

// X returns the inner wrapped XML type.
func (_egf BarChartSeries) X() *_cd.CT_BarSer { return _egf._dgd }

// X returns the inner wrapped XML type.
func (_eebf ScatterChart) X() *_cd.CT_ScatterChart { return _eebf._defe }
func MakeChart(x *_cd.ChartSpace) Chart            { return Chart{x} }

// ScatterChartSeries is the data series for a scatter chart.
type ScatterChartSeries struct{ _fed *_cd.CT_ScatterSer }

func MakeCategoryAxis(x *_cd.CT_CatAx) CategoryAxis { return CategoryAxis{x} }

// X returns the inner wrapped XML type.
func (_cbba PieChartSeries) X() *_cd.CT_PieSer { return _cbba._ccbf }

// X returns the inner wrapped XML type.
func (_eef Marker) X() *_cd.CT_Marker { return _eef._abfd }
func (_aadfc SurfaceChartSeries) InitializeDefaults() {
	_aadfc.Properties().LineProperties().SetWidth(1 * _cf.Point)
	_aadfc.Properties().LineProperties().SetSolidFill(_af.Black)
	_aadfc.Properties().LineProperties().SetJoin(_gc.LineJoinRound)
}
func (_ecaf SeriesAxis) AxisID() uint32 { return _ecaf._dbaa.AxId.ValAttr }
func (_baf DateAxis) Properties() _gc.ShapeProperties {
	if _baf._fdg.SpPr == nil {
		_baf._fdg.SpPr = _ad.NewCT_ShapeProperties()
	}
	return _gc.MakeShapeProperties(_baf._fdg.SpPr)
}

// Order returns the order of the series
func (_cdaa SurfaceChartSeries) Order() uint32 { return _cdaa._ccg.Order.ValAttr }

// AddSeries adds a default series to a bar chart.
func (_ffa Bar3DChart) AddSeries() BarChartSeries {
	_ege := _ffa.nextColor(len(_ffa._ecg.Ser))
	_bgd := _cd.NewCT_BarSer()
	_ffa._ecg.Ser = append(_ffa._ecg.Ser, _bgd)
	_bgd.Idx.ValAttr = uint32(len(_ffa._ecg.Ser) - 1)
	_bgd.Order.ValAttr = uint32(len(_ffa._ecg.Ser) - 1)
	_gcf := BarChartSeries{_bgd}
	_gcf.InitializeDefaults()
	_gcf.Properties().SetSolidFill(_ege)
	return _gcf
}

// SetText sets the series text
func (_bce ScatterChartSeries) SetText(s string) {
	_bce._fed.Tx = _cd.NewCT_SerTx()
	_bce._fed.Tx.SerTxChoice.V = &s
}
