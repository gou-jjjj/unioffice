//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package wildcard

func _cg(_fb, _a []rune, _bgda int) int {
	for len(_a) > 0 {
		switch _a[0] {
		default:
			if len(_fb) == 0 {
				return -1
			}
			if _fb[0] != _a[0] {
				return _cg(_fb[1:], _a, _bgda+1)
			}
		case '?':
			if len(_fb) == 0 {
				return -1
			}
		case '*':
			if len(_fb) == 0 {
				return -1
			}
			_eb := _cg(_fb, _a[1:], _bgda)
			if _eb != -1 {
				return _bgda
			} else {
				_eb = _cg(_fb[1:], _a, _bgda)
				if _eb != -1 {
					return _bgda
				} else {
					return -1
				}
			}
		}
		_fb = _fb[1:]
		_a = _a[1:]
	}
	return _bgda
}
func MatchSimple(pattern, name string) bool {
	if pattern == "" {
		return name == pattern
	}
	if pattern == "\u002a" {
		return true
	}
	_ce := make([]rune, 0, len(name))
	_d := make([]rune, 0, len(pattern))
	for _, _de := range name {
		_ce = append(_ce, _de)
	}
	for _, _b := range pattern {
		_d = append(_d, _b)
	}
	_gd := true
	return _ga(_ce, _d, _gd)
}
func Index(pattern, name string) (_cf int) {
	if pattern == "" || pattern == "\u002a" {
		return 0
	}
	_f := make([]rune, 0, len(name))
	_bgd := make([]rune, 0, len(pattern))
	for _, _ea := range name {
		_f = append(_f, _ea)
	}
	for _, _beg := range pattern {
		_bgd = append(_bgd, _beg)
	}
	return _cg(_f, _bgd, 0)
}
func _ga(_bg, _ba []rune, _db bool) bool {
	for len(_ba) > 0 {
		switch _ba[0] {
		default:
			if len(_bg) == 0 || _bg[0] != _ba[0] {
				return false
			}
		case '?':
			if len(_bg) == 0 && !_db {
				return false
			}
		case '*':
			return _ga(_bg, _ba[1:], _db) || (len(_bg) > 0 && _ga(_bg[1:], _ba, _db))
		}
		_bg = _bg[1:]
		_ba = _ba[1:]
	}
	return len(_bg) == 0 && len(_ba) == 0
}
func Match(pattern, name string) (_ca bool) {
	if pattern == "" {
		return name == pattern
	}
	if pattern == "\u002a" {
		return true
	}
	_be := make([]rune, 0, len(name))
	_cd := make([]rune, 0, len(pattern))
	for _, _ee := range name {
		_be = append(_be, _ee)
	}
	for _, _gg := range pattern {
		_cd = append(_cd, _gg)
	}
	_ec := false
	return _ga(_be, _cd, _ec)
}
