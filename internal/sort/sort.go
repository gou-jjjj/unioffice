//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sort

import (
	_d "regexp"
	_gd "sort"
	_g "strconv"
)

func MergeSort(array []float64) []float64 {
	if len(array) <= 1 {
		_a := make([]float64, len(array))
		copy(_a, array)
		return _a
	}
	_eb := len(array) / 2
	_f := MergeSort(array[:_eb])
	_ab := MergeSort(array[_eb:])
	_c := make([]float64, len(array))
	_b := 0
	_bc := 0
	_fa := 0
	for _bc < len(_f) && _fa < len(_ab) {
		if _f[_bc] <= _ab[_fa] {
			_c[_b] = _f[_bc]
			_bc++
		} else {
			_c[_b] = _ab[_fa]
			_fa++
		}
		_b++
	}
	for _bc < len(_f) {
		_c[_b] = _f[_bc]
		_bc++
		_b++
	}
	for _fa < len(_ab) {
		_c[_b] = _ab[_fa]
		_fa++
		_b++
	}
	return _c
}
func NaturalSort(l []string) { _gd.Sort(stringSlice(l)) }

var _ad = _d.MustCompile("\u0028\\\u0064\u002b\u007c\u005c\u0044\u002b)")

type stringSlice []string

func NaturalCompare(a, b string) bool {
	_cg := _ed(a)
	_gc := _ed(b)
	_bd := len(_cg)
	_cb := len(_gc)
	for _ede := range _cg {
		if _ede >= _cb {
			return false
		}
		_ag, _fc := _g.Atoi(_cg[_ede])
		_fg, _fe := _g.Atoi(_gc[_ede])
		if _fc == nil && _fe == nil {
			if _ag == _fg {
				if _ede == _bd-1 {
					return true
				} else if _ede == _cb-1 {
					return false
				}
				continue
			}
			return _ag < _fg
		}
		if _cg[_ede] == _gc[_ede] {
			if _ede == _bd-1 {
				return true
			} else if _ede == _cb-1 {
				return false
			}
			continue
		}
		return _cg[_ede] < _gc[_ede]
	}
	return false
}
func (_bb stringSlice) Len() int           { return len(_bb) }
func (_ga stringSlice) Swap(a, b int)      { _ga[a], _ga[b] = _ga[b], _ga[a] }
func (_ge stringSlice) Less(a, b int) bool { return NaturalCompare(_ge[a], _ge[b]) }
func _ed(_ac string) []string              { return _ad.FindAllString(_ac, -1) }
