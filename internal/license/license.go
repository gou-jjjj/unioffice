//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package license

import (
	_ea "bytes"
	_e "compress/gzip"
	_g "crypto"
	_ag "crypto/aes"
	_fcce "crypto/cipher"
	_dg "crypto/hmac"
	_ebd "crypto/rand"
	_ddc "crypto/rsa"
	_cb "crypto/sha256"
	_dd "crypto/sha512"
	_ce "crypto/x509"
	_fe "encoding/base64"
	_dc "encoding/binary"
	_eb "encoding/hex"
	_fcc "encoding/json"
	_bc "encoding/pem"
	_gc "errors"
	_ac "fmt"
	_d "io"
	_db "io/ioutil"
	_fc "log"
	_bb "net"
	_ef "net/http"
	_cf "os"
	_c "path/filepath"
	_b "sort"
	_a "strings"
	_fg "sync"
	_ed "time"

	_ae "github.com/gou-jjjj/unioffice/common"
	_cg "github.com/gou-jjjj/unioffice/common/logger"
)

const (
	LicenseTierUnlicensed = "\u0075\u006e\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0064"
	LicenseTierCommunity  = "\u0063o\u006d\u006d\u0075\u006e\u0069\u0074y"
	LicenseTierIndividual = "\u0069\u006e\u0064\u0069\u0076\u0069\u0064\u0075\u0061\u006c"
	LicenseTierBusiness   = "\u0062\u0075\u0073\u0069\u006e\u0065\u0073\u0073"
)

type meteredClient struct {
	_ab  string
	_ccb string
	_edf *_ef.Client
}
type reportState struct {
	Instance      string         `json:"inst"`
	Next          string         `json:"n"`
	Docs          int64          `json:"d"`
	NumErrors     int64          `json:"e"`
	LimitDocs     bool           `json:"ld"`
	RemainingDocs int64          `json:"rd"`
	LastReported  _ed.Time       `json:"lr"`
	LastWritten   _ed.Time       `json:"lw"`
	Usage         map[string]int `json:"u"`
	UsageLogs     []interface{}  `json:"ul,omitempty"`
}

func (_bfec *LicenseKey) isExpired() bool {
	return _bfec.getExpiryDateToCompare().After(_bfec.ExpiresAt)
}
func _beff() (string, error) {
	_ebdf := _a.TrimSpace(_cf.Getenv(_fee))
	if _ebdf == "" {
		_cg.Log.Debug("\u0024\u0025\u0073\u0020e\u006e\u0076\u0069\u0072\u006f\u006e\u006d\u0065\u006e\u0074\u0020\u0076\u0061\u0072\u0069\u0061\u0062l\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u002e\u0020\u0057\u0069\u006c\u006c\u0020\u0075\u0073\u0065\u0020\u0068\u006f\u006d\u0065\u0020\u0064\u0069\u0072\u0065\u0063\u0074\u006f\u0072\u0079\u0020\u0074\u006f\u0020s\u0074\u006f\u0072\u0065\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020in\u0066o\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u002e", _fee)
		_fed := _dag()
		if len(_fed) == 0 {
			return "", _ac.Errorf("r\u0065\u0071\u0075\u0069\u0072\u0065\u0064\u0020\u0024\u0025\u0073\u0020\u0065\u006e\u0076\u0069\u0072\u006f\u006e\u006d\u0065\u006e\u0074\u0020\u0076\u0061r\u0069a\u0062\u006c\u0065\u0020o\u0072\u0020h\u006f\u006d\u0065\u0020\u0064\u0069\u0072\u0065\u0063\u0074\u006f\u0072\u0079\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064", _fee)
		}
		_ebdf = _c.Join(_fed, "\u002eu\u006e\u0069\u0064\u006f\u0063")
	}
	_fdgd := _cf.MkdirAll(_ebdf, 0777)
	if _fdgd != nil {
		return "", _fdgd
	}
	return _ebdf, nil
}

type meteredStatusResp struct {
	Valid        bool  `json:"valid"`
	OrgCredits   int64 `json:"org_credits"`
	OrgUsed      int64 `json:"org_used"`
	OrgRemaining int64 `json:"org_remaining"`
}

func _eaec() (_bb.IP, error) {
	_dbff, _aba := _bb.Dial("\u0075\u0064\u0070", "\u0038\u002e\u0038\u002e\u0038\u002e\u0038\u003a\u0038\u0030")
	if _aba != nil {
		return nil, _aba
	}
	defer _dbff.Close()
	_bbd := _dbff.LocalAddr().(*_bb.UDPAddr)
	return _bbd.IP, nil
}
func (_gbe LegacyLicense) Verify(pubKey *_ddc.PublicKey) error {
	_fcd := _gbe
	_fcd.Signature = ""
	_ca := _ea.Buffer{}
	_ee := _fcc.NewEncoder(&_ca)
	if _ggdf := _ee.Encode(_fcd); _ggdf != nil {
		return _ggdf
	}
	_bef, _dcb := _eb.DecodeString(_gbe.Signature)
	if _dcb != nil {
		return _dcb
	}
	_bcd := _cb.Sum256(_ca.Bytes())
	_dcb = _ddc.VerifyPKCS1v15(pubKey, _g.SHA256, _bcd[:], _bef)
	return _dcb
}

const _egf = "\u000a\u002d\u002d\u002d\u002d\u002d\u0042\u0045\u0047\u0049\u004e \u0050\u0055\u0042\u004c\u0049\u0043\u0020\u004b\u0045Y\u002d\u002d\u002d\u002d\u002d\u000a\u004d\u0049I\u0042\u0049\u006a\u0041NB\u0067\u006b\u0071\u0068\u006b\u0069G\u0039\u0077\u0030\u0042\u0041\u0051\u0045\u0046A\u0041\u004f\u0043\u0041\u0051\u0038\u0041\u004d\u0049\u0049\u0042\u0043\u0067\u004b\u0043\u0041\u0051\u0045A\u006dF\u0055\u0069\u0079\u0064\u0037\u0062\u0035\u0058\u006a\u0070\u006b\u0050\u0035\u0052\u0061\u0070\u0034\u0077\u000a\u0044\u0063\u0031d\u0079\u007a\u0049\u0051\u0034\u004c\u0065\u006b\u0078\u0072\u0076\u0079\u0074\u006e\u0045\u004d\u0070\u004e\u0055\u0062\u006f\u0036i\u0041\u0037\u0034\u0056\u0038\u0072\u0075\u005a\u004f\u0076\u0072\u0053\u0063\u0073\u0066\u0032\u0051\u0065\u004e9\u002f\u0071r\u0055\u0047\u0038\u0071\u0045\u0062\u0055\u0057\u0064\u006f\u0045\u0059\u0071+\u000a\u006f\u0074\u0046\u004e\u0041\u0046N\u0078\u006c\u0047\u0062\u0078\u0062\u0044\u0048\u0063\u0064\u0047\u0056\u0061\u004d\u0030\u004f\u0058\u0064\u0058g\u0044y\u004c5\u0061\u0049\u0045\u0061\u0067\u004c\u0030\u0063\u0035\u0070\u0077\u006a\u0049\u0064\u0050G\u0049\u006e\u0034\u0036\u0066\u0037\u0038\u0065\u004d\u004a\u002b\u004a\u006b\u0064\u0063\u0070\u0044\n\u0044\u004a\u0061\u0071\u0059\u0058d\u0072\u007a5\u004b\u0065\u0073\u0068\u006aS\u0069\u0049\u0061\u0061\u0037\u006d\u0065\u006e\u0042\u0049\u0041\u0058\u0053\u0034\u0055\u0046\u0078N\u0066H\u0068\u004e\u0030\u0048\u0043\u0059\u005a\u0059\u0071\u0051\u0047\u0037\u0062K+\u0073\u0035\u0072R\u0048\u006f\u006e\u0079\u0064\u004eW\u0045\u0047\u000a\u0048\u0038M\u0079\u0076\u00722\u0070\u0079\u0061\u0032K\u0072\u004d\u0075m\u0066\u006d\u0041\u0078\u0055\u0042\u0036\u0066\u0065\u006e\u0043\u002f4\u004f\u0030\u0057\u00728\u0067\u0066\u0050\u004f\u0055\u0038R\u0069\u0074\u006d\u0062\u0044\u0076\u0051\u0050\u0049\u0052\u0058\u004fL\u0034\u0076\u0054B\u0072\u0042\u0064\u0062a\u0041\u000a9\u006e\u0077\u004e\u0050\u002b\u0069\u002f\u002f\u0032\u0030\u004d\u00542\u0062\u0078\u006d\u0065\u0057\u0042\u002b\u0067\u0070\u0063\u0045\u0068G\u0070\u0058\u005a7\u0033\u0033\u0061\u007a\u0051\u0078\u0072\u0043\u0033\u004a\u0034\u0076\u0033C\u005a\u006d\u0045\u004eS\u0074\u0044\u004b\u002f\u004b\u0044\u0053\u0050\u004b\u0055\u0047\u0066\u00756\u000a\u0066\u0077I\u0044\u0041\u0051\u0041\u0042\u000a\u002d\u002d\u002d\u002d\u002dE\u004e\u0044\u0020\u0050\u0055\u0042\u004c\u0049\u0043 \u004b\u0045Y\u002d\u002d\u002d\u002d\u002d\n"

type LegacyLicense struct {
	Name        string
	Signature   string `json:",omitempty"`
	Expiration  _ed.Time
	LicenseType LegacyLicenseType
}

func (_gca *meteredClient) getStatus() (meteredStatusResp, error) {
	var _cff meteredStatusResp
	_efbb := _gca._ab + "\u002fm\u0065t\u0065\u0072\u0065\u0064\u002f\u0073\u0074\u0061\u0074\u0075\u0073"
	var _cffb meteredStatusForm
	_gfd, _beaa := _fcc.Marshal(_cffb)
	if _beaa != nil {
		return _cff, _beaa
	}
	_aedb, _beaa := _gfgg(_gfd)
	if _beaa != nil {
		return _cff, _beaa
	}
	_bff, _beaa := _ef.NewRequest("\u0050\u004f\u0053\u0054", _efbb, _aedb)
	if _beaa != nil {
		return _cff, _beaa
	}
	_bff.Header.Add("\u0043\u006f\u006et\u0065\u006e\u0074\u002d\u0054\u0079\u0070\u0065", "\u0061\u0070p\u006c\u0069\u0063a\u0074\u0069\u006f\u006e\u002f\u006a\u0073\u006f\u006e")
	_bff.Header.Add("\u0043\u006fn\u0074\u0065\u006et\u002d\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067", "\u0067\u007a\u0069\u0070")
	_bff.Header.Add("\u0041c\u0063e\u0070\u0074\u002d\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067", "\u0067\u007a\u0069\u0070")
	_bff.Header.Add("\u0058-\u0041\u0050\u0049\u002d\u004b\u0045Y", _gca._ccb)
	_cbg, _beaa := _gca._edf.Do(_bff)
	if _beaa != nil {
		return _cff, _beaa
	}
	defer _cbg.Body.Close()
	if _cbg.StatusCode != 200 {
		return _cff, _ac.Errorf("\u0066\u0061i\u006c\u0065\u0064\u0020t\u006f\u0020c\u0068\u0065\u0063\u006b\u0069\u006e\u002c\u0020s\u0074\u0061\u0074\u0075\u0073\u0020\u0063\u006f\u0064\u0065\u0020\u0069s\u003a\u0020\u0025\u0064", _cbg.StatusCode)
	}
	_eac, _beaa := _bgf(_cbg)
	if _beaa != nil {
		return _cff, _beaa
	}
	_beaa = _fcc.Unmarshal(_eac, &_cff)
	if _beaa != nil {
		return _cff, _beaa
	}
	return _cff, nil
}

type meteredUsageCheckinResp struct {
	Instance      string `json:"inst"`
	Next          string `json:"next"`
	Success       bool   `json:"success"`
	Message       string `json:"message"`
	RemainingDocs int    `json:"rd"`
	LimitDocs     bool   `json:"ld"`
}

func SetMeteredKeyPersistentCache(val bool) { _bdf._bdc = val }

type stateLoader interface {
	loadState(_af string) (reportState, error)
	updateState(_fdgc, _edc, _dfg string, _abf int, _gba bool, _fgg int, _bda int, _ded _ed.Time, _eeg map[string]int, _bdbb ...interface{}) error
}

func (_cge defaultStateHolder) loadState(_fcab string) (reportState, error) {
	_eef, _afg := _beff()
	if _afg != nil {
		return reportState{}, _afg
	}
	_afg = _cf.MkdirAll(_eef, 0777)
	if _afg != nil {
		return reportState{}, _afg
	}
	if len(_fcab) < 20 {
		return reportState{}, _gc.New("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006b\u0065\u0079")
	}
	_fbb := []byte(_fcab)
	_ebdd := _dd.Sum512_256(_fbb[:20])
	_fcb := _eb.EncodeToString(_ebdd[:])
	_bce := _c.Join(_eef, _fcb)
	_adc, _afg := _db.ReadFile(_bce)
	if _afg != nil {
		if _cf.IsNotExist(_afg) {
			return reportState{}, nil
		}
		_cg.Log.Error("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v", _afg)
		return reportState{}, _gc.New("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061")
	}
	const _acd = "\u0068\u00619\u004e\u004b\u0038]\u0052\u0062\u004c\u002a\u006d\u0034\u004c\u004b\u0057"
	_adc, _afg = _acb([]byte(_acd), _adc)
	if _afg != nil {
		return reportState{}, _afg
	}
	var _dded reportState
	_afg = _fcc.Unmarshal(_adc, &_dded)
	if _afg != nil {
		_cg.Log.Error("\u0045\u0052\u0052OR\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u003a\u0020\u0025\u0076", _afg)
		return reportState{}, _gc.New("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061")
	}
	return _dded, nil
}

type MeteredStatus struct {
	OK      bool
	Credits int64
	Used    int64
}

const _fb = "\u0033\u0030\u0035\u0063\u0033\u0030\u0030\u00640\u0036\u0030\u0039\u0032\u0061\u0038\u00364\u0038\u0038\u0036\u0066\u0037\u0030d\u0030\u0031\u0030\u0031\u0030\u00310\u0035\u0030\u0030\u0030\u0033\u0034\u0062\u0030\u0030\u0033\u0030\u00348\u0030\u0032\u0034\u0031\u0030\u0030\u0062\u0038\u0037\u0065\u0061\u0066\u0062\u0036\u0063\u0030\u0037\u0034\u0039\u0039\u0065\u0062\u00397\u0063\u0063\u0039\u0064\u0033\u0035\u0036\u0035\u0065\u0063\u00663\u0031\u0036\u0038\u0031\u0039\u0036\u0033\u0030\u0031\u0039\u0030\u0037c\u0038\u0034\u0031\u0061\u0064\u0064c6\u0036\u0035\u0030\u0038\u0036\u0062\u0062\u0033\u0065\u0064\u0038\u0065\u0062\u0031\u0032\u0064\u0039\u0064\u0061\u0032\u0036\u0063\u0061\u0066\u0061\u0039\u0036\u00345\u0030\u00314\u0036\u0064\u0061\u0038\u0062\u0064\u0030\u0063c\u0066\u0031\u0035\u0035\u0066\u0063a\u0063\u0063\u00368\u0036\u0039\u0035\u0035\u0065\u0066\u0030\u0033\u0030\u0032\u0066\u0061\u0034\u0034\u0061\u0061\u0033\u0065\u0063\u0038\u0039\u0034\u0031\u0037\u0062\u0030\u0032\u0030\u0033\u0030\u0031\u0030\u0030\u0030\u0031"

type LegacyLicenseType byte

var _ddf = _ed.Date(2010, 1, 1, 0, 0, 0, 0, _ed.UTC)

type meteredStatusForm struct{}

func init() {
	_egb, _aag := _eb.DecodeString(_fb)
	if _aag != nil {
		_fc.Fatalf("e\u0072\u0072\u006f\u0072 r\u0065a\u0064\u0069\u006e\u0067\u0020k\u0065\u0079\u003a\u0020\u0025\u0073", _aag)
	}
	_eaa, _aag := _ce.ParsePKIXPublicKey(_egb)
	if _aag != nil {
		_fc.Fatalf("e\u0072\u0072\u006f\u0072 r\u0065a\u0064\u0069\u006e\u0067\u0020k\u0065\u0079\u003a\u0020\u0025\u0073", _aag)
	}
	_gde = _eaa.(*_ddc.PublicKey)
}

var _gde *_ddc.PublicKey

func SetMeteredKeyUsageLogVerboseMode(val bool) { _bdf._gd = val }
func GetMeteredState() (MeteredStatus, error) {
	if _bdf == nil {
		return MeteredStatus{}, _gc.New("\u006c\u0069\u0063\u0065ns\u0065\u0020\u006b\u0065\u0079\u0020\u006e\u006f\u0074\u0020\u0073\u0065\u0074")
	}
	if !_bdf._ddcf || len(_bdf._gge) == 0 {
		return MeteredStatus{}, _gc.New("\u0061p\u0069 \u006b\u0065\u0079\u0020\u006e\u006f\u0074\u0020\u0073\u0065\u0074")
	}
	_dbea, _ggb := _dgd.loadState(_bdf._gge)
	if _ggb != nil {
		_cg.Log.Error("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v", _ggb)
		return MeteredStatus{}, _ggb
	}
	if _dbea.Docs > 0 {
		_ege := _ccea("", "", "", true)
		if _ege != nil {
			return MeteredStatus{}, _ege
		}
	}
	_gac.Lock()
	defer _gac.Unlock()
	_eae := _fgd()
	_eae._ccb = _bdf._gge
	_bffc, _ggb := _eae.getStatus()
	if _ggb != nil {
		return MeteredStatus{}, _ggb
	}
	if !_bffc.Valid {
		return MeteredStatus{}, _gc.New("\u006b\u0065\u0079\u0020\u006e\u006f\u0074\u0020\u0076\u0061\u006c\u0069\u0064")
	}
	_dcca := MeteredStatus{OK: true, Credits: _bffc.OrgCredits, Used: _bffc.OrgUsed}
	return _dcca, nil
}
func _ga(_agc string, _cgd []byte) (string, error) {
	_ad, _ := _bc.Decode([]byte(_agc))
	if _ad == nil {
		return "", _ac.Errorf("\u0050\u0072\u0069\u0076\u004b\u0065\u0079\u0020\u0066a\u0069\u006c\u0065\u0064")
	}
	_gg, _bcg := _ce.ParsePKCS1PrivateKey(_ad.Bytes)
	if _bcg != nil {
		return "", _bcg
	}
	_fa := _dd.New()
	_fa.Write(_cgd)
	_gb := _fa.Sum(nil)
	_fd, _bcg := _ddc.SignPKCS1v15(_ebd.Reader, _gg, _g.SHA512, _gb)
	if _bcg != nil {
		return "", _bcg
	}
	_dbd := _fe.StdEncoding.EncodeToString(_cgd)
	_dbd += "\u000a\u002b\u000a"
	_dbd += _fe.StdEncoding.EncodeToString(_fd)
	return _dbd, nil
}
func _bbf(_ggf string) (LicenseKey, error) {
	var _bf LicenseKey
	_beb, _bea := _dbe(_gf, _ec, _ggf)
	if _bea != nil {
		return _bf, _bea
	}
	_dcc, _bea := _cc(_egf, _beb)
	if _bea != nil {
		return _bf, _bea
	}
	_bea = _fcc.Unmarshal(_dcc, &_bf)
	if _bea != nil {
		return _bf, _bea
	}
	_bf.CreatedAt = _ed.Unix(_bf.CreatedAtInt, 0)
	if _bf.ExpiresAtInt > 0 {
		_bba := _ed.Unix(_bf.ExpiresAtInt, 0)
		_bf.ExpiresAt = _bba
	}
	return _bf, nil
}
func _acb(_bcef, _dddb []byte) ([]byte, error) {
	_gcaa := make([]byte, _fe.URLEncoding.DecodedLen(len(_dddb)))
	_fdf, _fadbf := _fe.URLEncoding.Decode(_gcaa, _dddb)
	if _fadbf != nil {
		return nil, _fadbf
	}
	_gcaa = _gcaa[:_fdf]
	_dgf, _fadbf := _ag.NewCipher(_bcef)
	if _fadbf != nil {
		return nil, _fadbf
	}
	if len(_gcaa) < _ag.BlockSize {
		return nil, _gc.New("c\u0069p\u0068\u0065\u0072\u0074\u0065\u0078\u0074\u0020t\u006f\u006f\u0020\u0073ho\u0072\u0074")
	}
	_cae := _gcaa[:_ag.BlockSize]
	_gcaa = _gcaa[_ag.BlockSize:]
	_fag := _fcce.NewCFBDecrypter(_dgf, _cae)
	_fag.XORKeyStream(_gcaa, _gcaa)
	return _gcaa, nil
}

var _feb = _ed.Date(2019, 6, 6, 0, 0, 0, 0, _ed.UTC)

type defaultStateHolder struct{}

var _bdf = MakeUnlicensedKey()

func GenRefId(prefix string) (string, error) {
	var _fagc _ea.Buffer
	_fagc.WriteString(prefix)
	_abef := make([]byte, 8+16)
	_fdbc := _ed.Now().UTC().UnixNano()
	_dc.BigEndian.PutUint64(_abef, uint64(_fdbc))
	_, _bab := _ebd.Read(_abef[8:])
	if _bab != nil {
		return "", _bab
	}
	_fagc.WriteString(_eb.EncodeToString(_abef))
	return _fagc.String(), nil
}
func _gaa(_baf, _cag string) string {
	_gcaf := []byte(_baf)
	_bgd := _dg.New(_cb.New, _gcaf)
	_bgd.Write([]byte(_cag))
	return _fe.StdEncoding.EncodeToString(_bgd.Sum(nil))
}
func _cc(_eg string, _da string) ([]byte, error) {
	var (
		_fab  int
		_ddce string
	)
	for _, _ddce = range []string{"\u000a\u002b\u000a", "\u000d\u000a\u002b\r\u000a", "\u0020\u002b\u0020"} {
		if _fab = _a.Index(_da, _ddce); _fab != -1 {
			break
		}
	}
	if _fab == -1 {
		return nil, _ac.Errorf("\u0069\u006e\u0076al\u0069\u0064\u0020\u0069\u006e\u0070\u0075\u0074\u002c \u0073i\u0067n\u0061t\u0075\u0072\u0065\u0020\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072")
	}
	_ada := _da[:_fab]
	_aa := _fab + len(_ddce)
	_cgf := _da[_aa:]
	if _ada == "" || _cgf == "" {
		return nil, _ac.Errorf("\u0069n\u0076\u0061l\u0069\u0064\u0020\u0069n\u0070\u0075\u0074,\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020or\u0069\u0067\u0069n\u0061\u006c \u006f\u0072\u0020\u0073\u0069\u0067n\u0061\u0074u\u0072\u0065")
	}
	_aec, _be := _fe.StdEncoding.DecodeString(_ada)
	if _be != nil {
		return nil, _ac.Errorf("\u0069\u006e\u0076\u0061li\u0064\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u006f\u0072\u0069\u0067\u0069\u006ea\u006c")
	}
	_ff, _be := _fe.StdEncoding.DecodeString(_cgf)
	if _be != nil {
		return nil, _ac.Errorf("\u0069\u006e\u0076al\u0069\u0064\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0073\u0069\u0067\u006e\u0061\u0074\u0075\u0072\u0065")
	}
	_cgdb, _ := _bc.Decode([]byte(_eg))
	if _cgdb == nil {
		return nil, _ac.Errorf("\u0050\u0075\u0062\u004b\u0065\u0079\u0020\u0066\u0061\u0069\u006c\u0065\u0064")
	}
	_gcb, _be := _ce.ParsePKIXPublicKey(_cgdb.Bytes)
	if _be != nil {
		return nil, _be
	}
	_cgg := _gcb.(*_ddc.PublicKey)
	if _cgg == nil {
		return nil, _ac.Errorf("\u0050u\u0062\u004b\u0065\u0079\u0020\u0063\u006f\u006e\u0076\u0065\u0072s\u0069\u006f\u006e\u0020\u0066\u0061\u0069\u006c\u0065\u0064")
	}
	_gfed := _dd.New()
	_gfed.Write(_aec)
	_ecd := _gfed.Sum(nil)
	_be = _ddc.VerifyPKCS1v15(_cgg, _g.SHA512, _ecd, _ff)
	if _be != nil {
		return nil, _be
	}
	return _aec, nil
}
func (_efb *LicenseKey) ToString() string {
	if _efb._ddcf {
		return "M\u0065t\u0065\u0072\u0065\u0064\u0020\u0073\u0075\u0062s\u0063\u0072\u0069\u0070ti\u006f\u006e"
	}
	_def := _ac.Sprintf("\u004ci\u0063e\u006e\u0073\u0065\u0020\u0049\u0064\u003a\u0020\u0025\u0073\u000a", _efb.LicenseId)
	_def += _ac.Sprintf("\u0043\u0075s\u0074\u006f\u006de\u0072\u0020\u0049\u0064\u003a\u0020\u0025\u0073\u000a", _efb.CustomerId)
	_def += _ac.Sprintf("\u0043u\u0073t\u006f\u006d\u0065\u0072\u0020N\u0061\u006de\u003a\u0020\u0025\u0073\u000a", _efb.CustomerName)
	_def += _ac.Sprintf("\u0054i\u0065\u0072\u003a\u0020\u0025\u0073\n", _efb.Tier)
	_def += _ac.Sprintf("\u0043r\u0065a\u0074\u0065\u0064\u0020\u0041\u0074\u003a\u0020\u0025\u0073\u000a", _ae.UtcTimeFormat(_efb.CreatedAt))
	if _efb.ExpiresAt.IsZero() {
		_def += "\u0045x\u0070i\u0072\u0065\u0073\u0020\u0041t\u003a\u0020N\u0065\u0076\u0065\u0072\u000a"
	} else {
		_def += _ac.Sprintf("\u0045x\u0070i\u0072\u0065\u0073\u0020\u0041\u0074\u003a\u0020\u0025\u0073\u000a", _ae.UtcTimeFormat(_efb.ExpiresAt))
	}
	_def += _ac.Sprintf("\u0043\u0072\u0065\u0061\u0074\u006f\u0072\u003a\u0020\u0025\u0073\u0020<\u0025\u0073\u003e\u000a", _efb.CreatorName, _efb.CreatorEmail)
	return _def
}
func (_dfc *LicenseKey) getExpiryDateToCompare() _ed.Time {
	if _dfc.Trial {
		return _ed.Now().UTC()
	}
	return _ae.ReleasedAt
}
func Track(docKey string, useKey string, docName string) error {
	return _ccea(docKey, useKey, docName, !_bdf._bdc)
}
func (_agf *LicenseKey) TypeToString() string {
	if _agf._ddcf {
		return "M\u0065t\u0065\u0072\u0065\u0064\u0020\u0073\u0075\u0062s\u0063\u0072\u0069\u0070ti\u006f\u006e"
	}
	if _agf.Tier == LicenseTierUnlicensed {
		return "\u0055\u006e\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0064"
	}
	if _agf.Tier == LicenseTierCommunity {
		return "\u0041\u0047PL\u0076\u0033\u0020O\u0070\u0065\u006e\u0020Sou\u0072ce\u0020\u0043\u006f\u006d\u006d\u0075\u006eit\u0079\u0020\u004c\u0069\u0063\u0065\u006es\u0065"
	}
	if _agf.Tier == LicenseTierIndividual || _agf.Tier == "\u0069\u006e\u0064i\u0065" {
		return "\u0043\u006f\u006dm\u0065\u0072\u0063\u0069a\u006c\u0020\u004c\u0069\u0063\u0065\u006es\u0065\u0020\u002d\u0020\u0049\u006e\u0064\u0069\u0076\u0069\u0064\u0075\u0061\u006c"
	}
	return "\u0043\u006fm\u006d\u0065\u0072\u0063\u0069\u0061\u006c\u0020\u004c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u002d\u0020\u0042\u0075\u0073\u0069ne\u0073\u0073"
}

var _dgd stateLoader = defaultStateHolder{}

func _bgf(_bebe *_ef.Response) ([]byte, error) {
	var _ebe []byte
	_ffc, _gcd := _cgef(_bebe)
	if _gcd != nil {
		return _ebe, _gcd
	}
	return _db.ReadAll(_ffc)
}
func MakeUnlicensedKey() *LicenseKey {
	_cce := LicenseKey{}
	_cce.CustomerName = "\u0055\u006e\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0064"
	_cce.Tier = LicenseTierUnlicensed
	_cce.CreatedAt = _ed.Now().UTC()
	_cce.CreatedAtInt = _cce.CreatedAt.Unix()
	return &_cce
}
func _gfgg(_dge []byte) (_d.Reader, error) {
	_agg := new(_ea.Buffer)
	_bbgc := _e.NewWriter(_agg)
	_bbgc.Write(_dge)
	_cfg := _bbgc.Close()
	if _cfg != nil {
		return nil, _cfg
	}
	return _agg, nil
}
func (_eccd defaultStateHolder) updateState(_aeg, _fca, _gbde string, _dbg int, _cca bool, _gcae int, _ffg int, _gab _ed.Time, _daf map[string]int, _dgb ...interface{}) error {
	_ddd, _fce := _beff()
	if _fce != nil {
		return _fce
	}
	_fce = _cf.MkdirAll(_ddd, 0777)
	if _fce != nil {
		return _fce
	}
	if len(_aeg) < 20 {
		return _gc.New("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006b\u0065\u0079")
	}
	_bbaf := []byte(_aeg)
	_dcbb := _dd.Sum512_256(_bbaf[:20])
	_bbe := _eb.EncodeToString(_dcbb[:])
	_dff := _c.Join(_ddd, _bbe)
	var _gcgd reportState
	_gcgd.Docs = int64(_dbg)
	_gcgd.NumErrors = int64(_ffg)
	_gcgd.LimitDocs = _cca
	_gcgd.RemainingDocs = int64(_gcae)
	_gcgd.LastWritten = _ed.Now().UTC()
	_gcgd.LastReported = _gab
	_gcgd.Instance = _fca
	_gcgd.Next = _gbde
	_gcgd.Usage = _daf
	_dde, _fce := _fcc.Marshal(_gcgd)
	if _fce != nil {
		return _fce
	}
	const _dcd = "\u0068\u00619\u004e\u004b\u0038]\u0052\u0062\u004c\u002a\u006d\u0034\u004c\u004b\u0057"
	_dde, _fce = _edcf([]byte(_dcd), _dde)
	if _fce != nil {
		return _fce
	}
	_fce = _db.WriteFile(_dff, _dde, 0600)
	if _fce != nil {
		return _fce
	}
	return nil
}

const (
	_gf = "\u002d\u002d\u002d--\u0042\u0045\u0047\u0049\u004e\u0020\u0055\u004e\u0049D\u004fC\u0020L\u0049C\u0045\u004e\u0053\u0045\u0020\u004b\u0045\u0059\u002d\u002d\u002d\u002d\u002d"
	_ec = "\u002d\u002d\u002d\u002d\u002d\u0045\u004e\u0044\u0020\u0055\u004e\u0049\u0044\u004f\u0043 \u004cI\u0043\u0045\u004e\u0053\u0045\u0020\u004b\u0045\u0059\u002d\u002d\u002d\u002d\u002d"
)

func (_gaf *LicenseKey) Validate() error {
	if _gaf._ddcf {
		return nil
	}
	if len(_gaf.LicenseId) < 10 {
		return _ac.Errorf("i\u006e\u0076\u0061\u006c\u0069\u0064 \u006c\u0069\u0063\u0065\u006e\u0073\u0065\u003a\u0020L\u0069\u0063\u0065n\u0073e\u0020\u0049\u0064")
	}
	if len(_gaf.CustomerId) < 10 {
		return _ac.Errorf("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065:\u0020C\u0075\u0073\u0074\u006f\u006d\u0065\u0072 \u0049\u0064")
	}
	if len(_gaf.CustomerName) < 1 {
		return _ac.Errorf("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u0069c\u0065\u006e\u0073\u0065\u003a\u0020\u0043u\u0073\u0074\u006f\u006d\u0065\u0072\u0020\u004e\u0061\u006d\u0065")
	}
	if _ddf.After(_gaf.CreatedAt) {
		return _ac.Errorf("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u003a\u0020\u0043\u0072\u0065\u0061\u0074\u0065\u0064 \u0041\u0074\u0020\u0069\u0073 \u0069\u006ev\u0061\u006c\u0069\u0064")
	}
	if _gaf.ExpiresAt.IsZero() {
		_de := _gaf.CreatedAt.AddDate(1, 0, 0)
		if _bfe.After(_de) {
			_de = _bfe
		}
		_gaf.ExpiresAt = _de
	}
	if _gaf.CreatedAt.After(_gaf.ExpiresAt) {
		return _ac.Errorf("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u003a\u0020\u0043\u0072\u0065\u0061\u0074\u0065\u0064\u0020\u0041\u0074 \u0063a\u006e\u006e\u006f\u0074 \u0062\u0065 \u0047\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0045\u0078\u0070\u0069\u0072\u0065\u0073\u0020\u0041\u0074")
	}
	if _gaf.isExpired() {
		_cd := "\u0054\u0068\u0065\u0020\u006c\u0069c\u0065\u006e\u0073\u0065\u0020\u0068\u0061\u0073\u0020\u0061\u006c\u0072\u0065a\u0064\u0079\u0020\u0065\u0078\u0070\u0069r\u0065\u0064\u002e\u000a" + "\u0059o\u0075\u0020\u006d\u0061y\u0020n\u0065\u0065\u0064\u0020\u0074\u006f\u0020\u0075\u0070d\u0061\u0074\u0065\u0020\u0074\u0068\u0065\u0020l\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006b\u0065\u0079\u0020t\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0065\u0077\u0065s\u0074\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006b\u0065\u0079\u0020\u0066\u006f\u0072\u0020\u0079o\u0075\u0072\u0020\u006f\u0072\u0067\u0061\u006e\u0069\u007a\u0061\u0074i\u006fn\u002e\u000a" + "\u0054o\u0020\u0066\u0069\u006ed y\u006f\u0075\u0072\u0020n\u0065\u0077\u0065\u0073\u0074\u0020\u006c\u0069\u0063\u0065n\u0073\u0065\u0020\u006b\u0065\u0079\u002c\u0020\u0067\u006f\u0020\u0074\u006f\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002f\u0063l\u006f\u0075\u0064\u002e\u0075\u006e\u0069\u0064oc\u002e\u0069\u006f \u0061\u006e\u0064\u0020\u0067o\u0020t\u006f\u0020\u0074\u0068\u0065\u0020\u006c\u0069\u0063e\u006e\u0073\u0065\u0020\u006d\u0065\u006e\u0075\u002e"
		return _ac.Errorf("\u0069\u006e\u0076\u0061li\u0064\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u003a\u0020\u0025\u0073", _cd)
	}
	if len(_gaf.CreatorName) < 1 {
		return _ac.Errorf("\u0069\u006ev\u0061\u006c\u0069\u0064\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u003a\u0020\u0043\u0072\u0065\u0061\u0074\u006f\u0072\u0020na\u006d\u0065")
	}
	if len(_gaf.CreatorEmail) < 1 {
		return _ac.Errorf("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u0069c\u0065\u006e\u0073\u0065\u003a\u0020\u0043r\u0065\u0061\u0074\u006f\u0072\u0020\u0065\u006d\u0061\u0069\u006c")
	}
	if _gaf.CreatedAt.After(_feb) {
		if !_gaf.UniOffice {
			return _ac.Errorf("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006c\u0069\u0063\u0065\u006e\u0073e\u003a\u0020\u0054\u0068\u0069\u0073\u0020\u0055\u006e\u0069\u0044\u006f\u0063\u0020\u006b\u0065\u0079\u0020i\u0073\u0020\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065")
		}
	}
	return nil
}

type meteredUsageCheckinForm struct {
	Instance          string         `json:"inst"`
	Next              string         `json:"next"`
	UsageNumber       int            `json:"usage_number"`
	NumFailed         int64          `json:"num_failed"`
	Hostname          string         `json:"hostname"`
	LocalIP           string         `json:"local_ip"`
	MacAddress        string         `json:"mac_address"`
	Package           string         `json:"package"`
	PackageVersion    string         `json:"package_version"`
	Usage             map[string]int `json:"u"`
	IsPersistentCache bool           `json:"is_persistent_cache"`
	Timestamp         int64          `json:"timestamp"`
	UsageLogs         []interface{}  `json:"ul,omitempty"`
}

func _dbe(_agcf string, _ggd string, _ecc string) (string, error) {
	_aed := _a.Index(_ecc, _agcf)
	if _aed == -1 {
		return "", _ac.Errorf("\u0068\u0065a\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064")
	}
	_ede := _a.Index(_ecc, _ggd)
	if _ede == -1 {
		return "", _ac.Errorf("\u0066\u006fo\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064")
	}
	_ced := _aed + len(_agcf) + 1
	return _ecc[_ced : _ede-1], nil
}

const _fee = "\u0055N\u0049D\u004f\u0043\u005f\u004c\u0049C\u0045\u004eS\u0045\u005f\u0044\u0049\u0052"

func GetLicenseKey() *LicenseKey {
	if _bdf == nil {
		return nil
	}
	_ade := *_bdf
	return &_ade
}

type LicenseKey struct {
	LicenseId    string   `json:"license_id"`
	CustomerId   string   `json:"customer_id"`
	CustomerName string   `json:"customer_name"`
	Tier         string   `json:"tier"`
	CreatedAt    _ed.Time `json:"-"`
	CreatedAtInt int64    `json:"created_at"`
	ExpiresAt    _ed.Time `json:"-"`
	ExpiresAtInt int64    `json:"expires_at"`
	CreatedBy    string   `json:"created_by"`
	CreatorName  string   `json:"creator_name"`
	CreatorEmail string   `json:"creator_email"`
	UniPDF       bool     `json:"unipdf"`
	UniOffice    bool     `json:"unioffice"`
	UniHTML      bool     `json:"unihtml"`
	Trial        bool     `json:"trial"`
	_ddcf        bool
	_gge         string
	_bdc         bool
	_gd          bool
}

func (_fad *meteredClient) checkinUsage(_bcdc meteredUsageCheckinForm) (meteredUsageCheckinResp, error) {
	_bcdc.Package = "\u0075n\u0069\u006f\u0066\u0066\u0069\u0063e"
	_bcdc.PackageVersion = _ae.Version
	var _bdd meteredUsageCheckinResp
	_fdg := _fad._ab + "\u002f\u006d\u0065\u0074er\u0065\u0064\u002f\u0075\u0073\u0061\u0067\u0065\u005f\u0063\u0068\u0065\u0063\u006bi\u006e"
	_cbgf, _eca := _fcc.Marshal(_bcdc)
	if _eca != nil {
		return _bdd, _eca
	}
	_fdb, _eca := _gfgg(_cbgf)
	if _eca != nil {
		return _bdd, _eca
	}
	_eag, _eca := _ef.NewRequest("\u0050\u004f\u0053\u0054", _fdg, _fdb)
	if _eca != nil {
		return _bdd, _eca
	}
	_eag.Header.Add("\u0043\u006f\u006et\u0065\u006e\u0074\u002d\u0054\u0079\u0070\u0065", "\u0061\u0070p\u006c\u0069\u0063a\u0074\u0069\u006f\u006e\u002f\u006a\u0073\u006f\u006e")
	_eag.Header.Add("\u0043\u006fn\u0074\u0065\u006et\u002d\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067", "\u0067\u007a\u0069\u0070")
	_eag.Header.Add("\u0041c\u0063e\u0070\u0074\u002d\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067", "\u0067\u007a\u0069\u0070")
	_eag.Header.Add("\u0058-\u0041\u0050\u0049\u002d\u004b\u0045Y", _fad._ccb)
	_ddfg, _eca := _fad._edf.Do(_eag)
	if _eca != nil {
		_cg.Log.Error("\u0049n\u0076\u0061\u006c\u0069d\u0020\u0068\u0074\u0074\u0070 \u0072e\u0073p\u006f\u006e\u0073\u0065\u003a\u0020\u0025v", _eca)
		return _bdd, _eca
	}
	defer _ddfg.Body.Close()
	if _ddfg.StatusCode != 200 {
		_egbg, _eea := _bgf(_ddfg)
		if _eea != nil {
			return _bdd, _eea
		}
		_eea = _fcc.Unmarshal(_egbg, &_bdd)
		if _eea != nil {
			return _bdd, _eea
		}
		return _bdd, _ac.Errorf("\u0066\u0061i\u006c\u0065\u0064\u0020t\u006f\u0020c\u0068\u0065\u0063\u006b\u0069\u006e\u002c\u0020s\u0074\u0061\u0074\u0075\u0073\u0020\u0063\u006f\u0064\u0065\u0020\u0069s\u003a\u0020\u0025\u0064", _ddfg.StatusCode)
	}
	_ge := _ddfg.Header.Get("\u0058\u002d\u0055\u0043\u002d\u0053\u0069\u0067\u006ea\u0074\u0075\u0072\u0065")
	_gcg := _gaa(_bcdc.MacAddress, string(_cbgf))
	if _gcg != _ge {
		_cg.Log.Error("I\u006e\u0076\u0061l\u0069\u0064\u0020\u0072\u0065\u0073\u0070\u006f\u006e\u0073\u0065\u0020\u0073\u0069\u0067\u006e\u0061\u0074\u0075\u0072\u0065\u002c\u0020\u0073\u0065t\u0020\u0074\u0068e\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u0073\u0065\u0072\u0076e\u0072\u0020\u0074\u006f \u0068\u0074\u0074\u0070s\u003a\u002f\u002f\u0063\u006c\u006f\u0075\u0064\u002e\u0075\u006e\u0069\u0064\u006f\u0063\u002e\u0069o\u002f\u0061\u0070\u0069")
		return _bdd, _gc.New("\u0066\u0061\u0069l\u0065\u0064\u0020\u0074\u006f\u0020\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u002c\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0065\u0072\u0076\u0065\u0072 \u0072\u0065\u0073\u0070\u006f\u006e\u0073\u0065")
	}
	_dbf, _eca := _bgf(_ddfg)
	if _eca != nil {
		return _bdd, _eca
	}
	_eca = _fcc.Unmarshal(_dbf, &_bdd)
	if _eca != nil {
		return _bdd, _eca
	}
	return _bdd, nil
}

const _gbac = "\u0055\u004e\u0049OF\u0046\u0049\u0043\u0045\u005f\u0043\u0055\u0053\u0054\u004f\u004d\u0045\u0052\u005f\u004e\u0041\u004d\u0045"

var _gac = &_fg.Mutex{}

func _ccea(_eefa string, _gfa string, _bbg string, _acg bool) error {
	if _bdf == nil {
		return _gc.New("\u006e\u006f\u0020\u006c\u0069\u0063\u0065\u006e\u0073e\u0020\u006b\u0065\u0079")
	}
	if !_bdf._ddcf || len(_bdf._gge) == 0 {
		return nil
	}
	if len(_eefa) == 0 && !_acg {
		return _gc.New("\u0064\u006f\u0063\u004b\u0065\u0079\u0020\u006e\u006ft\u0020\u0073\u0065\u0074")
	}
	_gac.Lock()
	defer _gac.Unlock()
	if _febg == nil {
		_febg = map[string]struct{}{}
	}
	if _fde == nil {
		_fde = map[string]int{}
	}
	_fef := 0
	if len(_eefa) > 0 {
		_, _eda := _febg[_eefa]
		if !_eda {
			_febg[_eefa] = struct{}{}
			_fef++
		}
		if _bdf._gd {
			_febga = append(_febga, map[string]interface{}{"\u0074\u0069\u006d\u0065": _ed.Now().String(), "\u0066\u0075\u006e\u0063": _gfa, "\u0072\u0065\u0066": _eefa[:8], "\u0066\u0069\u006c\u0065": _bbg, "\u0063\u006f\u0073\u0074": _fef})
			if _eda && _fef == 0 {
				_cg.Log.Info("\u0025\u0073\u0020\u0052\u0065\u0066\u003a\u0020\u0025\u0073\u0020\u007c\u0020\u0025\u0073 \u007c \u004e\u006f\u0020\u0063\u0072\u0065\u0064\u0069\u0074\u0020\u0075\u0073\u0065\u0064", _ed.Now().String(), _eefa[:8], _gfa)
			}
		}
	}
	if _fef == 0 && !_acg {
		return nil
	}
	_fde[_gfa]++
	_adg := _ed.Now()
	_gee, _afe := _dgd.loadState(_bdf._gge)
	if _afe != nil {
		_cg.Log.Error("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v", _afe)
		return _afe
	}
	_gee.UsageLogs = append(_gee.UsageLogs, _febga...)
	if _gee.Usage == nil {
		_gee.Usage = map[string]int{}
	}
	for _bfc, _eaad := range _fde {
		if _bfc != "" {
			_gee.Usage[_bfc] += _eaad
		}
	}
	_fde = nil
	const _cec = 24 * _ed.Hour
	const _ddg = 3 * 24 * _ed.Hour
	if len(_gee.Instance) == 0 || _adg.Sub(_gee.LastReported) > _cec || (_gee.LimitDocs && _gee.RemainingDocs <= _gee.Docs+int64(_fef)) || _acg {
		_afa, _dfcg := _cf.Hostname()
		if _dfcg != nil {
			return _dfcg
		}
		_gfg := _gee.Docs
		_gafe, _fba, _dfcg := _agd()
		if _dfcg != nil {
			_cg.Log.Debug("\u0055\u006e\u0061b\u006c\u0065\u0020\u0074o\u0020\u0067\u0065\u0074\u0020\u006c\u006fc\u0061\u006c\u0020\u0061\u0064\u0064\u0072\u0065\u0073\u0073\u003a\u0020\u0025\u0073", _dfcg.Error())
			_gafe = append(_gafe, "\u0069n\u0066\u006f\u0072\u006da\u0074\u0069\u006f\u006e\u0020n\u006ft\u0020a\u0076\u0061\u0069\u006c\u0061\u0062\u006ce")
			_fba = append(_fba, "\u0069n\u0066\u006f\u0072\u006da\u0074\u0069\u006f\u006e\u0020n\u006ft\u0020a\u0076\u0061\u0069\u006c\u0061\u0062\u006ce")
		} else {
			_b.Strings(_fba)
			_b.Strings(_gafe)
			_gff, _abe := _eaec()
			if _abe != nil {
				return _abe
			}
			_cede := false
			for _, _bbafe := range _fba {
				if _bbafe == _gff.String() {
					_cede = true
				}
			}
			if !_cede {
				_fba = append(_fba, _gff.String())
			}
		}
		_eec := _fgd()
		_eec._ccb = _bdf._gge
		_gfg += int64(_fef)
		_gdg := meteredUsageCheckinForm{Instance: _gee.Instance, Next: _gee.Next, UsageNumber: int(_gfg), NumFailed: _gee.NumErrors, Hostname: _afa, LocalIP: _a.Join(_fba, "\u002c\u0020"), MacAddress: _a.Join(_gafe, "\u002c\u0020"), Package: "\u0075n\u0069\u006f\u0066\u0066\u0069\u0063e", PackageVersion: _ae.Version, Usage: _gee.Usage, IsPersistentCache: _bdf._bdc, Timestamp: _adg.Unix()}
		if len(_gafe) == 0 {
			_gdg.MacAddress = "\u006e\u006f\u006e\u0065"
		}
		if _bdf._gd {
			_gdg.UsageLogs = _gee.UsageLogs
		}
		_ccg := int64(0)
		_ecb := _gee.NumErrors
		_fdbd := _adg
		_fccc := 0
		_ead := _gee.LimitDocs
		_fcf, _dfcg := _eec.checkinUsage(_gdg)
		if _dfcg != nil {
			if _adg.Sub(_gee.LastReported) > _ddg {
				if !_fcf.Success {
					return _gc.New(_fcf.Message)
				}
				return _gc.New("\u0074\u006f\u006f\u0020\u006c\u006f\u006e\u0067\u0020\u0073\u0069\u006e\u0063\u0065\u0020\u006c\u0061\u0073\u0074\u0020\u0073\u0075\u0063\u0063e\u0073\u0073\u0066\u0075\u006c \u0063\u0068e\u0063\u006b\u0069\u006e")
			}
			_ccg = _gfg
			_ecb++
			_fdbd = _gee.LastReported
		} else {
			_ead = _fcf.LimitDocs
			_fccc = _fcf.RemainingDocs
			_ecb = 0
		}
		if len(_fcf.Instance) == 0 {
			_fcf.Instance = _gdg.Instance
		}
		if len(_fcf.Next) == 0 {
			_fcf.Next = _gdg.Next
		}
		_dfcg = _dgd.updateState(_eec._ccb, _fcf.Instance, _fcf.Next, int(_ccg), _ead, _fccc, int(_ecb), _fdbd, nil)
		if _dfcg != nil {
			return _dfcg
		}
		if !_fcf.Success {
			return _ac.Errorf("\u0065r\u0072\u006f\u0072\u003a\u0020\u0025s", _fcf.Message)
		}
	} else {
		_afe = _dgd.updateState(_bdf._gge, _gee.Instance, _gee.Next, int(_gee.Docs)+_fef, _gee.LimitDocs, int(_gee.RemainingDocs), int(_gee.NumErrors), _gee.LastReported, _gee.Usage, _gee.UsageLogs...)
		if _afe != nil {
			return _afe
		}
	}
	if _bdf._gd && len(_eefa) > 0 {
		_eff := ""
		if _bbg != "" {
			_eff = _ac.Sprintf("\u0046i\u006c\u0065\u0020\u0025\u0073\u0020|", _bbg)
		}
		_cg.Log.Info("%\u0073\u0020\u007c\u0020\u0025\u0073\u0020\u0052\u0065\u0066\u003a\u0020\u0025\u0073\u0020\u007c\u0020\u0025s\u0020\u007c\u0020\u0025\u0064\u0020\u0063\u0072\u0065\u0064it\u0028\u0073\u0029 \u0075s\u0065\u0064", _adg.String(), _eff, _eefa[:8], _gfa, _fef)
	}
	return nil
}
func TrackUse(useKey string) {
	if _bdf == nil {
		return
	}
	if !_bdf._ddcf || len(_bdf._gge) == 0 {
		return
	}
	if len(useKey) == 0 {
		return
	}
	_gac.Lock()
	defer _gac.Unlock()
	if _fde == nil {
		_fde = map[string]int{}
	}
	_fde[useKey]++
}
func SetMeteredKey(apiKey string) error {
	if len(apiKey) == 0 {
		_cg.Log.Error("\u004d\u0065\u0074\u0065\u0072e\u0064\u0020\u004c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u0041\u0050\u0049 \u004b\u0065\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u0065\u006d\u0070\u0074\u0079")
		_cg.Log.Error("\u002d\u0020\u0047\u0072\u0061\u0062\u0020\u006f\u006e\u0065\u0020\u0069\u006e\u0020\u0074h\u0065\u0020\u0046\u0072\u0065\u0065\u0020\u0054\u0069\u0065\u0072\u0020\u0061t\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002f\u0063\u006c\u006fud\u002e\u0075\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f")
		return _ac.Errorf("\u006de\u0074\u0065\u0072e\u0064\u0020\u006ci\u0063en\u0073\u0065\u0020\u0061\u0070\u0069\u0020k\u0065\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u0065\u006d\u0070\u0074\u0079\u003a\u0020\u0063\u0072\u0065\u0061\u0074\u0065 o\u006ee\u0020\u0061\u0074\u0020\u0068\u0074t\u0070\u0073\u003a\u002f\u002fc\u006c\u006f\u0075\u0064\u002e\u0075\u006e\u0069\u0064\u006f\u0063.\u0069\u006f")
	}
	if _bdf != nil && (_bdf._ddcf || _bdf.Tier != LicenseTierUnlicensed) {
		_cg.Log.Error("\u0045\u0052\u0052\u004f\u0052:\u0020\u0043\u0061\u006e\u006eo\u0074 \u0073\u0065\u0074\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006b\u0065\u0079\u0020\u0074\u0077\u0069c\u0065\u0020\u002d\u0020\u0053\u0068\u006f\u0075\u006c\u0064\u0020\u006a\u0075\u0073\u0074\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069z\u0065\u0020\u006f\u006e\u0063\u0065")
		return _gc.New("\u006c\u0069\u0063en\u0073\u0065\u0020\u006b\u0065\u0079\u0020\u0061\u006c\u0072\u0065\u0061\u0064\u0079\u0020\u0073\u0065\u0074")
	}
	_bdb := _fgd()
	_bdb._ccb = apiKey
	_eaf, _gag := _bdb.getStatus()
	if _gag != nil {
		return _gag
	}
	if !_eaf.Valid {
		return _gc.New("\u006b\u0065\u0079\u0020\u006e\u006f\u0074\u0020\u0076\u0061\u006c\u0069\u0064")
	}
	_gbd := &LicenseKey{_ddcf: true, _gge: apiKey, _bdc: true}
	_bdf = _gbd
	return nil
}
func _fgd() *meteredClient {
	_eba := meteredClient{_ab: "h\u0074\u0074\u0070\u0073\u003a\u002f/\u0063\u006c\u006f\u0075\u0064\u002e\u0075\u006e\u0069d\u006f\u0063\u002ei\u006f/\u0061\u0070\u0069", _edf: &_ef.Client{Timeout: 30 * _ed.Second}}
	if _bfb := _cf.Getenv("\u0055N\u0049\u0044\u004f\u0043_\u004c\u0049\u0043\u0045\u004eS\u0045_\u0053E\u0052\u0056\u0045\u0052\u005f\u0055\u0052L"); _a.HasPrefix(_bfb, "\u0068\u0074\u0074\u0070") {
		_eba._ab = _bfb
	}
	return &_eba
}

var _bcea = false

func _edcf(_fbg, _fadb []byte) ([]byte, error) {
	_cfgd, _abec := _ag.NewCipher(_fbg)
	if _abec != nil {
		return nil, _abec
	}
	_bcb := make([]byte, _ag.BlockSize+len(_fadb))
	_agdf := _bcb[:_ag.BlockSize]
	if _, _dgda := _d.ReadFull(_ebd.Reader, _agdf); _dgda != nil {
		return nil, _dgda
	}
	_acc := _fcce.NewCFBEncrypter(_cfgd, _agdf)
	_acc.XORKeyStream(_bcb[_ag.BlockSize:], _fadb)
	_deff := make([]byte, _fe.URLEncoding.EncodedLen(len(_bcb)))
	_fe.URLEncoding.Encode(_deff, _bcb)
	return _deff, nil
}
func init() {
	_afb := _cf.Getenv(_ba)
	_aegg := _cf.Getenv(_gbac)
	if len(_afb) == 0 || len(_aegg) == 0 {
		return
	}
	_caa, _dce := _db.ReadFile(_afb)
	if _dce != nil {
		_cg.Log.Error("\u0055\u006eab\u006c\u0065\u0020t\u006f\u0020\u0072\u0065ad \u006cic\u0065\u006e\u0073\u0065\u0020\u0063\u006fde\u0020\u0066\u0069\u006c\u0065\u003a\u0020%\u0076", _dce)
		return
	}
	_dce = SetLicenseKey(string(_caa), _aegg)
	if _dce != nil {
		_cg.Log.Error("\u0055\u006e\u0061b\u006c\u0065\u0020\u0074o\u0020\u006c\u006f\u0061\u0064\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0063\u006f\u0064\u0065\u003a\u0020\u0025\u0076", _dce)
		return
	}
}
func _cgef(_aecg *_ef.Response) (_d.ReadCloser, error) {
	var _dee error
	var _cab _d.ReadCloser
	switch _a.ToLower(_aecg.Header.Get("\u0043\u006fn\u0074\u0065\u006et\u002d\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067")) {
	case "\u0067\u007a\u0069\u0070":
		_cab, _dee = _e.NewReader(_aecg.Body)
		if _dee != nil {
			return _cab, _dee
		}
		defer _cab.Close()
	default:
		_cab = _aecg.Body
	}
	return _cab, nil
}
func (_edd *LicenseKey) IsLicensed() bool {
	return true
	if _edd == nil {
		return false
	}
	return _edd.Tier != LicenseTierUnlicensed || _edd._ddcf
}

var _febg map[string]struct{}
var _bfe = _ed.Date(2020, 1, 1, 0, 0, 0, 0, _ed.UTC)

func SetLicenseKey(content string, customerName string) error {
	if _bcea {
		return nil
	}
	_age, _edfe := _bbf(content)
	if _edfe != nil {
		_cg.Log.Error("\u004c\u0069c\u0065\u006e\u0073\u0065\u0020\u0063\u006f\u0064\u0065\u0020\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0065\u0072\u0072\u006f\u0072: \u0025\u0076", _edfe)
		return _edfe
	}
	if !_a.EqualFold(_age.CustomerName, customerName) {
		_cg.Log.Error("L\u0069ce\u006es\u0065 \u0063\u006f\u0064\u0065\u0020i\u0073\u0073\u0075e\u0020\u002d\u0020\u0043\u0075s\u0074\u006f\u006de\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u006d\u0069\u0073\u006da\u0074\u0063\u0068, e\u0078\u0070\u0065\u0063\u0074\u0065d\u0020\u0027\u0025\u0073\u0027\u002c\u0020\u0062\u0075\u0074\u0020\u0067o\u0074 \u0027\u0025\u0073\u0027", _age.CustomerName, customerName)
		return _ac.Errorf("\u0063\u0075\u0073\u0074\u006fm\u0065\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u006d\u0069\u0073\u006d\u0061t\u0063\u0068\u002c\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0027\u0025\u0073\u0027\u002c\u0020\u0062\u0075\u0074\u0020\u0067\u006f\u0074\u0020\u0027\u0025\u0073'", _age.CustomerName, customerName)
	}
	_edfe = _age.Validate()
	if _edfe != nil {
		_cg.Log.Error("\u004c\u0069\u0063\u0065\u006e\u0073e\u0020\u0063\u006f\u0064\u0065\u0020\u0076\u0061\u006c\u0069\u0064\u0061\u0074i\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u003a\u0020\u0025\u0076", _edfe)
		return _edfe
	}
	_bdf = &_age
	return nil
}
func _dag() string {
	_bg := _cf.Getenv("\u0048\u004f\u004d\u0045")
	if len(_bg) == 0 {
		_bg, _ = _cf.UserHomeDir()
	}
	return _bg
}
func _agd() ([]string, []string, error) {
	_ebde, _fga := _bb.Interfaces()
	if _fga != nil {
		return nil, nil, _fga
	}
	var _aeb []string
	var _ffe []string
	for _, _geee := range _ebde {
		if _geee.Flags&_bb.FlagUp == 0 || _ea.Equal(_geee.HardwareAddr, nil) {
			continue
		}
		_bdg, _cbf := _geee.Addrs()
		if _cbf != nil {
			return nil, nil, _cbf
		}
		_gbf := 0
		for _, _fadf := range _bdg {
			var _dffa _bb.IP
			switch _ged := _fadf.(type) {
			case *_bb.IPNet:
				_dffa = _ged.IP
			case *_bb.IPAddr:
				_dffa = _ged.IP
			}
			if _dffa.IsLoopback() {
				continue
			}
			if _dffa.To4() == nil {
				continue
			}
			_ffe = append(_ffe, _dffa.String())
			_gbf++
		}
		_bdbbb := _geee.HardwareAddr.String()
		if _bdbbb != "" && _gbf > 0 {
			_aeb = append(_aeb, _bdbbb)
		}
	}
	return _aeb, _ffe, nil
}

const _ba = "\u0055\u004e\u0049\u004fFF\u0049\u0043\u0045\u005f\u004c\u0049\u0043\u0045\u004e\u0053\u0045\u005f\u0050\u0041T\u0048"

var _febga []interface{}
var _fde map[string]int
