//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package convertutils

import (
	_g "bytes"
	_bc "errors"
	_ee "fmt"
	_ed "github.com/unidoc/unichart"
	_bdd "github.com/unidoc/unichart/dataset"
	_gda "github.com/unidoc/unichart/render"
	_a "github.com/unidoc/unipdf/v4/core"
	_cf "github.com/unidoc/unipdf/v4/creator"
	_ae "github.com/unidoc/unipdf/v4/model"
	_ea "github.com/unidoc/unipdf/v4/render"
	_dc "github.com/unidoc/unitype"
	_db "image"
	_d "image/color"
	_da "math"
	_b "os"
	_ceg "regexp"
	_bg "sort"
	_gd "strconv"
	_ba "strings"
	_ce "sync"
	_e "unicode"
	_dcd "unioffice/common/logger"
	_ab "unioffice/document"
	_bd "unioffice/measurement"
	_edc "unioffice/schema/soo/dml"
	_ad "unioffice/schema/soo/dml/chart"
	_ge "unioffice/spreadsheet"
	_f "unioffice/spreadsheet/format"
	_cd "unioffice/spreadsheet/formula"
	_de "unioffice/spreadsheet/reference"
)

func MakeTempCreator(width, height float64) *_cf.Creator {
	_adeg := _cf.New()
	_adeg.SetPageSize(_cf.PageSize{width, height})
	_adeg.SetPageMargins(0, 0, 0, 0)
	return _adeg
}

var (
	DefaultFontSize     = 12.0
	DefaultImageEncoder _a.StreamEncoder
	DefaultPageSize     = PageSizeA4
	_eedf               = map[PageSize]_cf.PageSize{PageSizeA3: _cf.PageSizeA3, PageSizeA4: _cf.PageSizeA4, PageSizeA5: _cf.PageSizeA5, PageSizeLetter: _cf.PageSizeLetter, PageSizeLegal: _cf.PageSizeLegal}
)

const (
	ImgPart_whole ImgPart = 0
	ImgPart_t     ImgPart = 1
	ImgPart_b     ImgPart = 2
	ImgPart_l     ImgPart = 3
	ImgPart_r     ImgPart = 4
	ImgPart_lt    ImgPart = 5
	ImgPart_rt    ImgPart = 6
	ImgPart_lb    ImgPart = 7
	ImgPart_rb    ImgPart = 8
)

func AdjustColorByShade(colorStr string, shade float64) string {
	var _cgff, _fcbd, _aefe uint8
	_fbgg, _ := _ee.Sscanf(colorStr, "\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078", &_cgff, &_fcbd, &_aefe)
	if _fbgg != 3 {
		return ""
	}
	return _bdcc(_cgff, shade) + _bdcc(_fcbd, shade) + _bdcc(_aefe, shade)
}
func AdjustColorByLumMod(colorStr string, lum float64) string {
	var _dba, _aca, _deec uint8
	_bcga, _ := _ee.Sscanf(colorStr, "\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078", &_dba, &_aca, &_deec)
	if _bcga != 3 {
		return ""
	}
	_fegd, _dgd, _cbd := _aagg(_dba, _aca, _deec)
	_cbd = lum * _cbd
	_dba, _aca, _deec = _aagc(_fegd, _dgd, _cbd)
	return _ee.Sprintf("\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078", _dba, _aca, _deec)
}
func (_agb *creatorContext) getTitle(_cga *_ad.CT_Title) string {
	_aegd := ""
	if _cga != nil && _cga.Tx != nil && _cga.Tx.TxChoice != nil && _cga.Tx.TxChoice.Rich != nil {
		if len(_cga.Tx.TxChoice.Rich.P) > 0 {
			for _, _aded := range _cga.Tx.TxChoice.Rich.P {
				if len(_aded.EG_TextRun) > 0 {
					_aegd += "\u000a" + _aded.EG_TextRun[0].TextRunChoice.R.T
				}
			}
		}
	}
	return _aegd
}
func Lighten(clr float64) float64 { return 0.6 + 0.4*clr }
func RegisterEmbeddedFonts(d *_ab.Document) error {
	_gbbd := d.FontTable()
	if _gbbd == nil {
		return nil
	}
	for _, _bbbe := range _gbbd.Font {
		if _bbbe.EmbedRegular != nil {
			return _dgae(d, _bbbe.NameAttr, _bbbe.EmbedRegular.IdAttr, _bbbe.EmbedRegular.FontKeyAttr)
		}
		if _bbbe.EmbedBold != nil {
			return _dgae(d, _bbbe.NameAttr, _bbbe.EmbedBold.IdAttr, _bbbe.EmbedBold.FontKeyAttr)
		}
		if _bbbe.EmbedItalic != nil {
			return _dgae(d, _bbbe.NameAttr, _bbbe.EmbedItalic.IdAttr, _bbbe.EmbedItalic.FontKeyAttr)
		}
		if _bbbe.EmbedBoldItalic != nil {
			return _dgae(d, _bbbe.NameAttr, _bbbe.EmbedBoldItalic.IdAttr, _bbbe.EmbedBoldItalic.FontKeyAttr)
		}
	}
	return nil
}
func DrawLine(c *_cf.Creator, x0, y0, x1, y1, width float64, color _cf.Color) {
	if color == nil {
		return
	}
	_gbac := c.NewLine(x0, y0, x1, y1)
	_gbac.SetLineWidth(width)
	_gbac.SetColor(color)
	c.Draw(_gbac)
}
func LoadFontFromFile(filename string) (*_ae.PdfFont, error) {
	if !_ba.HasSuffix(filename, "\u002e\u0074\u0074\u0066") {
		_dcd.Log.Debug("\u0055\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u0066\u0069\u006c\u0065\u0020\u0066\u006f\u0072ma\u0074\u002e")
		return nil, _ee.Errorf("\u0055\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020f\u006f\u006e\u0074\u0020\u0066\u0069l\u0065\u0020\u0066\u006f\u0072m\u0061\u0074\u002c\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u006cy\u0020\u006f\u006e\u006c\u0079\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0054T\u0046\u0020\u0066\u006f\u006e\u0074\u0020\u0066i\u006c\u0065\u002e")
	}
	_bgfb, _adbf := _ae.NewCompositePdfFontFromTTFFile(filename)
	if _adbf != nil {
		return nil, _adbf
	}
	return _bgfb, nil
}

var _faaac = _dfff(1)

func AdjustColor(colorStr string, EG_ColorTransform []*_edc.EG_ColorTransform) string {
	for _, _ece := range EG_ColorTransform {
		if _aeae := _ece.ColorTransformChoice.Tint; _aeae != nil {
			if _aac := _aeae.ValAttr.ST_PositiveFixedPercentageDecimal; _aac != nil {
				colorStr = AdjustColorByTint(colorStr, 1.0-float64(*_aac)/Percent100)
			}
		}
		if _agd := _ece.ColorTransformChoice.Shade; _agd != nil {
			if _bdgd := _agd.ValAttr.ST_PositiveFixedPercentageDecimal; _bdgd != nil {
				colorStr = AdjustColorByShade(colorStr, float64(*_bdgd)/Percent100)
			}
		}
		if _egaca := _ece.ColorTransformChoice.LumMod; _egaca != nil {
			if _gfad := _egaca.ValAttr.ST_PercentageDecimal; _gfad != nil {
				colorStr = AdjustColorByLumMod(colorStr, float64(*_gfad)/Percent100)
			}
		}
		if _gadc := _ece.ColorTransformChoice.LumOff; _gadc != nil {
			if _gggf := _gadc.ValAttr.ST_PercentageDecimal; _gggf != nil {
				colorStr = AdjustColorByLumOff(colorStr, float64(*_gggf)/Percent100)
			}
		}
	}
	return colorStr
}

const (
	BorderPositionTop    BorderPosition = 0
	BorderPositionLeft   BorderPosition = 1
	BorderPositionBottom BorderPosition = 2
	BorderPositionRight  BorderPosition = 3
)

func FromSTPercentage(st *_edc.ST_Percentage) float64 {
	if _cfeg := st.ST_PercentageDecimal; _cfeg != nil {
		return float64(*_cfeg) / Percent100
	}
	return 0
}
func _afab(_dffg *_ad.CT_DateAx) (uint32, _ad.ST_AxPos, _ad.ST_TickMark, _ad.ST_TickLblPos, *_ad.CT_ChartLines, uint32, *_edc.CT_ShapeProperties, error) {
	var _abge, _bcdd uint32
	var _ged _ad.ST_AxPos
	var _afc _ad.ST_TickMark
	var _dcdd *_ad.CT_ChartLines
	var _fcd _ad.ST_TickLblPos
	if _dffg.AxId == nil {
		return _abge, _ged, _afc, _fcd, _dcdd, _bcdd, _dffg.SpPr, _bc.New("\u004e\u006f\u0020x\u0020\u0061\u0078\u0069\u0073\u0020\u0049\u0044")
	} else {
		_abge = _dffg.AxId.ValAttr
	}
	if _dffg.AxPos == nil {
		return _abge, _ged, _afc, _fcd, _dcdd, _bcdd, _dffg.SpPr, _bc.New("\u004eo\u0020x\u0020\u0061\u0078\u0069\u0073 \u0070\u006fs\u0069\u0074\u0069\u006f\u006e")
	} else {
		_ged = _dffg.AxPos.ValAttr
	}
	if _dffg.MajorTickMark != nil {
		_afc = _dffg.MajorTickMark.ValAttr
	}
	if _dffg.TickLblPos != nil {
		_fcd = _dffg.TickLblPos.ValAttr
	}
	if _dffg.CrossAx == nil {
		return _abge, _ged, _afc, _fcd, _dcdd, _bcdd, _dffg.SpPr, _bc.New("\u004e\u006f \u0063\u0072\u006fs\u0073\u0020\u0061\u0078\u0069\u0073\u0020\u0049\u0044")
	} else {
		_bcdd = _dffg.CrossAx.ValAttr
	}
	_dcdd = _dffg.MajorGridlines
	return _abge, _ged, _afc, _fcd, _dcdd, _bcdd, _dffg.SpPr, nil
}

var _gee = _dfff(2)

func AdjustColorByLumOff(colorStr string, lumOff float64) string {
	var _bbgg, _ffg, _gadf uint8
	_aedd, _ := _ee.Sscanf(colorStr, "\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078", &_bbgg, &_ffg, &_gadf)
	if _aedd != 3 {
		return ""
	}
	_afgb, _cbfg, _gcga := _aagg(_bbgg, _ffg, _gadf)
	_gcga = _gcga + lumOff
	_bbgg, _ffg, _gadf = _aagc(_afgb, _cbfg, _gcga)
	return _ee.Sprintf("\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078", _bbgg, _ffg, _gadf)
}

var _ebf = _dfff(0.125)

func FromSTCoordinate32(st _edc.ST_Coordinate32) int64 {
	if _aacbc := st.ST_Coordinate32Unqualified; _aacbc != nil {
		return int64(*_aacbc)
	}
	return 0
}
func RegisterFontsFromDirectory(dirName string) error {
	_gcd, _bbc := _b.Open(dirName)
	if _bbc != nil {
		return _bbc
	}
	defer _gcd.Close()
	_acgb, _bbc := _gcd.Readdirnames(0)
	if _bbc != nil {
		return _bbc
	}
	for _, _afabe := range _acgb {
		if _ba.HasSuffix(_afabe, "\u002e\u0074\u0074\u0066") {
			_cafc := dirName + "\u002f" + _afabe
			_egdf := _agad(_cafc)
			if _egdf != nil {
				_dcd.Log.Debug("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074o\u0020\u0070\u0072\u006f\u0063e\u0073\u0073\u0020\u0061\u006e\u0064\u0020\u0072\u0065\u0067\u0069\u0073\u0074\u0065\u0072\u0020\u0066\u006f\u006e\u0074\u0020\u0066\u0072\u006f\u006d\u0020\u0054\u0054\u0046\u0020\u0066\u0069\u006c\u0065\u0020\u0025\u0073", _egdf)
				continue
			}
		}
	}
	return nil
}

type serCategory struct {
	_daa  string
	_bcaa []serValue
}

var StdFontsMap = map[string][]string{"\u0048e\u006c\u0076\u0065\u0074\u0069\u0063a": []string{"\u0048e\u006c\u0076\u0065\u0074\u0069\u0063a", "\u0048\u0065\u006c\u0076\u0065\u0074\u0069\u0063\u0061-\u0042\u006f\u006c\u0064", "\u0048\u0065\u006c\u0076\u0065\u0074\u0069\u0063\u0061\u002d\u004f\u0062l\u0069\u0071\u0075\u0065", "H\u0065\u006c\u0076\u0065ti\u0063a\u002d\u0042\u006f\u006c\u0064O\u0062\u006c\u0069\u0071\u0075\u0065"}, "\u0043o\u0075\u0072\u0069\u0065\u0072": []string{"\u0043o\u0075\u0072\u0069\u0065\u0072", "\u0043\u006f\u0075r\u0069\u0065\u0072\u002d\u0042\u006f\u006c\u0064", "\u0043o\u0075r\u0069\u0065\u0072\u002d\u004f\u0062\u006c\u0069\u0071\u0075\u0065", "\u0043\u006f\u0075\u0072ie\u0072\u002d\u0042\u006f\u006c\u0064\u004f\u0062\u006c\u0069\u0071\u0075\u0065"}, "\u0054i\u006de\u0073\u0020\u004e\u0065\u0077\u0020\u0052\u006f\u006d\u0061\u006e": []string{"T\u0069\u006d\u0065\u0073\u002d\u0052\u006f\u006d\u0061\u006e", "\u0054\u0069\u006d\u0065\u0073\u002d\u0042\u006f\u006c\u0064", "\u0054\u0069\u006de\u0073\u002d\u0049\u0074\u0061\u006c\u0069\u0063", "\u0054\u0069m\u0065\u0073\u002dB\u006f\u006c\u0064\u0049\u0074\u0061\u006c\u0069\u0063"}, "\u0064e\u0066\u0061\u0075\u006c\u0074": []string{"\u0048e\u006c\u0076\u0065\u0074\u0069\u0063a", "\u0048\u0065\u006c\u0076\u0065\u0074\u0069\u0063\u0061-\u0042\u006f\u006c\u0064", "\u0048\u0065\u006c\u0076\u0065\u0074\u0069\u0063\u0061\u002d\u004f\u0062l\u0069\u0071\u0075\u0065", "H\u0065\u006c\u0076\u0065ti\u0063a\u002d\u0042\u006f\u006c\u0064O\u0062\u006c\u0069\u0071\u0075\u0065"}}

func (_bcad *creatorContext) drawLineWithProps(_ffgc *_edc.CT_ShapeProperties, _aeed, _eebc, _fdge, _fgaa float64, _ebaf bool) {
	if _ffgc != nil {
		if _abdcg := _ffgc.Ln; _abdcg != nil {
			_cdbac := _bcad.getPdfColorFromSolidFill(_abdcg.LineFillPropertiesChoice.SolidFill)
			if _cdbac == nil && _ebaf {
				_cdbac = _cf.ColorBlack
			}
			if _cdbac != nil {
				var _acgf float64
				if _fdae := _abdcg.WAttr; _fdae != nil {
					_acgf = _bd.FromEMU(int64(*_fdae))
				} else {
					_acgf = _ebf
				}
				DrawLine(_bcad._abedc, _aeed, _eebc, _fdge, _fgaa, _acgf, _cdbac)
			}
		}
	}
}

var _aegc = _dfff(1.5)

func _cgbe(_bgca *_ad.CT_ValAx) (uint32, _ad.ST_AxPos, _ad.ST_TickMark, _ad.ST_TickLblPos, *_ad.CT_ChartLines, uint32, *_edc.CT_ShapeProperties, error) {
	var _aaeg, _acfe uint32
	var _dac _ad.ST_AxPos
	var _ebg _ad.ST_TickMark
	var _gega *_ad.CT_ChartLines
	var _cee _ad.ST_TickLblPos
	if _bgca.AxId == nil {
		return _aaeg, _dac, _ebg, _cee, _gega, _acfe, _bgca.SpPr, _bc.New("\u004e\u006f\u0020x\u0020\u0061\u0078\u0069\u0073\u0020\u0049\u0044")
	} else {
		_aaeg = _bgca.AxId.ValAttr
	}
	if _bgca.AxPos == nil {
		return _aaeg, _dac, _ebg, _cee, _gega, _acfe, _bgca.SpPr, _bc.New("\u004eo\u0020x\u0020\u0061\u0078\u0069\u0073 \u0070\u006fs\u0069\u0074\u0069\u006f\u006e")
	} else {
		_dac = _bgca.AxPos.ValAttr
	}
	if _bgca.MajorTickMark != nil {
		_ebg = _bgca.MajorTickMark.ValAttr
	}
	if _bgca.TickLblPos != nil {
		_cee = _bgca.TickLblPos.ValAttr
	}
	if _bgca.CrossAx == nil {
		return _aaeg, _dac, _ebg, _cee, _gega, _acfe, _bgca.SpPr, _bc.New("\u004e\u006f \u0063\u0072\u006fs\u0073\u0020\u0061\u0078\u0069\u0073\u0020\u0049\u0044")
	} else {
		_acfe = _bgca.CrossAx.ValAttr
	}
	_gega = _bgca.MajorGridlines
	return _aaeg, _dac, _ebg, _cee, _gega, _acfe, _bgca.SpPr, nil
}

type legendItem struct {
	_fbd string
	_ffa *_edc.CT_ShapeProperties
}

func MakeBlockFromChartSpace(cs *_ad.ChartSpace, width, height float64, theme *_edc.Theme) (*_cf.Block, error) {
	_dfc, _cca := _gea(cs, width, height, theme, false, nil)
	if _cca != nil {
		return nil, _cca
	}
	_adb, _cca := GetPageFromCreator(_dfc)
	if _cca != nil {
		return nil, _cca
	}
	_cfbc, _cca := _cf.NewBlockFromPage(_adb)
	if _cca != nil {
		return nil, _cca
	}
	return _cfbc, nil
}
func (_aee *creatorContext) drawTitle(_eec string, _dcaa, _abef float64) {
	_gbd := _aee._fegb
	_gfba := _aee._abedc.NewStyledParagraph()
	_agfe := _gfba.SetText(_eec)
	_ega, _bdb := _ae.NewStandard14Font(_ae.HelveticaName)
	if _bdb == nil {
		_aegb := _aee._abedc.NewTextStyle()
		_aegb.Font = _ega
		_aegb.FontSize = 14
		_aegb.TextRise = 0.4
		_agfe.Style = _aegb
		_gfba.SetPos(_dcaa-_gfba.Width()*_gbd/2, _abef)
		_aee._abedc.Draw(_gfba)
	}
}
func _bdcc(_egg uint8, _abac float64) string {
	_afg := float64(_egg)
	return _ee.Sprintf("\u0025\u0030\u0032\u0078", int(_afg*_abac))
}
func _fagc(_dcca string) ([]byte, error) {
	_bbd := _ceg.MustCompile("\u005b\u005e\u0061\u002d\u007a\u0041\u002d\u005a\u0030\u002d\u0039\u005d\u002b")
	_dcca = _bbd.ReplaceAllString(_dcca, "")
	_egdb := []rune(_dcca)
	_eeb := []byte{}
	for _gcgab := len(_egdb) - 2; _gcgab >= 0; _gcgab -= 2 {
		_cab, _bbda := _gd.ParseUint(string(_egdb[_gcgab])+string(_egdb[_gcgab+1]), 16, 8)
		if _bbda != nil {
			return nil, _bbda
		}
		_eeb = append(_eeb, byte(_cab))
	}
	return _eeb, nil
}
func _ebde(_abfg float64) float64 {
	if _abfg < 0 {
		_abfg += float64(-int(_abfg) + 1)
	} else if _abfg > 1 {
		_abfg -= float64(int(_abfg))
	}
	return _abfg
}

type fontsMap struct {
	_cbga *_ce.Mutex
	_dbcc map[string]map[FontStyle]*_ae.PdfFont
}

const _bfc = 6.0
const (
	FontStyle_Regular    FontStyle = 0
	FontStyle_Bold       FontStyle = 1
	FontStyle_Italic     FontStyle = 2
	FontStyle_BoldItalic FontStyle = 3
)

func RegisterFont(name string, style FontStyle, font *_ae.PdfFont) {
	_aaab._cbga.Lock()
	if _aaab._dbcc[name] == nil {
		_aaab._dbcc[name] = map[FontStyle]*_ae.PdfFont{}
	}
	_aaab._dbcc[name][style] = font
	_aaab._cbga.Unlock()
}
func GetRegisteredFont(name string, style FontStyle) *_ae.PdfFont {
	_aaab._cbga.Lock()
	defer _aaab._cbga.Unlock()
	if _gfg, _cgfd := _aaab._dbcc[name]; _cgfd {
		if _bef, _cbdb := _gfg[style]; _cbdb {
			return _bef
		}
	}
	return nil
}
func PointsFromTwips(twips int64) float64 {
	return float64(int64(float64(twips)*_bd.Twips*10+0.5)) / 10
}

type PageSize int

var _gbgcc = map[string]FontStyle{"\u0052e\u0067\u0075\u006c\u0061\u0072": FontStyle_Regular, "\u0042\u006f\u006c\u0064": FontStyle_Bold, "\u0049\u0074\u0061\u006c\u0069\u0063": FontStyle_Italic, "B\u006f\u006c\u0064\u0020\u0049\u0074\u0061\u006c\u0069\u0063": FontStyle_BoldItalic}

func GetOpacityFromColorTransform(trs []*_edc.EG_ColorTransform) float64 {
	for _, _dafa := range trs {
		if _dafa != nil {
			if _aeee := _dafa.ColorTransformChoice.Alpha; _aeee != nil {
				if _afbg := _aeee.ValAttr.ST_PositiveFixedPercentageDecimal; _afbg != nil {
					return float64(*_afbg) / Percent100
				}
			}
		}
	}
	return 1.0
}
func AdjustColorByTint(colorStr string, tint float64) string {
	var _ecff, _adgb, _gfac uint8
	_agdf, _ := _ee.Sscanf(colorStr, "\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078", &_ecff, &_adgb, &_gfac)
	if _agdf != 3 {
		return ""
	}
	return _bdbb(_ecff, tint) + _bdbb(_adgb, tint) + _bdbb(_gfac, tint)
}
func DrawRectangle(c *_cf.Creator, r *Rectangle, w float64, color _cf.Color) {
	if color == nil {
		return
	}
	DrawLine(c, r.Left, r.Top, r.Right, r.Top, w, color)
	DrawLine(c, r.Left, r.Top, r.Left, r.Bottom, w, color)
	DrawLine(c, r.Left, r.Bottom, r.Right, r.Bottom, w, color)
	DrawLine(c, r.Right, r.Top, r.Right, r.Bottom, w, color)
}
func MakeImageFromChartSpace(cs *_ad.ChartSpace, width, height float64, theme *_edc.Theme, workbook *_ge.Workbook) (_db.Image, error) {
	_cdab, _gcb := _gea(cs, width, height, theme, true, workbook)
	if _gcb != nil {
		return nil, _gcb
	}
	_ccb, _gcb := GetPageFromCreator(_cdab)
	if _gcb != nil {
		return nil, _gcb
	}
	return _ea.NewImageDevice().Render(_ccb)
}
func _aagc(_adc, _ecee, _fcdd float64) (uint8, uint8, uint8) {
	var _daed float64
	if _fcdd < 0.5 {
		_daed = _fcdd * (1 + _ecee)
	} else {
		_daed = _fcdd + _ecee - _fcdd*_ecee
	}
	_cddd := _fcdd*2 - _daed
	_adc /= 360.0
	_gfe := _ebde(_adc + 1.0/3.0)
	_fbaa := _ebde(_adc)
	_eacc := _ebde(_adc - 1.0/3.0)
	_dgg := _gfab(_gfe, _daed, _cddd)
	_efgg := _gfab(_fbaa, _daed, _cddd)
	_ccbd := _gfab(_eacc, _daed, _cddd)
	return uint8(255 * _dgg), uint8(255 * _efgg), uint8(255 * _ccbd)
}
func ClearRegisteredFonts() {
	_aaab._cbga.Lock()
	_aaab._dbcc = map[string]map[FontStyle]*_ae.PdfFont{}
	_aaab._cbga.Unlock()
}
func (_ada *creatorContext) getPdfColorFromSolidFill(_dbfc *_edc.CT_SolidColorFillProperties) _cf.Color {
	if _dbfc == nil {
		return nil
	}
	_acbe := ""
	if _ccec := _dbfc.SrgbClr; _ccec != nil {
		_acbe = _ccec.ValAttr
	} else if _agea := _dbfc.SchemeClr; _agea != nil {
		_acbe = _dcb(_agea.ValAttr, _ada._gcfe)
		_acbe = AdjustColor(_acbe, _agea.EG_ColorTransform)
	}
	if _acbe == "" {
		return nil
	}
	return _cf.ColorRGBFromHex("\u0023" + _acbe)
}
func (_cebg FontStyle) String() string {
	return []string{"\u0052e\u0067\u0075\u006c\u0061\u0072", "\u0042\u006f\u006c\u0064", "\u0049\u0074\u0061\u006c\u0069\u0063", "\u0042\u006f\u006c\u0064\u0049\u0074\u0061\u006c\u0069\u0063"}[int(_cebg)]
}
func (_gg *creatorContext) drawBarChart(_adg *_ad.CT_BarChart, _bcd *Rectangle, _aba []*_ad.CT_PlotAreaChoice1, _dd *_ge.Workbook) ([]*legendItem, error) {
	var _fcc bool
	if _cda := _adg.BarDir; _cda != nil {
		_fcc = _cda.ValAttr == _ad.ST_BarDirBar
	}
	_bca := _adg.Ser
	_bg.Sort(barSerByOrder(_bca))
	_ac := map[string]serCategory{}
	_eba := []string{}
	_bgg := []*legendItem{}
	_fd := _da.Inf(1)
	_fg := _da.Inf(-1)
	for _, _eag := range _bca {
		var _dad string
		if _aaa := _eag.Tx; _aaa != nil {
			if _ec := _aaa.SerTxChoice; _ec != nil {
				if _ec.V != nil {
					_dad = *_ec.V
				} else if _fac := _ec.StrRef; _fac != nil {
					if _fga := _fac.StrCache; _fga != nil {
						for _, _ff := range _fga.Pt {
							_dad = _ff.V
						}
					}
				}
			}
		}
		if _cg := _eag.Cat; _cg != nil {
			if _afe := _cg.AxDataSourceChoice; _afe != nil {
				if _gf := _afe.StrRef; _gf != nil {
					if _edd := _gf.F; _edd != "" && _dd != nil {
						_ebe, _cgc, _aeac, _fca := ParseExcelRange(_edd)
						if _fca == nil {
							for _, _ggd := range _dd.Sheets() {
								if _ggd.Name() == _ba.Trim(_ebe, "\u0027") {
									_fae := _cgc.String()
									for _cdba := _cgc.RowIdx; _cdba <= _aeac.RowIdx; _cdba += 1 {
										_dde := _ba.ReplaceAll(_fae, _ee.Sprint(_cgc.RowIdx), _ee.Sprint(_cdba))
										_gg.addCatName(_ggd.Cell(_dde).GetString(), _ac, &_eba)
									}
									break
								}
							}
						}
					}
					if _ggc := _gf.StrCache; _ggc != nil {
						for _, _df := range _ggc.Pt {
							_gg.addCatName(_df.V, _ac, &_eba)
						}
					}
				} else if _fbg := _afe.NumRef; _fbg != nil {
					if _aaag := _fbg.NumCache; _aaag != nil {
						var _cgf string
						if _aaag.FormatCode != nil {
							_cgf = *_aaag.FormatCode
						}
						for _, _ef := range _aaag.Pt {
							var _aabg string
							if _ef.FormatCodeAttr == nil {
								_aabg = _cgf
							} else {
								_aabg = *_ef.FormatCodeAttr
							}
							var _eea string
							_fcaa, _cfb := _gd.ParseFloat(_ef.V, 64)
							if _cfb != nil {
								_eea = _ef.V
							} else {
								_eea = _f.Number(_fcaa, _aabg)
							}
							_gg.addCatName(_eea, _ac, &_eba)
						}
					}
				}
			}
		}
		if _agf := _eag.Val; _agf != nil {
			if _dcdg := _agf.NumDataSourceChoice; _dcdg != nil {
				if _fcg := _dcdg.NumRef; _fcg != nil {
					if _fgae := _fcg.F; _fgae != "" && _dd != nil {
						_dcc, _gbb, _cgb, _eca := ParseExcelRange(_fgae)
						if _eca == nil {
							for _, _gdc := range _dd.Sheets() {
								if _gdc.Name() == _ba.Trim(_dcc, "\u0027") {
									_fdd := _gbb.String()
									for _cfe := _gbb.RowIdx; _cfe <= _cgb.RowIdx; _cfe += 1 {
										_cfa := _ba.ReplaceAll(_fdd, _ee.Sprint(_gbb.RowIdx), _ee.Sprint(_cfe))
										if _gdc.FormulaContext().HasFormula(_cfa) {
											_afa := _cd.NewEvaluator()
											_ffe := _gdc.FormulaContext().Cell(_cfa, _afa)
											_gde := _ffe.Value()
											_gg.addCatValue(_gde, _ac, _eba, (int)(_cfe-_gbb.RowIdx), &_fd, &_fg, _dad, _eag.SpPr)
										} else {
											_bcag := _gdc.Cell(_cfa).GetString()
											_gg.addCatValue(_bcag, _ac, _eba, (int)(_cfe-_gbb.RowIdx), &_fd, &_fg, _dad, _eag.SpPr)
										}
									}
									break
								}
							}
						}
					}
					if _fbga := _fcg.NumCache; _fbga != nil {
						for _fgd, _aeacd := range _fbga.Pt {
							_gg.addCatValue(_aeacd.V, _ac, _eba, _fgd, &_fd, &_fg, _dad, _eag.SpPr)
						}
					}
				}
			}
		}
		_bgg = append(_bgg, &legendItem{_fbd: _dad, _ffa: _eag.SpPr})
	}
	var _fda float64
	var _efe, _fag float64
	if _fg == 0 && _fd == 0 {
		_fda = 0.2
		_fag = 0
		_efe = 1
	} else {
		var _ecg float64
		if _edbb := _da.Abs(_fd); _fg < _edbb {
			_ecg = _edbb
		} else {
			_ecg = _fg
		}
		_afb := _da.Pow(10, _da.Floor(_da.Log10(_ecg)))
		_gbg := _ecg / _afb
		if _gbg < 4.29 {
			_fda = 0.5
		} else if _gbg >= 4.29 && _gbg < 8.58 {
			_fda = 1
		} else {
			_fda = 2
		}
		_fda *= _afb
		if _fg <= 0 {
			_efe = 0
		} else {
			_efe = (_da.Ceil(_fg/_fda) + 1) * _fda
		}
		if _fd >= 0 {
			_fag = 0
		} else {
			_fag = (_da.Floor(_fd/_fda) - 1) * _fda
		}
	}
	_fgf := _gg.drawAxes(_aba, _fag, _efe, _fda, _eba, _bcd, _fcc)
	if _fgf != nil {
		return nil, _fgf
	}
	_acg := 0.0
	if _adg.GapWidth != nil {
		if _aec := _adg.GapWidth.ValAttr; _aec != nil {
			if _gaef := _aec.ST_GapAmountUShort; _gaef != nil {
				_acg = float64(*_gaef) / 100.0
			}
		}
	}
	_fdc := _bcd.Right - _bcd.Left
	_cad := _bcd.Bottom - _bcd.Top
	_ggg := float64(len(_eba))
	if _fcc {
		_gdg := _efe / (_efe - _fag) * _fdc
		_feg := -_fag / (_efe - _fag) * _fdc
		_cdd := _bcd.Left + _feg
		_acf := _cad / _ggg
		for _bb, _gfb := range _eba {
			_ceb := _ac[_gfb]
			_bdf := float64(len(_ceb._bcaa)) + _acg
			_dfb := _acf / _bdf
			_ddf := _dfb * _acg
			_ffb := _bcd.Bottom - float64(_bb)*_acf - _ddf/2 - _dfb
			for _, _cff := range _ceb._bcaa {
				if _cff._dga == 0 {
					continue
				}
				var _ggcf, _gegb float64
				if _cff._dga > 0 {
					_gegb = _cff._dga / _efe * _gdg
					_gg.drawRectangleWithProps(_cff._aag, _cdd, _ffb, _gegb, _dfb, false)
				} else {
					_gegb = _cff._dga / _fag * _feg
					_ggcf = _cdd - _gegb
					_gg.drawRectangleWithProps(_cff._aag, _ggcf, _ffb, _gegb, _dfb, false)
				}
				_ffb -= _dfb
			}
		}
	} else {
		_fdaf := _efe / (_efe - _fag) * _cad
		_gafb := -_fag / (_efe - _fag) * _cad
		_fegg := _bcd.Top + _fdaf
		_be := _fdc / _ggg
		for _cc, _bdae := range _eba {
			_cfca := _ac[_bdae]
			_gc := float64(len(_cfca._bcaa)) + _acg
			_gba := _be / _gc
			_bed := _gba * _acg
			_ddd := _bcd.Left + float64(_cc)*_be + _bed/2
			for _, _cdac := range _cfca._bcaa {
				var _bdad, _cdbf float64
				if _cdac._dga > 0 {
					_cdbf = _cdac._dga / _efe * _fdaf
					_bdad = _fegg - _cdbf
					_gg.drawRectangleWithProps(_cdac._aag, _ddd, _bdad, _gba, _cdbf, false)
				} else {
					_cdbf = _cdac._dga / _fag * _gafb
					_gg.drawRectangleWithProps(_cdac._aag, _ddd, _fegg, _gba, _cdbf, false)
				}
				_ddd += _gba
			}
		}
	}
	return _bgg, nil
}

type creatorContext struct {
	_abedc *_cf.Creator
	_gcfe  *_edc.Theme
	_fegb  float64
}

func GetGroupOffsetFromXfrm(xfrm *_edc.CT_GroupTransform2D) (float64, float64) {
	var _aeaed, _gage float64
	if xfrm.Off != nil && xfrm.ChOff != nil {
		_aeaed = _bd.FromEMU(FromSTCoordinate(xfrm.Off.XAttr)) - _bd.FromEMU(FromSTCoordinate(xfrm.ChOff.XAttr))
		_gage = _bd.FromEMU(FromSTCoordinate(xfrm.Off.YAttr)) - _bd.FromEMU(FromSTCoordinate(xfrm.ChOff.YAttr))
	}
	return _aeaed, _gage
}
func GetColorStringFromDmlColor(dmlColor *_edc.CT_Color) string {
	var _gcbc string
	if _cfab := dmlColor.SrgbClr; _cfab != nil {
		_gcbc = _cfab.ValAttr
	} else if _aaf := dmlColor.SysClr; _aaf != nil {
		if _aaf.LastClrAttr != nil {
			return *_aaf.LastClrAttr
		}
		return "\u0030\u0030\u0030\u0030\u0030\u0030"
	}
	return _gcbc
}
func (_eagg *Rectangle) scale(_bddg float64) {
	_eagg.Top *= _bddg
	_eagg.Bottom *= _bddg
	_eagg.Left *= _bddg
	_eagg.Right *= _bddg
}
func TwipsFromPoints(points float64) float64 { return points / _bd.Twips }
func _dfff(_edge float64) float64            { return _edge * _bd.Millimeter }
func AssignStdFontByName(style _cf.TextStyle, fontName string) *_ae.PdfFont {
	_dcba := _ae.StdFontName(fontName)
	return _ae.NewStandard14FontMustCompile(_dcba)
}
func GetDefaultPageSize() _cf.PageSize { return _eedf[DefaultPageSize] }
func FillRectangle(c *_cf.Creator, x, y, width, height float64, color _cf.Color) {
	if color == nil {
		return
	}
	_gbef := c.NewRectangle(x, y, width, height)
	_gbef.SetFillColor(color)
	_gbef.SetBorderWidth(0)
	c.Draw(_gbef)
}

var _faae = _dfff(0.5)

type barSerByOrder []*_ad.CT_BarSer

func FromSTCoordinate(st _edc.ST_Coordinate) int64 {
	if _aeec := st.ST_CoordinateUnqualified; _aeec != nil {
		return *_aeec
	}
	return 0
}
func (_age *creatorContext) drawPieChart(_gdae *_ad.CT_PieChart, _efcd *Rectangle, _cabd *_ge.Workbook, _dcdgc float64) ([]*legendItem, error) {
	_fagag := []*legendItem{}
	_eddfd := map[string]serCategory{}
	_adgd := []string{}
	_edbd := _da.Inf(1)
	_abag := _da.Inf(-1)
	_bdbaf := _gdae.Ser
	for _, _ggf := range _bdbaf {
		var _dggg string
		if _agfc := _ggf.Tx; _agfc != nil {
			if _cedg := _agfc.SerTxChoice; _cedg != nil {
				if _cedg.V != nil {
					_dggg = *_cedg.V
				} else if _dddec := _cedg.StrRef; _dddec != nil {
					if _eaef := _dddec.StrCache; _eaef != nil {
						for _, _gbc := range _eaef.Pt {
							_dggg = _gbc.V
						}
					}
				}
			}
		}
		if _bfd := _ggf.Cat; _bfd != nil {
			if _acdd := _bfd.AxDataSourceChoice; _acdd != nil {
				if _gbbg := _acdd.StrRef; _gbbg != nil {
					if _bcca := _gbbg.F; _bcca != "" && _cabd != nil {
						_gbdg, _afbd, _fbdb, _fbaae := ParseExcelRange(_bcca)
						if _fbaae == nil {
							for _, _aadc := range _cabd.Sheets() {
								if _aadc.Name() == _ba.Trim(_gbdg, "\u0027") {
									_cfeb := _afbd.String()
									for _abea := _afbd.RowIdx; _abea <= _fbdb.RowIdx; _abea += 1 {
										_bbe := _ba.ReplaceAll(_cfeb, _ee.Sprint(_afbd.RowIdx), _ee.Sprint(_abea))
										_age.addCatName(_aadc.Cell(_bbe).GetString(), _eddfd, &_adgd)
									}
									break
								}
							}
						}
					}
					if _fecg := _gbbg.StrCache; _fecg != nil {
						for _, _ebgg := range _fecg.Pt {
							_age.addCatName(_ebgg.V, _eddfd, &_adgd)
						}
					}
				} else if _bcde := _acdd.NumRef; _bcde != nil {
					if _efa := _bcde.NumCache; _efa != nil {
						var _ffaf string
						if _efa.FormatCode != nil {
							_ffaf = *_efa.FormatCode
						}
						for _, _dge := range _efa.Pt {
							var _ebb string
							if _dge.FormatCodeAttr == nil {
								_ebb = _ffaf
							} else {
								_ebb = *_dge.FormatCodeAttr
							}
							var _bcdb string
							_cebe, _abed := _gd.ParseFloat(_dge.V, 64)
							if _abed != nil {
								_bcdb = _dge.V
							} else {
								_bcdb = _f.Number(_cebe, _ebb)
							}
							_age.addCatName(_bcdb, _eddfd, &_adgd)
						}
					}
				}
			}
		}
		if _cfg := _ggf.Val; _cfg != nil {
			if _deb := _cfg.NumDataSourceChoice; _deb != nil {
				if _ggdb := _deb.NumRef; _ggdb != nil {
					if _bacbf := _ggdb.F; _bacbf != "" && _cabd != nil {
						_cgceg, _aeag, _feffb, _gfd := ParseExcelRange(_bacbf)
						if _gfd == nil {
							for _, _bfcg := range _cabd.Sheets() {
								if _bfcg.Name() == _ba.Trim(_cgceg, "\u0027") {
									_bbfb := _aeag.String()
									for _bdff := _aeag.RowIdx; _bdff <= _feffb.RowIdx; _bdff += 1 {
										_dgagg := _ba.ReplaceAll(_bbfb, _ee.Sprint(_aeag.RowIdx), _ee.Sprint(_bdff))
										if _bfcg.FormulaContext().HasFormula(_dgagg) {
											_cfgd := _cd.NewEvaluator()
											_ecd := _bfcg.FormulaContext().Cell(_dgagg, _cfgd)
											_acaa := _ecd.Value()
											_age.addCatValue(_acaa, _eddfd, _adgd, (int)(_bdff-_aeag.RowIdx), &_edbd, &_abag, _dggg, _ggf.SpPr)
										} else {
											_dcf := _bfcg.Cell(_dgagg).GetString()
											_age.addCatValue(_dcf, _eddfd, _adgd, (int)(_bdff-_aeag.RowIdx), &_edbd, &_abag, _dggg, _ggf.SpPr)
										}
									}
									break
								}
							}
						}
					}
					if _gdba := _ggdb.NumCache; _gdba != nil {
						for _cafd, _dcbc := range _gdba.Pt {
							_age.addCatValue(_dcbc.V, _eddfd, _adgd, _cafd, &_edbd, &_abag, _dggg, _ggf.SpPr)
						}
					}
				}
			}
		}
	}
	_afag := &_ed.PieChart{Values: []_bdd.Value{}}
	for _, _egcg := range _adgd {
		_cgaa := _eddfd[_egcg]
		if len(_cgaa._bcaa) > 0 {
			_afag.Values = append(_afag.Values, _bdd.Value{Value: _cgaa._bcaa[0]._dga, Label: _egcg, Style: _gda.Style{FontSize: 12 * _dcdgc}})
		}
	}
	_afag.SetHeight(int(_efcd.Top - _efcd.Bottom))
	_afag.SetWidth(int(_efcd.Right - _efcd.Left))
	_agdd := _age._abedc
	_ede := _cf.NewChart(_afag)
	_ede.SetPos(_efcd.Left, _efcd.Top)
	_gcea := _agdd.Draw(_ede)
	if _gcea != nil {
		return nil, _gcea
	}
	return _fagag, nil
}

var _dcdb = _dfff(5)

func (_cbf *creatorContext) addCatName(_dbd string, _faa map[string]serCategory, _cde *[]string) {
	if _, _eg := _faa[_dbd]; !_eg {
		_faa[_dbd] = serCategory{_daa: _dbd, _bcaa: []serValue{}}
		*_cde = append(*_cde, _dbd)
	}
}
func GetPageDimensions(size PageSize) _cf.PageSize { return _eedf[size] }

type Rectangle struct {
	Top    float64
	Bottom float64
	Left   float64
	Right  float64
}

func (_bfb *creatorContext) drawLegend(_eed *Rectangle, _gge []*legendItem, _fcbf bool) {
	_ccgc := _bfb._fegb
	_afff := _dfff(2.5) * _ccgc
	_fgfe := _abbf * _ccgc
	_fef := (_afff - _fgfe) / 2
	_dddd := float64(len(_gge))
	if _fcbf {
		_dff := &Rectangle{Top: _eed.Top + _dfff(1)*_ccgc, Bottom: _eed.Bottom - _dfff(1)*_ccgc, Left: _eed.Left + _dfff(2.5)*_ccgc, Right: _eed.Right - _dfff(2.5)*_ccgc}
		var _fddd float64
		if _dddd > 1 {
			_fddd = (_dff.Right - _dff.Left) / _dddd
		}
		_bdg := _dff.Left
		_aabe := _dff.Top
		for _, _bgc := range _gge {
			if _caa := _bgc._ffa; _caa != nil {
				_bfb.drawRectangleWithProps(_caa, _bdg, _aabe+_fef, _fgfe, _fgfe, false)
				_dfg := _bdg + _fgfe*2
				_acgd := _bfb._abedc.NewStyledParagraph()
				_acgd.SetPos(_dfg, _aabe)
				_daf := _acgd.Append(_bgc._fbd)
				_cfac, _ffd := _ae.NewStandard14Font(_ae.HelveticaName)
				if _ffd == nil {
					_aga := _bfb._abedc.NewTextStyle()
					_aga.Font = _cfac
					_aga.FontSize = _afff
					_aga.TextRise = 0.4
					_daf.Style = _aga
					_bfb._abedc.Draw(_acgd)
				}
			}
			_bdg += _fddd
		}
	} else {
		_gaae := &Rectangle{Top: _eed.Top + _dfff(2.5)*_ccgc, Bottom: _eed.Bottom - _dfff(2.5)*_ccgc, Left: _eed.Left + _dfff(2.5)*_ccgc, Right: _eed.Right - _dfff(2.5)*_ccgc}
		var _ccac float64
		if _dddd > 1 {
			_ccac = (_gaae.Bottom - _gaae.Top - _afff) / (_dddd - 1)
			if _ccac < _afff {
				_ccac = _afff
			}
		}
		_ccc := _gaae.Top
		_bdba := _gaae.Left
		_acc := _bdba + _fgfe*2
		for _, _fgb := range _gge {
			if _faaa := _fgb._ffa; _faaa != nil {
				_bfb.drawRectangleWithProps(_faaa, _bdba, _ccc+_fef, _fgfe, _fgfe, false)
				_gfc := _bfb._abedc.NewStyledParagraph()
				_gfc.SetPos(_acc, _ccc)
				_gfc.SetWidth(_gaae.Right - _gaae.Left)
				_acd := _gfc.Append(_fgb._fbd)
				_gdeg, _cgg := _ae.NewStandard14Font(_ae.HelveticaName)
				if _cgg == nil {
					_acde := _bfb._abedc.NewTextStyle()
					_acde.Font = _gdeg
					_acde.FontSize = _afff
					_acde.TextRise = 0.4
					_acd.Style = _acde
					_bfb._abedc.Draw(_gfc)
				}
			}
			_ccc += _ccac
		}
	}
}

type ImgPart byte

func CropImageByRect(sourceImg _db.Image, rect _db.Rectangle) _db.Image {
	_febdb, _fagf, _dggc, _bcgc := rect.Min.X, rect.Min.Y, rect.Max.X, rect.Max.Y
	_bgab := _db.NewNRGBA(_db.Rect(0, 0, _dggc-_febdb, _bcgc-_fagf))
	for _aadb := _febdb; _aadb < _dggc; _aadb++ {
		for _cgef := _fagf; _cgef < _bcgc; _cgef++ {
			_bgab.Set(_aadb-_febdb, _cgef-_fagf, sourceImg.At(_aadb, _cgef))
		}
	}
	return _bgab
}
func GetImage(c *_cf.Creator, goImg _db.Image, imgHeight, imgWidth, left, top, dividerX, dividerY float64, part ImgPart) (*_cf.Image, error) {
	if goImg == nil {
		return nil, nil
	}
	_fedf := goImg.Bounds().Size()
	_eega := _fedf.X
	_gggc := _fedf.Y
	if dividerX != 0 {
		dividerX = dividerX / imgWidth * float64(_eega)
	}
	if dividerY != 0 {
		dividerY = dividerY / imgHeight * float64(_gggc)
	}
	var _efeb _db.Rectangle
	switch part {
	case ImgPart_t:
		_efeb = _db.Rect(0, 0, _eega, int(dividerY))
	case ImgPart_b:
		_efeb = _db.Rect(0, int(dividerY), _eega, _gggc)
	case ImgPart_l:
		_efeb = _db.Rect(0, 0, int(dividerX), _gggc)
	case ImgPart_r:
		_efeb = _db.Rect(int(dividerX), 0, _eega, _gggc)
	case ImgPart_lt:
		_efeb = _db.Rect(0, 0, int(dividerX), int(dividerY))
	case ImgPart_rt:
		_efeb = _db.Rect(int(dividerX), 0, _eega, int(dividerY))
	case ImgPart_lb:
		_efeb = _db.Rect(0, int(dividerY), int(dividerX), _gggc)
	case ImgPart_rb:
		_efeb = _db.Rect(int(dividerX), int(dividerY), _eega, _gggc)
	default:
		_efeb = _db.Rect(0, 0, _eega, _gggc)
	}
	_cfbf := CropImageByRect(goImg, _efeb)
	_ebgc, _dbbgd := c.NewImageFromGoImage(_cfbf)
	if _dbbgd != nil {
		return nil, _dbbgd
	}
	_ebgc.Scale(imgWidth/float64(_eega), imgHeight/float64(_gggc))
	_ebgc.SetPos(left, top)
	return _ebgc, nil
}
func (_beg *creatorContext) drawScatterChart(_dgeb *_ad.CT_ScatterChart, _bbbf *Rectangle, _bbde []*_ad.CT_PlotAreaChoice1, _cge float64) ([]*legendItem, error) {
	_cged := []*legendItem{}
	_eggf := _dgeb.Ser
	_cbca := make(map[string]float64)
	_bdafd := make(map[string][]float64)
	_fcf := make(map[string][]float64)
	_ebee := []string{}
	for _, _agc := range _eggf {
		var _debc string
		if _dfa := _agc.Tx; _dfa != nil {
			if _gcbcc := _dfa.SerTxChoice; _gcbcc != nil {
				if _gcbcc.V != nil {
					_debc = *_gcbcc.V
				} else if _cbcd := _gcbcc.StrRef; _cbcd != nil {
					if _feca := _cbcd.StrCache; _feca != nil {
						for _, _gebc := range _feca.Pt {
							_debc = _gebc.V
						}
					}
				}
				_ebee = append(_ebee, _debc)
			}
		}
		if _agc.Marker != nil && _agc.Marker.Size != nil {
			_cbca[_debc] = float64(*_agc.Marker.Size.ValAttr)
		} else {
			_cbca[_debc] = -1.0
		}
		if _abgb := _agc.XVal; _abgb != nil {
			if _eab := _abgb.AxDataSourceChoice; _eab != nil {
				if _eff := _eab.NumRef; _eff != nil {
					if _caggb := _eff.NumCache; _caggb != nil {
						for _, _deef := range _caggb.Pt {
							_ccbg, _ := _gd.ParseFloat(_ba.TrimSpace(_deef.V), 64)
							_bdafd[_debc] = append(_bdafd[_debc], _ccbg)
						}
					}
				}
			}
		}
		if _deca := _agc.YVal; _deca != nil {
			if _gfbd := _deca.NumDataSourceChoice; _gfbd != nil {
				if _bcdge := _gfbd.NumRef; _bcdge != nil {
					if _abff := _bcdge.NumCache; _abff != nil {
						for _, _bafg := range _abff.Pt {
							_fccg, _ := _gd.ParseFloat(_ba.TrimSpace(_bafg.V), 64)
							_fcf[_debc] = append(_fcf[_debc], _fccg)
						}
					}
				}
			}
		}
	}
	_fdeb := true
	_bdgf := ""
	_cecgc := ""
	if len(_bbde) > 1 {
		if _bbde[0].ValAx.Delete != nil && _bbde[1].ValAx.Delete != nil {
			if !*(*_bbde[0].ValAx.Delete).ValAttr && !*(*_bbde[1].ValAx.Delete).ValAttr {
				_fdeb = false
			}
		}
		_bdgf = _beg.getTitle(_bbde[0].ValAx.Title)
		_cecgc = _beg.getTitle(_bbde[1].ValAx.Title)
	}
	_gdegd := _gda.Style{Hidden: _fdeb, FontSize: 8 * _cge}
	_fad := &_ed.Chart{Series: []_bdd.Series{}, YAxisSecondary: _ed.YAxis{Style: _gdegd, Name: _cecgc, NameStyle: _gdegd}, XAxis: _ed.XAxis{Style: _gdegd, Name: _bdgf, NameStyle: _gdegd}, YAxis: _ed.YAxis{Style: _gda.Style{Hidden: true}}}
	for _, _dag := range _ebee {
		_aegda := _bdd.ContinuousSeries{XValues: _bdafd[_dag], YValues: _fcf[_dag], Style: _gda.Style{StrokeWidth: -1, DotWidth: _cbca[_dag]}}
		_fad.Series = append(_fad.Series, _aegda)
	}
	_fad.SetHeight(int(_da.Abs(_bbbf.Top - _bbbf.Bottom)))
	_fad.SetWidth(int(_da.Abs(_bbbf.Right - _bbbf.Left)))
	_bbdaa := _beg._abedc
	_aacf := _cf.NewChart(_fad)
	_aacf.SetPos(_bbbf.Left, _bbbf.Top)
	_edceb := _bbdaa.Draw(_aacf)
	if _edceb != nil {
		return nil, _edceb
	}
	return _cged, nil
}
func (_cegc *creatorContext) drawAreaChart(_cdb *_ad.CT_AreaChart, _def *Rectangle, _ga []*_ad.CT_PlotAreaChoice1, _fc float64) ([]*legendItem, error) {
	_eb := []*legendItem{}
	_gaf := _cdb.Ser
	_geb := make(map[int][]float64)
	_abd := make(map[int][]float64)
	_abe := make(map[int]_cf.Color)
	for _abb, _aea := range _gaf {
		_abe[_abb] = _cf.ColorWhite
		if _gb := _aea.SpPr; _gb != nil {
			_fb := _cegc.getPdfColorFromSolidFill(_gb.FillPropertiesChoice.SolidFill)
			if _fb != nil {
				_abe[_abb] = _fb
			}
		}
		if _fa := _aea.Val; _fa != nil {
			if _aa := _fa.NumDataSourceChoice; _aa != nil {
				if _abc := _aa.NumRef; _abc != nil {
					if _gae := _abc.NumCache; _gae != nil {
						for _, _ca := range _gae.Pt {
							_geb[_abb] = append(_geb[_abb], float64(_ca.IdxAttr))
							_aeg, _ := _gd.ParseFloat(_ba.TrimSpace(_ca.V), 64)
							_abd[_abb] = append(_abd[_abb], _aeg)
						}
					}
				}
			}
		}
	}
	_cb := true
	_eae := ""
	_gaa := ""
	if len(_ga) > 1 {
		if _ga[0].ValAx != nil && _ga[1].ValAx != nil {
			if _ga[0].ValAx.Delete != nil && _ga[1].ValAx.Delete != nil {
				if !*(*_ga[0].ValAx.Delete).ValAttr && !*(*_ga[1].ValAx.Delete).ValAttr {
					_cb = false
				}
			}
			_eae = _cegc.getTitle(_ga[0].ValAx.Title)
			_gaa = _cegc.getTitle(_ga[1].ValAx.Title)
		}
	}
	_aae := _gda.Style{Hidden: _cb, FontSize: 8 * _fc}
	_bda := &_ed.Chart{Series: []_bdd.Series{}, YAxisSecondary: _ed.YAxis{Style: _aae, Name: _gaa, NameStyle: _aae}, XAxis: _ed.XAxis{Style: _aae, Name: _eae, NameStyle: _aae}, YAxis: _ed.YAxis{Style: _gda.Style{Hidden: true}}}
	for _edb := 0; _edb < len(_abe); _edb++ {
		_bdaf, _dg, _dce := _abe[_edb].ToRGB()
		_af := _bdd.ContinuousSeries{XValues: _geb[_edb], YValues: _abd[_edb], Style: _gda.Style{StrokeWidth: 1, FillColor: _d.RGBA{uint8(_bdaf * 255), uint8(_dg * 255), uint8(_dce * 255), 255}}}
		_bda.Series = append(_bda.Series, _af)
	}
	_bda.SetHeight(int(_da.Abs(_def.Top - _def.Bottom)))
	_bda.SetWidth(int(_da.Abs(_def.Right - _def.Left)))
	_fe := _cegc._abedc
	_aab := _cf.NewChart(_bda)
	_aab.SetPos(_def.Left, _def.Top)
	_aabc := _fe.Draw(_aab)
	if _aabc != nil {
		return nil, _aabc
	}
	return _eb, nil
}
func (_edg barSerByOrder) Len() int { return len(_edg) }
func MakeBlockFromCreator(c *_cf.Creator) (*_cf.Block, error) {
	_debb, _bcegf := GetPageFromCreator(c)
	if _bcegf != nil {
		return nil, _bcegf
	}
	_ffag, _bcegf := _cf.NewBlockFromPage(_debb)
	if _bcegf != nil {
		return nil, _bcegf
	}
	return _ffag, nil
}
func (_ccg *creatorContext) addCatValue(_ggce string, _aed map[string]serCategory, _aead []string, _fdg int, _feb, _cgce *float64, _gac string, _ced *_edc.CT_ShapeProperties) {
	_fcb, _abdc := _gd.ParseFloat(_ggce, 64)
	if _abdc != nil {
		_fcb = 0
		_dcd.Log.Debug("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073", _abdc)
	}
	if _fcb > *_cgce {
		*_cgce = _fcb
	}
	if _fcb < *_feb {
		*_feb = _fcb
	}
	_abcd := _aed[_aead[_fdg]]
	_abcd._bcaa = append(_abcd._bcaa, serValue{_ecaa: _gac, _dga: _fcb, _aag: _ced})
	_aed[_aead[_fdg]] = _abcd
}
func (_fde *creatorContext) drawLineChart(_edaeg *_ad.CT_LineChart, _ffc *Rectangle, _aeab []*_ad.CT_PlotAreaChoice1, _ecaac float64) ([]*legendItem, error) {
	_faga := []*legendItem{}
	_cdde := _edaeg.Ser
	_cdf := make(map[int][]float64)
	_afaf := make(map[int][]float64)
	_decc := make(map[int]_cf.Color)
	_agaa := make(map[int]float64)
	for _ccdg, _ffab := range _cdde {
		var _cfbde string
		if _eee := _ffab.Tx; _eee != nil {
			if _ebaa := _eee.SerTxChoice; _ebaa != nil {
				if _ebaa.V != nil {
					_cfbde = *_ebaa.V
				} else if _cccc := _ebaa.StrRef; _cccc != nil {
					if _edbfd := _cccc.StrCache; _edbfd != nil {
						for _, _faeg := range _edbfd.Pt {
							_cfbde = _faeg.V
						}
					}
				}
			}
		}
		_decc[_ccdg] = _cf.ColorWhite
		if _dadf := _ffab.SpPr; _dadf != nil {
			if _dbf := _dadf.Ln; _dbf != nil {
				if _ffgb := _dbf.WAttr; _ffgb != nil {
					_agaa[_ccdg] = _bd.FromEMU(int64(*_ffgb))
					if _dcee := _dbf.LineFillPropertiesChoice.SolidFill; _dcee != nil {
						_aeef := _fde.getPdfColorFromSolidFill(_dcee)
						if _aeef != nil {
							_decc[_ccdg] = _aeef
						}
					}
				}
			}
		}
		if _gcf := _ffab.Val; _gcf != nil {
			if _bceg := _gcf.NumDataSourceChoice; _bceg != nil {
				if _fbc := _bceg.NumRef; _fbc != nil {
					if _agag := _fbc.NumCache; _agag != nil {
						for _, _fbcg := range _agag.Pt {
							_cdf[_ccdg] = append(_cdf[_ccdg], float64(_fbcg.IdxAttr))
							_ebdg, _ := _gd.ParseFloat(_ba.TrimSpace(_fbcg.V), 64)
							_afaf[_ccdg] = append(_afaf[_ccdg], _ebdg)
						}
					}
				}
			}
		}
		_faga = append(_faga, &legendItem{_fbd: _cfbde, _ffa: _ffab.SpPr})
	}
	_fegf := true
	_abdg := true
	_abba := ""
	_gggg := ""
	if len(_aeab) > 0 {
		for _, _cef := range _aeab {
			if _cef.CatAx != nil {
				if _cef.CatAx.Delete != nil {
					if !*(*_cef.CatAx.Delete).ValAttr {
						_fegf = false
					}
				}
				_abba = _fde.getTitle(_cef.CatAx.Title)
			} else if _cef.ValAx != nil {
				if _cef.ValAx.Delete != nil {
					if !*(*_cef.ValAx.Delete).ValAttr {
						_abdg = false
					}
				}
				_gggg = _fde.getTitle(_cef.ValAx.Title)
			}
		}
	}
	_dbbg := _gda.Style{Hidden: _fegf, FontSize: 8 * _ecaac}
	_bbggg := _gda.Style{Hidden: _abdg, FontSize: 8 * _ecaac}
	_eaab := &_ed.Chart{Series: []_bdd.Series{}, YAxisSecondary: _ed.YAxis{Style: _bbggg, Name: _gggg, NameStyle: _bbggg}, XAxis: _ed.XAxis{Style: _dbbg, Name: _abba, NameStyle: _dbbg}, YAxis: _ed.YAxis{Style: _gda.Style{Hidden: true}}}
	for _affb := 0; _affb < len(_decc); _affb++ {
		_bgdf, _bcdg, _cbgd := _decc[_affb].ToRGB()
		_eggc := _bdd.ContinuousSeries{XValues: _cdf[_affb], YValues: _afaf[_affb], Style: _gda.Style{StrokeColor: _d.RGBA{uint8(_bgdf * 255), uint8(_bcdg * 255), uint8(_cbgd * 255), 255}, StrokeWidth: _agaa[_affb]}}
		_eaab.Series = append(_eaab.Series, _eggc)
	}
	_eaab.SetHeight(int(_da.Abs(_ffc.Top - _ffc.Bottom)))
	_eaab.SetWidth(int(_da.Abs(_ffc.Right - _ffc.Left)))
	_fgce := _fde._abedc
	_bbcc := _cf.NewChart(_eaab)
	_bbcc.SetPos(_ffc.Left, _ffc.Top)
	_add := _fgce.Draw(_bbcc)
	if _add != nil {
		return nil, _add
	}
	return _faga, nil
}
func (_gdf *creatorContext) drawAxes(_eef []*_ad.CT_PlotAreaChoice1, _gag, _gce, _dbg float64, _cffe []string, _abf *Rectangle, _cfdf bool) error {
	_cae := _gdf._abedc
	_eaed := _gdf._fegb
	if _eef == nil {
		return _bc.New("\u004e\u006f\u0020\u0061xi\u0073\u0020\u0069\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e")
	}
	var (
		_eaf  *_ad.CT_ValAx
		_dbce *_ad.CT_CatAx
		_bcg  *_ad.CT_DateAx
		_baf  *_ad.CT_SerAx
	)
	for _, _fbde := range _eef {
		if _fbde.ValAx != nil {
			_eaf = _fbde.ValAx
		} else if _fbde.CatAx != nil {
			_dbce = _fbde.CatAx
		} else if _fbde.DateAx != nil {
			_bcg = _fbde.DateAx
		} else if _fbde.SerAx != nil {
			_baf = _fbde.SerAx
		}
	}
	if _eaf == nil || (_dbce == nil && _bcg == nil && _baf == nil) {
		return _bc.New("\u004e\u006f\u0020\u0078\u0020\u006f\u0072\u0020\u0079 \u0061\u0078\u0069\u0073")
	}
	var _cce, _eegg, _eefe, _efed uint32
	var _deg, _dade _ad.ST_AxPos
	var _gbgc, _edgd _ad.ST_TickMark
	var _gdb, _afee *_ad.CT_ChartLines
	var _gcg, _cdag _ad.ST_TickLblPos
	var _cfbd, _ccd *_edc.CT_ShapeProperties
	var _agbe error
	_feff := _abf.Right - _abf.Left
	_gdga := _abf.Bottom - _abf.Top
	if _eaf != nil {
		_eegg, _dade, _edgd, _cdag, _afee, _efed, _ccd, _agbe = _cgbe(_eaf)
	}
	if _dade != _ad.ST_AxPosL && _dade != _ad.ST_AxPosB {
		return _bc.New("\u004f\u006e\u006c\u0079\u0020l\u0065\u0066\u0074\u0020\u006f\u0072\u0020\u0062\u006f\u0074\u0074\u006f\u006d \u0079\u0020\u0061\u0078\u0069\u0073\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0073\u006f\u0020\u0066\u0061\u0072")
	}
	_fba := _gce - _gag
	_eafa := int(_fba/_dbg) + 1
	var _eda, _dfcd float64
	switch _edgd {
	case _ad.ST_TickMarkIn:
		_eda, _dfcd = _faaac, 0
	case _ad.ST_TickMarkOut:
		_eda, _dfcd = 0, _faaac
	case _ad.ST_TickMarkCross:
		_eda, _dfcd = _faaac, _faaac
	}
	_eda = _eda * _eaed
	_dfcd = _dfcd * _eaed
	var _febd *_edc.CT_ShapeProperties
	if _afee != nil {
		_febd = _afee.SpPr
	}
	_abg, _cbg := _gcg != _ad.ST_TickLblPosNone, _cdag != _ad.ST_TickLblPosNone
	_cfacd := _gag
	if _dbce != nil {
		_cce, _deg, _gbgc, _gcg, _gdb, _eefe, _cfbd, _agbe = _baac(_dbce)
	} else if _bcg != nil {
		_cce, _deg, _gbgc, _gcg, _gdb, _eefe, _cfbd, _agbe = _afab(_bcg)
	} else if _baf != nil {
		_cce, _deg, _gbgc, _gcg, _gdb, _eefe, _cfbd, _agbe = _bgee(_baf)
	}
	if _agbe != nil {
		return _agbe
	}
	if _deg != _ad.ST_AxPosL && _deg != _ad.ST_AxPosB {
		return _bc.New("\u004f\u006e\u006c\u0079\u0020l\u0065\u0066\u0074\u0020\u006f\u0072\u0020\u0062\u006f\u0074\u0074\u006f\u006d \u0078\u0020\u0061\u0078\u0069\u0073\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0073\u006f\u0020\u0066\u0061\u0072")
	}
	if _cce != _efed || _eegg != _eefe {
		return _bc.New("a\u0078i\u0073\u0020\u0069\u0064\u0073\u0020\u0064\u006fn\u0027\u0074\u0020\u006dat\u0063\u0068")
	}
	_caaa := len(_cffe) + 1
	var _edf, _cfdc float64
	switch _gbgc {
	case _ad.ST_TickMarkIn:
		_edf, _cfdc = _faaac, 0
	case _ad.ST_TickMarkOut:
		_edf, _cfdc = 0, _faaac
	case _ad.ST_TickMarkCross:
		_edf, _cfdc = _faaac, _faaac
	}
	_edf = _edf * _eaed
	_cfdc = _cfdc * _eaed
	var _cgae *_edc.CT_ShapeProperties
	if _gdb != nil {
		_cgae = _gdb.SpPr
	}
	if _cfdf {
		_ecf := _gdga / float64(len(_cffe))
		_gbad := _abf.Left - _gag*_feff/_fba
		_gfa := _gbad - _cfd*_eaed
		if _abg {
			var _ggb float64
			for _ead := 0; _ead < _caaa; _ead++ {
				_bbg := _abf.Bottom - float64(_ead)*_ecf
				if _ead < _caaa-1 {
					_bag := _cae.NewParagraph(_cffe[_ead])
					_bag.SetFontSize(_bfc * _eaed)
					_bag.SetPos(_gfa, _bbg-_ecf/2-_aeb*_eaed)
					_cae.Draw(_bag)
					_caae := (_bag.Width()/1000 - _cfd) * _eaed
					if _caae > 0 && _caae > _ggb {
						_ggb = _caae
					}
				}
			}
			if _ggb > 0 {
				_abf.Left += _ggb + _gee
				_gbad = _abf.Left - _gag*_feff/_fba
				_feff = _abf.Right - _abf.Left
			}
		}
		_dec := _gbad - _cfdc
		_gcc := _gbad + _edf
		_edgf := _abf.Left
		_gdfa := _abf.Right
		for _cbc := 0; _cbc < _caaa; _cbc++ {
			_dbca := _abf.Bottom - float64(_cbc)*_ecf
			_gdf.drawLineWithProps(_cfbd, _dec, _dbca, _gcc, _dbca, true)
			_gdf.drawLineWithProps(_cgae, _edgf, _dbca, _gdfa, _dbca, true)
		}
		_fge := _feff / _fba
		_gggb := _abf.Bottom - _eda
		_bbf := _abf.Bottom + _dfcd
		_efeg := _abf.Top
		_cecg := _abf.Bottom
		for _bge := 0; _bge < _eafa; _bge++ {
			_aedad := _abf.Left + (_cfacd-_gag)*_fge
			_gdf.drawLineWithProps(_ccd, _aedad, _gggb, _aedad, _bbf, true)
			_gdf.drawLineWithProps(_febd, _aedad, _efeg, _aedad, _cecg, true)
			if _cbg {
				_gagf := _cae.NewParagraph(_gd.FormatFloat(_cfacd, 'g', -1, 64))
				_gagf.SetFontSize(_bfc * _eaed)
				_gagf.SetPos(_aedad-_faae*_eaed, _cecg+_aegc*_eaed)
				_cae.Draw(_gagf)
			}
			_cfacd += _dbg
		}
	} else {
		_bac := _gdga / _fba
		_fdafg := _abf.Left
		if _cbg {
			var _gfcd float64
			for _bgdb := 0; _bgdb < _eafa; _bgdb++ {
				_dbcb := _abf.Bottom - (_cfacd-_gag)*_bac
				_faf := _cae.NewParagraph(_gd.FormatFloat(_cfacd, 'g', -1, 64))
				_faf.SetFontSize(_bfc * _eaed)
				_faf.SetPos(_fdafg-_cfd*_eaed, _dbcb-_aeb*_eaed)
				_cae.Draw(_faf)
				_egac := (_faf.Width()/1000 - _cfd) * _eaed
				if _egac > 0 && _egac > _gfcd {
					_gfcd = _egac
				}
				_cfacd += _dbg
			}
			if _gfcd > 0 {
				_abf.Left += _gfcd + _gee
				_feff = _abf.Right - _abf.Left
			}
		}
		_cfacd = _gag
		_edbf := _abf.Left - _dfcd
		_dgag := _abf.Left + _eda
		_fdafg = _abf.Left
		_affc := _abf.Right
		for _agg := 0; _agg < _eafa; _agg++ {
			_egag := _abf.Bottom - (_cfacd-_gag)*_bac
			_gdf.drawLineWithProps(_ccd, _edbf, _egag, _dgag, _egag, true)
			_gdf.drawLineWithProps(_febd, _fdafg, _egag, _affc, _egag, true)
			_cfacd += _dbg
		}
		_eddd := _feff / float64(len(_cffe))
		_bdfa := _abf.Bottom + _gag*_gdga/_fba
		_baa := _bdfa - _edf
		_bee := _bdfa + _cfdc
		_baaf := _abf.Top
		_fgc := _abf.Bottom
		_cgga := _bdfa + _aegc*_eaed
		for _aef := 0; _aef < _caaa; _aef++ {
			_gdag := _abf.Left + float64(_aef)*_eddd
			_gdf.drawLineWithProps(_cfbd, _gdag, _baa, _gdag, _bee, true)
			_gdf.drawLineWithProps(_cgae, _gdag, _baaf, _gdag, _fgc, true)
			if _abg && _aef < _caaa-1 {
				_dbgb := _cae.NewParagraph(_cffe[_aef])
				_dbgb.SetFontSize(_bfc * _eaed)
				_dbgb.SetPos(_gdag+_dcdb*_eaed, _cgga)
				_cae.Draw(_dbgb)
			}
		}
	}
	return nil
}

type FontStyle byte

func RegisterFontsFromFiles(files []string) error {
	for _, _bbce := range files {
		if _ba.HasSuffix(_bbce, "\u002e\u0074\u0074\u0066") {
			_bab := _agad(_bbce)
			if _bab != nil {
				_dcd.Log.Debug("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074o\u0020\u0070\u0072\u006f\u0063e\u0073\u0073\u0020\u0061\u006e\u0064\u0020\u0072\u0065\u0067\u0069\u0073\u0074\u0065\u0072\u0020\u0066\u006f\u006e\u0074\u0020\u0066\u0072\u006f\u006d\u0020\u0054\u0054\u0046\u0020\u0066\u0069\u006c\u0065\u0020\u0025\u0073", _bab)
				continue
			}
		}
	}
	return nil
}
func _gfab(_cede, _edce, _bagf float64) float64 {
	if _cede*6 < 1 {
		return _bagf + (_edce-_bagf)*6*_cede
	} else if _cede*2 < 1 {
		return _edce
	} else if _cede*3 < 2 {
		return _bagf + (_edce-_bagf)*(2.0/3.0-_cede)*6
	} else {
		return _bagf
	}
}
func _bdbb(_ddb uint8, _cbe float64) string {
	_fgcg := float64(_ddb)
	var _dafd float64
	if _cbe < 0 {
		_dafd = _fgcg * (1 + _cbe)
	} else {
		_dafd = _fgcg + (255-_fgcg)*_cbe
	}
	return _ee.Sprintf("\u0025\u0030\u0032\u0078", int(_dafd))
}

type BorderPosition byte

func (_cebc *creatorContext) drawRectangleWithProps(_acge *_edc.CT_ShapeProperties, _feea, _dab, _gcbd, _bgfc float64, _cdeb bool) {
	_bea := _cebc._abedc.NewRectangle(_feea, _dab, _gcbd, _bgfc)
	if _acge == nil {
		if _cdeb {
			_bea.SetBorderWidth(_ebf)
		} else {
			return
		}
	} else {
		_fff := _cebc.getPdfColorFromSolidFill(_acge.FillPropertiesChoice.SolidFill)
		if _fff != nil {
			_bea.SetFillColor(_fff)
		}
		if _cdg := _acge.Ln; _cdg != nil {
			if _febc := _cdg.WAttr; _febc != nil {
				_daff := _bd.FromEMU(int64(*_febc))
				_bea.SetBorderWidth(_daff)
				if _cgcf := _cdg.LineFillPropertiesChoice.SolidFill; _cgcf != nil {
					_cdfb := _cebc.getPdfColorFromSolidFill(_cgcf)
					if _cdfb != nil {
						_bea.SetBorderColor(_cdfb)
					}
				}
			} else {
				_bea.SetBorderWidth(0)
			}
		}
	}
	_cebc._abedc.Draw(_bea)
}

var _aaab = fontsMap{_cbga: &_ce.Mutex{}, _dbcc: map[string]map[FontStyle]*_ae.PdfFont{}}

func _aagg(_efda, _accf, _bce uint8) (float64, float64, float64) {
	_ccgf, _fbgad, _cbfb := float64(_efda)/255, float64(_accf)/255, float64(_bce)/255
	_fdaa := _ccgf
	if _fbgad < _fdaa {
		_fdaa = _fbgad
	}
	if _cbfb < _fdaa {
		_fdaa = _cbfb
	}
	var _fgad, _gdgf bool
	_bggg := _ccgf
	if _fbgad > _bggg {
		_bggg = _fbgad
		_fgad = true
	}
	if _cbfb > _bggg {
		_bggg = _cbfb
		_fgad = false
		_gdgf = true
	}
	_dae := (_fdaa + _bggg) / 2
	var _cea float64
	if _fdaa != _bggg {
		if _dae <= 0.5 {
			_cea = (_bggg - _fdaa) / (_bggg + _fdaa)
		} else {
			_cea = (_bggg - _fdaa) / (2.0 - _bggg - _fdaa)
		}
	}
	var _ccab float64
	if _fdaa != _bggg {
		if _fgad {
			_ccab = 2.0 + (_cbfb-_ccgf)/(_bggg-_fdaa)
		} else if _gdgf {
			_ccab = 4.0 + (_ccgf-_fbgad)/(_bggg-_fdaa)
		} else {
			_ccab = (_fbgad - _cbfb) / (_bggg - _fdaa)
		}
		_ccab *= 60
		if _ccab < 0 {
			_ccab += 360
		}
	}
	return _ccab, _cea, _dae
}
func _dfgg(_ecfc _edc.ST_SchemeColorVal, _aaad *_edc.Theme) string {
	if _bcdda := _aaad.ThemeElements; _bcdda != nil {
		if _ecc := _bcdda.ClrScheme; _ecc != nil {
			switch _ecfc {
			case _edc.ST_SchemeColorValLt1:
				return GetColorStringFromDmlColor(_ecc.Lt1)
			case _edc.ST_SchemeColorValDk1, _edc.ST_SchemeColorValTx1:
				return GetColorStringFromDmlColor(_ecc.Dk1)
			case _edc.ST_SchemeColorValLt2:
				return GetColorStringFromDmlColor(_ecc.Lt2)
			case _edc.ST_SchemeColorValDk2:
				return GetColorStringFromDmlColor(_ecc.Dk2)
			case _edc.ST_SchemeColorValAccent1:
				return GetColorStringFromDmlColor(_ecc.Accent1)
			case _edc.ST_SchemeColorValAccent2:
				return GetColorStringFromDmlColor(_ecc.Accent2)
			case _edc.ST_SchemeColorValAccent3:
				return GetColorStringFromDmlColor(_ecc.Accent3)
			case _edc.ST_SchemeColorValAccent4:
				return GetColorStringFromDmlColor(_ecc.Accent4)
			case _edc.ST_SchemeColorValAccent5:
				return GetColorStringFromDmlColor(_ecc.Accent5)
			case _edc.ST_SchemeColorValAccent6:
				return GetColorStringFromDmlColor(_ecc.Accent6)
			}
		}
	}
	return ""
}
func GetPageFromCreator(c *_cf.Creator) (*_ae.PdfPage, error) {
	_fedd := _g.NewBuffer([]byte{})
	_bfcgf := c.Write(_fedd)
	if _bfcgf != nil {
		return nil, _bfcgf
	}
	_edea := _g.NewReader(_fedd.Bytes())
	_fgg, _bfcgf := _ae.NewPdfReader(_edea)
	if _bfcgf != nil {
		return nil, _bfcgf
	}
	return _fgg.GetPage(1)
}

var _abbf = _dfff(1.5)

func (_egc barSerByOrder) Swap(i, j int)      { _egc[i], _egc[j] = _egc[j], _egc[i] }
func (_bgd barSerByOrder) Less(i, j int) bool { return _bgd[i].Order.ValAttr < _bgd[j].Order.ValAttr }

var RtlFontFile *_ae.PdfFont

const (
	PageSizeA4 PageSize = iota
	PageSizeA3
	PageSizeA5
	PageSizeLetter
	PageSizeLegal
	Percent100    = 100000.0
	MaxPageHeight = 11906
)

var _cfd = _dfff(7.5)

func MakeTempCreatorMaxHeight(width float64) *_cf.Creator {
	return MakeTempCreator(width, MaxPageHeight)
}
func _bgee(_fbb *_ad.CT_SerAx) (uint32, _ad.ST_AxPos, _ad.ST_TickMark, _ad.ST_TickLblPos, *_ad.CT_ChartLines, uint32, *_edc.CT_ShapeProperties, error) {
	var _fgaf, _eddf uint32
	var _gad _ad.ST_AxPos
	var _fbbg _ad.ST_TickMark
	var _cagg *_ad.CT_ChartLines
	var _fec _ad.ST_TickLblPos
	if _fbb.AxId == nil {
		return _fgaf, _gad, _fbbg, _fec, _cagg, _eddf, _fbb.SpPr, _bc.New("\u004e\u006f\u0020x\u0020\u0061\u0078\u0069\u0073\u0020\u0049\u0044")
	} else {
		_fgaf = _fbb.AxId.ValAttr
	}
	if _fbb.AxPos == nil {
		return _fgaf, _gad, _fbbg, _fec, _cagg, _eddf, _fbb.SpPr, _bc.New("\u004eo\u0020x\u0020\u0061\u0078\u0069\u0073 \u0070\u006fs\u0069\u0074\u0069\u006f\u006e")
	} else {
		_gad = _fbb.AxPos.ValAttr
	}
	if _fbb.MajorTickMark != nil {
		_fbbg = _fbb.MajorTickMark.ValAttr
	}
	if _fbb.TickLblPos != nil {
		_fec = _fbb.TickLblPos.ValAttr
	}
	if _fbb.CrossAx == nil {
		return _fgaf, _gad, _fbbg, _fec, _cagg, _eddf, _fbb.SpPr, _bc.New("\u004e\u006f \u0063\u0072\u006fs\u0073\u0020\u0061\u0078\u0069\u0073\u0020\u0049\u0044")
	} else {
		_eddf = _fbb.CrossAx.ValAttr
	}
	_cagg = _fbb.MajorGridlines
	return _fgaf, _gad, _fbbg, _fec, _cagg, _eddf, _fbb.SpPr, nil
}

var _aeb = _dfff(1.5)

func _dcb(_adbb _edc.ST_SchemeColorVal, _caeb *_edc.Theme) string {
	if _edab := _caeb.ThemeElements; _edab != nil {
		if _cbbf := _edab.ClrScheme; _cbbf != nil {
			switch _adbb {
			case _edc.ST_SchemeColorValLt1:
				return GetColorStringFromDmlColor(_cbbf.Lt1)
			case _edc.ST_SchemeColorValDk1, _edc.ST_SchemeColorValTx1:
				return GetColorStringFromDmlColor(_cbbf.Dk1)
			case _edc.ST_SchemeColorValLt2:
				return GetColorStringFromDmlColor(_cbbf.Lt2)
			case _edc.ST_SchemeColorValDk2:
				return GetColorStringFromDmlColor(_cbbf.Dk2)
			case _edc.ST_SchemeColorValAccent1:
				return GetColorStringFromDmlColor(_cbbf.Accent1)
			case _edc.ST_SchemeColorValAccent2:
				return GetColorStringFromDmlColor(_cbbf.Accent2)
			case _edc.ST_SchemeColorValAccent3:
				return GetColorStringFromDmlColor(_cbbf.Accent3)
			case _edc.ST_SchemeColorValAccent4:
				return GetColorStringFromDmlColor(_cbbf.Accent4)
			case _edc.ST_SchemeColorValAccent5:
				return GetColorStringFromDmlColor(_cbbf.Accent5)
			case _edc.ST_SchemeColorValAccent6:
				return GetColorStringFromDmlColor(_cbbf.Accent6)
			}
		}
	}
	return ""
}
func _gea(_ebd *_ad.ChartSpace, _efc, _bgba float64, _eeg *_edc.Theme, _ade bool, _cfcaa *_ge.Workbook) (*_cf.Creator, error) {
	_bdc := 1.0
	if _ade {
		_bdc = 8.0
	}
	_bbb := &Rectangle{}
	_ccbb := &Rectangle{Top: _bbb.Top, Bottom: _bgba - _bbb.Bottom, Left: _bbb.Left, Right: _efc - _bbb.Right}
	_cedd := MakeTempCreator(_efc*_bdc+1, _bgba*_bdc+1)
	_dca := &creatorContext{_abedc: _cedd, _gcfe: _eeg, _fegb: _bdc}
	var _bdadd bool
	if _bdfe := _ebd.Chart; _bdfe != nil {
		_cddc := _bdfe.PlotArea
		if _cddc == nil {
			return nil, _bc.New("\u004e\u006f\u0020p\u006c\u006f\u0074\u0020\u0061\u0072\u0065\u0061")
		}
		_gaeb := 0.0
		if _bdfe.AutoTitleDeleted != nil && _bdfe.AutoTitleDeleted.ValAttr != nil && !*_bdfe.AutoTitleDeleted.ValAttr {
			if _bdfe.Title != nil && _bdfe.Title.Overlay != nil && _bdfe.Title.Overlay.ValAttr != nil && !*_bdfe.Title.Overlay.ValAttr {
				_gaeb = _dfff(10)
			}
			_dda := _dca.getTitle(_bdfe.Title)
			if _dda == "" {
				_dda = "C\u0068\u0061\u0072\u0074\u0020\u0054\u0069\u0074\u006c\u0065"
			}
			_dca.drawTitle(_dda, _ccbb.Left+_ccbb.Right/2, _dfff(5))
		}
		_aeda := &Rectangle{Top: _dfff(10) + _gaeb, Bottom: _ccbb.Bottom - _dfff(15), Left: _dfff(10), Right: _ccbb.Right - _dfff(10)}
		var _aff *Rectangle
		_gbgf := _bdfe.Legend
		if _gbgf != nil {
			_cag := _gbgf.Overlay != nil && _gbgf.Overlay.ValAttr != nil && *_gbgf.Overlay.ValAttr
			if _eac := _gbgf.LegendPos; _eac != nil {
				switch _eac.ValAttr {
				case _ad.ST_LegendPosTr:
					if !_cag {
						_aeda = &Rectangle{Top: _dfff(25) + _gaeb, Bottom: _ccbb.Bottom - _dfff(10), Left: _dfff(10), Right: _ccbb.Right - _dfff(25)}
					}
					_aff = &Rectangle{Top: _dfff(2.5) + _gaeb, Bottom: _dfff(22.5), Left: _ccbb.Right - _dfff(22.5), Right: _ccbb.Right - _dfff(2.5)}
				case _ad.ST_LegendPosT:
					_aff = &Rectangle{Top: _dfff(2.5) + _gaeb, Bottom: _dfff(7.5), Left: (_ccbb.Right - _ccbb.Left) * 0.25, Right: (_ccbb.Right - _ccbb.Left) * 0.75}
					if !_cag {
						_aeda = &Rectangle{Top: _dfff(12.5) + _gaeb, Bottom: _ccbb.Bottom - _dfff(15), Left: _dfff(10), Right: _ccbb.Right - _dfff(5)}
					}
					_bdadd = true
				case _ad.ST_LegendPosB:
					_aff = &Rectangle{Top: _ccbb.Bottom - _dfff(7.5) + _gaeb, Bottom: _ccbb.Bottom - _dfff(2.5), Left: (_ccbb.Right - _ccbb.Left) * 0.25, Right: (_ccbb.Right - _ccbb.Left) * 0.75}
					if !_cag {
						_aeda = &Rectangle{Top: _dfff(5) + _gaeb, Bottom: _ccbb.Bottom - _dfff(15), Left: _dfff(10), Right: _ccbb.Right - _dfff(5)}
					}
					_bdadd = true
				case _ad.ST_LegendPosR:
					_aff = &Rectangle{Top: (_ccbb.Bottom-_ccbb.Top)/2 - _dfff(10) + _gaeb, Bottom: (_ccbb.Bottom-_ccbb.Top)/2 + _dfff(10), Left: _ccbb.Right - _dfff(22.5), Right: _ccbb.Right - _dfff(2.5)}
					if !_cag {
						_aeda = &Rectangle{Top: _dfff(5) + _gaeb, Bottom: _ccbb.Bottom - _dfff(12.5), Left: _dfff(10), Right: _ccbb.Right - _dfff(25)}
					}
				case _ad.ST_LegendPosL:
					_aff = &Rectangle{Top: (_ccbb.Bottom-_ccbb.Top)/2 - _dfff(10) + _gaeb, Bottom: (_ccbb.Bottom-_ccbb.Top)/2 + _dfff(10), Left: _dfff(2.5), Right: _dfff(22.5)}
					if !_cag {
						_aeda = &Rectangle{Top: _dfff(5) + _gaeb, Bottom: _ccbb.Bottom - _dfff(12.5), Left: _dfff(30), Right: _ccbb.Right - _dfff(5)}
					}
				default:
					_aff = &Rectangle{Top: (_ccbb.Bottom-_ccbb.Top)/2 - _dfff(10) + _gaeb, Bottom: (_ccbb.Bottom-_ccbb.Top)/2 + _dfff(10), Left: _ccbb.Right - _dfff(25), Right: _ccbb.Right - _dfff(5)}
					if !_cag {
						_aeda = &Rectangle{Top: _dfff(5) + _gaeb, Bottom: _ccbb.Bottom - _dfff(12.5), Left: _dfff(100), Right: _ccbb.Right - _dfff(25)}
					}
				}
			}
		}
		_aeda.scale(_bdc)
		_dca.drawBorderWithProps(_cddc.SpPr, _aeda, _ebf)
		_acb := []*legendItem{}
		var _cdc error
		_bf := _cddc.PlotAreaChoice1
		for _, _egd := range _cddc.PlotAreaChoice {
			if _fdgb := _egd.BarChart; _fdgb != nil {
				_acb, _cdc = _dca.drawBarChart(_fdgb, _aeda, _bf, _cfcaa)
				if _cdc != nil {
					return nil, _cdc
				}
				break
			}
			if _bae := _egd.PieChart; _bae != nil {
				_acb, _cdc = _dca.drawPieChart(_bae, _aeda, _cfcaa, _bdc)
				if _cdc != nil {
					return nil, _cdc
				}
				break
			}
			if _efg := _egd.ScatterChart; _efg != nil {
				_acb, _cdc = _dca.drawScatterChart(_efg, _aeda, _bf, _bdc)
				if _cdc != nil {
					return nil, _cdc
				}
				break
			}
			if _bcf := _egd.LineChart; _bcf != nil {
				_acb, _cdc = _dca.drawLineChart(_bcf, _aeda, _bf, _bdc)
				if _cdc != nil {
					return nil, _cdc
				}
				break
			}
			if _dbb := _egd.AreaChart; _dbb != nil {
				_acb, _cdc = _dca.drawAreaChart(_dbb, _aeda, _bf, _bdc)
				if _cdc != nil {
					return nil, _cdc
				}
				break
			}
		}
		if _gbgf != nil {
			_aff.scale(_bdc)
			_dca.drawBorderWithProps(_gbgf.SpPr, _aff, _ebf)
			if len(_acb) != 0 {
				_dca.drawLegend(_aff, _acb, _bdadd)
			}
		}
	}
	_ccbb.scale(_bdc)
	_dca.drawBorderWithProps(_ebd.SpPr, _ccbb, _ebf)
	return _cedd, nil
}
func _baac(_ddde *_ad.CT_CatAx) (uint32, _ad.ST_AxPos, _ad.ST_TickMark, _ad.ST_TickLblPos, *_ad.CT_ChartLines, uint32, *_edc.CT_ShapeProperties, error) {
	var _dee, _gcef uint32
	var _bbff _ad.ST_AxPos
	var _efd _ad.ST_TickMark
	var _efga *_ad.CT_ChartLines
	var _dbe _ad.ST_TickLblPos
	if _ddde.AxId == nil {
		return _dee, _bbff, _efd, _dbe, _efga, _gcef, _ddde.SpPr, _bc.New("\u004e\u006f\u0020x\u0020\u0061\u0078\u0069\u0073\u0020\u0049\u0044")
	} else {
		_dee = _ddde.AxId.ValAttr
	}
	if _ddde.AxPos == nil {
		return _dee, _bbff, _efd, _dbe, _efga, _gcef, _ddde.SpPr, _bc.New("\u004eo\u0020x\u0020\u0061\u0078\u0069\u0073 \u0070\u006fs\u0069\u0074\u0069\u006f\u006e")
	} else {
		_bbff = _ddde.AxPos.ValAttr
	}
	if _ddde.MajorTickMark != nil {
		_efd = _ddde.MajorTickMark.ValAttr
	}
	if _ddde.TickLblPos != nil {
		_dbe = _ddde.TickLblPos.ValAttr
	}
	if _ddde.CrossAx == nil {
		return _dee, _bbff, _efd, _dbe, _efga, _gcef, _ddde.SpPr, _bc.New("\u004e\u006f \u0063\u0072\u006fs\u0073\u0020\u0061\u0078\u0069\u0073\u0020\u0049\u0044")
	} else {
		_gcef = _ddde.CrossAx.ValAttr
	}
	_efga = _ddde.MajorGridlines
	return _dee, _bbff, _efd, _dbe, _efga, _gcef, _ddde.SpPr, nil
}
func _dgae(_gcbe *_ab.Document, _aeaf, _bdda, _egab string) error {
	_feggf, _aefc := _gcbe.GetFontBytesByRelId(_bdda)
	if _aefc != nil {
		return _aefc
	}
	_cdaa, _aefc := _fagc(_egab)
	if _aefc != nil {
		return _aefc
	}
	for _efcc := 0; _efcc < 32; _efcc++ {
		_cdef := _efcc % len(_cdaa)
		_feggf[_efcc] = _feggf[_efcc] ^ _cdaa[_cdef]
	}
	_dadc := _gcbe.TmpPath + "\u002f" + _aeaf + "\u002e\u0074\u0074\u0066"
	_aefc = _b.WriteFile(_dadc, _feggf, 0644)
	if _aefc != nil {
		return _aefc
	}
	_agad(_dadc)
	return nil
}
func GetDataFromXfrm(xfrm *_edc.CT_Transform2D) (float64, float64, float64, float64) {
	var _cegca, _geed, _bbdd, _ddc float64
	if _fecd := xfrm.Off; _fecd != nil {
		_cegca = _bd.FromEMU(FromSTCoordinate(_fecd.XAttr))
		_geed = _bd.FromEMU(FromSTCoordinate(_fecd.YAttr))
	}
	if _bcff := xfrm.Ext; _bcff != nil {
		_bbdd = _bd.FromEMU(_bcff.CxAttr)
		_ddc = _bd.FromEMU(_bcff.CyAttr)
	}
	return _cegca, _geed, _bbdd, _ddc
}
func (_beb *creatorContext) drawBorderWithProps(_acfa *_edc.CT_ShapeProperties, _aaae *Rectangle, _fcgf float64) {
	if _aaae != nil && _acfa != nil && _acfa.Ln != nil && _acfa.Ln.LineFillPropertiesChoice.SolidFill != nil {
		_fdgc := _beb.getPdfColorFromSolidFill(_acfa.Ln.LineFillPropertiesChoice.SolidFill)
		DrawRectangle(_beb._abedc, _aaae, _fcgf, _fdgc)
	}
}

type serValue struct {
	_ecaa string
	_dga  float64
	_aag  *_edc.CT_ShapeProperties
}

func (_cdfg *Rectangle) Translate(x, y float64) {
	_cdfg.Left += x
	_cdfg.Right += x
	_cdfg.Top += y
	_cdfg.Bottom += y
}
func ParseExcelRange(s string) (string, _de.CellReference, _de.CellReference, error) {
	_cded := _ba.FieldsFunc(s, func(_bdada rune) bool { return _bdada == ':' || _bdada == '!' })
	if len(_cded) == 3 {
		_fea, _egfe := _de.ParseCellReference(_cded[1])
		if _egfe != nil {
			return "", _de.CellReference{}, _de.CellReference{}, _egfe
		}
		_gagfa, _egfe := _de.ParseCellReference(_cded[2])
		if _egfe != nil {
			return "", _de.CellReference{}, _de.CellReference{}, _egfe
		}
		return _cded[0], _fea, _gagfa, nil
	}
	return "", _de.CellReference{}, _de.CellReference{}, _bc.New("\u0065r\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006eg\u0020e\u0078c\u0065\u006c\u0020\u0072\u0061\u006e\u0067e")
}
func IsNoSpaceLanguage(symbol string) bool {
	for _, _fcbdf := range symbol {
		if _e.Is(_e.Han, _fcbdf) {
			return true
		}
	}
	return false
}
func _agad(_fed string) error {
	if !_ba.HasSuffix(_fed, "\u002e\u0074\u0074\u0066") {
		_dcd.Log.Debug("\u0055\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u0066\u0069\u006c\u0065\u0020\u0066\u006f\u0072ma\u0074\u002e")
		return _ee.Errorf("\u0055\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020f\u006f\u006e\u0074\u0020\u0066\u0069l\u0065\u0020\u0066\u006f\u0072m\u0061\u0074\u002c\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u006cy\u0020\u006f\u006e\u006c\u0079\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0054T\u0046\u0020\u0066\u006f\u006e\u0074\u0020\u0066i\u006c\u0065\u002e")
	}
	_bacb, _fdac := _dc.ParseFile(_fed)
	if _fdac != nil {
		_dcd.Log.Debug("\u0043a\u006e\u006e\u006f\u0074\u0020\u0070\u0061\u0072\u0073\u0065\u0020T\u0054\u0046\u0020\u0066\u0069\u006c\u0065\u0020\u0025\u0073", _fdac)
		return _fdac
	}
	_bbcg, _fdac := _ae.NewCompositePdfFontFromTTFFile(_fed)
	if _fdac != nil {
		return _fdac
	}
	_ebae := _bacb.GetNameRecords()
	for _, _gca := range _ebae {
		_dbcae := _gca[1]
		if _dbcae == "" {
			continue
		}
		_aecd := make([]byte, 0)
		for _gdca := 0; _gdca < len(_dbcae); _gdca++ {
			if _dbcae[_gdca] == 39 || _dbcae[_gdca] == 92 {
				continue
			}
			_gff := 4
			if _gdca+_gff < len(_dbcae) {
				if _dbcae[_gdca:_gdca+_gff] == "\u0000" {
					_gdca = _gdca + _gff + 1
					continue
				}
			}
			_aecd = append(_aecd, _dbcae[_gdca])
		}
		_dbcae = _ba.Replace(string(_aecd), "\u0078\u0030\u0030", "", -1)
		_gccd := _gca[2]
		if _gccd == "" {
			return _ee.Errorf("N\u006f\u0020\u0073\u0074\u0079\u006ce\u0020\u0069\u006e\u0066\u006f\u0072m\u0061\u0074\u0069\u006f\u006e\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u006c\u0065\u0020%\u0073", _fed)
		}
		_aecd = make([]byte, 0)
		for _aad := 0; _aad < len(_gccd); _aad++ {
			if _gccd[_aad] == 39 || _gccd[_aad] == 92 {
				continue
			}
			_afd := 4
			if _aad+_afd < len(_gccd) {
				if _gccd[_aad:_aad+_afd] == "\u0000" {
					_aad = _aad + _afd + 1
					continue
				}
			}
			_aecd = append(_aecd, _gccd[_aad])
		}
		_gccd = _ba.Replace(string(_aecd), "\u0078\u0030\u0030", "", -1)
		RegisterFont(_dbcae, _gbgcc[_gccd], _bbcg)
	}
	return nil
}
