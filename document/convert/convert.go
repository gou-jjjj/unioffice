//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package convert

import (
	_da "bytes"
	_e "errors"
	_d "fmt"
	_bb "image/png"
	_dd "io"
	_bbg "regexp"
	_g "strconv"
	_c "strings"

	_a "github.com/gou-jjjj/unioffice/color"
	_cb "github.com/gou-jjjj/unioffice/common/logger"
	_ad "github.com/gou-jjjj/unioffice/common/tempstorage"
	_bc "github.com/gou-jjjj/unioffice/document"
	_fg "github.com/gou-jjjj/unioffice/internal/convertutils"
	_gc "github.com/gou-jjjj/unioffice/internal/formatutils"
	_ac "github.com/gou-jjjj/unioffice/measurement"
	_ag "github.com/gou-jjjj/unioffice/schema/soo/dml"
	_f "github.com/gou-jjjj/unioffice/schema/soo/dml/chart"
	_afg "github.com/gou-jjjj/unioffice/schema/soo/dml/picture"
	_ede "github.com/gou-jjjj/unioffice/schema/soo/ofc/sharedTypes"
	_af "github.com/gou-jjjj/unioffice/schema/soo/pkg/relationships"
	_aad "github.com/gou-jjjj/unioffice/schema/soo/wml"
	_aa "github.com/gou-jjjj/unioffice/schema/urn/schemas_microsoft_com/vml"
	_ga "github.com/gou-jjjj/unioffice/vmldrawing"
	_cc "github.com/unidoc/emf"
	_dc "github.com/unidoc/unipdf/v4/core"
	_ce "github.com/unidoc/unipdf/v4/creator"
	_ca "github.com/unidoc/unipdf/v4/model"
	_ed "github.com/unidoc/unipdf/v4/textshaping"
)

func _ecgc(_acbd *_aad.CT_PPr, _fdcb *_aad.CT_PPrGeneral, _gcgb *_aad.CT_RPr) *_aad.CT_PPr {
	if _acbd == nil {
		_acbd = _aad.NewCT_PPr()
	}
	if _fdcb != nil {
		if _acbd.Jc == nil && _fdcb.Jc != nil {
			_acbd.Jc = _fdcb.Jc
		}
		if _acbd.Spacing == nil {
			_acbd.Spacing = _fdcb.Spacing
		} else if _bfe := _fdcb.Spacing; _bfe != nil {
			if _acbd.Spacing.BeforeAttr == nil {
				_acbd.Spacing.BeforeAttr = _bfe.BeforeAttr
			}
			if _acbd.Spacing.AfterAttr == nil {
				_acbd.Spacing.AfterAttr = _bfe.AfterAttr
			}
			if _acbd.Spacing.LineAttr == nil {
				_acbd.Spacing.LineAttr = _bfe.LineAttr
			}
		}
		if _acbd.PageBreakBefore == nil {
			_acbd.PageBreakBefore = _fdcb.PageBreakBefore
		}
		if _fdcb.ContextualSpacing != nil {
			_acbd.ContextualSpacing = _fdcb.ContextualSpacing
		}
		if _fdcb.Ind != nil {
			if _acbd.Ind == nil {
				_acbd.Ind = _fdcb.Ind
			} else {
				_dgddeg, _bcggf := _acbd.Ind.FirstLineAttr == nil, _acbd.Ind.HangingAttr == nil
				if _dgddeg && _bcggf && _fdcb.Ind.FirstLineAttr != nil {
					_acbd.Ind.FirstLineAttr = _fdcb.Ind.FirstLineAttr
					_dgddeg = false
				}
				if _dgddeg && _bcggf && _fdcb.Ind.HangingAttr != nil {
					_acbd.Ind.HangingAttr = _fdcb.Ind.HangingAttr
				}
				if _acbd.Ind.LeftAttr == nil {
					_acbd.Ind.LeftAttr = _fdcb.Ind.LeftAttr
				}
				if _acbd.Ind.RightAttr == nil {
					_acbd.Ind.RightAttr = _fdcb.Ind.RightAttr
				}
			}
		}
		if _acbd.Tabs == nil && _fdcb.Tabs != nil {
			_acbd.Tabs = _fdcb.Tabs
		}
		if _fdcb.PBdr != nil {
			_acbd.PBdr = _fdcb.PBdr
		}
		if _acbd.NumPr == nil && _fdcb.NumPr != nil {
			_acbd.NumPr = _fdcb.NumPr
		}
	}
	if _gcgb != nil {
		var _cdcfa _aad.CT_ParaRPr
		if _acbd.RPr == nil {
			_cdcfa = *_aad.NewCT_ParaRPr()
		} else {
			_cdcfa = *_acbd.RPr
		}
		if _cdcfa.Color == nil && _gcgb.Color != nil {
			_cdcfa.Color = _gcgb.Color
		}
		if _cdcfa.Spacing == nil && _gcgb.Spacing != nil {
			_cdcfa.Spacing = _gcgb.Spacing
		}
		if _cdcfa.Sz == nil && _gcgb.Sz != nil {
			_cdcfa.Sz = _gcgb.Sz
		}
		if _cdcfa.SzCs == nil && _gcgb.SzCs != nil {
			_cdcfa.SzCs = _gcgb.SzCs
		}
		if _cdcfa.B == nil && _gcgb.B != nil {
			_cdcfa.B = _gcgb.B
		}
		if _cdcfa.I == nil && _gcgb.I != nil {
			_cdcfa.I = _gcgb.I
		}
		if _cdcfa.RFonts == nil && _gcgb.RFonts != nil {
			_cdcfa.RFonts = _gcgb.RFonts
		}
		if _cdcfa.VertAlign == nil && _gcgb.VertAlign != nil {
			_cdcfa.VertAlign = _gcgb.VertAlign
		}
		if _cdcfa.Bdr == nil && _gcgb.Bdr != nil {
			_cdcfa.Bdr = _gcgb.Bdr
		}
		if _cdcfa.Caps == nil && _gcgb.Caps != nil {
			_cdcfa.Caps = _gcgb.Caps
		}
		if _cdcfa.SmallCaps == nil && _gcgb.SmallCaps != nil {
			_cdcfa.SmallCaps = _gcgb.SmallCaps
		}
		_acbd.RPr = &_cdcfa
	}
	return _acbd
}

func (_dbae *convertContext) getPageAccessiblePart() float64 {
	_egaec := _dbae._eeabe._gd.Bottom - _dbae._eeabe._eff - _dbae._befb._bba.Top - _dbae._befb._bba.Bottom
	return _egaec
}

func (_gdbb *convertContext) makeBlockFromTextboxContent(_fefba *_aad.TxbxContent, _efbg, _ecge float64, _ggfb *_fg.Rectangle) (*block, error) {
	if _ggfb == nil {
		_ggfb = &_fg.Rectangle{}
	}
	for _, _cfca := range _fefba.EG_BlockLevelElts {
		if _gbee := _cfca.BlockLevelEltsChoice.EG_ContentBlockContent; len(_gbee) > 0 {
			_gfbe, _gbafb := _gdbb.makePdfBlockFromCBCs([][]*_aad.EG_ContentBlockContent{_gbee}, _efbg, _ecge, _ggfb, false, nil)
			if _gbafb != nil {
				return nil, _gbafb
			}
			_fcaf := &block{_cee: _gfbe, _cecg: false, _caa: 0, _cg: _ce.ColorBlack}
			return _fcaf, nil
		}
	}
	return nil, nil
}

func _fcdf(_bfgf float64) float64 { return _bfgf * _ac.Millimeter }

func (_eabeb *convertContext) adjustRightBoundOfLastSpan() {
	_bbbg := _eabeb._babd._dff
	_adac := _eabeb._bdgcc._egf + _eabeb._befb._cd
	_febe := _adac + _eabeb._bdgcc._eaf
	for _, _dgad := range _eabeb._eeabe._cag {
		if ((_adac > _dgad._ccbg.Top && _adac < _dgad._ccbg.Bottom) || (_febe > _dgad._ccbg.Top && _adac < _dgad._ccbg.Bottom)) && (_bbbg > _dgad._ccbg.Left) {
			_bbbg = _dgad._ccbg.Left
		}
	}
	_eabeb._babd._dff = _bbbg
}

type tableCellProperties struct {
	_dfcf *_aad.CT_Tc
	_bea  *_aad.CT_TblPr
	_eg   *_aad.CT_TblPrEx
	_dgg  int
	_ff   int
	_bead int
	_eac  int
	_gfgd []*_aad.CT_TblStylePr
	_ab   *_aad.CT_PPrGeneral
	_dba  *_aad.CT_RPr
	_bff  bool
	_eb   int
	_bgf  bool
	_egd  bool
	_dec  float64
}

// RegisterFont makes a PdfFont accessible for using in converting to PDF.
func RegisterFont(name string, style FontStyle, font *_ca.PdfFont) {
	_fg.RegisterFont(name, style, font)
}

// Options contains the options for convert process -
// e.g ProcessFields is when document contains fields
// and the value need to be processed also.
type Options struct {

	// ProcessFields process the document fields if set to true, default is `false`.
	ProcessFields bool

	// EnableFontSubsetting process document with subsetting font to reduce size result.
	// Default value is `true`.
	EnableFontSubsetting bool

	// FontFiles location of fonts for convert process.
	FontFiles []string

	// FontDirectory location of font directory for convert process.
	// This will load all font files inside directory if set
	// we recommend to use FontFiles for better performance.
	FontDirectory string

	// DefaultPageSize is applied when there is no page size explicitly set in the document.
	// A4 is the default option.
	DefaultPageSize _fg.PageSize

	// DefaultFontSize is applied when there is no font size explicitly set in the document
	// Possible values compatible with MS Word are 11 or 12, by default it is 12.
	DefaultFontSize int

	// RtlFontFile is applied for RTL paragraphs. Only one font is currently supported
	// for RTL paragraphs within one document.
	RtlFontFile string

	// DefaultImageEncoder sets the default image encoder for the convert process.
	// Default value is nil, which will use the best suitable encoder based on image format.
	// If image is `jpg` or `jpeg` will use `DCTEncoder` if image is `png` or in other format will use `FlateEncoder`.
	// Available options are `FlateEncoder`, `DCTEncoder`, `LZWEncoder`, `JBIG2Encoder`, `CCITTFaxEncoder`, and `RawEncoder`.
	DefaultImageEncoder _dc.StreamEncoder
}

func (_cgde *span) moveRight(_gfa float64) {
	for _, _abgf := range _cgde._adf {
		_abgf._gfd += _gfa
	}
}

func (_ceeg *convertContext) drawPages() {
	for _, _aef := range _ceeg._edfd {
		_ceeg._gaeg.NewPage()
		_ceeg.drawPage(_aef)
	}
}

func _gef(_dea *_ce.Creator, _age *image) {
	_age._bfb.SetPos(_age._gfga, _age._gg)
	_ae := _dea.Draw(_age._bfb)
	if _ae != nil {
		_cb.Log.Debug("\u0045\u0072\u0072or\u0020\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073", _ae)
	}
}

type paragraph struct {
	_adg  float64
	_bba  *_fg.Rectangle
	_gfg  float64
	_df   float64
	_ccd  float64
	_cd   float64
	_cec  float64
	_afa  _ce.TextAlignment
	_acf  float64
	_agc  float64
	_ea   []*line
	_dae  *tableWrapper
	_gcc  []*image
	_ba   []*image
	_daeb []*block
	_afge []*block
	_bf   []*note
	_de   float64
	_baa  []*zoneToSkip
	_fef  float64
	_gbb  bool
	_dfc  []*borderLine
	_bfd  bool
}

const (
	FontStyle_Regular    FontStyle = 0
	FontStyle_Bold       FontStyle = 1
	FontStyle_Italic     FontStyle = 2
	FontStyle_BoldItalic FontStyle = 3
)

func (_aebb *convertContext) determineParagraphBounds() {
	_aebb._befb._df = _aebb._eeabe._gd.Left + _aebb._befb._bba.Left
	_aebb._befb._gfg = _aebb._befb._df + _aebb._befb._adg
	_aebb._befb._ccd = _aebb._eeabe._gd.Right - _aebb._befb._bba.Right
}

var _dccc = map[int32]int32{61623: 8226, 61607: 8226, 61558: 9830, 61656: 8594, 61692: 8730}

func _dafd(_cdebb *_bc.Document) map[string]string {
	_efcb := []_bc.Paragraph{}
	_edab := map[string]string{}
	for _, _gdeg := range _cdebb.Tables() {
		for _, _dgafgb := range _gdeg.Rows() {
			for _, _facc := range _dgafgb.Cells() {
				_efcb = append(_efcb, _facc.Paragraphs()...)
			}
		}
	}
	_efcb = append(_efcb, _cdebb.Paragraphs()...)
	for _, _dffd := range _cdebb.Headers() {
		_efcb = append(_efcb, _dffd.Paragraphs()...)
		for _, _gcfg := range _dffd.Tables() {
			for _, _fgdb := range _gcfg.Rows() {
				for _, _ebee := range _fgdb.Cells() {
					_efcb = append(_efcb, _ebee.Paragraphs()...)
				}
			}
		}
	}
	for _, _beag := range _cdebb.Footers() {
		_efcb = append(_efcb, _beag.Paragraphs()...)
		for _, _eafg := range _beag.Tables() {
			for _, _baba := range _eafg.Rows() {
				for _, _aegbc := range _baba.Cells() {
					_efcb = append(_efcb, _aegbc.Paragraphs()...)
				}
			}
		}
	}
	for _, _aagbf := range _efcb {
		for _, _dedg := range _aagbf.Runs() {
			for _, _cfgd := range _dedg.X().EG_RunInnerContent {
				if _aaac := _cfgd.RunInnerContentChoice.InstrText; _aaac != nil {
					_gcee, _efea := _ggadd(_aaac.Content)
					if _gcee != "" && _efea != "" {
						_edab[_gcee] = _efea
					}
				}
			}
		}
	}
	return _edab
}

func _afggb(_dfcg int64, _gfgdb _aad.ST_NumberFormat) string {
	_eaaab := int(_dfcg)
	switch _gfgdb {
	case _aad.ST_NumberFormatDecimal:
		return _g.Itoa(_eaaab)
	case _aad.ST_NumberFormatUpperRoman:
		return _cgdcg(_eaaab, true)
	case _aad.ST_NumberFormatLowerRoman:
		return _cgdcg(_eaaab, false)
	case _aad.ST_NumberFormatUpperLetter:
		return _bccc(_eaaab, true)
	case _aad.ST_NumberFormatLowerLetter:
		return _bccc(_eaaab, false)
	default:
		return _g.Itoa(_eaaab)
	}
}

func (_gffe *convertContext) newLine() {
	if _gffe._befb == nil {
		_gffe.newParagraph()
	}
	_ceadg := _gffe._befb._cec + _gffe._befb._bba.Top
	_ggd := &line{}
	if len(_gffe._befb._ea) == 0 {
		_ggd._beb = _gffe._befb._gfg
	} else {
		_ggd._beb = _gffe._befb._df
	}
	_ggd._deb = _gffe._befb._ccd
	_ggd._gbc = _ggd._beb
	_ggd._egf = _ceadg
	_gffe._befb._ea = append(_gffe._befb._ea, _ggd)
	_gffe._bdgcc = _ggd
	_gffe.newSpan()
}

func (_fded *convertContext) moveCurrentParagraphToNewPage() {
	_fded.newPage()
	_bdcg := _fded._befb._cd - _fded._eeabe._eff
	_fded._befb._cd -= _bdcg
	for _, _cgfce := range _fded._befb._baa {
		_cgfce._ccbg.Translate(0, -_bdcg)
	}
	for _, _fbbd := range _fded._befb._daeb {
		_fbbd._aag -= _bdcg
	}
	for _, _bbcd := range _fded._befb._afge {
		_bbcd._aag -= _bdcg
	}
	for _, _deed := range _fded._befb._gcc {
		_deed._gg -= _bdcg
	}
	for _, _fbcd := range _fded._befb._ba {
		_fbcd._gg -= _bdcg
	}
}

func _cade(_adbb string) uint16 {
	_gfcca, _bbfd := _eaef[_adbb]
	if !_bbfd {
		return 0
	}
	return _gfcca
}

var (
	_gf = _fcdf(6)
	_ef = _fcdf(0.25)
	_dg = _fcdf(1.9)
)

func (_cgcc *convertContext) addAbsoluteHeaderFooterCBCs(_gdabd []*_aad.EG_ContentBlockContent) {
	for _, _cagg := range _gdabd {
		for _, _gadg := range _cagg.ContentBlockContentChoice.P {
			_cgcc.newParagraph()
			if _gadg.PPr != nil && _gadg.PPr.PStyle == nil {
				_ggbeg := _cgcc._adae.Styles.ParagraphStyles()
				for _, _cgfae := range _ggbeg {
					if _fdac := _cgfae.X().DefaultAttr; _fdac != nil {
						if _cbaag := _fdac.Bool; _cbaag != nil && *_cbaag {
							_gadg.PPr = _ecgc(_gadg.PPr, _cgfae.X().PPr, _cgfae.X().RPr)
						}
						if _adee := _fdac.ST_OnOff1; _adee == _ede.ST_OnOff1On {
							_gadg.PPr = _ecgc(_gadg.PPr, _cgfae.X().PPr, _cgfae.X().RPr)
						}
						break
					}
				}
			}
			_bcab, _aaed := _cgcc.combinePPrWithStyles(_gadg.PPr)
			if _aaed != nil {
				_cgcc._ddcb = _aaed
			}
			_cgcc.assignPropsToAbsoluteParagraph(_bcab, _cgcc._befb)
			_cgcc.determineParagraphBounds()
			_cgcc.newLine()
			_cgcc.newWord()
			_gbge := _gadg.EG_PContent
			if len(_gbge) == 0 {
				_cgcc.addEmptyLine()
			} else {
				_cgcc.addAnchorBlocks(_gbge)
				_cgcc.addAnchorExtra(_gbge)
				_cgcc.addAbsoluteEGPC(_gbge, _bcab)
				_cgcc.addCurrentWordToParagraph()
			}
			if _cgcc._fdee {
				_cgcc.addCurrentParagraphHeaderToCurrentPage()
			} else {
				_cgcc.addCurrentParagraphFooterToCurrentPage()
			}
		}
		for _, _fbacf := range _cagg.ContentBlockContentChoice.Tbl {
			if _cgcc._befb == nil {
				_cgcc.newParagraph()
				_cgcc.determineParagraphBounds()
				_cgcc.newLine()
				_cgcc.newWord()
			}
			_cgcc.addAbsoluteHeaderFooterTable(_fbacf)
		}
	}
}

func _bbbdb(_cddgf *_aad.EG_RunInnerContent) bool {
	if _dbcec := _cddgf.RunInnerContentChoice.Br; _dbcec != nil {
		return _dbcec.TypeAttr == _aad.ST_BrTypePage
	}
	return false
}

type span struct {
	_cead float64
	_dff  float64
	_adf  []*word
}

func (_acgb *convertContext) newParagraph() {
	if _acgb._eeabe == nil {
		_acgb.newPage()
	}
	_agfg := &paragraph{}
	_agfg._bba = &_fg.Rectangle{}
	_agfg._cd = _acgb._eeabe._eff
	_acgb._befb = _agfg
}

// ConvertToPdf converts document to PDF file. This package is beta, breaking changes can take place.
func ConvertToPdf(d *_bc.Document) *_ce.Creator { return ConvertToPdfWithOptions(d, nil) }

func (_fcg *convertContext) addAnchorExtra(_bbe []*_aad.EG_PContent) {
	for _, _cfbb := range _bbe {
		for _, _cgfe := range _cfbb.PContentChoice.EG_ContentRunContent {
			if _ebbd := _cgfe.ContentRunContentChoice.R; _ebbd != nil {
				for _, _eecf := range _ebbd.Extra {
					if _gcd, _cdfd := _eecf.(*_aad.AlternateContentRun); _cdfd {
						if _dffe := _gcd.Choice; _dffe != nil {
							if _fefc := _dffe.Drawing; _fefc != nil {
								for _, _faf := range _fefc.DrawingChoice {
									if _faf == nil || _faf.Anchor == nil {
										continue
									}
									_abb := _faf.Anchor
									var _faab, _gefb, _bad, _eagb float64
									_cbae, _cbce := _abb.PositionH, _abb.PositionV
									if _ecg := _cbae.PosHChoice; _ecg != nil {
										if _ecg.PosOffset != nil {
											_faab = _ac.FromEMU(int64(*_ecg.PosOffset))
										}
									}
									if _afcg := _cbce.PosVChoice; _afcg != nil {
										if _afcg.PosOffset != nil {
											_gefb = _ac.FromEMU(int64(*_afcg.PosOffset))
										}
									}
									if _debcf := _abb.Extent; _debcf != nil {
										_eagb = _ac.FromEMU(_debcf.CxAttr)
										_bad = _ac.FromEMU(_debcf.CyAttr)
									}
									_acb := _fcg._befb._cd + _gefb
									_efdb := _acb + _bad
									_afgg := _fcg._befb._df + _faab
									_ffdf := _afgg + _eagb
									_fba := _gefb + _bad
									if _fba > _fcg._befb._fef {
										_fcg._befb._fef = _fba
									}
									if _abb.WrapTypeChoice != nil && _abb.WrapTypeChoice.WrapNone == nil {
										_fcg._befb._baa = append(_fcg._befb._baa, &zoneToSkip{_ccbg: &_fg.Rectangle{Top: _acb, Bottom: _efdb, Left: _afgg, Right: _ffdf}, _cf: _abb.WrapTypeChoice, _efa: _abb.RelativeHeightAttr})
									}
									if _cgfa := _abb.Graphic; _cgfa != nil {
										if _dadd := _cgfa.GraphicData; _dadd != nil {
											for _, _ggba := range _dadd.Any {
												if _egcb, _daac := _ggba.(*_aad.WdWsp); _daac {
													_adad, _acfc := _fcg.makeBlockFromWdWsp(_egcb)
													if _acfc != nil {
														_cb.Log.Debug("C\u0061\u006e\u006e\u006ft \u0072e\u0061\u0064\u0020\u0062\u006co\u0063\u006b\u003a\u0020\u0025\u0073", _acfc)
													}
													if _adad != nil {
														_adad._cee.Scale(_eagb/_adad._cee.Width(), _bad/_adad._cee.Height())
														_adad._dge = _afgg
														_adad._aag = _acb
														if _abb.BehindDocAttr {
															_fcg._befb._afge = append(_fcg._befb._afge, _adad)
														} else {
															_fcg._befb._daeb = append(_fcg._befb._daeb, _adad)
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

func (_acfb *convertContext) addRect(_gead *_aa.Rect) {
	_fdge := _ga.NewShapeStyle("")
	_cebe := false
	if _gead.StyleAttr != nil {
		_fdge = _ga.NewShapeStyle(*_gead.StyleAttr)
		_cebe = _c.Contains(*_gead.StyleAttr, "\u0070\u0074")
	}
	_fbea := _ce.ColorWhite
	if _gead.FillcolorAttr != nil {
		_fbea = _ce.ColorRGBFromHex(*_gead.FillcolorAttr)
	}
	_fbg := _fdge.Width()
	_abfe := _fdge.Height()
	_cfg := _fdge.Left() - _fdge.Right()
	_bge := _fdge.Top() - _fdge.Bottom()
	if !_cebe {
		_fbg = _fg.PointsFromTwips(int64(_fbg))
		_abfe = _fg.PointsFromTwips(int64(_abfe))
		_cfg = _fg.PointsFromTwips(int64(_cfg))
		_bge = _fg.PointsFromTwips(int64(_bge))
	}
	_ebcf := &borderLine{_dde: _fg.BorderPositionBottom, _gab: _fbg, _dgd: _abfe, _bef: _fbea}
	_acfb._befb._dfc = append(_acfb._befb._dfc, _ebcf)
	if _fdge.Position() == _ga.ShapeStylePositionAbsolute {
		_acfb._bdgcc._gbc = _acfb._befb._df + _cfg
		_acfb._bdgcc._egf = _bge
	}
}

func _ageb(_cafd *_aad.CT_PPrGeneral, _cdcce, _cebf *int64) {
	if _cafd != nil && _cafd.Spacing != nil {
		if _cafd.Spacing.BeforeAttr != nil {
			*_cdcce = int64(*_cafd.Spacing.BeforeAttr.ST_UnsignedDecimalNumber)
		}
		if _cafd.Spacing.AfterAttr != nil {
			*_cebf = int64(*_cafd.Spacing.AfterAttr.ST_UnsignedDecimalNumber)
		}
	}
}

func _dbab(_fddc *_bc.Document, _badcb string) []*_aad.CT_TblStylePr {
	_fcbdb := _fddc.GetStyleByID(_badcb)
	var _fgab []*_aad.CT_TblStylePr
	if _cdad := _fcbdb.X(); _cdad != nil {
		if _fbdbb := _cdad.BasedOn; _fbdbb != nil {
			_dbab(_fddc, _fbdbb.ValAttr)
		}
		if len(_cdad.TblStylePr) > 0 {
			_fgab = _cdad.TblStylePr
		}
	}
	return _fgab
}

func (_ggbe *convertContext) processRtlLine(_fbd *line) {
	_bcg := _fbd._deb
	for _, _aegc := range _fbd._beg {
		for _, _eda := range _aegc._adf {
			_eda._gfd = _bcg - _eda._cbg
			_cdd := _eda._cbg
			for _, _ebc := range _eda._ee {
				_ebc._fa = _cdd - _ebc._gba
				_cdd -= _ebc._gba
			}
			_bcg = _eda._gfd
		}
	}
}

func _gdbeb(_gfbc *_aad.CT_TblPr, _effd *_aad.CT_TblPrEx, _ecfg *_aad.CT_TcPr, _faaa, _cfdfg, _fcce, _cbaec int) *_aad.CT_TcPr {
	if _ecfg == nil {
		_ecfg = _aad.NewCT_TcPr()
	}
	if _effd == nil {
		_effd = _aad.NewCT_TblPrEx()
	}
	if _gfbc == nil {
		_gfbc = _aad.NewCT_TblPr()
	}
	if _ecfg.TcBorders == nil {
		_ecfg.TcBorders = _aad.NewCT_TcBorders()
	}
	if _effd.TblBorders == nil {
		_effd.TblBorders = _aad.NewCT_TblBorders()
	}
	if _gfbc.TblBorders == nil {
		_gfbc.TblBorders = _aad.NewCT_TblBorders()
	}
	if _ecfg.TcBorders.Top == nil {
		if _effd.TblBorders.Top == nil {
			_ecfg.TcBorders.Top = _bceeb(_gfbc.TblBorders.Top, _gfbc.TblBorders.InsideH, _faaa == 0)
		} else {
			_ecfg.TcBorders.Top = _bceeb(_effd.TblBorders.Top, _effd.TblBorders.InsideH, _faaa == 0)
		}
	}
	if _ecfg.TcBorders.Bottom == nil {
		if _effd.TblBorders.Bottom == nil {
			_ecfg.TcBorders.Bottom = _bceeb(_gfbc.TblBorders.Bottom, _gfbc.TblBorders.InsideH, _faaa == _fcce-1)
		} else {
			_ecfg.TcBorders.Bottom = _bceeb(_effd.TblBorders.Bottom, _effd.TblBorders.InsideH, _faaa == _fcce-1)
		}
	}
	if _ecfg.TcBorders.Left == nil {
		if _effd.TblBorders.Left == nil {
			_ecfg.TcBorders.Left = _bceeb(_gfbc.TblBorders.Left, _gfbc.TblBorders.InsideV, _cfdfg == 0)
		} else {
			_ecfg.TcBorders.Left = _bceeb(_effd.TblBorders.Left, _effd.TblBorders.InsideV, _cfdfg == 0)
		}
	}
	if _ecfg.TcBorders.Right == nil {
		if _effd.TblBorders.Right == nil {
			_ecfg.TcBorders.Right = _bceeb(_gfbc.TblBorders.Right, _gfbc.TblBorders.InsideV, _cfdfg == _cbaec-1)
		} else {
			_ecfg.TcBorders.Right = _bceeb(_effd.TblBorders.Right, _effd.TblBorders.InsideV, _cfdfg == _cbaec-1)
		}
	}
	if _ecfg.Shd == nil {
		if _gcce := _gfbc.Shd; _gcce != nil {
			_ecfg.Shd = _gcce
		}
	} else {
		if _gfbc.Shd != nil && _ecfg.Shd.FillAttr == nil {
			_ecfg.Shd.FillAttr = _gfbc.Shd.FillAttr
		}
	}
	if _effd.TblCellMar != nil {
		_gfbc.TblCellMar = _effd.TblCellMar
	}
	if _aegce := _gfbc.TblCellMar; _aegce != nil {
		if _ecfg.TcMar == nil {
			_ecfg.TcMar = _aad.NewCT_TcMar()
		}
		if _ecfg.TcMar.Left == nil {
			_ecfg.TcMar.Left = _aegce.Left
		}
		if _ecfg.TcMar.Top == nil {
			_ecfg.TcMar.Top = _aegce.Top
		}
		if _ecfg.TcMar.Right == nil {
			_ecfg.TcMar.Right = _aegce.Right
		}
		if _ecfg.TcMar.Bottom == nil {
			_ecfg.TcMar.Bottom = _aegce.Bottom
		}
	}
	return _ecfg
}

func (_bdbg *convertContext) addEmptyCellToTable(_cfcd *_ce.Table, _dfcd *_aad.CT_Tc, _dgdc *_aad.CT_TblPr, _cgc *_aad.CT_TblPrEx, _cdca, _bdce, _ddeac, _dffag int, _gfcf []*_aad.CT_TblStylePr, _dgdcc *_aad.CT_RPr) {
	_bdbg.getTableCellProperties(_cfcd, _dgdc, _cgc, _gfcf, _cdca, _dfcd.TcPr, _dgdcc, _bdce, _ddeac, _dffag)
}

type tableWrapper struct {
	_agae *_ce.Table
	_cfd  float64
	_db   _ce.HorizontalAlignment
	_bbf  float64
}

func (_gbeag *convertContext) combinePPrWithStyles(_ddff *_aad.CT_PPr) (*_aad.CT_PPr, *prefix) {
	if _ddff == nil {
		return nil, nil
	}
	if _ddff != nil && _ddff.PStyle != nil {
		_cggg, _bddab := _gbeag.getStyleProps(_ddff.PStyle.ValAttr, _bc.Style{})
		_ddff = _ecgc(_ddff, _cggg, _bddab)
	}
	var _eddg *prefix
	if _ddff != nil && _ddff.NumPr != nil {
		if _bbgg, _fceea := _ddff.NumPr.Ilvl, _ddff.NumPr.NumId; _fceea != nil {
			var _aacdc int64
			if _bbgg != nil {
				_aacdc = _bbgg.ValAttr
			}
			if _bafea := _gbeag._adae.GetNumberingLevelByIds(_fceea.ValAttr, _aacdc).X(); _bafea != nil {
				_ddff = _ecgc(_ddff, _bafea.PPr, _bafea.RPr)
				if _ddff.PStyle != nil && _ddff.NumPr.Ilvl != nil {
					if _, _ggeb := _gbeag._bgee[_ddff.PStyle.ValAttr]; !_ggeb {
						_gbeag._bgee[_ddff.PStyle.ValAttr] = map[int64]*_aad.CT_Ind{}
					}
					if _cbbc, _fcef := _gbeag._bgee[_ddff.PStyle.ValAttr][_aacdc]; _fcef {
						_ddff.Ind = _cbbc
					} else {
						_gbeag._bgee[_ddff.PStyle.ValAttr][_aacdc] = _ddff.Ind
					}
				}
				if _ebfde := _bafea.NumFmt; _ebfde != nil {
					if _dbdc := _ebfde.ValAttr; _dbdc != _aad.ST_NumberFormatNone && _dbdc != _aad.ST_NumberFormatCustom {
						var _aaagd []float64
						if _adbe := _ddff.Tabs; _adbe != nil && len(_adbe.Tab) != 0 {
							for _, _bcge := range _adbe.Tab {
								_aaagd = append(_aaagd, _fg.PointsFromTwips(*_bcge.PosAttr.Int64))
							}
						}
						_eddg = &prefix{_aebg: _aaagd, _fbac: true}
						if _dbdc == _aad.ST_NumberFormatBullet {
							if _cbfdg := _bafea.LvlText; _cbfdg != nil {
								if _aeaa := _cbfdg.ValAttr; _aeaa != nil && *_aeaa != "" {
									_eddg._aade = *_aeaa
									_eddg._cbcff = true
								}
							}
						} else {
							_bdeg, _bgbfg := _fceea.ValAttr, _bbgg.ValAttr
							if _, _dfdf := _gbeag._cedb[_bdeg]; !_dfdf {
								_gbeag._cedb[_bdeg] = map[int64]int64{}
							}
							if _, _fcgc := _gbeag._cedb[_bdeg][_bgbfg]; !_fcgc {
								_gbeag._cedb[_bdeg][_bgbfg] = 1
								if _bdcef := _bafea.Start; _bdcef != nil {
									_gbeag._cedb[_bdeg][_bgbfg] = _bdcef.ValAttr
								}
							}
							if _, _dgafa := _gbeag._cedb[_bdeg][_bgbfg+1]; _dgafa {
								_gbeag._cedb[_bdeg][_bgbfg+1] = 1
							}
							_bbaga := _gbeag._cedb[_bdeg][_bgbfg]
							_ddgbb := _gc.FormatNumberingText(int64(_bbaga), _bafea.IlvlAttr, *_bafea.LvlText.ValAttr, _bafea.NumFmt, _gbeag._cedb[_bdeg])
							_gbeag._cedb[_bdeg][_bgbfg]++
							_eddg._aade = _ddgbb
						}
					}
				}
			}
		}
	}
	return _ddff, _eddg
}

func (_dbdb *convertContext) getStyleProps(_aebd string, _egad _bc.Style) (*_aad.CT_PPrGeneral, *_aad.CT_RPr) {
	var _fgagd *_aad.CT_PPrGeneral
	var _adbed *_aad.CT_RPr
	_dggge := _dbdb._adae.GetStyleByID(_aebd)
	_ffdfd := int64(0)
	_cadb := true
	if _faddb := _dggge.X(); _faddb != nil {
		_fgagd = _faddb.PPr
		_adbed = _faddb.RPr
		if _faddb.UiPriority != nil {
			_ffdfd = _faddb.UiPriority.ValAttr
		}
		if _facaa := _faddb.BasedOn; _facaa != nil {
			_gbbd, _dcdcf := _dbdb.getStyleProps(_facaa.ValAttr, _dggge)
			if _dadf := _egad.X(); _dadf != nil {
				if _dadf.UiPriority != nil && _ffdfd > 0 {
					if _faddb.UiPriority.ValAttr > _ffdfd {
						_cadb = false
					}
				}
				if _dadf.QFormat != nil && _faddb.QFormat != nil && _edgc(_dadf.QFormat) && _edgc(_faddb.QFormat) {
					_cadb = false
				}
			}
			if _cadb {
				_fgagd = _eaacg(_fgagd, _gbbd)
				_adbed = _gefea(_adbed, _dcdcf)
			}
		}
	}
	return _fgagd, _adbed
}

func (_cgac *convertContext) addEndnotes() {
	for _egcf, _fgbc := range _cgac._addd {
		if _egcf == 0 {
			_cgac.addSeparator()
		}
		_cgac._ddcb = &prefix{_aade: _fgbc._cea}
		for _afcae, _cfdc := range _fgbc._agb {
			if _egcf != 0 || _afcae != 0 {
				_cgac._aafge = true
			}
			_cgac.addAbsoluteCBCs(_cfdc.BlockLevelEltsChoice.EG_ContentBlockContent, nil)
		}
	}
	_cgac._aafge = false
}

func (_ggaa *convertContext) assignHeaderFooterToPage(_dbgd *page) {
	_dcce := _ggaa._adae.DocRels()
	_bbed := _bbg.MustCompile("\u005b\u0030\u002d\u0039\u005d\u002b")
	for _, _efcf := range _dbgd._ace {
		if _efcf != nil && _efcf._bbaf {
			if _dddd := _dcce.GetTargetByRelId(_efcf._edegd); _dddd != "" {
				_defg, _ := _g.Atoi(_bbed.FindString(_dddd))
				for _ffdc, _cbgdb := range _ggaa._adae.Headers() {
					if _defg == (_ffdc + 1) {
						_ggaa._fdee = true
						_ggaa._cfadd = false
						for _, _deae := range _cbgdb.X().EG_BlockLevelElts {
							_ggaa.addAbsoluteHeaderFooterCBCs(_deae.BlockLevelEltsChoice.EG_ContentBlockContent)
						}
					}
				}
			}
		}
	}
	for _, _dgcf := range _dbgd._gb {
		if _dgcf != nil && _dgcf._cecfc {
			if _dcccc := _dcce.GetTargetByRelId(_dgcf._edegd); _dcccc != "" {
				_cgge, _ := _g.Atoi(_bbed.FindString(_dcccc))
				for _bafb, _fada := range _ggaa._adae.Footers() {
					if _cgge == (_bafb + 1) {
						_ggaa._fdee = false
						_ggaa._cfadd = true
						for _, _ccfcc := range _fada.X().EG_BlockLevelElts {
							_ggaa.addAbsoluteHeaderFooterCBCs(_ccfcc.BlockLevelEltsChoice.EG_ContentBlockContent)
						}
					}
				}
			}
		}
	}
}

// RegisterFontsFromDirectory registers all fonts from the given directory automatically detecting font families and styles. For composite fonts use RegisterCompositeFontsFromDirectory.
func RegisterFontsFromDirectory(dirName string) error {
	return _fg.RegisterFontsFromDirectory(dirName)
}

func (_fcbf *convertContext) setPagesHeaderFooterRefs() {
	var _bfgd int
	for _, _bdeb := range _fcbf._adae.X().Body.EG_BlockLevelElts {
		for _, _efgb := range _bdeb.BlockLevelEltsChoice.EG_ContentBlockContent {
			for _, _becd := range _efgb.ContentBlockContentChoice.P {
				if _becd.PPr == nil || (_becd.PPr != nil && _becd.PPr.SectPr == nil) {
					continue
				}
				_bfgd++
			}
		}
	}
	for _ddcdg, _dgcfc := range _fcbf._edfd {
		_acdb := _ddcdg > 0 && _ddcdg+1 < len(_fcbf._edfd) && _bfgd > 0
		if len(_dgcfc._ace) > 0 || len(_dgcfc._gb) > 0 {
			_bfgd--
		}
		if len(_dgcfc._ace) < 1 {
			if len(_fcbf._dbgac) > 0 && !_acdb {
				_fddf := false
				_feadd := false
				_fcbe := _ddcdg == 0
				for !_fddf {
					for _, _cffd := range _fcbf._dbgac {
						if _cffd._cffc == _aad.ST_HdrFtrFirst && _ddcdg <= _cffd._edgf && _fcbe {
							_dgcfc._ace = append(_dgcfc._ace, _cffd)
							break
						}
						if _cffd._cffc == _aad.ST_HdrFtrDefault && _ddcdg >= _cffd._eafgg && _ddcdg <= _cffd._edgf && !_fcbe && !_feadd {
							_dgcfc._ace = append(_dgcfc._ace, _cffd)
							break
						}
						if _cffd._cffc == _aad.ST_HdrFtrDefault && _cffd._edgf < 0 && _feadd {
							_dgcfc._ace = append(_dgcfc._ace, _cffd)
							break
						}
					}
					if _feadd || len(_dgcfc._ace) > 0 {
						_fddf = true
					}
					_feadd = len(_dgcfc._ace) < 1 && !_feadd && !_fcbe
					_fcbe = false
				}
			} else if _ddcdg > 0 {
				if _aadg := _fcbf._edfd[_ddcdg-1]; len(_aadg._ace) > 0 {
					_dgcfc._ace = _aadg._ace
				}
			}
			_fcbf._edfd[_ddcdg]._ace = _dgcfc._ace
		}
		if len(_dgcfc._gb) < 1 {
			if len(_fcbf._dfgfe) > 0 && !_acdb {
				_aeggb := false
				_bedef := false
				_edga := _ddcdg == 0
				for !_aeggb {
					for _, _cecfg := range _fcbf._dfgfe {
						if _cecfg._cffc == _aad.ST_HdrFtrFirst && _ddcdg <= _cecfg._edgf && _edga {
							_dgcfc._gb = append(_dgcfc._gb, _cecfg)
							break
						}
						if _cecfg._cffc == _aad.ST_HdrFtrDefault && _ddcdg >= _cecfg._eafgg && _ddcdg <= _cecfg._edgf && !_edga && !_bedef {
							_dgcfc._gb = append(_dgcfc._gb, _cecfg)
							break
						}
						if _cecfg._cffc == _aad.ST_HdrFtrDefault && _bedef {
							_dgcfc._gb = append(_dgcfc._gb, _cecfg)
							break
						}
					}
					if _bedef || len(_dgcfc._gb) > 0 {
						_aeggb = true
					}
					_bedef = len(_dgcfc._gb) < 1 && !_bedef && !_edga
					_edga = false
				}
			} else if _ddcdg > 0 {
				if _ccec := _fcbf._edfd[_ddcdg-1]; len(_ccec._gb) > 0 {
					_dgcfc._gb = _ccec._gb
				}
			}
			_fcbf._edfd[_ddcdg]._gb = _dgcfc._gb
		}
	}
}

func (_dabe *convertContext) addParagraphWithTable(_adfb _ce.Table, _egdc, _fab float64) {
	_dabe.newParagraph()
	_dabe._befb._bba = &_fg.Rectangle{Top: _fcdf(2), Bottom: _fcdf(2), Left: 0, Right: 0}
	_dabe._befb._dae = &tableWrapper{_agae: &_adfb, _cfd: _egdc}
	_dabe._befb._adg = _fab
	_dabe._befb._cec = _adfb.Height()
	_dabe.determineParagraphBounds()
	_dabe.addCurrentParagraphToCurrentPage()
	_dabe._eeabe._aac = _dabe._eeabe._eff
}

func (_bdgcca *convertContext) makePdfImageFromGraphics(_cdgcb *_afg.Pic) (*_ce.Image, error) {
	if _bfaa := _cdgcb.BlipFill; _bfaa != nil {
		if _acfcg := _bfaa.Blip; _acfcg != nil {
			if _begf := _acfcg.EmbedAttr; _begf != nil {
				_fgdd, _dcgc := _bdgcca._adae.GetHeaderFooterImageObjByRelId(*_begf, _bdgcca._fdee, _bdgcca._cfadd)
				if _dcgc != nil {
					return nil, _dcgc
				}
				_dgba, _dcgc := _ad.Open(_fgdd.Path)
				if _dcgc != nil {
					return nil, _dcgc
				}
				_faeab, _dcgc := _dd.ReadAll(_dgba)
				if _dcgc != nil {
					return nil, _dcgc
				}
				if _c.ToLower(_fgdd.Format) == "\u0065\u006d\u0066" {
					_cgfbg, _dgdgd := _cc.ReadFile(_faeab)
					if _dgdgd != nil {
						return nil, _dgdgd
					}
					_bcfa := new(_da.Buffer)
					_aadd := _cgfbg.Draw()
					if _fbebb := _bb.Encode(_bcfa, _aadd); _fbebb != nil {
						return nil, _fbebb
					}
					_faeab = _bcfa.Bytes()
				}
				_bccb, _dcgc := _bdgcca._gaeg.NewImageFromData(_faeab)
				if _dcgc != nil {
					return nil, _dcgc
				}
				if _fg.DefaultImageEncoder != nil {
					_bccb.SetEncoder(_fg.DefaultImageEncoder)
				} else {
					_bccb.SetEncoder(_dc.NewFlateEncoder())
					if _c.ToLower(_fgdd.Format) == "\u006a\u0070\u0067" || _c.ToLower(_fgdd.Format) == "\u006a\u0070\u0065\u0067" {
						_bccb.SetEncoder(_dc.NewDCTEncoder())
					}
				}
				return _bccb, nil
			}
		}
	}
	return nil, nil
}

func _fcca(_eggf, _cfde *_aad.CT_RPr) *_aad.CT_RPr {
	if _eggf == nil {
		return _cfde
	}
	if _cfde == nil {
		if _eggf.B != nil {
			_eggf.B = nil
		}
		if _eggf.BCs != nil {
			_eggf.BCs = nil
		}
		if _eggf.I != nil {
			_eggf.I = nil
		}
		if _eggf.ICs != nil {
			_eggf.ICs = nil
		}
		return _eggf
	}
	if _eggf.RStyle == nil {
		_eggf.RStyle = _cfde.RStyle
	}
	if _eggf.RFonts == nil {
		_eggf.RFonts = _cfde.RFonts
	}
	if _eggf.B == nil {
		_eggf.B = _cfde.B
	}
	if _eggf.BCs == nil {
		_eggf.BCs = _cfde.BCs
	}
	if _eggf.I == nil {
		_eggf.I = _cfde.I
	}
	if _eggf.ICs == nil {
		_eggf.ICs = _cfde.ICs
	}
	if _eggf.Caps == nil {
		_eggf.Caps = _cfde.Caps
	}
	if _eggf.SmallCaps == nil {
		_eggf.SmallCaps = _cfde.SmallCaps
	}
	if _eggf.Strike == nil {
		_eggf.Strike = _cfde.Strike
	}
	if _eggf.Dstrike == nil {
		_eggf.Dstrike = _cfde.Dstrike
	}
	if _eggf.Outline == nil {
		_eggf.Outline = _cfde.Outline
	}
	if _eggf.Shadow == nil {
		_eggf.Shadow = _cfde.Shadow
	}
	if _eggf.Emboss == nil {
		_eggf.Emboss = _cfde.Emboss
	}
	if _eggf.Imprint == nil {
		_eggf.Imprint = _cfde.Imprint
	}
	if _eggf.NoProof == nil {
		_eggf.NoProof = _cfde.NoProof
	}
	if _eggf.SnapToGrid == nil {
		_eggf.SnapToGrid = _cfde.SnapToGrid
	}
	if _eggf.Vanish == nil {
		_eggf.Vanish = _cfde.Vanish
	}
	if _eggf.WebHidden == nil {
		_eggf.WebHidden = _cfde.WebHidden
	}
	if _eggf.Color == nil {
		_eggf.Color = _cfde.Color
	}
	if _eggf.Spacing == nil {
		_eggf.Spacing = _cfde.Spacing
	}
	if _eggf.W == nil {
		_eggf.W = _cfde.W
	}
	if _eggf.Kern == nil {
		_eggf.Kern = _cfde.Kern
	}
	if _eggf.Position == nil {
		_eggf.Position = _cfde.Position
	}
	if _eggf.Sz == nil {
		_eggf.Sz = _cfde.Sz
	}
	if _eggf.SzCs == nil {
		_eggf.SzCs = _cfde.SzCs
	}
	if _eggf.Highlight == nil {
		_eggf.Highlight = _cfde.Highlight
	}
	if _eggf.U == nil {
		_eggf.U = _cfde.U
	}
	if _eggf.Effect == nil {
		_eggf.Effect = _cfde.Effect
	}
	if _eggf.Bdr == nil {
		_eggf.Bdr = _cfde.Bdr
	}
	if _eggf.Shd == nil {
		_eggf.Shd = _cfde.Shd
	}
	if _eggf.FitText == nil {
		_eggf.FitText = _cfde.FitText
	}
	if _eggf.VertAlign == nil {
		_eggf.VertAlign = _cfde.VertAlign
	}
	if _eggf.Rtl == nil {
		_eggf.Rtl = _cfde.Rtl
	}
	if _eggf.Cs == nil {
		_eggf.Cs = _cfde.Cs
	}
	if _eggf.Em == nil {
		_eggf.Em = _cfde.Em
	}
	if _eggf.Lang == nil {
		_eggf.Lang = _cfde.Lang
	}
	if _eggf.EastAsianLayout == nil {
		_eggf.EastAsianLayout = _cfde.EastAsianLayout
	}
	if _eggf.SpecVanish == nil {
		_eggf.SpecVanish = _cfde.SpecVanish
	}
	if _eggf.OMath == nil {
		_eggf.OMath = _cfde.OMath
	}
	if _eggf.RPrChange == nil {
		_eggf.RPrChange = _cfde.RPrChange
	}
	return _eggf
}

func _acab(_cgcf, _aafa *_aad.CT_HpsMeasure) float64 {
	var _ccea float64
	_afgea := _fg.DefaultFontSize
	if _cgcf != nil {
		_ccea = float64(*_cgcf.ValAttr.ST_UnsignedDecimalNumber)
	} else if _aafa != nil {
		_ccea = float64(*_aafa.ValAttr.ST_UnsignedDecimalNumber)
	}
	if _ccea != 0 {
		_afgea = _ccea / 2
	}
	return _afgea
}

func (_ddd *convertContext) addEmptyLine() {
	_ddd.addTextSymbol(&symbol{_gfb: "\u000d", _gba: 0, _cde: _ddd._befb._acf})
}

func _ggadd(_fbgb string) (string, string) {
	_gdebd := _aadc.FindStringSubmatch(_fbgb)
	if len(_gdebd) < 3 {
		return "", ""
	}
	return _gdebd[1], _gdebd[2]
}

func _accff(_cbeg *_aad.EG_RunInnerContent) bool {
	if _gcfcf := _cbeg.RunInnerContentChoice.Br; _gcfcf != nil {
		return _gcfcf.TypeAttr == _aad.ST_BrTypeTextWrapping || _gcfcf.TypeAttr == _aad.ST_BrTypeUnset
	}
	return false
}

var _gbdab, _aadc, _aadbf *_bbg.Regexp

func (_deac *convertContext) newPage() {
	_eacf := &page{}
	_eacf._gd = _deac._gfcb
	_eacf._eff = _eacf._gd.Top
	if _deac._aafge {
		_eacf._be = true
		_eacf._eff += _gf
	}
	_deac._edfd = append(_deac._edfd, _eacf)
	_deac._eeabe = _eacf
}

func (_aeafa *convertContext) assignPropsToRelativeParagraph(_gfgcb *_aad.CT_PPr, _dabbg *_ce.StyledParagraph) (float64, float64) {
	_gfgcb = _ecgc(_gfgcb, _aeafa._cbca, _aeafa._bgdf)
	_defc := 1.1
	if _gfgcb == nil {
		_dabbg.SetLineHeight(_defc)
		return 0, 0
	}
	var _afdg _ce.TextAlignment
	if _gfgcb.Jc != nil {
		switch _gfgcb.Jc.ValAttr {
		case _aad.ST_JcRight:
			_afdg = _ce.TextAlignmentRight
		case _aad.ST_JcCenter:
			_afdg = _ce.TextAlignmentCenter
		case _aad.ST_JcBoth:
			_afdg = _ce.TextAlignmentJustify
		case _aad.ST_JcEnd:
			_afdg = _ce.TextAlignmentRight
		default:
			_afdg = _ce.TextAlignmentLeft
		}
		_dabbg.SetTextAlignment(_afdg)
	}
	var _ccafc, _eace, _eacc, _bafe float64
	if _fdbeb := _gfgcb.Spacing; _fdbeb != nil {
		if _gcdb := _fdbeb.BeforeAttr; _gcdb != nil {
			if _gcdb.ST_UnsignedDecimalNumber != nil {
				_ccafc = _fg.PointsFromTwips(int64(*_gcdb.ST_UnsignedDecimalNumber))
			}
		}
		if _affa := _fdbeb.AfterAttr; _affa != nil {
			if _affa.ST_UnsignedDecimalNumber != nil {
				_eace = _fg.PointsFromTwips(int64(*_affa.ST_UnsignedDecimalNumber))
			}
		}
		if _dfdg := _fdbeb.LineAttr; _dfdg != nil {
			if _dfdg.Int64 != nil {
				_defc = float64(*_dfdg.Int64) / 240.0
			}
		}
	}
	if _gfgcb.ContextualSpacing != nil && _edgc(_gfgcb.ContextualSpacing) {
		_ccafc = 0
		_eace = 0
	}
	if _ccgg := _gfgcb.TextAlignment; _ccgg != nil {
		switch _ccgg.ValAttr {
		case _aad.ST_TextAlignmentTop:
			_dabbg.SetTextVerticalAlignment(_ce.TextVerticalAlignmentTop)
		case _aad.ST_TextAlignmentBottom:
			_dabbg.SetTextVerticalAlignment(_ce.TextVerticalAlignmentBottom)
		case _aad.ST_TextAlignmentBaseline:
			_dabbg.SetTextVerticalAlignment(_ce.TextVerticalAlignmentBaseline)
		case _aad.ST_TextAlignmentCenter:
			_dabbg.SetTextVerticalAlignment(_ce.TextVerticalAlignmentCenter)
		}
	}
	if _afdg == _ce.TextAlignmentRight && _bafe <= 0 {
		_bafe += 5
	}
	if _ccafc > 0 {
		_ccafc = _ccafc - _defc/2
	}
	if _eace > 0 {
		_eace = _eace - _defc/2
	}
	_dabbg.SetLineHeight(_defc)
	if _agacd := _gfgcb.Ind; _agacd != nil {
		if _degd := _agacd.LeftAttr; _degd != nil {
			if _degd.Int64 != nil {
				_eacc = _fg.PointsFromTwips(*_degd.Int64)
			}
		}
		if _bbca := _agacd.RightAttr; _bbca != nil {
			if _bbca.Int64 != nil {
				_bafe = _fg.PointsFromTwips(*_bbca.Int64)
			}
		}
	}
	_dabbg.SetMargins(_eacc, _bafe, _ccafc, _eace)
	return _ccafc, _eacc
}

var _eaef = map[string]uint16{"\u0061\u0061": 0x1404, "\u0061\u0061\u002dD\u004a": 0x1000, "\u0061\u0061\u002dE\u0052": 0x1000, "\u0061\u0061\u002dE\u0054": 0x1000, "\u0061\u0066": 0x0036, "\u0061\u0066\u002dN\u0041": 0x1000, "\u0061\u0066\u002dZ\u0041": 0x0436, "\u0061\u0067\u0071": 0x1000, "\u0061\u0067\u0071\u002d\u0043\u004d": 0x1000, "\u0061\u006b": 0x1000, "\u0061\u006b\u002dG\u0048": 0x1000, "\u0073\u0071": 0x001C, "\u0073\u0071\u002dA\u004c": 0x041C, "\u0073\u0071\u002dM\u004b": 0x1000, "\u0067\u0073\u0077": 0x0084, "\u0067\u0073\u0077\u002d\u0046\u0052": 0x0484, "\u0067\u0073\u0077\u002d\u004c\u0049": 0x1000, "\u0067\u0073\u0077\u002d\u0043\u0048": 0x1000, "\u0061\u006d": 0x005E, "\u0061\u006d\u002dE\u0054": 0x045E, "\u0061\u0072": 0x0001, "\u0061\u0072\u002dD\u005a": 0x1401, "\u0061\u0072\u002dT\u0044": 0x1000, "\u0061\u0072\u002dK\u004d": 0x1000, "\u0061\u0072\u002dD\u004a": 0x1000, "\u0061\u0072\u002dE\u0047": 0x0c01, "\u0061\u0072\u002dE\u0052": 0x1000, "\u0061\u0072\u002dI\u0051": 0x0801, "\u0061\u0072\u002dI\u004c": 0x1000, "\u0061\u0072\u002dJ\u004f": 0x2C01, "\u0061\u0072\u002dK\u0057": 0x3401, "\u0061\u0072\u002dL\u0042": 0x3001, "\u0061\u0072\u002dL\u0059": 0x1001, "\u0061\u0072\u002dM\u0052": 0x1000, "\u0061\u0072\u002dM\u0041": 0x1801, "\u0061\u0072\u002dO\u004d": 0x2001, "\u0061\u0072\u002dP\u0053": 0x1000, "\u0061\u0072\u002dQ\u0041": 0x4001, "\u0061\u0072\u002dS\u0041": 0x0401, "\u0061\u0072\u002dS\u004f": 0x1000, "\u0061\u0072\u002dS\u0053": 0x1000, "\u0061\u0072\u002dS\u0044": 0x1000, "\u0061\u0072\u002dS\u0059": 0x2801, "\u0061\u0072\u002dT\u004e": 0x1C01, "\u0061\u0072\u002dA\u0045": 0x3801, "\u0061\u0072\u002d\u0030\u0030\u0031": 0x1000, "\u0061\u0072\u002dY\u0045": 0x2401, "\u0068\u0079": 0x002B, "\u0068\u0079\u002dA\u004d": 0x042B, "\u0061\u0073": 0x004D, "\u0061\u0073\u002dI\u004e": 0x044D, "\u0061\u0073\u0074": 0x1000, "\u0061\u0073\u0074\u002d\u0045\u0053": 0x1000, "\u0061\u0073\u0061": 0x1000, "\u0061\u0073\u0061\u002d\u0054\u005a": 0x1000, "\u0061z\u002d\u0043\u0079\u0072\u006c": 0x742C, "\u0061\u007a\u002d\u0043\u0079\u0072\u006c\u002d\u0041\u005a": 0x082C, "\u0061\u007a": 0x002C, "\u0061z\u002d\u004c\u0061\u0074\u006e": 0x782C, "\u0061\u007a\u002d\u004c\u0061\u0074\u006e\u002d\u0041\u005a": 0x042C, "\u006b\u0073\u0066": 0x1000, "\u006b\u0073\u0066\u002d\u0043\u004d": 0x1000, "\u0062\u006d": 0x1000, "\u0062\u006d\u002d\u004c\u0061\u0074\u006e\u002d\u004d\u004c": 0x1000, "\u0062\u006e": 0x0045, "\u0062\u006e\u002dB\u0044": 0x0845, "\u0062\u006e\u002dI\u004e": 0x0445, "\u0062\u0061\u0073": 0x1000, "\u0062\u0061\u0073\u002d\u0043\u004d": 0x1000, "\u0062\u0061": 0x006D, "\u0062\u0061\u002dR\u0055": 0x046D, "\u0065\u0075": 0x002D, "\u0065\u0075\u002dE\u0053": 0x042D, "\u0062\u0065": 0x0023, "\u0062\u0065\u002dB\u0059": 0x0423, "\u0062\u0065\u006d": 0x1000, "\u0062\u0065\u006d\u002d\u005a\u004d": 0x1000, "\u0062\u0065\u007a": 0x1000, "\u0062\u0065\u007a\u002d\u0054\u005a": 0x1000, "\u0062\u0079\u006e": 0x1000, "\u0062\u0079\u006e\u002d\u0045\u0052": 0x1000, "\u0062\u0072\u0078": 0x1000, "\u0062\u0072\u0078\u002d\u0049\u004e": 0x1000, "\u0062s\u002d\u0043\u0072\u0079\u006c": 0x6414, "\u0062\u0073\u002d\u0043\u0079\u0072\u006c\u002d\u0042\u0041": 0x201A, "\u0062s\u002d\u004c\u0061\u0074\u006e": 0x681A, "\u0062\u0073": 0x7814, "\u0062\u0073\u002d\u004c\u0061\u0074\u006e\u002d\u0042\u0041": 0x141A, "\u0062\u0072": 0x007E, "\u0062\u0072\u002dF\u0052": 0x047E, "\u0062\u0067": 0x0002, "\u0062\u0067\u002dB\u0047": 0x0402, "\u006d\u0079": 0x0055, "\u006d\u0079\u002dM\u004d": 0x0455, "\u0063\u0061": 0x0003, "\u0063\u0061\u002dA\u0044": 0x1000, "\u0063\u0061\u002dF\u0052": 0x1000, "\u0063\u0061\u002dI\u0054": 0x1000, "\u0063\u0061\u002dE\u0053": 0x0403, "\u0063\u0065\u0062": 0x1000, "\u0063\u0065\u0062\u002d\u004c\u0061\u0074\u006e": 0x1000, "c\u0065\u0062\u002d\u004c\u0061\u0074\u006e\u002d\u0050\u0048": 0x1000, "t\u007a\u006d\u002d\u0041\u0072\u0061\u0062\u002d\u004d\u0041": 0x045F, "t\u006d\u007a\u002d\u004c\u0061\u0074\u006e\u002d\u004d\u0041": 0x1000, "\u006b\u0075": 0x0092, "\u006bu\u002d\u0041\u0072\u0061\u0062": 0x7c92, "\u006b\u0075\u002d\u0041\u0072\u0061\u0062\u002d\u0049\u0051": 0x0492, "\u0063\u0063\u0070": 0x1000, "\u0063\u0063\u0070\u002d\u0043\u0061\u006b\u006d": 0x1000, "c\u0063\u0070\u002d\u0043\u0061\u006b\u006d\u002d\u0049\u004e": 0x1000, "\u0063\u0065\u002dR\u0055": 0x1000, "\u0063\u0068\u0072": 0x005C, "\u0063\u0068\u0072\u002d\u0043\u0068\u0065\u0072": 0x7c5c, "c\u0068\u0072\u002d\u0043\u0068\u0065\u0072\u002d\u0055\u0053": 0x045C, "\u0063\u0067\u0067": 0x1000, "\u0063\u0067\u0067\u002d\u0055\u0047": 0x1000, "\u007ah\u002d\u0048\u0061\u006e\u0073": 0x0004, "\u007a\u0068": 0x7804, "\u007a\u0068\u002dC\u004e": 0x0804, "\u007a\u0068\u002dS\u0047": 0x1004, "\u007ah\u002d\u0048\u0061\u006e\u0074": 0x7C04, "\u007a\u0068\u002dH\u004b": 0x0C04, "\u007a\u0068\u002dM\u004f": 0x1404, "\u007a\u0068\u002dT\u0057": 0x0404, "\u0063\u0075\u002dR\u0055": 0x1000, "\u0073\u0077\u0063": 0x1000, "\u0073\u0077\u0063\u002d\u0043\u0044": 0x1000, "\u006b\u0077": 0x1000, "\u006b\u0077\u002dG\u0042": 0x1000, "\u0063\u006f": 0x0083, "\u0063\u006f\u002dF\u0052": 0x0483, "\u0068\u0072": 0x001A, "\u0068\u0072\u002dH\u0052": 0x041A, "\u0068\u0072\u002dB\u0041": 0x101A, "\u0063\u0073": 0x0005, "\u0063\u0073\u002dC\u005a": 0x0405, "\u0064\u0061": 0x0006, "\u0064\u0061\u002dD\u004b": 0x0406, "\u0064\u0061\u002dG\u004c": 0x1000, "\u0070\u0072\u0073": 0x008C, "\u0070\u0072\u0073\u002d\u0041\u0046": 0x048C, "\u0064\u0076": 0x0065, "\u0064\u0076\u002dM\u0056": 0x0465, "\u0064\u0075\u0061": 0x1000, "\u0064\u0075\u0061\u002d\u0043\u004d": 0x1000, "\u006e\u006c": 0x0013, "\u006e\u006c\u002dA\u0057": 0x1000, "\u006e\u006c\u002dB\u0045": 0x0813, "\u006e\u006c\u002dB\u0051": 0x1000, "\u006e\u006c\u002dC\u0057": 0x1000, "\u006e\u006c\u002dN\u004c": 0x0413, "\u006e\u006c\u002dS\u0058": 0x1000, "\u006e\u006c\u002dS\u0052": 0x1000, "\u0064\u007a": 0x1000, "\u0064\u007a\u002dB\u0054": 0x0C51, "\u0065\u0062\u0075": 0x1000, "\u0065\u0062\u0075\u002d\u004b\u0045": 0x1000, "\u0065\u006e\u002dA\u0053": 0x1000, "\u0065\u006e\u002dA\u0049": 0x1000, "\u0065\u006e\u002dA\u0047": 0x1000, "\u0065\u006e\u002dA\u0055": 0x0C09, "\u0065\u006e\u002dA\u0054": 0x1000, "\u0065\u006e\u002dB\u0053": 0x1000, "\u0065\u006e\u002dB\u0042": 0x1000, "\u0065\u006e\u002dB\u0045": 0x1000, "\u0065\u006e\u002dB\u005a": 0x2809, "\u0065\u006e\u002dB\u004d": 0x1000, "\u0065\u006e\u002dB\u0057": 0x1000, "\u0065\u006e\u002dI\u004f": 0x1000, "\u0065\u006e\u002dV\u0047": 0x1000, "\u0065\u006e\u002dB\u0049": 0x1000, "\u0065\u006e\u002dC\u004d": 0x1000, "\u0065\u006e\u002dC\u0041": 0x1009, "\u0065\u006e\u002d\u0030\u0032\u0039": 0x2409, "\u0065\u006e\u002dK\u0059": 0x1000, "\u0065\u006e\u002dC\u0058": 0x1000, "\u0065\u006e\u002dC\u0043": 0x1000, "\u0065\u006e\u002dC\u004b": 0x1000, "\u0065\u006e\u002dC\u0059": 0x1000, "\u0065\u006e\u002dD\u004b": 0x1000, "\u0065\u006e\u002dD\u004d": 0x1000, "\u0065\u006e\u002dE\u0052": 0x1000, "\u0065\u006e\u002d\u0031\u0035\u0030": 0x1000, "\u0065\u006e\u002dF\u004b": 0x1000, "\u0065\u006e\u002dF\u0049": 0x1000, "\u0065\u006e\u002dF\u004a": 0x1000, "\u0065\u006e\u002dG\u004d": 0x1000, "\u0065\u006e\u002dD\u0045": 0x1000, "\u0065\u006e\u002dG\u0048": 0x1000, "\u0065\u006e\u002dG\u0049": 0x1000, "\u0065\u006e\u002dG\u0044": 0x1000, "\u0065\u006e\u002dG\u0055": 0x1000, "\u0065\u006e\u002dG\u0047": 0x1000, "\u0065\u006e\u002dG\u0059": 0x1000, "\u0065\u006e\u002dH\u004b": 0x3C09, "\u0065\u006e\u002dI\u004e": 0x4009, "\u0065\u006e\u002dI\u004d": 0x1000, "\u0065\u006e\u002dI\u004c": 0x1000, "\u0065\u006e\u002dJ\u004d": 0x2009, "\u0065\u006e\u002dJ\u0045": 0x1000, "\u0065\u006e\u002dK\u0045": 0x1000, "\u0065\u006e\u002dK\u0049": 0x1000, "\u0065\u006e\u002dL\u0053": 0x1000, "\u0065\u006e\u002dL\u0052": 0x1000, "\u0065\u006e\u002dM\u004f": 0x1000, "\u0065\u006e\u002dM\u0047": 0x1000, "\u0065\u006e\u002dM\u0057": 0x1000, "\u0065\u006e\u002dM\u0059": 0x4409, "\u0065\u006e\u002dM\u0054": 0x1000, "\u0065\u006e\u002dM\u0048": 0x1000, "\u0065\u006e\u002dM\u0055": 0x1000, "\u0065\u006e\u002dF\u004d": 0x1000, "\u0065\u006e\u002dM\u0053": 0x1000, "\u0065\u006e\u002dN\u0041": 0x1000, "\u0065\u006e\u002dN\u0052": 0x1000, "\u0065\u006e\u002dN\u004c": 0x1000, "\u0065\u006e\u002dN\u005a": 0x1409, "\u0065\u006e\u002dN\u0047": 0x1000, "\u0065\u006e\u002dN\u0055": 0x1000, "\u0065\u006e\u002dN\u0046": 0x1000, "\u0065\u006e\u002dM\u0050": 0x1000, "\u0065\u006e\u002dP\u004b": 0x1000, "\u0065\u006e\u002dP\u0057": 0x1000, "\u0065\u006e\u002dP\u0047": 0x1000, "\u0065\u006e\u002dP\u004e": 0x1000, "\u0065\u006e\u002dP\u0052": 0x1000, "\u0065\u006e\u002dP\u0048": 0x3409, "\u0065\u006e\u002dR\u0057": 0x1000, "\u0065\u006e\u002dK\u004e": 0x1000, "\u0065\u006e\u002dL\u0043": 0x1000, "\u0065\u006e\u002dV\u0043": 0x1000, "\u0065\u006e\u002dW\u0053": 0x1000, "\u0065\u006e\u002dS\u0043": 0x1000, "\u0065\u006e\u002dS\u004c": 0x1000, "\u0065\u006e\u002dS\u0047": 0x4809, "\u0065\u006e\u002dS\u0058": 0x1000, "\u0065\u006e\u002dS\u0049": 0x1000, "\u0065\u006e\u002dS\u0042": 0x1000, "\u0065\u006e\u002dZ\u0041": 0x1C09, "\u0065\u006e\u002dS\u0053": 0x1000, "\u0065\u006e\u002dS\u0048": 0x1000, "\u0065\u006e\u002dS\u0044": 0x1000, "\u0065\u006e\u002dS\u005a": 0x1000, "\u0065\u006e\u002dS\u0045": 0x1000, "\u0065\u006e\u002dC\u0048": 0x1000, "\u0065\u006e\u002dT\u005a": 0x1000, "\u0065\u006e\u002dT\u004b": 0x1000, "\u0065\u006e\u002dT\u004f": 0x1000, "\u0065\u006e\u002dT\u0054": 0x2c09, "\u0065\u006e\u002dT\u0043": 0x1000, "\u0065\u006e\u002dT\u0056": 0x1000, "\u0065\u006e\u002dU\u0047": 0x1000, "\u0065\u006e\u002dA\u0045": 0x4C09, "\u0065\u006e\u002dG\u0042": 0x0809, "\u0065\u006e\u002dU\u0053": 0x0409, "\u0065\u006e\u002dU\u004d": 0x1000, "\u0065\u006e\u002dV\u0049": 0x1000, "\u0065\u006e\u002dV\u0055": 0x1000, "\u0065\u006e\u002d\u0030\u0030\u0031": 0x1000, "\u0065\u006e\u002dZ\u004d": 0x1000, "\u0065\u006e\u002dZ\u0057": 0x3009, "\u0065\u006f": 0x1000, "\u0065\u006f\u002d\u0030\u0030\u0031": 0x1000, "\u0065\u0074": 0x0025, "\u0065\u0074\u002dE\u0045": 0x0425, "\u0065\u0065": 0x1000, "\u0065\u0065\u002dG\u0048": 0x1000, "\u0065\u0065\u002dT\u0047": 0x1000, "\u0065\u0077\u006f": 0x1000, "\u0065\u0077\u006f\u002d\u0043\u004d": 0x1000, "\u0066\u006f": 0x0038, "\u0066\u006f\u002dD\u004b": 0x1000, "\u0066\u006f\u002dF\u004f": 0x0438, "\u0066\u0069\u006c": 0x0064, "\u0066\u0069\u006c\u002d\u0050\u0048": 0x0464, "\u0066\u0069": 0x000B, "\u0066\u0069\u002dF\u0049": 0x040B, "\u0066\u0072": 0x000C, "\u0066\u0072\u002dD\u005a": 0x1000, "\u0066\u0072\u002dB\u0045": 0x080C, "\u0066\u0072\u002dB\u004a": 0x1000, "\u0066\u0072\u002dB\u0046": 0x1000, "\u0066\u0072\u002dB\u0049": 0x1000, "\u0066\u0072\u002dC\u004d": 0x2c0C, "\u0066\u0072\u002dC\u0041": 0x0c0C, "\u0066\u0072\u002d\u0030\u0032\u0039": 0x1C0C, "\u0066\u0072\u002dC\u0046": 0x1000, "\u0066\u0072\u002dT\u0044": 0x1000, "\u0066\u0072\u002dK\u004d": 0x1000, "\u0066\u0072\u002dC\u0047": 0x1000, "\u0066\u0072\u002dC\u0044": 0x240C, "\u0066\u0072\u002dC\u0049": 0x300C, "\u0066\u0072\u002dD\u004a": 0x1000, "\u0066\u0072\u002dG\u0051": 0x1000, "\u0066\u0072\u002dF\u0052": 0x040C, "\u0066\u0072\u002dG\u0046": 0x1000, "\u0066\u0072\u002dP\u0046": 0x1000, "\u0066\u0072\u002dG\u0041": 0x1000, "\u0066\u0072\u002dG\u0050": 0x1000, "\u0066\u0072\u002dG\u004e": 0x1000, "\u0066\u0072\u002dH\u0054": 0x3c0C, "\u0066\u0072\u002dL\u0055": 0x140C, "\u0066\u0072\u002dM\u0047": 0x1000, "\u0066\u0072\u002dM\u004c": 0x340C, "\u0066\u0072\u002dM\u0051": 0x1000, "\u0066\u0072\u002dM\u0052": 0x1000, "\u0066\u0072\u002dM\u0055": 0x1000, "\u0066\u0072\u002dY\u0054": 0x1000, "\u0066\u0072\u002dM\u0041": 0x380C, "\u0066\u0072\u002dN\u0043": 0x1000, "\u0066\u0072\u002dN\u0045": 0x1000, "\u0066\u0072\u002dM\u0043": 0x180C, "\u0066\u0072\u002dR\u0045": 0x200C, "\u0066\u0072\u002dR\u0057": 0x1000, "\u0066\u0072\u002dB\u004c": 0x1000, "\u0066\u0072\u002dM\u0046": 0x1000, "\u0066\u0072\u002dP\u004d": 0x1000, "\u0066\u0072\u002dS\u004e": 0x280C, "\u0066\u0072\u002dS\u0043": 0x1000, "\u0066\u0072\u002dC\u0048": 0x100C, "\u0066\u0072\u002dS\u0059": 0x1000, "\u0066\u0072\u002dT\u0047": 0x1000, "\u0066\u0072\u002dT\u004e": 0x1000, "\u0066\u0072\u002dV\u0055": 0x1000, "\u0066\u0072\u002dW\u0046": 0x1000, "\u0066\u0079": 0x0062, "\u0066\u0079\u002dN\u004c": 0x0462, "\u0066\u0075\u0072": 0x1000, "\u0066\u0075\u0072\u002d\u0049\u0054": 0x1000, "\u0066\u0066": 0x0067, "\u0066f\u002d\u004c\u0061\u0074\u006e": 0x7C67, "\u0066\u0066\u002d\u004c\u0061\u0074\u006e\u002d\u0042\u0046": 0x1000, "\u0066\u0066\u002dC\u004d": 0x1000, "\u0066\u0066\u002d\u004c\u0061\u0074\u006e\u002d\u0043\u004d": 0x1000, "\u0066\u0066\u002d\u004c\u0061\u0074\u006e\u002d\u0047\u004d": 0x1000, "\u0066\u0066\u002d\u004c\u0061\u0074\u006e\u002d\u0047\u0048": 0x1000, "\u0066\u0066\u002dG\u004e": 0x1000, "\u0066\u0066\u002d\u004c\u0061\u0074\u006e\u002d\u0047\u004e": 0x1000, "\u0066\u0066\u002d\u004c\u0061\u0074\u006e\u002d\u0047\u0057": 0x1000, "\u0066\u0066\u002d\u004c\u0061\u0074\u006e\u002d\u004c\u0052": 0x1000, "\u0066\u0066\u002dM\u0052": 0x1000, "\u0066\u0066\u002d\u004c\u0061\u0074\u006e\u002d\u004d\u0052": 0x1000, "\u0066\u0066\u002d\u004c\u0061\u0074\u006e\u002d\u004e\u0045": 0x1000, "\u0066\u0066\u002dN\u0047": 0x0467, "\u0066\u0066\u002d\u004c\u0061\u0074\u006e\u002d\u004e\u0047": 0x0467, "\u0066\u0066\u002d\u004c\u0061\u0074\u006e\u002d\u0053\u004e": 0x0867, "\u0066\u0066\u002d\u004c\u0061\u0074\u006e\u002d\u0053\u004c": 0x1000, "\u0067\u006c": 0x0056, "\u0067\u006c\u002dE\u0053": 0x0456, "\u006c\u0067": 0x1000, "\u006c\u0067\u002dU\u0047": 0x1000, "\u006b\u0061": 0x0037, "\u006b\u0061\u002dG\u0045": 0x0437, "\u0064\u0065": 0x0007, "\u0064\u0065\u002dA\u0054": 0x0C07, "\u0064\u0065\u002dB\u0045": 0x1000, "\u0064\u0065\u002dD\u0045": 0x0407, "\u0064\u0065\u002dI\u0054": 0x1000, "\u0064\u0065\u002dL\u0049": 0x1407, "\u0064\u0065\u002dL\u0055": 0x1007, "\u0064\u0065\u002dC\u0048": 0x0807, "\u0065\u006c": 0x0008, "\u0065\u006c\u002dC\u0059": 0x1000, "\u0065\u006c\u002dG\u0052": 0x0408, "\u006b\u006c": 0x006F, "\u006b\u006c\u002dG\u004c": 0x046F, "\u0067\u006e": 0x0074, "\u0067\u006e\u002dP\u0059": 0x0474, "\u0067\u0075": 0x0047, "\u0067\u0075\u002dI\u004e": 0x0447, "\u0067\u0075\u007a": 0x1000, "\u0067\u0075\u007a\u002d\u004b\u0045": 0x1000, "\u0068\u0061": 0x0068, "\u0068a\u002d\u004c\u0061\u0074\u006e": 0x7C68, "\u0068\u0061\u002d\u004c\u0061\u0074\u006e\u002d\u0047\u0048": 0x1000, "\u0068\u0061\u002d\u004c\u0061\u0074\u006e\u002d\u004e\u0045": 0x1000, "\u0068\u0061\u002d\u004c\u0061\u0074\u006e\u002d\u004e\u0047": 0x0468, "\u0068\u0061\u0077": 0x0075, "\u0068\u0061\u0077\u002d\u0055\u0053": 0x0475, "\u0068\u0065": 0x000D, "\u0068\u0065\u002dI\u004c": 0x040D, "\u0068\u0069": 0x0039, "\u0068\u0069\u002dI\u004e": 0x0439, "\u0068\u0075": 0x000E, "\u0068\u0075\u002dH\u0055": 0x040E, "\u0069\u0073": 0x000F, "\u0069\u0073\u002dI\u0053": 0x040F, "\u0069\u0067": 0x0070, "\u0069\u0067\u002dN\u0047": 0x0470, "\u0069\u0064": 0x0021, "\u0069\u0064\u002dI\u0044": 0x0421, "\u0069\u0061": 0x1000, "\u0069\u0061\u002dF\u0052": 0x1000, "\u0069\u0061\u002d\u0030\u0030\u0031": 0x1000, "\u0069\u0075": 0x005D, "\u0069u\u002d\u004c\u0061\u0074\u006e": 0x7C5D, "\u0069\u0075\u002d\u004c\u0061\u0074\u006e\u002d\u0043\u0041": 0x085D, "\u0069u\u002d\u0043\u0061\u006e\u0073": 0x785D, "\u0067\u0061": 0x003C, "\u0067\u0061\u002dI\u0045": 0x083C, "\u0069\u0074": 0x0010, "\u0069\u0074\u002dI\u0054": 0x0410, "\u0069\u0074\u002dS\u004d": 0x1000, "\u0069\u0074\u002dC\u0048": 0x0810, "\u0069\u0074\u002dV\u0041": 0x1000, "\u006a\u0061": 0x0011, "\u006a\u0061\u002dJ\u0050": 0x0411, "\u006a\u0076": 0x1000, "\u006av\u002d\u004c\u0061\u0074\u006e": 0x1000, "\u006a\u0076\u002d\u004c\u0061\u0074\u006e\u002d\u0049\u0044": 0x1000, "\u0064\u0079\u006f": 0x1000, "\u0064\u0079\u006f\u002d\u0053\u004e": 0x1000, "\u006b\u0065\u0061": 0x1000, "\u006b\u0065\u0061\u002d\u0043\u0056": 0x1000, "\u006b\u0061\u0062": 0x1000, "\u006b\u0061\u0062\u002d\u0044\u005a": 0x1000, "\u006b\u006b\u006a": 0x1000, "\u006b\u006b\u006a\u002d\u0043\u004d": 0x1000, "\u006b\u006c\u006e": 0x1000, "\u006b\u006c\u006e\u002d\u004b\u0045": 0x1000, "\u006b\u0061\u006d": 0x1000, "\u006b\u0061\u006d\u002d\u004b\u0045": 0x1000, "\u006b\u006e": 0x004B, "\u006b\u006e\u002dI\u004e": 0x044B, "\u006b\u0072\u002d\u004c\u0061\u0074\u006e\u002d\u004e\u0047": 0x0471, "\u006b\u0073": 0x0060, "\u006bs\u002d\u0041\u0072\u0061\u0062": 0x0460, "\u006b\u0073\u002d\u0041\u0072\u0061\u0062\u002d\u0049\u004e": 0x1000, "\u006b\u0073\u002d\u0044\u0065\u0076\u0061\u002d\u0049\u004e": 0x0860, "\u006b\u006b": 0x003F, "\u006b\u006b\u002dK\u005a": 0x043F, "\u006b\u006d": 0x0053, "\u006b\u006d\u002dK\u0048": 0x0453, "\u0071\u0075\u0063": 0x0086, "q\u0075\u0063\u002d\u004c\u0061\u0074\u006e\u002d\u0047\u0054": 0x0486, "\u006b\u0069": 0x1000, "\u006b\u0069\u002dK\u0045": 0x1000, "\u0072\u0077": 0x0087, "\u0072\u0077\u002dR\u0057": 0x0487, "\u0073\u0077\u002dK\u0045": 0x0441, "\u0073\u0077\u002dT\u005a": 0x1000, "\u0073\u0077\u002dU\u0047": 0x1000, "\u006b\u006f\u006b": 0x0057, "\u006b\u006f\u006b\u002d\u0049\u004e": 0x0457, "\u006b\u006f": 0x0012, "\u006b\u006f\u002dK\u0052": 0x0412, "\u006b\u006f\u002dK\u0050": 0x1000, "\u006b\u0068\u0071": 0x1000, "\u006b\u0068\u0071\u002d\u004d\u004c": 0x1000, "\u0073\u0065\u0073": 0x1000, "\u0073\u0065\u0073\u002d\u004d\u004c": 0x1000, "\u006e\u006d\u0067": 0x1000, "\u006e\u006d\u0067\u002d\u0043\u004d": 0x1000, "\u006b\u0079": 0x0040, "\u006b\u0079\u002dK\u0047": 0x0440, "\u006b\u0075\u002d\u0041\u0072\u0061\u0062\u002d\u0049\u0052": 0x1000, "\u006c\u006b\u0074": 0x1000, "\u006c\u006b\u0074\u002d\u0055\u0053": 0x1000, "\u006c\u0061\u0067": 0x1000, "\u006c\u0061\u0067\u002d\u0054\u005a": 0x1000, "\u006c\u006f": 0x0054, "\u006c\u006f\u002dL\u0041": 0x0454, "\u006c\u0061\u002dV\u0041": 0x0476, "\u006c\u0076": 0x0026, "\u006c\u0076\u002dL\u0056": 0x0426, "\u006c\u006e": 0x1000, "\u006c\u006e\u002dA\u004f": 0x1000, "\u006c\u006e\u002dC\u0046": 0x1000, "\u006c\u006e\u002dC\u0047": 0x1000, "\u006c\u006e\u002dC\u0044": 0x1000, "\u006c\u0074": 0x0027, "\u006c\u0074\u002dL\u0054": 0x0427, "\u006e\u0064\u0073": 0x1000, "\u006e\u0064\u0073\u002d\u0044\u0045": 0x1000, "\u006e\u0064\u0073\u002d\u004e\u004c": 0x1000, "\u0064\u0073\u0062": 0x7C2E, "\u0064\u0073\u0062\u002d\u0044\u0045": 0x082E, "\u006c\u0075": 0x1000, "\u006c\u0075\u002dC\u0044": 0x1000, "\u006c\u0075\u006f": 0x1000, "\u006c\u0075\u006f\u002d\u004b\u0045": 0x1000, "\u006c\u0062": 0x006E, "\u006c\u0062\u002dL\u0055": 0x046E, "\u006c\u0075\u0079": 0x1000, "\u006c\u0075\u0079\u002d\u004b\u0045": 0x1000, "\u006d\u006b": 0x002F, "\u006d\u006b\u002dM\u004b": 0x042F, "\u006a\u006d\u0063": 0x1000, "\u006a\u006d\u0063\u002d\u0054\u005a": 0x1000, "\u006d\u0067\u0068": 0x1000, "\u006d\u0067\u0068\u002d\u004d\u005a": 0x1000, "\u006b\u0064\u0065": 0x1000, "\u006b\u0064\u0065\u002d\u0054\u005a": 0x1000, "\u006d\u0067": 0x1000, "\u006d\u0067\u002dM\u0047": 0x1000, "\u006d\u0073": 0x003E, "\u006d\u0073\u002dB\u004e": 0x083E, "\u006d\u0073\u002dM\u0059": 0x043E, "\u006d\u006c": 0x004C, "\u006d\u006c\u002dI\u004e": 0x044C, "\u006d\u0074": 0x003A, "\u006d\u0074\u002dM\u0054": 0x043A, "\u0067\u0076": 0x1000, "\u0067\u0076\u002dI\u004d": 0x1000, "\u006d\u0069": 0x0081, "\u006d\u0069\u002dN\u005a": 0x0481, "\u0061\u0072\u006e": 0x007A, "\u0061\u0072\u006e\u002d\u0043\u004c": 0x047A, "\u006d\u0072": 0x004E, "\u006d\u0072\u002dI\u004e": 0x044E, "\u006d\u0061\u0073": 0x1000, "\u006d\u0061\u0073\u002d\u004b\u0045": 0x1000, "\u006d\u0061\u0073\u002d\u0054\u005a": 0x1000, "\u006d\u007a\u006e\u002d\u0049\u0052": 0x1000, "\u006d\u0065\u0072": 0x1000, "\u006d\u0065\u0072\u002d\u004b\u0045": 0x1000, "\u006d\u0067\u006f": 0x1000, "\u006d\u0067\u006f\u002d\u0043\u004d": 0x1000, "\u006d\u006f\u0068": 0x007C, "\u006d\u006f\u0068\u002d\u0043\u0041": 0x047C, "\u006d\u006e": 0x0050, "\u006dn\u002d\u0043\u0079\u0072\u006c": 0x7850, "\u006d\u006e\u002dM\u004e": 0x0450, "\u006dn\u002d\u004d\u006f\u006e\u0067": 0x7C50, "\u006d\u006e\u002d\u004d\u006f\u006e\u0067\u002d\u0043\u004e": 0x0850, "\u006d\u006e\u002d\u004d\u006f\u006e\u0067\u002d\u004d\u004e": 0x0C50, "\u006d\u0066\u0065": 0x1000, "\u006d\u0066\u0065\u002d\u004d\u0055": 0x1000, "\u006d\u0075\u0061": 0x1000, "\u006d\u0075\u0061\u002d\u0043\u004d": 0x1000, "\u006e\u0071\u006f": 0x1000, "\u006e\u0071\u006f\u002d\u0047\u004e": 0x1000, "\u006e\u0061\u0071": 0x1000, "\u006e\u0061\u0071\u002d\u004e\u0041": 0x1000, "\u006e\u0065": 0x0061, "\u006e\u0065\u002dI\u004e": 0x0861, "\u006e\u0065\u002dN\u0050": 0x0461, "\u006e\u006e\u0068": 0x1000, "\u006e\u006e\u0068\u002d\u0043\u004d": 0x1000, "\u006a\u0067\u006f": 0x1000, "\u006a\u0067\u006f\u002d\u0043\u004d": 0x1000, "\u006c\u0072\u0063\u002d\u0049\u0051": 0x1000, "\u006c\u0072\u0063\u002d\u0049\u0052": 0x1000, "\u006e\u0064": 0x1000, "\u006e\u0064\u002dZ\u0057": 0x1000, "\u006e\u006f": 0x0014, "\u006e\u0062": 0x7C14, "\u006e\u0062\u002dN\u004f": 0x0414, "\u006e\u006e": 0x7814, "\u006e\u006e\u002dN\u004f": 0x0814, "\u006e\u0062\u002dS\u004a": 0x1000, "\u006e\u0075\u0073": 0x1000, "\u006e\u0075\u0073\u002d\u0053\u0044": 0x1000, "\u006e\u0075\u0073\u002d\u0053\u0053": 0x1000, "\u006e\u0079\u006e": 0x1000, "\u006e\u0079\u006e\u002d\u0055\u0047": 0x1000, "\u006f\u0063": 0x0082, "\u006f\u0063\u002dF\u0052": 0x0482, "\u006f\u0072": 0x0048, "\u006f\u0072\u002dI\u004e": 0x0448, "\u006f\u006d": 0x0072, "\u006f\u006d\u002dE\u0054": 0x0472, "\u006f\u006d\u002dK\u0045": 0x1000, "\u006f\u0073": 0x1000, "\u006f\u0073\u002dG\u0045": 0x1000, "\u006f\u0073\u002dR\u0055": 0x1000, "\u0070\u0073": 0x0063, "\u0070\u0073\u002dA\u0046": 0x0463, "\u0070\u0073\u002dP\u004b": 0x1000, "\u0066\u0061": 0x0029, "\u0066\u0061\u002dA\u0046": 0x1000, "\u0066\u0061\u002dI\u0052": 0x0429, "\u0070\u006c": 0x0015, "\u0070\u006c\u002dP\u004c": 0x0415, "\u0070\u0074": 0x0016, "\u0070\u0074\u002dA\u004f": 0x1000, "\u0070\u0074\u002dB\u0052": 0x0416, "\u0070\u0074\u002dC\u0056": 0x1000, "\u0070\u0074\u002dG\u0051": 0x1000, "\u0070\u0074\u002dG\u0057": 0x1000, "\u0070\u0074\u002dL\u0055": 0x1000, "\u0070\u0074\u002dM\u004f": 0x1000, "\u0070\u0074\u002dM\u005a": 0x1000, "\u0070\u0074\u002dP\u0054": 0x0816, "\u0070\u0074\u002dS\u0054": 0x1000, "\u0070\u0074\u002dC\u0048": 0x1000, "\u0070\u0074\u002dT\u004c": 0x1000, "\u0070r\u0067\u002d\u0030\u0030\u0031": 0x1000, "\u0071p\u0073\u002d\u0070\u006c\u006f\u0063a": 0x05FE, "\u0071\u0070\u0073\u002d\u0070\u006c\u006f\u0063": 0x0501, "\u0071p\u0073\u002d\u0070\u006c\u006f\u0063m": 0x09FF, "\u0070\u0061": 0x0046, "\u0070a\u002d\u0041\u0072\u0061\u0062": 0x7C46, "\u0070\u0061\u002dI\u004e": 0x0446, "\u0070\u0061\u002d\u0041\u0072\u0061\u0062\u002d\u0050\u004b": 0x0846, "\u0071\u0075\u007a": 0x006B, "\u0071\u0075\u007a\u002d\u0042\u004f": 0x046B, "\u0071\u0075\u007a\u002d\u0045\u0043": 0x086B, "\u0071\u0075\u007a\u002d\u0050\u0045": 0x0C6B, "\u006b\u0073\u0068": 0x1000, "\u006b\u0073\u0068\u002d\u0044\u0045": 0x1000, "\u0072\u006f": 0x0018, "\u0072\u006f\u002dM\u0044": 0x0818, "\u0072\u006f\u002dR\u004f": 0x0418, "\u0072\u006d": 0x0017, "\u0072\u006d\u002dC\u0048": 0x0417, "\u0072\u006f\u0066": 0x1000, "\u0072\u006f\u0066\u002d\u0054\u005a": 0x1000, "\u0072\u006e": 0x1000, "\u0072\u006e\u002dB\u0049": 0x1000, "\u0072\u0075\u002dB\u0059": 0x1000, "\u0072\u0075\u002dK\u005a": 0x1000, "\u0072\u0075\u002dK\u0047": 0x1000, "\u0072\u0075\u002dM\u0044": 0x0819, "\u0072\u0075\u002dR\u0055": 0x0419, "\u0072\u0075\u002dU\u0041": 0x1000, "\u0072\u0077\u006b": 0x1000, "\u0072\u0077\u006b\u002d\u0054\u005a": 0x1000, "\u0073\u0073\u0079": 0x1000, "\u0073\u0073\u0079\u002d\u0045\u0052": 0x1000, "\u0073\u0061\u0068": 0x0085, "\u0073\u0061\u0068\u002d\u0052\u0055": 0x0485, "\u0073\u0061\u0071": 0x1000, "\u0073\u0061\u0071\u002d\u004b\u0045": 0x1000, "\u0073\u006d\u006e": 0x703B, "\u0073\u006d\u006e\u002d\u0046\u0049": 0x243B, "\u0073\u006d\u006a": 0x7C3B, "\u0073\u006d\u006a\u002d\u004e\u004f": 0x103B, "\u0073\u0065": 0x003B, "\u0073\u0065\u002dF\u0049": 0x0C3B, "\u0073\u0065\u002dN\u004f": 0x043B, "\u0073\u0065\u002dS\u0045": 0x083B, "\u0073\u006d\u0073": 0x743B, "\u0073\u006d\u0073\u002d\u0046\u0049": 0x203B, "\u0073\u006d\u0061": 0x783B, "\u0073\u006d\u0061\u002d\u004e\u004f": 0x183B, "\u0073\u006d\u0061\u002d\u0053\u0045": 0x1C3B, "\u0073\u0067": 0x1000, "\u0073\u0067\u002dC\u0046": 0x1000, "\u0073\u0062\u0070": 0x1000, "\u0073\u0062\u0070\u002d\u0054\u005a": 0x1000, "\u0073\u0061": 0x004F, "\u0073\u0061\u002dI\u004e": 0x044F, "\u0067\u0064": 0x0091, "\u0067\u0064\u002dG\u0042": 0x0491, "\u0073\u0065\u0068": 0x1000, "\u0073\u0065\u0068\u002d\u004d\u005a": 0x1000, "\u0073r\u002d\u0043\u0079\u0072\u006c": 0x6C1A, "\u0073\u0072\u002d\u0043\u0079\u0072\u006c\u002d\u0042\u0041": 0x1C1A, "\u0073\u0072\u002d\u0043\u0079\u0072\u006c\u002d\u004d\u0045": 0x301A, "\u0073\u0072\u002d\u0043\u0079\u0072\u006c\u002d\u0052\u0053": 0x281A, "\u0073\u0072\u002d\u0043\u0079\u0072\u006c\u002d\u0043\u0053": 0x0C1A, "\u0073r\u002d\u004c\u0061\u0074\u006e": 0x701A, "\u0073\u0072": 0x7C1A, "\u0073\u0072\u002d\u004c\u0061\u0074\u006e\u002d\u0042\u0041": 0x181A, "\u0073\u0072\u002d\u004c\u0061\u0074\u006e\u002d\u004d\u0045": 0x2c1A, "\u0073\u0072\u002d\u004c\u0061\u0074\u006e\u002d\u0052\u0053": 0x241A, "\u0073\u0072\u002d\u004c\u0061\u0074\u006e\u002d\u0043\u0053": 0x081A, "\u006e\u0073\u006f": 0x006C, "\u006e\u0073\u006f\u002d\u005a\u0041": 0x046C, "\u0074\u006e": 0x0032, "\u0074\u006e\u002dB\u0057": 0x0832, "\u0074\u006e\u002dZ\u0041": 0x0432, "\u006b\u0073\u0062": 0x1000, "\u006b\u0073\u0062\u002d\u0054\u005a": 0x1000, "\u0073\u006e": 0x1000, "\u0073n\u002d\u004c\u0061\u0074\u006e": 0x1000, "\u0073\u006e\u002d\u004c\u0061\u0074\u006e\u002d\u005a\u0057": 0x1000, "\u0073\u0064": 0x0059, "\u0073d\u002d\u0041\u0072\u0061\u0062": 0x7C59, "\u0073\u0064\u002d\u0041\u0072\u0061\u0062\u002d\u0050\u004b": 0x0859, "\u0073\u0069": 0x005B, "\u0073\u0069\u002dL\u004b": 0x045B, "\u0073\u006b": 0x001B, "\u0073\u006b\u002dS\u004b": 0x041B, "\u0073\u006c": 0x0024, "\u0073\u006c\u002dS\u0049": 0x0424, "\u0078\u006f\u0067": 0x1000, "\u0078\u006f\u0067\u002d\u0055\u0047": 0x1000, "\u0073\u006f": 0x0077, "\u0073\u006f\u002dD\u004a": 0x1000, "\u0073\u006f\u002dE\u0054": 0x1000, "\u0073\u006f\u002dK\u0045": 0x1000, "\u0073\u006f\u002dS\u004f": 0x0477, "\u0073\u0074": 0x0030, "\u0073\u0074\u002dZ\u0041": 0x0430, "\u006e\u0072": 0x1000, "\u006e\u0072\u002dZ\u0041": 0x1000, "\u0073\u0074\u002dL\u0053": 0x1000, "\u0065\u0073": 0x000A, "\u0065\u0073\u002dA\u0052": 0x2C0A, "\u0065\u0073\u002dB\u005a": 0x1000, "\u0065\u0073\u002dV\u0045": 0x200A, "\u0065\u0073\u002dB\u004f": 0x400A, "\u0065\u0073\u002dB\u0052": 0x1000, "\u0065\u0073\u002dC\u004c": 0x340A, "\u0065\u0073\u002dC\u004f": 0x240A, "\u0065\u0073\u002dC\u0052": 0x140A, "\u0065\u0073\u002dC\u0055": 0x5c0A, "\u0065\u0073\u002dD\u004f": 0x1c0A, "\u0065\u0073\u002dE\u0043": 0x300A, "\u0065\u0073\u002dS\u0056": 0x440A, "\u0065\u0073\u002dG\u0051": 0x1000, "\u0065\u0073\u002dG\u0054": 0x100A, "\u0065\u0073\u002dH\u004e": 0x480A, "\u0065\u0073\u002d\u0034\u0031\u0039": 0x580A, "\u0065\u0073\u002dM\u0058": 0x080A, "\u0065\u0073\u002dN\u0049": 0x4C0A, "\u0065\u0073\u002dP\u0041": 0x180A, "\u0065\u0073\u002dP\u0059": 0x3C0A, "\u0065\u0073\u002dP\u0045": 0x280A, "\u0065\u0073\u002dP\u0048": 0x1000, "\u0065\u0073\u002dP\u0052": 0x500A, "\u0065\u0073\u002dE\u0053\u005f\u0074\u0072\u0061\u0064\u006e\u006c": 0x040A, "\u0065\u0073\u002dE\u0053": 0x0c0A, "\u0065\u0073\u002dU\u0053": 0x540A, "\u0065\u0073\u002dU\u0059": 0x390A, "\u007a\u0067\u0068": 0x1000, "z\u0067\u0068\u002d\u0054\u0066\u006e\u0067\u002d\u004d\u0041": 0x1000, "\u007a\u0067\u0068\u002d\u0054\u0066\u006e\u0067": 0x1000, "\u0073\u0073": 0x1000, "\u0073\u0073\u002dZ\u0041": 0x1000, "\u0073\u0073\u002dS\u005a": 0x1000, "\u0073\u0076": 0x001D, "\u0073\u0076\u002dA\u0058": 0x1000, "\u0073\u0076\u002dF\u0049": 0x081D, "\u0073\u0076\u002dS\u0045": 0x041D, "\u0073\u0079\u0072": 0x005A, "\u0073\u0079\u0072\u002d\u0053\u0059": 0x045A, "\u0073\u0068\u0069": 0x1000, "\u0073\u0068\u0069\u002d\u0054\u0066\u006e\u0067": 0x1000, "s\u0068\u0069\u002d\u0054\u0066\u006e\u0067\u002d\u004d\u0041": 0x1000, "\u0073\u0068\u0069\u002d\u004c\u0061\u0074\u006e": 0x1000, "s\u0068\u0069\u002d\u004c\u0061\u0074\u006e\u002d\u004d\u0041": 0x1000, "\u0064\u0061\u0076": 0x1000, "\u0064\u0061\u0076\u002d\u004b\u0045": 0x1000, "\u0074\u0067": 0x0028, "\u0074g\u002d\u0043\u0079\u0072\u006c": 0x7C28, "\u0074\u0067\u002d\u0043\u0079\u0072\u006c\u002d\u0054\u006a": 0x0428, "\u0074\u007a\u006d": 0x005F, "\u0074\u007a\u006d\u002d\u004c\u0061\u0074\u006e": 0x7C5F, "t\u007a\u006d\u002d\u004c\u0061\u0074\u006e\u002d\u0044\u005a": 0x085F, "\u0074\u0061": 0x0049, "\u0074\u0061\u002dI\u004e": 0x0449, "\u0074\u0061\u002dM\u0059": 0x1000, "\u0074\u0061\u002dS\u0047": 0x1000, "\u0074\u0061\u002dL\u004b": 0x0849, "\u0074\u0077\u0071": 0x1000, "\u0074\u0077\u0071\u002d\u004e\u0045": 0x1000, "\u0074\u0074": 0x0044, "\u0074\u0074\u002dR\u0055": 0x0444, "\u0074\u0065": 0x004A, "\u0074\u0065\u002dI\u004e": 0x044A, "\u0074\u0065\u006f": 0x1000, "\u0074\u0065\u006f\u002d\u004b\u0045": 0x1000, "\u0074\u0065\u006f\u002d\u0055\u0047": 0x1000, "\u0074\u0068": 0x001E, "\u0074\u0068\u002dT\u0048": 0x041E, "\u0062\u006f": 0x0051, "\u0062\u006f\u002dI\u004e": 0x1000, "\u0062\u006f\u002dC\u004e": 0x0451, "\u0074\u0069\u0067": 0x1000, "\u0074\u0069\u0067\u002d\u0045\u0052": 0x1000, "\u0074\u0069": 0x0073, "\u0074\u0069\u002dE\u0052": 0x0873, "\u0074\u0069\u002dE\u0054": 0x0473, "\u0074\u006f": 0x1000, "\u0074\u006f\u002dT\u004f": 0x1000, "\u0074\u0073": 0x0031, "\u0074\u0073\u002dZ\u0041": 0x0431, "\u0074\u0072": 0x001F, "\u0074\u0072\u002dC\u0059": 0x1000, "\u0074\u0072\u002dT\u0052": 0x041F, "\u0074\u006b": 0x0042, "\u0074\u006b\u002dT\u004d": 0x0442, "\u0075\u006b": 0x0022, "\u0075\u006b\u002dU\u0041": 0x0422, "\u0068\u0073\u0062": 0x002E, "\u0068\u0073\u0062\u002d\u0044\u0045": 0x042E, "\u0075\u0072": 0x0020, "\u0075\u0072\u002dI\u004e": 0x0820, "\u0075\u0067": 0x0080, "\u0075\u0067\u002dC\u004e": 0x0480, "\u0075z\u002d\u0041\u0072\u0061\u0062": 0x1000, "\u0075\u007a\u002d\u0041\u0072\u0061\u0062\u002d\u0041\u0046": 0x1000, "\u0075z\u002d\u0043\u0079\u0072\u006c": 0x7843, "\u0075\u007a\u002d\u0043\u0079\u0072\u006c\u002d\u0055\u005a": 0x0843, "\u0075\u007a": 0x0043, "\u0075z\u002d\u004c\u0061\u0074\u006e": 0x7C43, "\u0075\u007a\u002d\u004c\u0061\u0074\u006e\u002d\u0055\u005a": 0x0443, "\u0076\u0061\u0069": 0x1000, "\u0076\u0061\u0069\u002d\u0056\u0061\u0069\u0069": 0x1000, "v\u0061\u0069\u002d\u0056\u0061\u0069\u0069\u002d\u004c\u0052": 0x1000, "v\u0061\u0069\u002d\u004c\u0061\u0074\u006e\u002d\u004c\u0052": 0x1000, "\u0076\u0061\u0069\u002d\u004c\u0061\u0074\u006e": 0x1000, "\u0063\u0061\u002d\u0045\u0053\u002d\u0076\u0061\u006ce\u006e\u0063\u0069\u0061": 0x0803, "\u0076\u0065": 0x0033, "\u0076\u0065\u002dZ\u0041": 0x0433, "\u0076\u0069": 0x002A, "\u0076\u0069\u002dV\u004e": 0x042A, "\u0076\u006f": 0x1000, "\u0076\u006f\u002d\u0030\u0030\u0031": 0x1000, "\u0076\u0075\u006e": 0x1000, "\u0076\u0075\u006e\u002d\u0054\u005a": 0x1000, "\u0077\u0061\u0065": 0x1000, "\u0077\u0061\u0065\u002d\u0043\u0048": 0x1000, "\u0063\u0079": 0x0052, "\u0063\u0079\u002dG\u0042": 0x0452, "\u0077\u0061\u006c": 0x1000, "\u0077\u0061\u006c\u002d\u0045\u0054": 0x1000, "\u0077\u006f": 0x0088, "\u0077\u006f\u002dS\u004e": 0x0488, "\u0078\u0068": 0x0034, "\u0078\u0068\u002dZ\u0041": 0x0434, "\u0079\u0061\u0076": 0x1000, "\u0079\u0061\u0076\u002d\u0043\u004d": 0x1000, "\u0069\u0069": 0x0078, "\u0069\u0069\u002dC\u004e": 0x0478, "\u0079\u0069\u002d\u0030\u0030\u0031": 0x043D, "\u0079\u006f": 0x006A, "\u0079\u006f\u002dB\u004a": 0x1000, "\u0079\u006f\u002dN\u0047": 0x046A, "\u0064\u006a\u0065": 0x1000, "\u0064\u006a\u0065\u002d\u004e\u0045": 0x1000, "\u007a\u0075": 0x0035, "\u007a\u0075\u006c\u0075": 0x0435}

func (_cdcd *convertContext) addAbsoluteEGPC(_gbe []*_aad.EG_PContent, _ged *_aad.CT_PPr) bool {
	_daee := len(_gbe)
	for _, _aba := range _gbe {
		for _, _aeec := range _aba.PContentChoice.FldSimple {
			if _aeec != nil {
				_cdcd.addAbsoluteEGPC(_aeec.EG_PContent, _ged)
			}
		}
		if _ddee := _aba.PContentChoice.Hyperlink; _ddee != nil {
			_cdcd._bgaa = _ddee
			_cdcd.addAbsoluteCRC(_ddee.PContentChoice.EG_ContentRunContent, _ged)
		}
		_cdcd._bgaa = nil
		if _cdcd.addAbsoluteCRC(_aba.PContentChoice.EG_ContentRunContent, _ged) {
			if _daee > 1 {
				_cdcd.moveCurrentParagraphToNewPage()
				continue
			} else {
				return true
			}
		}
		_daee--
	}
	return false
}

func _gcff(_bbga, _bgg string, _dbf, _gcfd, _cbgg bool) []*symbol {
	_ebd := []*symbol{}
	for _, _adag := range _bbga {
		_edbec := &symbol{_gfb: string(_adag), _dfg: _dbf, _fc: _gcfd, _ffc: _bgg, _cage: _cbgg}
		_ebd = append(_ebd, _edbec)
	}
	return _ebd
}

func (_dgbb *convertContext) isKnownField() bool {
	_fgcfa := ""
	for _, _gbdf := range _dgbb._bcgdg._ee {
		_fgcfa += _gbdf._gfb
	}
	return _c.Contains(_fgcfa, _bc.FieldNumberOfPages) || _c.Contains(_fgcfa, _bc.FieldCurrentPage)
}

func _edgc(_bgde *_aad.CT_OnOff) bool {
	if _bgde != nil {
		if _dgfac := _bgde.ValAttr; _dgfac != nil {
			if _gebd := _dgfac.Bool; _gebd != nil {
				return *_gebd
			}
			return _dgfac.ST_OnOff1 == _ede.ST_OnOff1On
		}
		return true
	}
	return false
}

var _bcba = _fcdf(2.5)

func (_dfbbc *convertContext) addCurrentWordToParagraph() {
	for {
		_ccbd := _dfbbc._bdgcc._gbc
		_cfac := _ccbd + _dfbbc._bcgdg._cbg
		if _cfac > _dfbbc._bdgcc._deb {
			if len(_dfbbc._bcgdg._ee) == 1 && _dfbbc._bcgdg._ee[0]._bbaa != nil {
				break
			}
			_dfbbc.newLine()
		}
		_bbcc := _dfbbc._befb._cd + _dfbbc._bdgcc._egf
		_feafe := _bbcc + _dfbbc._bdgcc._eaf
		_bcag := false
		_dece := append(_dfbbc._eeabe._cag, _dfbbc._befb._baa...)
		for _, _abbb := range _dece {
			_faec := _abbb._ccbg
			_fead := (_ccbd > _faec.Left && _ccbd < _faec.Right) || (_cfac > _faec.Left && _cfac < _faec.Right) || (_ccbd < _faec.Left && _cfac > _faec.Right)
			_bbcf := (_bbcc > _faec.Top && _bbcc < _faec.Bottom) || (_feafe > _faec.Top && _feafe < _faec.Bottom) || (_bbcc < _faec.Top && _feafe > _faec.Bottom)
			if _abbb._cf.WrapSquare != nil && _fead && _bbcf {
				_bcag = true
				if _dfbbc._bdgcc._gbc < _faec.Right {
					_dfbbc._babd._dff = _faec.Left
					_dfbbc._bdgcc._gbc = _faec.Right
					_dfbbc.newSpan()
				}
			}
			if _abbb._cf.WrapTopAndBottom != nil && _bbcf {
				_bcag = true
				_dfbbc._befb._cd = _faec.Bottom
			}
		}
		if !_bcag {
			break
		}
	}
	if !_dfbbc._bcgdg._gea || len(_dfbbc._babd._adf) > 0 {
		_dfbbc._bcgdg._gfd = _dfbbc._bdgcc._gbc
		_dfbbc._babd._adf = append(_dfbbc._babd._adf, _dfbbc._bcgdg)
		_dfbbc._bdgcc._gbc += _dfbbc._bcgdg._cbg
		if _dfbbc.shouldApplyContextualSpacing(_dfbbc._ecdc) && _dfbbc._befb._bba.Top > 0 {
			_dfbbc.adjustHeights(_dfbbc._befb._bba.Top)
		} else {
			for _, _dddf := range _dfbbc._bcgdg._ee {
				_dfbbc.adjustHeights(_dddf._cde)
			}
		}
	}
}

func (_cdce *convertContext) addTextSymbol(_dfec *symbol) {
	_bfa := _ce.New()
	_bdgc := _bfa.NewStyledParagraph()
	_bdgc.SetMargins(0, 0, 0, 0)
	_bcgbf := _dfec._gfb
	if _dfec._fad {
		_bcgbf = ""
	}
	_bbd := _bdgc.Append(_bcgbf)
	_cfag := 0.0
	if _dfec._fge != nil {
		_bbd.Style = *_dfec._fge
		if _dfec._fge.CharSpacing != 0 {
			_cfag = _dfec._fge.CharSpacing
		}
	}
	if _dfec._fgef == nil && _dfec._bbaa == nil {
		_dfec._cde = _bdgc.Height() * _ccc
		_dfec._cba = _bdgc.Height()
	}
	if _dfec._gba == 0 && !_dfec._fad {
		_dfec._gba = _bdgc.Width() + _cfag
	}
	if _dfec._cde < _cdce._befb._acf {
		_dfec._cde = _cdce._befb._acf
	}
	if len(_cdce._bcgdg._ee) > 0 {
		_eecfc := _cdce._bcgdg._ee[len(_cdce._bcgdg._ee)-1]._gfb
		if _fg.IsNoSpaceLanguage(_eecfc) || (_eecfc == "\u0020") != (_dfec._gfb == "\u0020") {
			_cdce.addCurrentWordToParagraph()
			_cdce.newWord()
		}
	}
	_cdce._bcgdg._ee = append(_cdce._bcgdg._ee, _dfec)
	_dfec._fa = _cdce._bcgdg._cbg
	_cdce._bcgdg._cbg += _dfec._gba
	if _dfec._gfb != "\u0020" {
		_cdce._bcgdg._gea = false
	}
	if _dfec._gfb == "\u000d" {
		_cdce.adjustHeights(_dfec._cde * 1.13)
		_cdce.adjustHeights(_dfec._cde)
	}
}

func (_ebcec *convertContext) getSectPrHeaderAndFooterRef(_cada *_aad.CT_SectPr, _fabf int) ([]*headerFooterRef, []*headerFooterRef) {
	if len(_cada.EG_HdrFtrReferences) < 1 && _cada.PgSz == nil {
		_cbfag := &headerFooterRef{_cecfc: false, _bbaf: false, _edgf: _fabf}
		return []*headerFooterRef{_cbfag}, []*headerFooterRef{_cbfag}
	}
	var (
		_gbade []*headerFooterRef
		_dbbc  []*headerFooterRef
	)
	for _, _adceg := range _cada.EG_HdrFtrReferences {
		if _badcg := _adceg.HdrFtrReferencesChoice.HeaderReference; _badcg != nil {
			_dddcg := &headerFooterRef{_bbaf: true, _edegd: _badcg.IdAttr, _cffc: _badcg.TypeAttr, _eafgg: _ebcec._dbgac[len(_ebcec._dbgac)-1]._edgf, _edgf: _fabf}
			_gbade = append(_gbade, _dddcg)
		} else {
			_baac := &headerFooterRef{_bbaf: false, _cecfc: false, _edgf: _fabf}
			_gbade = append(_gbade, _baac)
		}
		if _agdde := _adceg.HdrFtrReferencesChoice.FooterReference; _agdde != nil {
			_eegb := &headerFooterRef{_cecfc: true, _edegd: _agdde.IdAttr, _cffc: _agdde.TypeAttr, _eafgg: _ebcec._dfgfe[len(_ebcec._dfgfe)-1]._edgf, _edgf: _fabf}
			_dbbc = append(_dbbc, _eegb)
		} else {
			_ccda := &headerFooterRef{_cecfc: false, _bbaf: false, _edgf: _fabf}
			_dbbc = append(_dbbc, _ccda)
		}
	}
	return _gbade, _dbbc
}

type romanMatch struct {
	_fdbec int
	_ggde  string
}

func _efddc(_fgdbb string) bool {
	for _, _afacd := range _fgdbb {
		if _afacd >= 0x0600 && _afacd <= 0x06E0 {
			return true
		}
	}
	return false
}

func _aefa(_baed *_bc.Document, _eagfa *_aad.CT_RPr, _baefb *_aad.CT_PPr) *_aad.CT_RPr {
	var _bdgb, _aeeff *_aad.CT_RPr
	if _eagfa == nil {
		_eagfa = _aad.NewCT_RPr()
	}
	var _acag *_aad.CT_ParaRPr
	if _baefb != nil && _baefb.RPr != nil {
		_acag = _baefb.RPr
	}
	if _acag == nil {
		_acag = _aad.NewCT_ParaRPr()
	}
	if _eagfa.RStyle != nil {
		_acfbff := _baed.GetStyleByID(_eagfa.RStyle.ValAttr)
		if _gbce := _acfbff.X(); _gbce != nil {
			_bdgb = _gbce.RPr
		}
	}
	if _bdgb == nil {
		_bdgb = _aad.NewCT_RPr()
	}
	if _acag.RStyle != nil {
		_cbeca := _baed.GetStyleByID(_acag.RStyle.ValAttr)
		if _dbge := _cbeca.X(); _dbge != nil {
			_aeeff = _dbge.RPr
			if _dbge.QFormat != nil && _edgc(_dbge.QFormat) {
				return _aeeff
			}
		}
	}
	if _aeeff == nil {
		_aeeff = _aad.NewCT_RPr()
	}
	if _eagfa.Color == nil {
		if _bdgb.Color != nil {
			_eagfa.Color = _bdgb.Color
		} else if _acag.Color != nil {
			_eagfa.Color = _acag.Color
		} else if _aeeff.Color != nil {
			_eagfa.Color = _aeeff.Color
		}
	}
	if _eagfa.Spacing == nil {
		if _bdgb.Spacing != nil {
			_eagfa.Spacing = _bdgb.Spacing
		} else if _acag.Spacing != nil {
			_eagfa.Spacing = _acag.Spacing
		} else if _aeeff.Spacing != nil {
			_eagfa.Spacing = _aeeff.Spacing
		}
	}
	if _eagfa.Sz == nil {
		if _bdgb.Sz != nil {
			_eagfa.Sz = _bdgb.Sz
		} else if _acag.Sz != nil {
			_eagfa.Sz = _acag.Sz
		} else if _aeeff.Sz != nil {
			_eagfa.Sz = _aeeff.Sz
		}
	}
	if _eagfa.SzCs == nil {
		if _bdgb.SzCs != nil {
			_eagfa.SzCs = _bdgb.SzCs
		} else if _acag.SzCs != nil {
			_eagfa.SzCs = _acag.SzCs
		} else if _aeeff.SzCs != nil {
			_eagfa.SzCs = _aeeff.SzCs
		}
	}
	if _eagfa.B == nil {
		if _bdgb.B != nil {
			_eagfa.B = _bdgb.B
		} else if _acag.B != nil {
			_eagfa.B = _acag.B
		} else if _aeeff.B != nil {
			_eagfa.B = _aeeff.B
		}
	}
	if _eagfa.I == nil {
		if _bdgb.I != nil {
			_eagfa.I = _bdgb.I
		} else if _acag.I != nil {
			_eagfa.I = _acag.I
		} else if _aeeff.I != nil {
			_eagfa.I = _aeeff.I
		}
	}
	if _eagfa.U == nil {
		if _bdgb.U != nil {
			_eagfa.U = _bdgb.U
		} else if _acag.U != nil {
			_eagfa.U = _acag.U
		} else if _aeeff.U != nil {
			_eagfa.U = _aeeff.U
		}
	}
	if _eagfa.RFonts == nil {
		if _bdgb.RFonts != nil {
			_eagfa.RFonts = _bdgb.RFonts
		} else if _acag.RFonts != nil {
			_eagfa.RFonts = _acag.RFonts
		} else if _aeeff.RFonts != nil {
			_eagfa.RFonts = _aeeff.RFonts
		}
	}
	if _eagfa.VertAlign == nil {
		if _bdgb.VertAlign != nil {
			_eagfa.VertAlign = _bdgb.VertAlign
		} else if _acag.VertAlign != nil {
			_eagfa.VertAlign = _acag.VertAlign
		} else if _aeeff.VertAlign != nil {
			_eagfa.VertAlign = _aeeff.VertAlign
		}
	}
	if _eagfa.Caps == nil {
		if _bdgb.Caps != nil {
			_eagfa.Caps = _bdgb.Caps
		} else if _acag.Caps != nil {
			_eagfa.Caps = _acag.Caps
		} else if _aeeff.Caps != nil {
			_eagfa.Caps = _aeeff.Caps
		}
	}
	if _eagfa.SmallCaps == nil {
		if _bdgb.SmallCaps != nil {
			_eagfa.SmallCaps = _bdgb.SmallCaps
		} else if _acag.SmallCaps != nil {
			_eagfa.SmallCaps = _acag.SmallCaps
		} else if _aeeff.SmallCaps != nil {
			_eagfa.SmallCaps = _aeeff.SmallCaps
		}
	}
	if _eagfa.Bdr == nil {
		if _bdgb.Bdr != nil {
			_eagfa.Bdr = _bdgb.Bdr
		} else if _acag.Bdr != nil {
			_eagfa.Bdr = _acag.Bdr
		} else if _aeeff.Bdr != nil {
			_eagfa.Bdr = _aeeff.Bdr
		}
	}
	if _eagfa.Shd == nil {
		if _bdgb.Shd != nil {
			_eagfa.Shd = _bdgb.Shd
		} else if _acag.Shd != nil {
			_eagfa.Shd = _acag.Shd
		} else if _aeeff.Shd != nil {
			_eagfa.Shd = _aeeff.Shd
		}
	}
	return _eagfa
}

func (_edbb *convertContext) addSeparator() {
	_edbb.newParagraph()
	_edbb._befb._gbb = true
	_edbb._befb._cec = _gf
	if _edbb.currentParagraphOverflowsCurrentPage() {
		_edbb.moveCurrentParagraphToNewPage()
	}
	_edbb.addCurrentParagraphToCurrentPage()
}

func (_bddag *convertContext) renderTableRows(_fafa *_aad.CT_Tbl, _fcfa int, _bgac bool, _degc []float64, _fdbf *_aad.CT_TblPr, _eaad []*_aad.CT_TblStylePr, _gacf *_aad.CT_PPrGeneral, _gbf *_aad.CT_RPr, _cddg float64, _dfdd *_aad.CT_Row) {
	_ddadc := _bddag._gaeg.NewTable(_fcfa)
	_abaa := _ddadc.SetColumnWidths(_degc...)
	if _abaa != nil {
		_cb.Log.Debug("\u0045\u0052\u0052\u004f\u0052\u003a \u0055\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0073\u0065\u0074\u0020\u0063\u006f\u006c\u0075\u006d\u006e \u0077\u0069\u0064\u0074\u0068\u0073\u0020\u0066\u006f\u0072\u0020\u0074\u0061\u0062l\u0065 \u0028\u0025\u0073\u0029", _abaa.Error())
	}
	_ddgb := _faea(_fdbf.TblW, _bddag._eeabe._gd.Right-_bddag._eeabe._gd.Left, _cddg)
	_abcc := _faea(_fdbf.TblInd, _bddag._eeabe._gd.Right-_bddag._eeabe._gd.Left, 0)
	_gbadf := _bddag.getPageAccessiblePart()
	_aeef := len(_fafa.EG_ContentRowContent)
	_cbge := map[int][]tableCellProperties{}
	_fcgb := 0
	_dacg := -1
	_dfddc := -1
	_cagag := make([]float64, _fcfa)
	if _dfdd != nil {
		_ddgb, _fcgb, _ddadc, _dfddc, _gbadf, _dacg, _dfdd, _ = _bddag.renderTableRow(_dfdd, _dfdd, _ddgb, _cbge, _fcgb, _fdbf, 0, _aeef, _fcfa, _eaad, _gacf, _gbf, _ddadc, _cagag, _dacg, _gbadf, _bgac, _degc, _fafa, _cddg, _dfddc, _abcc)
	}
	for _affd, _fbdd := range _fafa.EG_ContentRowContent {
		if _fbdd == nil {
			continue
		}
		if _dbb := _fbdd.ContentRowContentChoice.Tr; len(_dbb) > 0 {
			_afeg := _dbb[0]
			var _fagc bool
			_ddgb, _fcgb, _ddadc, _dfddc, _gbadf, _dacg, _dfdd, _fagc = _bddag.renderTableRow(_afeg, _dfdd, _ddgb, _cbge, _fcgb, _fdbf, _affd, _aeef, _fcfa, _eaad, _gacf, _gbf, _ddadc, _cagag, _dacg, _gbadf, _bgac, _degc, _fafa, _cddg, _dfddc, _abcc)
			if _fagc {
				return
			}
		}
	}
	if _bgac {
		_bddag.autofitColumns(_ddadc, _ddgb, _degc, _cagag)
	}
	if _dfddc < _fcgb-1 {
		_bddag.addTableWithDataRange(_cbge, _dfddc+1, _fcgb-1, _fcfa, _ddgb, _abcc, _degc, _cagag, _dfdd != nil && _dfddc != -1)
	}
	if _fdbf.Jc != nil && _bddag._befb._dae != nil {
		switch _fdbf.Jc.ValAttr {
		case _aad.ST_JcTableCenter:
			_bddag._befb._dae._db = _ce.HorizontalAlignmentCenter
		case _aad.ST_JcTableRight, _aad.ST_JcTableEnd:
			_bddag._befb._dae._db = _ce.HorizontalAlignmentRight
		}
	}
}

func (_bgag *convertContext) addCellToTable(_dbec *_ce.Table, _fdgg *_aad.CT_Tc, _fgb *_aad.CT_TblPr, _fgfc *_aad.CT_TblPrEx, _eacg, _gcac, _ddaa, _baec int, _fgcfg []*_aad.CT_TblStylePr, _fgfb *_aad.CT_PPrGeneral, _cega *_aad.CT_RPr, _ebae bool, _adec int, _fce []float64) int {
	_cega, _dbgaa, _bde, _cbcg, _gde, _adba, _egaa := _bgag.getTableCellProperties(_dbec, _fgb, _fgfc, _fgcfg, _eacg, _fdgg.TcPr, _cega, _gcac, _ddaa, _baec)
	_egaa.SetVerticalAlignment(_dbgaa)
	_egaa.SetIndent(_bde)
	var _aafg *_ce.StyledParagraph
	_acdf := _fdgg.EG_BlockLevelElts
	_afcf := _bgag._gaeg.NewDivision()
	_fdbe := _bgag._gaeg.NewList()
	_aebe := true
	_afcf.SetMargins(0.0, _cbcg, _gde, _adba)
	_febed := false
	_fbdb := -1
	_fec := false
	for _, _ddbf := range _acdf {
		for _, _fgae := range _ddbf.BlockLevelEltsChoice.EG_ContentBlockContent {
			for _, _bdea := range _fgae.ContentBlockContentChoice.P {
				_agac := _bgag._gaeg.NewStyledParagraph()
				if _febed {
					_gbfa := _agac.Append("\u000a")
					_ggbf := _bgag._gaeg.NewTextStyle()
					_ggbf.FontSize = 0
					_gbfa.Style = _ggbf
				}
				_ebbc := false
				_bdag, _gafg := _bgag.combinePPrWithStyles(_bdea.PPr)
				if _bdag != nil && _bdag.PStyle != nil {
					_gagc := _bgag._adae.GetStyleByID(_bdag.PStyle.ValAttr)
					if _dddc := _gagc.X(); _dddc != nil {
						if _dddc.QFormat != nil && _edgc(_dddc.QFormat) {
							if _bdag.RPr != nil && _dddc.RPr != nil {
								_bdag.RPr = _fbdg(_bdag.RPr, _dddc.RPr)
							}
							_bdag = _ecgc(_bdea.PPr, _dddc.PPr, _dddc.RPr)
							_ebbc = true
						} else {
							_aagd, _bgfa := _bgag.getStyleProps(_bdag.PStyle.ValAttr, _gagc)
							_bdag = _ecgc(_bdea.PPr, _aagd, _bgfa)
						}
					}
				} else {
					if _fec {
						_fbde := _afcf.Add(_fdbe)
						if _fbde != nil {
							_cb.Log.Debug("\u0045\u0052\u0052O\u0052\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0061\u0064\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0074\u006f\u0020\u0064\u0069\u0076\u0069s\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029", _fbde.Error())
						}
						_fdbe = _bgag._gaeg.NewList()
						_fec = false
						_aebe = false
					}
					_cgaef := _bgag._adae.Styles.ParagraphStyles()
					for _, _gabea := range _cgaef {
						if _aceb := _gabea.X().DefaultAttr; _aceb != nil {
							if _aabe := _aceb.Bool; _aabe != nil && *_aabe {
								_bdag = _ecgc(_bdea.PPr, _gabea.X().PPr, _gabea.X().RPr)
							}
							if _cffg := _aceb.ST_OnOff1; _cffg == _ede.ST_OnOff1On {
								_bdag = _ecgc(_bdea.PPr, _gabea.X().PPr, _gabea.X().RPr)
							}
							break
						}
					}
				}
				if !_ebbc {
					_bdag = _ecgc(_bdea.PPr, _fgfb, _cega)
				}
				var _gecab *_ce.TextStyle
				if _gafg != nil && _gafg._fbac {
					_fec = true
				}
				if _bdea.EG_PContent == nil {
					_gbcf := "\u0020"
					_febed = true
					_agac.Append(_gbcf)
				} else {
					for _degfa, _ebedb := range _bdea.EG_PContent {
						if _adec != -1 && _degfa < _adec {
							continue
						}
						_aed := _ebedb.PContentChoice.EG_ContentRunContent
						_fdbae := &link{}
						if _ebedb.PContentChoice.Hyperlink != nil {
							_aed = _ebedb.PContentChoice.Hyperlink.PContentChoice.EG_ContentRunContent
							if _ebedb.PContentChoice.Hyperlink.IdAttr != nil {
								_gdf := _bgag._adae.DocRels().GetByRelId(*_ebedb.PContentChoice.Hyperlink.IdAttr)
								_fdbae._debc = _gdf.X().CT_Relationship.TargetAttr
								_fdbae._ffg = _gdf.X().CT_Relationship.TargetModeAttr
							} else if _ebedb.PContentChoice.Hyperlink.AnchorAttr != nil {
								_fdbae._debc = *_ebedb.PContentChoice.Hyperlink.AnchorAttr
								_fdbae._ffg = _af.ST_TargetModeInternal
							}
						}
						_bcgba := _ce.TextStyle{}
						for _, _adbaa := range _aed {
							if _bcdf := _adbaa.ContentRunContentChoice.Sdt; _bcdf != nil {
								if _bcdf.SdtContent != nil {
									for _, _cgfc := range _bcdf.SdtContent.EG_PContent {
										for _, _dafa := range _cgfc.PContentChoice.EG_ContentRunContent {
											if _bcfd := _dafa.ContentRunContentChoice.R; _bcfd != nil {
												_febed, _fbdb, _aebe, _bcgba = _bgag.processCtr(_bcfd, _bdag, _febed, _fdbae, _agac, _ebae, _adec, _degfa, _fbdb, _afcf, _aebe)
												if _gecab == nil {
													_gecab = &_bcgba
												}
											}
											if _fbdb > -1 {
												break
											}
										}
									}
								}
							}
							if _fbge := _adbaa.ContentRunContentChoice.R; _fbge != nil {
								_febed, _fbdb, _aebe, _bcgba = _bgag.processCtr(_fbge, _bdag, _febed, _fdbae, _agac, _ebae, _adec, _degfa, _fbdb, _afcf, _aebe)
								if _gecab == nil {
									_gecab = &_bcgba
								}
							}
						}
					}
				}
				if !_febed {
					_efdd := _aefa(_bgag._adae, _aad.NewCT_RPr(), _bdag)
					_cfcf := _agac.Append("\u0020")
					_cfcf.Style, _, _, _ = _bgag.makeRunStyle(_efdd, false, false, false, false, false)
				}
				if _agac != nil {
					if _dbgaa == _ce.CellVerticalAlignmentTop {
						_bdag.TextAlignment = _aad.NewCT_TextAlignment()
						_bdag.TextAlignment.ValAttr = _aad.ST_TextAlignmentTop
					}
					_bgag.assignPropsToRelativeParagraph(_bdag, _agac)
					if _fec {
						_fecf := _fdbe.Marker()
						for _, _ebag := range _gafg._aade {
							if _aafec, _fbdcg := _dccc[_ebag]; _fbdcg {
								_fecf.Text = string(rune(_aafec))
								if _gecab != nil {
									_fecf.Style = *_gecab
								}
							}
						}
						_, _bcbd := _fdbe.Add(_agac)
						if _bcbd != nil {
							_cb.Log.Debug("\u0045\u0052\u0052\u004f\u0052:\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0061\u0064d\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u006c\u0069\u0073\u0074\u0020\u0028\u0025\u0073\u0029", _bcbd.Error())
						}
					} else if _aebe && _aafg == nil {
						_aafg = _agac
					} else {
						if _aebe {
							_fcbb := _afcf.Add(_aafg)
							if _fcbb != nil {
								_cb.Log.Debug("\u0045R\u0052\u004fR\u003a\u0020\u0055n\u0061\u0062\u006c\u0065\u0020\u0074\u006f \u0061\u0064\u0064\u0020\u0063\u006fn\u0074\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0064\u0069\u0076i\u0073\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029", _fcbb.Error())
							}
							_aebe = false
						}
						_gced := _afcf.Add(_agac)
						if _gced != nil {
							_cb.Log.Debug("\u0045R\u0052\u004fR\u003a\u0020\u0055n\u0061\u0062\u006c\u0065\u0020\u0074\u006f \u0061\u0064\u0064\u0020\u0063\u006fn\u0074\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0064\u0069\u0076i\u0073\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029", _gced.Error())
						}
					}
					if _eacg > 0 && _fce[_gcac] < _agac.Width() {
						_fce[_gcac] = _agac.Width()
					}
				}
			}
		}
	}
	if _fec {
		_gdd := _afcf.Add(_fdbe)
		if _gdd != nil {
			_cb.Log.Debug("\u0045\u0052\u0052O\u0052\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0061\u0064\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0074\u006f\u0020\u0064\u0069\u0076\u0069s\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029", _gdd.Error())
		}
	}
	if _aebe {
		if _aafg != nil {
			_geda, _gafge, _debg, _gbbe := _aafg.GetMargins()
			_aafg.SetMargins(_geda, _cbcg+_gafge, _gde+_debg, _adba+_gbbe)
			_efb := _egaa.SetContent(_aafg)
			if _efb != nil {
				_cb.Log.Debug("\u0045\u0052\u0052\u004f\u0052:\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0073\u0065t\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0063\u0065\u006c\u006c\u0020\u0028\u0025\u0073\u0029", _efb.Error())
			}
		}
	} else {
		_ded := _egaa.SetContent(_afcf)
		if _ded != nil {
			_cb.Log.Debug("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0073e\u0074\u0020\u0064\u0069\u0076\u0069\u0073i\u006f\u006e\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0020t\u006f\u0020\u0063\u0065\u006c\u006c\u0020\u0028\u0025\u0073\u0029", _ded.Error())
		}
	}
	return _fbdb
}

func _faaac(_ebff *_bc.Document, _gbceb *_aad.CT_TblPr) (*_aad.CT_TblPr, *_aad.CT_PPrGeneral, *_aad.CT_RPr) {
	_gacgb := _aad.NewCT_PPrGeneral()
	_feed := _aad.NewCT_RPr()
	if _gbceb == nil {
		_gbceb = _aad.NewCT_TblPr()
	} else {
		if _gbceb.TblStyle != nil {
			_gbceb, _gacgb, _feed = _cbecg(_ebff, _gbceb.TblStyle.ValAttr, _gbceb, _gacgb, _feed)
		}
	}
	return _gbceb, _gacgb, _feed
}

func _gedc(_gceb string) (float64, float64) {
	_bddd := _c.SplitN(_gceb, "\u002c", 2)
	_ggff := _c.ReplaceAll(_bddd[0], "\u0070\u0074", "")
	_bcda := _c.ReplaceAll(_bddd[1], "\u0070\u0074", "")
	_ecbf, _bffa := _g.ParseFloat(_ggff, 64)
	if _bffa != nil {
		_cb.Log.Debug("\u0045\u0052RO\u0052\u003a\u0020U\u006e\u0061\u0062\u006ce p\u0061rs\u0065\u0020\u0078\u003a\u0020\u0025\u0076 t\u006f\u0020\u0066\u006c\u006f\u0061\u00746\u0034", _bffa.Error())
	}
	_cbfbg, _bffa := _g.ParseFloat(_bcda, 64)
	if _bffa != nil {
		_cb.Log.Debug("\u0045\u0052RO\u0052\u003a\u0020U\u006e\u0061\u0062\u006ce p\u0061rs\u0065\u0020\u0079\u003a\u0020\u0025\u0076 t\u006f\u0020\u0066\u006c\u006f\u0061\u00746\u0034", _bffa.Error())
	}
	return _ecbf, _cbfbg
}

const (
	_aaec = "\u006di\u006e\u006f\u0072\u0046\u006f\u006et"
	_bbeg = "\u006da\u006a\u006f\u0072\u0046\u006f\u006et"
	_gdec = "\u006d\u0061\u006a\u006f\u0072\u0045\u0061\u0073\u0074\u0041\u0073\u0069a\u0046\u006f\u006e\u0074"
	_egfg = "\u006d\u0069\u006e\u006f\u0072\u0045\u0061\u0073\u0074\u0041\u0073\u0069a\u0046\u006f\u006e\u0074"
)

func _bccc(_fgfge int, _dbef bool) string {
	_bgbg := (_fgfge-1)/26 + 1
	_gage := byte((_fgfge - 1) % 26)
	if _dbef {
		_gage += byte(65)
	} else {
		_gage += byte(97)
	}
	_bdfe := _da.NewBuffer([]byte{})
	for _beef := 0; _beef < _bgbg; _beef++ {
		_bdfe.Write([]byte{_gage})
	}
	return _bdfe.String()
}

func (_ddde *convertContext) addCurrentParagraphToCurrentPage() {
	_eede := _ddde._befb._cd + _ddde._befb._bba.Top + _ddde._befb._cec + _ddde._befb._bba.Bottom
	_gbaf := 0.0
	for _, _bcgd := range _ddde._befb._baa {
		if _bcgd._efa == 0 && _bcgd._ccbg.Bottom > _gbaf && _bcgd._ccbg.Top >= _ddde._befb._cd {
			_gbaf = _bcgd._ccbg.Bottom
		}
	}
	if _gbaf > _eede {
		_eede = _gbaf
	}
	_ddde._eeabe._eff = _eede
	_ddde._eeabe._aaf = append(_ddde._eeabe._aaf, _ddde._befb._gcc...)
	_ddde._eeabe._ccb = append(_ddde._eeabe._ccb, _ddde._befb._ba...)
	_ddde._eeabe._efc = append(_ddde._eeabe._efc, _ddde._befb._daeb...)
	_ddde._eeabe._cad = append(_ddde._eeabe._cad, _ddde._befb._afge...)
	_ddde._eeabe._cag = append(_ddde._eeabe._cag, _ddde._befb._baa...)
	_ddde._eeabe._bg = append(_ddde._eeabe._bg, _ddde._befb)
	_ddde.adjustRightBoundOfLastSpan()
	_ddde.alignParagraph()
	if len(_ddde._eeabe._bbge) == 0 && len(_ddde._befb._bf) > 0 {
		_ddde._eeabe._gd.Bottom -= _gf
	}
	_ddde._eeabe._bbge = append(_ddde._eeabe._bbge, _ddde._befb._bf...)
	_ddde._eeabe._gd.Bottom -= _ddde._befb._de
}

type headerFooterRef struct {
	_bbaf  bool
	_cecfc bool
	_edegd string
	_cffc  _aad.ST_HdrFtr
	_eafgg int
	_edgf  int
}

func (_aec *convertContext) alignParagraph() {
	_ffgg := _aec._befb
	if _ffgg._afa == _ce.TextAlignmentLeft {
		return
	}
	_afca := len(_ffgg._ea) - 1
	for _gfgc, _cdeg := range _ffgg._ea {
		_gbd := len(_cdeg._beg) - 1
		for _bgbf, _afcd := range _cdeg._beg {
			_fffc := true
			_fdg := len(_afcd._adf)
			_ccge := 0.0
			for _bdg := len(_afcd._adf) - 1; _bdg >= 0; _bdg-- {
				_cdb := _afcd._adf[_bdg]
				if _fffc && _cdb._gea {
					_fdg = _bdg
				} else {
					_fffc = false
					for _, _ddec := range _cdb._ee {
						_ccge += _ddec._gba
					}
				}
			}
			_afcd._adf = _afcd._adf[:_fdg]
			_aafd := _afcd._dff - _afcd._cead - _ccge
			switch _ffgg._afa {
			case _ce.TextAlignmentRight:
				_afcd.moveRight(_aafd)
			case _ce.TextAlignmentCenter:
				_afcd.moveRight(_aafd / 2)
			case _ce.TextAlignmentJustify:
				if _gfgc != _afca || _bgbf != _gbd {
					_cab := []*word{}
					for _, _ebbb := range _afcd._adf {
						if _ebbb._gea {
							_cab = append(_cab, _ebbb)
						}
					}
					_eaff := _aafd / float64(len(_cab))
					for _, _ada := range _cab {
						_ada._cbg += _eaff
					}
					var _ceabc *word
					for _, _bcad := range _afcd._adf {
						if _ceabc != nil {
							_bcad._gfd = _ceabc._gfd + _ceabc._cbg
						}
						_ceabc = _bcad
					}
				}
			}
		}
	}
}

func (_fced *convertContext) makeRunStyle(_gcde *_aad.CT_RPr, _cege, _cccf, _efbge, _eagc, _ebage bool) (_ce.TextStyle, bool, bool, *_ce.Color) {
	var _gbcd *_ce.Color
	_bgfab := _fced._gaeg.NewTextStyle()
	if _gcde != nil {
		_beefg := _fg.FontStyle_Regular
		_fdbaec := _edgc(_gcde.B)
		_agee := _edgc(_gcde.I)
		if _fdbaec && _agee {
			_beefg = _fg.FontStyle_BoldItalic
		} else if _fdbaec {
			_beefg = _fg.FontStyle_Bold
		} else if _agee {
			_beefg = _fg.FontStyle_Italic
		}
		if _eagc {
			_bgfab.Font = _fg.AssignStdFontByName(_bgfab, "\u0053\u0079\u006d\u0062\u006f\u006c")
		} else {
			_gcdd := "\u0064e\u0066\u0061\u0075\u006c\u0074"
			if _aeab := _gcde.RFonts; _aeab != nil {
				if _ebgc := _aeab.AsciiAttr; _ebgc != nil {
					_gcdd = *_ebgc
				} else if _fbccc := _aeab.HAnsiAttr; _fbccc != nil {
					_gcdd = *_fbccc
				} else if _bcfge := _aeab.CsAttr; _bcfge != nil {
					_gcdd = *_bcfge
				} else {
					_bcgeb := _fced._bgdf
					if _bcgeb != nil {
						_eafc := ""
						if _eddgb := _bcgeb.RFonts; _eddgb != nil {
							if _ccceg := _aeab.HintAttr; _ccceg == _aad.ST_HintEastAsia {
								if _eddgb.EastAsiaAttr != nil {
									_gcdd = *_bcgeb.RFonts.EastAsiaAttr
								} else {
									if _eddgb.EastAsiaThemeAttr == _aad.ST_ThemeMajorEastAsia {
										_eafc = _gdec
									}
									if _eddgb.EastAsiaThemeAttr == _aad.ST_ThemeMinorEastAsia {
										_eafc = _egfg
									}
								}
							} else {
								if _abae := _eddgb.AsciiAttr; _abae != nil {
									_gcdd = *_abae
								} else if _bbfc := _eddgb.HAnsiAttr; _bbfc != nil {
									_gcdd = *_bbfc
								}
							}
							if _gcdd == "\u0064e\u0066\u0061\u0075\u006c\u0074" {
								if _eafc == "" {
									if _eddgb.EastAsiaThemeAttr == _aad.ST_ThemeMajorEastAsia {
										_eafc = _gdec
									} else if _eddgb.EastAsiaThemeAttr == _aad.ST_ThemeMinorEastAsia {
										_eafc = _egfg
									} else if _abfg := _eddgb.AsciiThemeAttr; _abfg == _aad.ST_ThemeMajorAscii || _abfg == _aad.ST_ThemeMajorHAnsi {
										_eafc = _bbeg
									} else if _dcfe := _eddgb.AsciiThemeAttr; _dcfe == _aad.ST_ThemeMinorAscii || _dcfe == _aad.ST_ThemeMinorHAnsi {
										_eafc = _aaec
									} else {
										if _fgea := _eddgb.HAnsiThemeAttr; _fgea == _aad.ST_ThemeMajorAscii || _fgea == _aad.ST_ThemeMajorHAnsi {
											_eafc = _bbeg
										} else if _cageb := _eddgb.HAnsiThemeAttr; _cageb == _aad.ST_ThemeMinorAscii || _cageb == _aad.ST_ThemeMinorHAnsi {
											_eafc = _aaec
										}
									}
								}
								_egcfg := ""
								if _gcdd == "\u0064e\u0066\u0061\u0075\u006c\u0074" {
									if _adcea := _fced._adae.Settings.X(); _adcea != nil {
										_eabc := ""
										if _bccgg := _adcea.ThemeFontLang; _bccgg != nil {
											if _bccgg.ValAttr != nil {
												_eabc = *_bccgg.ValAttr
											}
											if _bccgg.EastAsiaAttr != nil {
												_eabc = *_bccgg.EastAsiaAttr
											}
											if _bccgg.BidiAttr != nil {
												_eabc = *_bccgg.BidiAttr
											}
										}
										_egcfg = _dabdb(_cade(_eabc))
									}
								}
								_bebg := _fced._adae.Themes()
								for _, _ggga := range _bebg {
									if _ggga.ThemeElements != nil {
										if _efgda := _ggga.ThemeElements.FontScheme; _efgda != nil {
											if _efgda.MajorFont != nil && _eafc == _gdec {
												if _efgda.MajorFont.Ea != nil {
													_gcdd = _efgda.MajorFont.Ea.TypefaceAttr
													if _gcdd == "" && _egcfg != "" {
														for _, _bcecg := range _efgda.MajorFont.Font {
															if _bcecg.ScriptAttr == _egcfg {
																_gcdd = _bcecg.TypefaceAttr
																break
															}
														}
													}
													break
												}
											} else if _efgda.MinorFont != nil && _eafc == _egfg {
												if _efgda.MinorFont.Ea != nil {
													_gcdd = _efgda.MinorFont.Ea.TypefaceAttr
													if _gcdd == "" && _egcfg != "" {
														for _, _dcef := range _efgda.MinorFont.Font {
															if _dcef.ScriptAttr == _egcfg {
																_gcdd = _dcef.TypefaceAttr
																break
															}
														}
													}
													break
												}
											} else if _efgda.MajorFont != nil && _eafc == _bbeg {
												if _efgda.MajorFont.Latin != nil {
													_gcdd = _efgda.MajorFont.Latin.TypefaceAttr
													break
												}
											} else if _efgda.MinorFont != nil && _eafc == _aaec {
												if _efgda.MinorFont.Latin != nil {
													_gcdd = _efgda.MinorFont.Latin.TypefaceAttr
													break
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			if _gcdd != "\u0064e\u0066\u0061\u0075\u006c\u0074" && !_egbc(_gcdd) {
				if _bbdb := _fced._adae.FontTable(); _bbdb != nil {
					for _, _dcbf := range _bbdb.Font {
						if _dcbf.NameAttr == _gcdd && _dcbf.AltName != nil && _egbc(_dcbf.AltName.ValAttr) {
							_gcdd = _dcbf.AltName.ValAttr
							break
						}
						if _dcbf.AltName != nil && !_egbc(_dcbf.AltName.ValAttr) && _dcbf.AltName.ValAttr == _gcdd {
							_gcdd = _dcbf.NameAttr
							break
						}
					}
				}
			}
			if _edgc(_gcde.Rtl) && _fg.RtlFontFile != nil {
				_bgfab.Font = _fg.RtlFontFile
			} else if _dbdf, _deedd := _fg.StdFontsMap[_gcdd]; _deedd {
				_bgfab.Font = _fg.AssignStdFontByName(_bgfab, _dbdf[_beefg])
			} else if _dgag := _fg.GetRegisteredFont(_gcdd, _beefg); _dgag != nil {
				_bgfab.Font = _dgag
			} else {
				_cb.Log.Debug("\u0046\u006f\u006e\u0074\u0020\u0025\u0073\u0020\u0077\u0069\u0074h\u0020\u0073\u0074\u0079\u006c\u0065\u0020\u0025s\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u002c\u0020\u0072\u0065\u0073\u0065\u0074 \u0074\u006f\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u002e", _gcdd, _beefg)
				_bgfab.Font = _fg.AssignStdFontByName(_bgfab, _fg.StdFontsMap["\u0064e\u0066\u0061\u0075\u006c\u0074"][_beefg])
			}
		}
		_bfec := _acab(_gcde.Sz, _gcde.SzCs)
		if _abde := _gcde.VertAlign; _abde != nil {
			_fgbe := _abde.ValAttr
			_cege = _fgbe == _ede.ST_VerticalAlignRunSuperscript
			_cccf = _fgbe == _ede.ST_VerticalAlignRunSubscript
		}
		if _bfec > _fced._dgddd {
			_fced._dgddd = _bfec
		}
		if _cege || _cccf {
			_bfec *= 0.64
		}
		if _efbge {
			if _cege {
				_bgfab.TextRise = 1.5
			}
			if _cccf {
				_bgfab.TextRise = -1.5
			}
		}
		_bgfab.FontSize = _bfec
		_cgb := 0.0
		if _gdabc := _gcde.Spacing; _gdabc != nil {
			_cgb = _fg.PointsFromTwips(*_gdabc.ValAttr.Int64)
			if _cgb < 0.0 {
				_cgb = 0.0
			}
		}
		_bgfab.CharSpacing = _cgb
		_fdcbb := 0.0
		if _gebf := _gcde.Position; _gebf != nil {
			_fdcbb = float64(*_gebf.ValAttr.Int64) / 24 * _bfec
		}
		_bgfab.TextRise = _fdcbb
		_fdeeg := _ce.ColorBlack
		if _gcde.Color != nil {
			_gebcc := _gcde.Color.ValAttr.ST_HexColorRGB
			if _gebcc != nil {
				_fdeeg = _ce.ColorRGBFromHex("\u0023" + *_gebcc)
			}
		}
		if _efbge {
			_dgbgc, _aged, _daddg := _fdeeg.ToRGB()
			_dgbgc, _aged, _daddg = _fg.Lighten(_dgbgc), _fg.Lighten(_aged), _fg.Lighten(_daddg)
			_fdeeg = _ce.ColorRGBFromArithmetic(_dgbgc, _aged, _daddg)
		}
		_bgfab.Color = _fdeeg
		if _ebage {
			_gbcd = &_fdeeg
		}
		if _gcde.U != nil && _gcde.U.ValAttr != _aad.ST_UnderlineNone && !_eagc {
			_gbcd = &_fdeeg
			if _ggef := _gcde.U.ColorAttr; _ggef != nil {
				if _dgbc := _ggef.ST_HexColorRGB; _dgbc != nil {
					_egdde := _ce.ColorRGBFromHex("\u0023" + *_dgbc)
					_gbcd = &_egdde
				}
			}
		}
	}
	return _bgfab, _cege, _cccf, _gbcd
}

func (_ebcff *convertContext) autofitColumns(_fedf *_ce.Table, _egag float64, _dcgfa []float64, _bceac []float64) {
	_edd := 0.0
	for _, _eaac := range _dcgfa {
		_edd += _eaac
	}
	if _edd <= 0 || _egag <= 0 || len(_dcgfa) != len(_bceac) {
		return
	}
	_gaag := map[int]float64{}
	_fegg := map[int]float64{}
	for _agff, _eacb := range _bceac {
		if _eacb*_edd/_egag > _dcgfa[_agff] {
			_gaag[_agff] = _eacb*_edd/_egag - _dcgfa[_agff]
		} else {
			_faaf := 1.5
			if _dcgfa[_agff]-_eacb*_faaf*_edd/_egag > 0 {
				_fegg[_agff] = _dcgfa[_agff] - _eacb*_faaf*_edd/_egag
			}
		}
	}
	if len(_gaag) == 0 || len(_fegg) == 0 {
		return
	}
	for _ccce, _bfde := range _gaag {
		for _gcfc, _dcdef := range _fegg {
			if _bfde < _dcdef {
				_gaag[_ccce] = 0
				_fegg[_gcfc] -= _bfde
				_dcgfa[_ccce] += _dcdef - _bfde
				_dcgfa[_gcfc] -= _dcdef - _bfde
				break
			} else {
				_fegg[_gcfc] = 0
				_gaag[_ccce] -= _dcdef
				_dcgfa[_ccce] += _dcdef
				_dcgfa[_gcfc] -= _dcdef
			}
		}
	}
	_eccd := _fedf.SetColumnWidths(_dcgfa...)
	if _eccd != nil {
		_cb.Log.Debug("\u0045\u0052\u0052\u004f\u0052\u003a \u0055\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0073\u0065\u0074\u0020\u0063\u006f\u006c\u0075\u006d\u006e \u0077\u0069\u0064\u0074\u0068\u0073\u0020\u0066\u006f\u0072\u0020\u0074\u0061\u0062l\u0065 \u0028\u0025\u0073\u0029", _eccd.Error())
	}
}

func (_efab *convertContext) addCurrentParagraphFooterToCurrentPage() {
	_efab.alignParagraph()
	_efab._eeabe._gbg = append(_efab._eeabe._gbg, _efab._befb)
}

var _badfd = []romanMatch{romanMatch{1000, "\u006d"}, romanMatch{900, "\u0063\u006d"}, romanMatch{500, "\u0064"}, romanMatch{400, "\u0063\u0064"}, romanMatch{100, "\u0063"}, romanMatch{90, "\u0078\u0063"}, romanMatch{50, "\u006c"}, romanMatch{40, "\u0078\u006c"}, romanMatch{10, "\u0078"}, romanMatch{9, "\u0069\u0078"}, romanMatch{5, "\u0076"}, romanMatch{4, "\u0069\u0076"}, romanMatch{1, "\u0069"}}

type convertContext struct {
	_gaeg  *_ce.Creator
	_adae  *_bc.Document
	_cbca  *_aad.CT_PPrGeneral
	_bgdf  *_aad.CT_RPr
	_edfd  []*page
	_eeabe *page
	_gfcb  *_fg.Rectangle
	_befb  *paragraph
	_bdgcc *line
	_babd  *span
	_bcgdg *word
	_bgaa  *_aad.CT_Hyperlink
	_ecdc  *_aad.CT_PPr
	_addd  []note
	_ddcb  *prefix
	_fdee  bool
	_cfadd bool
	_aeedg float64
	_fcdb  float64
	_fcbc  float64
	_dgddd float64
	_aafge bool
	_cedb  map[int64]map[int64]int64
	_fecb  map[string]string
	_ffcga *Options
	_dbgac []*headerFooterRef
	_dfgfe []*headerFooterRef
	_bgee  map[string]map[int64]*_aad.CT_Ind
	_fecfc float64
	_edda  float64
	_cbceg []float64
	_cgg   *_fg.Rectangle
	_ggbfe *_aad.CT_PPr
	_aabd  []*_aad.CT_Tbl
	_dgafg []float64
	_eaaf  map[*_ce.TextChunk]string
	_afcgb map[string]*_ca.PdfAnnotation
}

func (_daga *convertContext) addAbsoluteRIC(_cafg *_aad.EG_RunInnerContent, _bga *_aad.CT_RPr, _gebg *_aad.CT_PPr) bool {
	var _fcfb, _eeg bool
	_fbc := []*symbol{}
	_cdcg := false
	if _cafg == nil {
		if _daga._ddcb != nil {
			_gfag := true
			for _, _caga := range _daga._ddcb._aade {
				if _cfddf, _bfba := _dccc[_caga]; _bfba {
					_eeg = _daga._ddcb._cbcff
					_daga._ddcb._aade = string(rune(_cfddf))
					_gfag = false
				}
			}
			_fbc = _gcff(_daga._ddcb._aade, "", true, false, _gfag)
		}
	} else {
		if _bbbdb(_cafg) {
			return true
		} else if _cafg.RunInnerContentChoice.T != nil {
			_ccca := _cafg.RunInnerContentChoice.T.Content
			_ebdf := _gebg == nil || _gebg.Bidi == nil || _edgc(_gebg.Bidi)
			if _bga != nil && _edgc(_bga.Rtl) && _ebdf {
				_daga._bdgcc._cda = true
				if _efddc(_ccca) {
					_gda, _aagf := _ed.ArabicShape(_ccca)
					if _aagf == nil {
						_ccca = _gda
					}
				}
			}
			if _gebg != nil && _edgc(_gebg.PageBreakBefore) {
				_daga.moveCurrentParagraphToNewPage()
			}
			if _bga != nil && _edgc(_bga.Caps) {
				_ccca = _c.ToUpper(_ccca)
			}
			if _ccca == "" {
				_ccca = "\u0020"
			}
			_egac, _ := _bbg.MatchString("\u00ab\u002e\u002a\u00bb", _ccca)
			if len(_daga._bcgdg._ee) > 0 && _daga._bcgdg._ee[len(_daga._bcgdg._ee)-1]._fad && _daga._bcgdg._ee[len(_daga._bcgdg._ee)-1]._gfb == "" && !_egac {
				return false
			}
			if _cbgd := _daga._bgaa; _cbgd != nil && _cbgd.IdAttr != nil {
				_cdcg = true
				_fbc = _gcff(_ccca, _daga._adae.GetTargetByRelId(*_cbgd.IdAttr), false, false, false)
			} else {
				_fbc = _gcff(_ccca, "", false, false, false)
			}
			if _bga.Highlight != nil {
				_abe := _a.HighlightColorToCreatorColorMap[_bga.Highlight.ValAttr]
				for _, _dbg := range _fbc {
					_dbg._caf = &_abe
				}
			}
		} else if _ebcg := _cafg.RunInnerContentChoice.EndnoteReference; _ebcg != nil {
			_gdbd := _daga._adae.BodySection().X()
			_add := _ebcg.IdAttr
			_badf := _add
			_gabe := _aad.ST_NumberFormatLowerRoman
			if _ddgg := _gdbd.EndnotePr; _ddgg != nil {
				if _eaga := _ddgg.NumFmt; _eaga != nil {
					_gabe = _eaga.ValAttr
				}
				if _fgfg := _ddgg.NumStart; _fgfg != nil {
					_badf += _fgfg.ValAttr - 1
				}
			}
			_adde := _afggb(_badf, _gabe)
			_dffc := _daga._adae.Endnote(_add).X()
			if _dffc != nil {
				_daga._addd = append(_daga._addd, note{_cea: _adde, _agb: _dffc.EG_BlockLevelElts})
				_fbc = _gcff(_adde, "", true, false, false)
			}
		} else if _bdd := _cafg.RunInnerContentChoice.FootnoteReference; _bdd != nil {
			_fdce := _daga._adae.BodySection().X()
			_agg := _bdd.IdAttr
			_ffgc := _agg
			_ddad := _aad.ST_NumberFormatDecimal
			if _bcc := _fdce.FootnotePr; _bcc != nil {
				if _abf := _bcc.NumFmt; _abf != nil {
					_ddad = _abf.ValAttr
				}
				if _fga := _bcc.NumStart; _fga != nil {
					_ffgc += _fga.ValAttr - 1
				}
			}
			_faeb := _afggb(_ffgc, _ddad)
			_efcd := _daga._adae.Footnote(_agg).X()
			if _efcd != nil {
				_bgaf := &note{_cea: _faeb, _agb: _efcd.EG_BlockLevelElts}
				_ecd := [][]*_aad.EG_ContentBlockContent{}
				for _, _egaeb := range _efcd.EG_BlockLevelElts {
					_ecd = append(_ecd, _egaeb.BlockLevelEltsChoice.EG_ContentBlockContent)
				}
				_ccfcf := &prefix{_aade: _faeb}
				_bee, _gaac := _daga.makePdfBlockFromCBCs(_ecd, _daga._eeabe._gd.Right-_daga._eeabe._gd.Left, _fcdf(1000), nil, true, _ccfcf)
				if _gaac != nil {
					_cb.Log.Debug("C\u0061\u006e\u006e\u006f\u0074\u0020c\u006f\u006e\u0076\u0065\u0072\u0074\u0020\u0066\u006fo\u0074\u006e\u006ft\u0065:\u0020\u0025\u0073", _gaac)
					return false
				}
				_bgaf._ge = _bee
				_daga._befb._bf = append(_daga._befb._bf, _bgaf)
				_daga._befb._de += _bgaf._ge.Height()
				_fbc = _gcff(_faeb, "", true, false, false)
			}
		} else if _gcfe := _cafg.RunInnerContentChoice.InstrText; _gcfe != nil {
			_dgga := _fca(_gcfe.Content)
			if _dgga != "" {
				_fbc = _gcff(_daga._fecb[_dgga], "", false, false, false)
			}
			if _gcfe.Content == _bc.FieldCurrentPage {
				_fbc = _cefa("\u005b\u0046\u0049E\u004c\u0044\u005f\u0050\u0041\u0047\u0045\u005d")
			}
			if _gcfe.Content == _bc.FieldNumberOfPages {
				_fbc = _cefa("\u005b\u0046I\u0045\u004c\u0044_\u004e\u0055\u004d\u0050\u0041\u0047\u0045\u0053\u005d")
			}
		} else if _fea := _cafg.RunInnerContentChoice.Drawing; _fea != nil {
			for _, _gcef := range _fea.DrawingChoice {
				if _gcef.Inline == nil {
					continue
				}
				_ccdc := _gcef.Inline
				if _bcce := _ccdc.Graphic; _bcce != nil {
					if _beeg := _bcce.GraphicData; _beeg != nil {
						_cecc := _ccdc.Extent
						if _cecc == nil {
							return false
						}
						_ffca := _ac.FromEMU(_cecc.CxAttr)
						_cdfc := _ac.FromEMU(_cecc.CyAttr)
						if _cbaa := _ccdc.EffectExtent; _cbaa != nil {
							if _cbaa.LAttr.ST_CoordinateUnqualified != nil {
								_ffca += _ac.FromEMU(*_cbaa.LAttr.ST_CoordinateUnqualified)
							}
							if _cbaa.RAttr.ST_CoordinateUnqualified != nil {
								_ffca += _ac.FromEMU(*_cbaa.RAttr.ST_CoordinateUnqualified)
							}
							if _cbaa.TAttr.ST_CoordinateUnqualified != nil {
								_cdfc += _ac.FromEMU(*_cbaa.TAttr.ST_CoordinateUnqualified)
							}
							if _cbaa.BAttr.ST_CoordinateUnqualified != nil {
								_cdfc += _ac.FromEMU(*_cbaa.BAttr.ST_CoordinateUnqualified)
							}
						}
						for _, _gfab := range _beeg.Any {
							if _eed, _ccgb := _gfab.(*_afg.Pic); _ccgb {
								_cbde := &symbol{_cde: _cdfc, _gba: _ffca}
								_cdbc, _bede := _daga.makePdfImageFromGraphics(_eed)
								if _bede != nil {
									_cb.Log.Debug("C\u0061\u006e\u006e\u006ft \u0072e\u0061\u0064\u0020\u0069\u006da\u0067\u0065\u003a\u0020\u0025\u0073", _bede)
								}
								if _cdbc == nil {
									_cbde._gfb = "\u0020"
								} else {
									_fefcc := _eed.BlipFill
									if _fefcc.SrcRect != nil {
										var _fegf, _faad, _eeec, _fgaa float64
										_agfd := _fefcc.SrcRect
										if _agfd.LAttr != nil {
											_fegf = float64(*_agfd.LAttr.ST_PercentageDecimal) / 1000.0
										}
										if _agfd.RAttr != nil {
											_eeec = float64(*_agfd.RAttr.ST_PercentageDecimal) / 1000.0
										}
										if _agfd.TAttr != nil {
											_faad = float64(*_agfd.TAttr.ST_PercentageDecimal) / 1000.0
										}
										if _agfd.BAttr != nil {
											_fgaa = float64(*_fefcc.SrcRect.BAttr.ST_PercentageDecimal) / 1000.0
										}
										_eabb := _cdbc.Width()
										_gbde := _cdbc.Height()
										_cdbc.Crop(int(_fegf/100.0*_eabb), int(_faad/100.0*_gbde), int(_eabb-(_eeec/100.0*_eabb)), int(_gbde-(_fgaa/100.0*_gbde)))
									}
									_agdd := false
									if _eed.SpPr != nil && _eed.SpPr.Xfrm != nil {
										if _eed.SpPr.Xfrm.RotAttr != nil {
											_afcc := _ac.DegreeFromSTAngle(*_eed.SpPr.Xfrm.RotAttr)
											_cdbc.SetAngle(_afcc)
										}
										if _eed.SpPr.Xfrm.Ext != nil {
											_agdd = true
										}
									}
									if _agdd {
										_cdbc.ScaleToWidth(_ffca)
									} else {
										_cdbc.Scale(_ffca/_cdbc.Width(), _ffca/_cdbc.Width())
									}
									_cbde._bbaa = _cdbc
									_fcfb = true
								}
								_fbc = []*symbol{_cbde}
							} else if _bagb, _efe := _gfab.(*_f.Chart); _efe {
								_gdc := &symbol{_cde: _cdfc, _gba: _ffca}
								_afb, _dfge := _daga.makePdfBlockFromChart(_bagb, _ffca, _cdfc)
								if _dfge != nil {
									_cb.Log.Debug("C\u0061\u006e\u006e\u006ft \u0072e\u0061\u0064\u0020\u0062\u006co\u0063\u006b\u003a\u0020\u0025\u0073", _dfge)
								}
								if _afb == nil {
									_gdc._gfb = "\u0020"
								} else {
									_gdc._fgef = &block{_cee: _afb}
									_fcfb = true
								}
								_fbc = []*symbol{_gdc}
							}
						}
					}
				}
			}
		} else if _dbgf := _cafg.RunInnerContentChoice.Pict; _dbgf != nil {
			for _, _gacb := range _dbgf.Any {
				if _faddc, _ddadf := _gacb.(*_aa.Group); _ddadf {
					for _, _ccgf := range _faddc.GroupChoice {
						if _ccgf.Rect != nil {
							_daga.addRect(_ccgf.Rect)
						} else if _ccgf.Shape != nil {
							_eebc := _ccgf.Shape
							_eegd := _ga.NewShapeStyle("")
							if _eebc.StyleAttr != nil {
								_eegd = _ga.NewShapeStyle(*_eebc.StyleAttr)
							}
							_abfb := _fg.PointsFromTwips(int64(_eegd.Width()))
							_edceb := _fg.PointsFromTwips(int64(_eegd.Height()))
							_cfbbc := _fg.PointsFromTwips(int64(_eegd.Left() - _eegd.Right()))
							_dcea := _fg.PointsFromTwips(int64(_eegd.Top() - _eegd.Bottom()))
							for _, _adcf := range _eebc.ShapeChoice {
								if _adcf.ShapeElementsChoice != nil {
									_cae := _adcf.ShapeElementsChoice
									if _cae.Imagedata != nil {
										_begb := &symbol{_cde: _abfb, _gba: _edceb}
										_dca, _ffe := _daga.makePdfImageFromRelId(_cae.Imagedata.IdAttr)
										if _ffe != nil {
											_cb.Log.Debug("C\u0061\u006e\u006e\u006ft \u0072e\u0061\u0064\u0020\u0069\u006da\u0067\u0065\u003a\u0020\u0025\u0073", _ffe)
										}
										if _dca == nil {
											_begb._gfb = "\u0020"
										} else {
											_dca.Scale(_abfb/_dca.Width(), _edceb/_dca.Height())
											_dca.SetPos(_cfbbc, _dcea)
											_begb._bbaa = _dca
											_fcfb = true
										}
										_fbc = []*symbol{_begb}
										if _eegd.Position() == _ga.ShapeStylePositionAbsolute {
											_daga._bdgcc._gbc = _daga._befb._df + _cfbbc
											_daga._bdgcc._egf = _dcea
										}
									}
								}
							}
						}
					}
				}
				if _fbb, _agcf := _gacb.(*_aa.Shape); _agcf {
					_aeag := _ga.NewShapeStyle("")
					if _fbb.StyleAttr != nil {
						_aeag = _ga.NewShapeStyle(*_fbb.StyleAttr)
					}
					_ffgce := _ce.ColorWhite
					if _fbb.StrokecolorAttr != nil {
						_ffgce = _ce.ColorRGBFromHex(*_fbb.StrokecolorAttr)
					}
					if _fbb.FillcolorAttr != nil {
						_ffgce = _ce.ColorRGBFromHex(*_fbb.FillcolorAttr)
					}
					_gge := _aeag.Width()
					_ecda := _aeag.Height()
					_daeba := _fg.PointsFromTwips(int64(_aeag.Left() - _aeag.Right()))
					_cgae := _fg.PointsFromTwips(int64(_aeag.Top() - _aeag.Bottom()))
					_cedg, _dabb, _ffcc, _afebf := _aeag.Margins()
					_ddfe := &borderLine{_dde: _fg.BorderPositionBottom, _gab: _gge, _dgd: _ecda, _bef: _ffgce}
					_daga._befb._dfc = append(_daga._befb._dfc, _ddfe)
					_daga._befb._bba = &_fg.Rectangle{Top: float64(_cedg), Left: float64(_dabb), Bottom: float64(_ffcc), Right: float64(_afebf)}
					if _aeag.Position() == _ga.ShapeStylePositionAbsolute {
						_daga._bdgcc._gbc = _daga._befb._df + _daeba + float64(_aeag.Left())
						_daga._bdgcc._egf = _cgae
					}
					var _cecf []*symbol
					for _, _fbcc := range _fbb.ShapeChoice {
						if _fbcc.ShapeElementsChoice == nil {
							continue
						}
						_egdd := _fbcc.ShapeElementsChoice
						if _egdd.Textbox != nil && _egdd.Textbox.TxbxContent != nil {
							_bfc, _ := _daga.makeBlockFromTextboxContent(_egdd.Textbox.TxbxContent, _gge, _ecda, nil)
							if _bfc != nil {
								_egfb := &symbol{_cde: _ecda, _gba: _gge}
								if _aeag.MSOPositionVerticalRelative() == "\u0070\u0061\u0067\u0065" {
									_bfc._aag = _cedg
								}
								if _aeag.MSOPositionHorizontalRelative() == "\u0070\u0061\u0067\u0065" {
									_bfc._dge = _dabb
								}
								_egfb._fgef = _bfc
								_egfb._gfb = "\u0020"
								_cecf = append(_cecf, _egfb)
							}
						}
					}
					if len(_cecf) > 0 {
						_fbc = _cecf
					}
				}
				if _facb, _gabdg := _gacb.(*_aa.Line); _gabdg {
					_faca := _ga.NewShapeStyle("")
					if _facb.StyleAttr != nil {
						_faca = _ga.NewShapeStyle(*_facb.StyleAttr)
					}
					_aecd, _bfgg := 0.0, 0.0
					if _facb.FromAttr != nil {
						_aecd, _bfgg = _gedc(*_facb.FromAttr)
					}
					_eedg, _cff := _aecd, _bfgg
					if _facb.ToAttr != nil {
						_eedg, _cff = _gedc(*_facb.ToAttr)
					}
					_fffe := _ce.ColorWhite
					if _facb.StrokecolorAttr != nil {
						_fffe = _ce.ColorRGBFromHex(*_facb.StrokecolorAttr)
					}
					_ddca := _cff - _bfgg
					if _facb.StrokeweightAttr != nil {
						_bbgeg, _fadf := _g.ParseFloat(_c.ReplaceAll(*_facb.StrokeweightAttr, "\u0070\u0074", ""), 64)
						if _fadf != nil {
							_cb.Log.Debug("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020\u0070a\u0072\u0073\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020v\u003a\u006c\u0069\u006e\u0065\u0020\u0073\u0074\u0072\u006f\u006b\u0065 w\u0065\u0069\u0067\u0068\u0074\u0020\u0028\u0025\u0073\u0029", _fadf.Error())
						}
						_ddca = _bbgeg
					}
					_agdg := &borderLine{_dde: _fg.BorderPositionBottom, _gab: _eedg - _aecd, _dgd: _ddca, _bef: _fffe}
					_daga._befb._dfc = append(_daga._befb._dfc, _agdg)
					if _faca.Position() == _ga.ShapeStylePositionAbsolute {
						_daga._bdgcc._gbc = _daga._befb._df + _aecd
						_daga._bdgcc._egf = _bfgg
					}
				}
				if _ecce, _agbc := _gacb.(*_aa.Rect); _agbc {
					_daga.addRect(_ecce)
				}
			}
		} else if _fafc := _cafg.RunInnerContentChoice.Tab; _fafc != nil {
			_feb := _aacd
			if _daga._ecdc == nil {
				_daga._ecdc = _aad.NewCT_PPr()
			}
			if _cbb := _daga._ecdc.Tabs; _cbb != nil {
				_faed := _cbb.Tab[0]
				_dfccg := _fg.PointsFromTwips(*_faed.PosAttr.Int64)
				if _faed.ValAttr != _aad.ST_TabJcEnd && _faed.ValAttr != _aad.ST_TabJcRight {
					_dfccg += _aacd
				}
				_feb = _dfccg - _daga._befb._adg - _daga._befb._bba.Left - _daga._befb._bba.Right
				_dfbce := 0.0
				for _, _fage := range _daga._befb._ea {
					for _, _dcb := range _fage._beg {
						for _, _cfad := range _dcb._adf {
							for _, _agcd := range _cfad._ee {
								_dfbce += _agcd._gba
							}
						}
					}
				}
				_feb = _feb - _dfbce - _daga._befb._df
				if _feb < _aacd {
					_feb = _aacd
				}
			}
			if _fagg := _daga._ecdc.Ind; _fagg != nil {
				if _fagg.HangingAttr != nil {
					_gebgd := _fg.PointsFromTwips(int64(*_fagg.HangingAttr.ST_UnsignedDecimalNumber))
					_feb -= _daga._bdgcc._gbc - _gebgd
				}
			}
			_fbc = _gcff("\u0009", "", false, false, false)
			_bfbd := _fbc[len(_fbc)-1]
			_bfbd._gba = _feb
		} else if _cge := _cafg.RunInnerContentChoice.Ptab; _cge != nil {
			_fgcf := _daga._befb._adg + _daga._befb._bba.Left
			if _cge.RelativeToAttr == _aad.ST_PTabRelativeToIndent {
				_fgcf = _daga._befb._adg
			}
			_adce := 0.0
			for _, _dgdd := range _daga._befb._ea {
				for _, _efcg := range _dgdd._beg {
					for _, _begc := range _efcg._adf {
						for _, _eece := range _begc._ee {
							_adce += _eece._gba
						}
					}
				}
			}
			if _cge.AlignmentAttr == _aad.ST_PTabAlignmentCenter {
				_fgcf += (_daga._befb._ccd - (_daga._befb._df + _daga._befb._bba.Left + _daga._befb._bba.Right)) / 2
			} else if _cge.AlignmentAttr == _aad.ST_PTabAlignmentRight {
				_fgcf += _daga._befb._df + _daga._befb._bba.Left + _daga._befb._bba.Right + _adce
			}
			_fbc = _gcff("\u0009", "", false, false, false)
			_gacg := _fbc[len(_fbc)-1]
			_gacg._gba = _fgcf
		} else if _cafg.RunInnerContentChoice.LastRenderedPageBreak != nil && !_daga._befb._bfd {
			_fbc = append(_fbc, &symbol{_ega: true})
		} else if _accff(_cafg) {
			_daga.addCurrentWordToParagraph()
			_daga.newLine()
			_daga.newWord()
			_daga.addEmptyLine()
		} else if _cafg.RunInnerContentChoice.FldChar != nil {
			_cdff := _cafg.RunInnerContentChoice.FldChar.FldCharTypeAttr
			switch _cdff {
			case _aad.ST_FldCharTypeBegin, _aad.ST_FldCharTypeSeparate:
				if _daga.isKnownField() {
					_daga._bcgdg._ee = append(_daga._bcgdg._ee, &symbol{_fad: true})
				}
			case _aad.ST_FldCharTypeEnd:
				if _daga.isKnownField() {
					_daga._bcgdg._ee = append(_daga._bcgdg._ee, &symbol{_fad: false})
				}
			}
			return false
		}
	}
	var _fegfc _ce.TextStyle
	var _dgdde, _bfge bool
	var _afd *_ce.Color
	if !_fcfb {
		_fegfc, _dgdde, _bfge, _afd = _daga.makeRunStyle(_bga, false, false, false, _eeg, _cdcg)
		if _fegfc.Font != nil && (_daga._ffcga == nil || (_daga._ffcga != nil && _daga._ffcga.EnableFontSubsetting)) {
			_daga._gaeg.EnableFontSubsetting(_fegfc.Font)
		}
	}
	for _, _efafd := range _fbc {
		if _efafd._ega && _daga._eeabe._eff > _daga._gfcb.Top {
			_daga.addCurrentParagraphToCurrentPage()
			_daga.newPage()
			_daga.newParagraph()
			_daga.determineParagraphBounds()
			_daga.newLine()
			_daga.newWord()
			continue
		}
		if _efafd._bbaa != nil || _efafd._fgef != nil {
			_daga.addInlineSymbol(_efafd)
		} else {
			_efafd._fge = &_fegfc
			_efafd._dfg = _dgdde
			_efafd._fc = _bfge
			_efafd._dab = _afd
			if _efafd._cage {
				_egca := *_bga
				_egca.B = nil
				_egca.U = nil
				_dbad, _, _, _ := _daga.makeRunStyle(&_egca, false, false, false, _eeg, _cdcg)
				_efafd._fge = &_dbad
				_efafd._dab = nil
			}
			_daga.addTextSymbol(_efafd)
		}
	}
	if _daga._ddcb != nil && _daga._ddcb._fbac {
		var _fdf, _dade float64
		for _, _ece := range _fbc {
			_fdf += _ece._gba
		}
		_ggfc := 0
		_gfc := _daga._eeabe._gd.Left
		_acc := len(_daga._ddcb._aebg)
		if _acc > 1 && _daga._ddcb._fbac {
			_acc = len(_daga._ddcb._aebg) - 1
		}
		_bdda := _daga._befb._adg < _fdf
		_acg := _daga._bdgcc._beb + _fdf
		for {
			var _dgc float64
			if _bdda || _ggfc >= _acc {
				_dgc = _aacd
			} else {
				_dgc = _daga._ddcb._aebg[_ggfc]
				_ggfc++
			}
			_gfc += _dgc
			if _gfc > _acg {
				_dade = _gfc - _acg
				break
			}
		}
		_daga.addTextSymbol(&symbol{_gfb: "\u0020", _gba: _dade})
	}
	return false
}

func _egbc(_befd string) bool {
	for _, _ecba := range _befd {
		if _ecba > 255 {
			return false
		}
	}
	return true
}

func init() {
	_aadc = _bbg.MustCompile("\u0053E\u0054 \u0028\u002e\u002b\u0029\u0020\u0022\u0028\u002e\u002b\u0029\u0022")
	_aadbf = _bbg.MustCompile("\u0052\u0045\u0046\u0020\u0028\u002e\u002b\u003f\u0029\u0020")
}

func (_acd *convertContext) currentParagraphOverflowsCurrentPage() bool {
	_cefe := _acd._befb._cd + _acd._befb._bba.Top + _acd._befb._bba.Bottom
	_dbga := _acd._eeabe._gd.Bottom - _acd._befb._de
	if len(_acd._eeabe._bbge) == 0 && len(_acd._befb._bf) > 0 {
		_dbga -= _gf
	}
	return _cefe+_acd._befb._cec > _dbga || _cefe+_acd._befb._fef > _dbga
}

func (_dcgd *convertContext) drawHeaderFooter() {
	_dcgd.setPagesHeaderFooterRefs()
	_dcgd._gaeg.PageFinalize(func(_agcg _ce.PageFinalizeFunctionArgs) error {
		_dafe := _dcgd._edfd[_agcg.PageNum-1]
		_dcgd._eeabe = _dafe
		_dcgd._eeabe._fe = nil
		_dcgd._eeabe._gbg = nil
		_dcgd.assignHeaderFooterToPage(_dafe)
		_eagfd := _ce.NewBlock(_dcgd._cbceg[0], _dcgd._fecfc)
		_eagfd.SetPos(0, 0)
		_eagfd.SetMargins(0, 0, 0, 0)
		_fbbc := _eaae(_dcgd._gaeg, _eagfd, _dcgd._eeabe._fe, _dcgd._fcdb, _agcg)
		_dcgd._fecfc = _fbbc
		_dfea := _ce.NewBlock(_dcgd._cbceg[0], _dcgd._edda)
		_dfea.SetPos(0, 0)
		_dfea.SetMargins(0, 0, 0, 0)
		_fbbc = _eaae(_dcgd._gaeg, _dfea, _dcgd._eeabe._gbg, _dcgd._fcbc, _agcg)
		_dcgd._edda = _fbbc
		_dcgd._gaeg.Draw(_eagfd)
		_dcgd._gaeg.Draw(_dfea)
		return nil
	})
}

func _egcfe(_dccg, _bfgeb *_aad.CT_TcPr) *_aad.CT_TcPr {
	if _dccg == nil {
		return _bfgeb
	}
	if _bfgeb == nil {
		return _dccg
	}
	if _dccg.CnfStyle == nil {
		_dccg.CnfStyle = _bfgeb.CnfStyle
	}
	if _dccg.TcW == nil {
		_dccg.TcW = _bfgeb.TcW
	}
	if _dccg.GridSpan == nil {
		_dccg.GridSpan = _bfgeb.GridSpan
	}
	if _dccg.HMerge == nil {
		_dccg.HMerge = _bfgeb.HMerge
	}
	if _dccg.VMerge == nil {
		_dccg.VMerge = _bfgeb.VMerge
	}
	if _dccg.TcBorders == nil {
		_dccg.TcBorders = _bfgeb.TcBorders
	}
	if _dccg.Shd == nil {
		_dccg.Shd = _bfgeb.Shd
	}
	if _dccg.NoWrap == nil {
		_dccg.NoWrap = _bfgeb.NoWrap
	}
	if _dccg.TcMar == nil {
		_dccg.TcMar = _bfgeb.TcMar
	}
	if _dccg.TextDirection == nil {
		_dccg.TextDirection = _bfgeb.TextDirection
	}
	if _dccg.TcFitText == nil {
		_dccg.TcFitText = _bfgeb.TcFitText
	}
	if _dccg.VAlign == nil {
		_dccg.VAlign = _bfgeb.VAlign
	}
	if _dccg.HideMark == nil {
		_dccg.HideMark = _bfgeb.HideMark
	}
	if _dccg.Headers == nil {
		_dccg.Headers = _bfgeb.Headers
	}
	if _dccg.CellMarkupElementsChoice.CellIns == nil {
		_dccg.CellMarkupElementsChoice.CellIns = _bfgeb.CellMarkupElementsChoice.CellIns
	}
	if _dccg.CellMarkupElementsChoice.CellDel == nil {
		_dccg.CellMarkupElementsChoice.CellDel = _bfgeb.CellMarkupElementsChoice.CellDel
	}
	if _dccg.CellMarkupElementsChoice.CellMerge == nil {
		_dccg.CellMarkupElementsChoice.CellMerge = _bfgeb.CellMarkupElementsChoice.CellMerge
	}
	if _dccg.TcPrChange == nil {
		_dccg.TcPrChange = _bfgeb.TcPrChange
	}
	return _dccg
}

type symbol struct {
	_gfb  string
	_fa   float64
	_gfdc float64
	_gba  float64
	_cde  float64
	_cba  float64
	_fge  *_ce.TextStyle
	_bbaa *_ce.Image
	_fgef *block
	_ffc  string
	_dfg  bool
	_fc   bool
	_fad  bool
	_dab  *_ce.Color
	_cage bool
	_ega  bool
	_caf  *_ce.Color
}

func _fbdg(_cfae *_aad.CT_ParaRPr, _ecdcf *_aad.CT_RPr) *_aad.CT_ParaRPr {
	if _ecdcf == nil {
		return _cfae
	}
	if _cfae == nil {
		_cfae = _aad.NewCT_ParaRPr()
		if _ecdcf.B != nil {
			_cfae.B = _ecdcf.B
		}
		if _ecdcf.BCs != nil {
			_cfae.BCs = _ecdcf.BCs
		}
		if _ecdcf.I != nil {
			_cfae.I = _ecdcf.I
		}
		if _ecdcf.ICs != nil {
			_cfae.ICs = _ecdcf.ICs
		}
		if _ecdcf.U != nil {
			_cfae.U = _ecdcf.U
		}
		if _ecdcf.Color != nil {
			_cfae.Color = _ecdcf.Color
		}
		return _cfae
	}
	if _cfae.B != _ecdcf.B {
		_cfae.B = _ecdcf.B
	}
	if _cfae.BCs != _ecdcf.BCs {
		_cfae.BCs = _ecdcf.BCs
	}
	if _cfae.I != _ecdcf.I {
		_cfae.I = _ecdcf.I
	}
	if _cfae.ICs != _ecdcf.ICs {
		_cfae.ICs = _ecdcf.ICs
	}
	if _cfae.U != _ecdcf.U {
		_cfae.U = _ecdcf.U
	}
	if _cfae.Color != _ecdcf.Color {
		_cfae.Color = _ecdcf.Color
	}
	return _cfae
}

func _dabdb(_dagaa uint16) string {
	switch _dagaa {
	case 0x429, 0x401, 0x801, 0xc01, 0x1001, 0x1401, 0x1801, 0x1c01, 0x2001, 0x2401, 0x2801, 0x2c01, 0x3001, 0x3401, 0x3801, 0x3c01, 0x4001, 0x420, 0x846, 0x859, 0x45f, 0x460, 0x463, 0x48c:
		return "\u0041\u0072\u0061\u0062"
	case 0x42b:
		return "\u0041\u0072\u006d\u006e"
	case 0x445, 0x845, 0x44d, 0x458:
		return "\u0042\u0065\u006e\u0067"
	case 0x45d:
		return "\u0043\u0061\u006e\u0073"
	case 0x45c:
		return "\u0043\u0068\u0065\u0072"
	case 0x419, 0x402, 0x281a, 0x422, 0x819, 0xc1a, 0x1c1a, 0x201a, 0x301a, 0x423, 0x428, 0x82c, 0x42f, 0x43f, 0x440, 0x843, 0x444, 0x450, 0x46d, 0x485:
		return "\u0043\u0072\u0079\u006c"
	case 0x439, 0x44e, 0x44f, 0x457, 0x459, 0x860, 0x461, 0x861:
		return "\u0044\u0065\u0076\u0061"
	case 0x45e, 0x473, 0x873:
		return "\u0045\u0074\u0068\u0069"
	case 0x437:
		return "\u0047\u0065\u006f\u0072"
	case 0x408:
		return "\u0047\u0072\u0065\u006b"
	case 0x447:
		return "\u0047\u0075\u006a\u0072"
	case 0x446:
		return "\u0047\u0075\u0072\u0075"
	case 0x412:
		return "\u0048\u0061\u006e\u0067"
	case 0x804, 0x1004:
		return "\u0048\u0061\u006e\u0073"
	case 0x404, 0xc04, 0x1404:
		return "\u0048\u0061\u006e\u0074"
	case 0x40d, 0x43d:
		return "\u0048\u0065\u0062\u0072"
	case 0x411:
		return "\u004a\u0070\u0061\u006e"
	case 0x453:
		return "\u004b\u0068\u006d\u0072"
	case 0x44b:
		return "\u004b\u006e\u0064\u0061"
	case 0x454:
		return "\u004c\u0061\u006f\u006f"
	case 0x409, 0xc09, 0x809, 0x1009, 0x403, 0x406, 0x413, 0x813, 0x479, 0x40b, 0x40c, 0xc0c, 0x407, 0x807, 0xc07, 0x1007, 0x1407, 0x410, 0x414, 0x814, 0x416, 0x816, 0x40a, 0x41d, 0x405, 0x40e, 0x415, 0x41f, 0x42d, 0x424, 0x426, 0x427, 0x418, 0x818, 0x241a, 0x41a, 0x491, 0x83c, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x425, 0x456, 0x41b, 0x1409, 0x1809, 0x1c09, 0x2009, 0x2409, 0x2809, 0x2c09, 0x3009, 0x3409, 0x3809, 0x3c09, 0x4009, 0x4409, 0x4809, 0x80a, 0xc0a, 0x100a, 0x140a, 0x180a, 0x1c0a, 0x200a, 0x240a, 0x280a, 0x2c0a, 0x300a, 0x340a, 0x380a, 0x3c0a, 0x400a, 0x440a, 0x480a, 0x4c0a, 0x500a, 0x540a, 0x80c, 0x100c, 0x140c, 0x180c, 0x1c0c, 0x200c, 0x240c, 0x280c, 0x2c0c, 0x300c, 0x340c, 0x3c0c, 0x380c, 0x40f, 0x810, 0x417, 0x81a, 0x101a, 0x141a, 0x181a, 0x2c1a, 0x41c, 0x81d, 0x421, 0x42c, 0x42e, 0x82e, 0x438, 0x43a, 0x43b, 0x83b, 0xc3b, 0x103b, 0x143b, 0x183b, 0x1c3b, 0x203b, 0x243b, 0x43e, 0x83e, 0x441, 0x442, 0x443, 0x452, 0x85d, 0x85f, 0x462, 0x464, 0x466, 0x467, 0x468, 0x469, 0x46a, 0x46b, 0x86b, 0xc6b, 0x46c, 0x46e, 0x46f, 0x470, 0x471, 0x472, 0x474, 0x475, 0x476, 0x477, 0x47a, 0x47c, 0x47e, 0x481, 0x482, 0x483, 0x484, 0x486, 0x487, 0x488:
		return "\u004c\u0061\u0074\u006e"
	case 0x44c:
		return "\u004d\u006c\u0079\u006d"
	case 0x850:
		return "\u004d\u006f\u006e\u0067"
	case 0x455:
		return "\u004d\u0079\u006d\u0072"
	case 0x448:
		return "\u004f\u0072\u0079\u0061"
	case 0x45b:
		return "\u0053\u0069\u006e\u0068"
	case 0x45a:
		return "\u0053\u0079\u0072\u0063"
	case 0x449:
		return "\u0054\u0061\u006d\u006c"
	case 0x44a:
		return "\u0054\u0065\u006c\u0075"
	case 0x465:
		return "\u0054\u0068\u0061\u0061"
	case 0x41e:
		return "\u0054\u0068\u0061\u0069"
	case 0x851, 0x451:
		return "\u0054\u0069\u0062\u0074"
	case 0x480:
		return "\u0055\u0069\u0067\u0068"
	case 0x42a:
		return "\u0056\u0069\u0065\u0074"
	case 0x478:
		return "\u0059\u0069\u0069\u0069"
	}
	return ""
}

func (_caaff *convertContext) getTableCellProperties(_dccf *_ce.Table, _eedd *_aad.CT_TblPr, _dbbd *_aad.CT_TblPrEx, _fgefe []*_aad.CT_TblStylePr, _ffbd int, _dcff *_aad.CT_TcPr, _eebd *_aad.CT_RPr, _agcaf int, _aadb int, _ggfef int) (*_aad.CT_RPr, _ce.CellVerticalAlignment, float64, float64, float64, float64, *_ce.TableCell) {
	var _gcfb *_ce.TableCell
	_ceef := 1
	_cbaae := _aad.NewCT_RPr()
	var _ffce, _gade int64
	for _, _edfb := range _fgefe {
		if _ffbd == 0 && _edfb.TypeAttr == _aad.ST_TblStyleOverrideTypeFirstRow {
			_ageb(_edfb.PPr, &_ffce, &_gade)
			_dcff = _egcfe(_dcff, _edfb.TcPr)
			_eebd = _gefea(_cbaae, _edfb.RPr)
			break
		}
		if _agcaf == 0 && _edfb.TypeAttr == _aad.ST_TblStyleOverrideTypeFirstCol {
			_ageb(_edfb.PPr, &_ffce, &_gade)
			_dcff = _egcfe(_dcff, _edfb.TcPr)
			_eebd = _gefea(_cbaae, _edfb.RPr)
		}
		if _ffbd == _aadb-1 && _edfb.TypeAttr == _aad.ST_TblStyleOverrideTypeLastRow {
			_ageb(_edfb.PPr, &_ffce, &_gade)
			_dcff = _egcfe(_dcff, _edfb.TcPr)
			_eebd = _gefea(_cbaae, _edfb.RPr)
		}
		if _agcaf == _ggfef-1 && _edfb.TypeAttr == _aad.ST_TblStyleOverrideTypeLastCol {
			_ageb(_edfb.PPr, &_ffce, &_gade)
			_dcff = _egcfe(_dcff, _edfb.TcPr)
			_eebd = _gefea(_cbaae, _edfb.RPr)
		}
		if _ffbd%2 != 0 && _edfb.TypeAttr == _aad.ST_TblStyleOverrideTypeBand1Horz {
			_ageb(_edfb.PPr, &_ffce, &_gade)
			_dcff = _egcfe(_dcff, _edfb.TcPr)
			if _agcaf == 0 {
				_eebd = _gefea(_cbaae, _edfb.RPr)
			} else {
				_eebd = _fcca(_eebd, _edfb.RPr)
			}
		}
		if _agcaf%2 != 0 && _edfb.TypeAttr == _aad.ST_TblStyleOverrideTypeBand1Vert {
			_ageb(_edfb.PPr, &_ffce, &_gade)
			_dcff = _egcfe(_dcff, _edfb.TcPr)
			if _ffbd == 0 {
				_eebd = _gefea(_cbaae, _edfb.RPr)
			} else {
				_eebd = _fcca(_cbaae, _edfb.RPr)
			}
		}
		if _ffbd%2 == 0 && _edfb.TypeAttr == _aad.ST_TblStyleOverrideTypeBand2Horz {
			_ageb(_edfb.PPr, &_ffce, &_gade)
			_dcff = _egcfe(_dcff, _edfb.TcPr)
			if _agcaf == _ggfef-1 {
				_eebd = _gefea(_cbaae, _edfb.RPr)
			} else {
				_eebd = _fcca(_cbaae, _edfb.RPr)
			}
		}
		if _agcaf%2 == 0 && _edfb.TypeAttr == _aad.ST_TblStyleOverrideTypeBand2Vert {
			_ageb(_edfb.PPr, &_ffce, &_gade)
			_dcff = _egcfe(_dcff, _edfb.TcPr)
			if _ffbd == _aadb-1 {
				_eebd = _gefea(_cbaae, _edfb.RPr)
			} else {
				_eebd = _fcca(_cbaae, _edfb.RPr)
			}
		}
	}
	_ebaee := _gdbeb(_eedd, _dbbd, _dcff, _ffbd, _agcaf, _aadb, _ggfef)
	_aefc := _ce.CellVerticalAlignmentTop
	_afcfg, _daad, _fcbd, _dbeb := 0.0, 0.0, 0.0, 0.0
	if _ebaee != nil {
		if _ebaee.GridSpan != nil {
			_ceef = int(_ebaee.GridSpan.ValAttr)
		}
		_gcfb = _dccf.MultiColCell(_ceef)
		if _dagb := _ebaee.TcBorders; _dagb != nil {
			if _fdgc := _dagb.Left; _fdgc != nil {
				_acbe, _gaef, _gfgb := _aaaf(_fdgc)
				_gcfb.SetBorder(_ce.CellBorderSideLeft, _acbe, _gfgb)
				if _gaef != nil && *_gaef != nil {
					_gcfb.SetSideBorderColor(_ce.CellBorderSideLeft, *_gaef)
				}
			}
			if _febd := _dagb.Top; _febd != nil {
				_fbba, _fcfeb, _fbded := _aaaf(_febd)
				_gcfb.SetBorder(_ce.CellBorderSideTop, _fbba, _fbded)
				if _fcfeb != nil && *_fcfeb != nil {
					_gcfb.SetSideBorderColor(_ce.CellBorderSideTop, *_fcfeb)
				}
			}
			if _dccd := _dagb.Right; _dccd != nil {
				_egg, _ffbf, _gfdg := _aaaf(_dccd)
				_gcfb.SetBorder(_ce.CellBorderSideRight, _egg, _gfdg)
				if _ffbf != nil && *_ffbf != nil {
					_gcfb.SetSideBorderColor(_ce.CellBorderSideRight, *_ffbf)
				}
			}
			if _agdf := _dagb.Bottom; _agdf != nil {
				_ebfd, _gcbg, _eecea := _aaaf(_agdf)
				_gcfb.SetBorder(_ce.CellBorderSideBottom, _ebfd, _eecea)
				if _gcbg != nil && *_gcbg != nil {
					_gcfb.SetSideBorderColor(_ce.CellBorderSideBottom, *_gcbg)
				}
			}
		} else {
			_gcfb.SetBorder(_ce.CellBorderSideAll, _ce.CellBorderStyleSingle, _fcdf(0.125))
			_gcfb.SetBorderColor(_ce.ColorBlack)
		}
		_caaff.setCellBackgroundColor(_gcfb, _ebaee.Shd)
		if _dgec := _ebaee.TcMar; _dgec != nil {
			_afcfg = _gadgb(_dgec.Left, 0)
			_daad = _gadgb(_dgec.Right, 0)
			_fcbd = _gadgb(_dgec.Top, _ffce)
			_dbeb = _gadgb(_dgec.Bottom, _gade)
		}
		if _cfe := _ebaee.VAlign; _cfe != nil {
			switch _cfe.ValAttr {
			case _aad.ST_VerticalJcCenter:
				_aefc = _ce.CellVerticalAlignmentMiddle
			case _aad.ST_VerticalJcBottom:
				_aefc = _ce.CellVerticalAlignmentBottom
			}
		}
	}
	if _gcfb == nil {
		_gcfb = _dccf.NewCell()
	}
	return _eebd, _aefc, _afcfg, _daad, _fcbd, _dbeb, _gcfb
}

func (_cfddg *convertContext) addAnchorBlocks(_dgaf []*_aad.EG_PContent) {
	for _, _dgb := range _dgaf {
		for _, _feg := range _dgb.PContentChoice.EG_ContentRunContent {
			if _ccbgb := _feg.ContentRunContentChoice.R; _ccbgb != nil {
				for _, _abd := range _ccbgb.EG_RunInnerContent {
					if _faee := _abd.RunInnerContentChoice.Drawing; _faee != nil {
						for _, _gec := range _faee.DrawingChoice {
							if _gec.Anchor == nil {
								continue
							}
							_eee := _gec.Anchor
							var _dabfg, _fcf, _cga, _eefe float64
							if _eee.DistLAttr != nil {
								_dabfg = _ac.FromEMU(int64(*_eee.DistLAttr))
							}
							if _eee.DistRAttr != nil {
								_fcf = _ac.FromEMU(int64(*_eee.DistRAttr))
							}
							if _eee.DistTAttr != nil {
								_cga = _ac.FromEMU(int64(*_eee.DistTAttr))
							}
							if _eee.DistBAttr != nil {
								_eefe = _ac.FromEMU(int64(*_eee.DistBAttr))
							}
							var _ade, _babc, _gce, _eeb float64
							if _fcd := _eee.Extent; _fcd != nil {
								_eeb = _ac.FromEMU(_fcd.CxAttr)
								_gce = _ac.FromEMU(_fcd.CyAttr)
							}
							_gga := 0.0
							_gfgcg := 0.0
							_bcfb, _ebde := _eee.PositionH, _eee.PositionV
							switch _bcfb.RelativeFromAttr {
							case _aad.WdST_RelFromHPage:
								_gfgcg = 0
							default:
								_gfgcg = _cfddg._eeabe._gd.Left
							}
							if _aaca := _bcfb.PosHChoice; _aaca != nil {
								if _aaca.PosOffset != nil {
									_ade = _ac.FromEMU(int64(*_aaca.PosOffset))
								}
								switch _aaca.Align {
								case _aad.WdST_AlignHRight:
									_ade += _cfddg._befb._ccd - _cfddg._befb._df - _eeb
								case _aad.WdST_AlignHCenter:
									_ade += (_cfddg._befb._ccd - _cfddg._befb._df - _eeb) / 2
								}
							}
							switch _ebde.RelativeFromAttr {
							case _aad.WdST_RelFromVPage:
								_gga = 0
							case _aad.WdST_RelFromVParagraph:
								_gga = _cfddg._befb._cd
							case _aad.WdST_RelFromVTopMargin:
								_gga = 0
							default:
								_gga = _cfddg._eeabe._gd.Top
							}
							if _acff := _ebde.PosVChoice; _acff != nil {
								if _acff.PosOffset != nil {
									_babc = _ac.FromEMU(int64(*_acff.PosOffset))
								}
							}
							_gga += _babc
							_gfgcg += _ade
							_aebbd := _gga + _gce
							_gbba := _gfgcg + _eeb
							if _gga < _cfddg._eeabe._aac {
								_cfddg.moveCurrentParagraphToNewPage()
							}
							_adc := _babc + _gce
							if _adc > _cfddg._befb._fef {
								_cfddg._befb._fef = _adc
							}
							if !_eee.AllowOverlapAttr {
								_cfddg._befb._cec = _gce
							}
							if _eee.WrapTypeChoice != nil && _eee.WrapTypeChoice.WrapNone == nil {
								_cfddg._befb._baa = append(_cfddg._befb._baa, &zoneToSkip{_ccbg: &_fg.Rectangle{Top: _gga - _cga, Bottom: _aebbd + _eefe, Left: _gfgcg - _dabfg, Right: _gbba + _fcf}, _cf: _eee.WrapTypeChoice, _efa: _eee.RelativeHeightAttr})
							}
							if _bgca := _eee.Graphic; _bgca != nil {
								if _agca := _bgca.GraphicData; _agca != nil {
									for _, _bggc := range _agca.Any {
										if _gccg, _ceac := _bggc.(*_afg.Pic); _ceac {
											_cbcfb, _geac := _cfddg.makePdfImageFromGraphics(_gccg)
											if _geac != nil {
												_cb.Log.Debug("C\u0061\u006e\u006e\u006ft \u0072e\u0061\u0064\u0020\u0069\u006da\u0067\u0065\u003a\u0020\u0025\u0073", _geac)
											}
											_deab := false
											_fdbd := 0.0
											if _gccg.SpPr != nil && _gccg.SpPr.Xfrm != nil {
												if _gccg.SpPr.Xfrm.RotAttr != nil {
													_fdbd = _ac.DegreeFromSTAngle(*_gccg.SpPr.Xfrm.RotAttr)
												}
												if _cacg := _gccg.SpPr.Xfrm.Ext; _cacg != nil {
													_deab = true
												}
											}
											if _cbcfb != nil {
												if !_deab {
													_cbcfb.Scale(_eeb/_cbcfb.Width(), _gce/_cbcfb.Height())
												} else {
													_cbcfb.ScaleToWidth(_eeb)
												}
												_cbcfb.SetAngle(_fdbd)
												_aea := &image{_bfb: _cbcfb, _gfga: _gfgcg, _gg: _gga}
												if _eee.BehindDocAttr {
													_cfddg._befb._ba = append(_cfddg._befb._ba, _aea)
												} else {
													_cfddg._befb._gcc = append(_cfddg._befb._gcc, _aea)
												}
											}
										} else if _cbaf, _ced := _bggc.(*_f.Chart); _ced {
											_fcde, _fdc := _cfddg.makePdfBlockFromChart(_cbaf, _eeb, _gce)
											if _fdc != nil {
												_cb.Log.Debug("C\u0061\u006e\u006e\u006ft \u0072e\u0061\u0064\u0020\u0062\u006co\u0063\u006b\u003a\u0020\u0025\u0073", _fdc)
											}
											if _fcde != nil {
												_gaa := &block{_cee: _fcde, _dge: _gfgcg, _aag: _gga}
												if _eee.BehindDocAttr {
													_cfddg._befb._afge = append(_cfddg._befb._afge, _gaa)
												} else {
													_cfddg._befb._daeb = append(_cfddg._befb._daeb, _gaa)
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

func (_aada *convertContext) setCellBackgroundColor(_fagef *_ce.TableCell, _dggg *_aad.CT_Shd) {
	if _dggg == nil {
		return
	}
	if _dggg.ValAttr == _aad.ST_ShdSolid {
		if _bfcg := _dggg.ColorAttr; _bfcg != nil {
			if _bddc := _bfcg.ST_HexColorRGB; _bddc != nil {
				_cbaeg := _ce.ColorRGBFromHex("\u0023" + *_bddc)
				_fagef.SetBackgroundColor(_cbaeg)
				return
			}
		}
	} else {
		if _eefa := _dggg.FillAttr; _eefa != nil {
			if _cbe := _eefa.ST_HexColorRGB; _cbe != nil {
				_bged := _ce.ColorRGBFromHex("\u0023" + *_cbe)
				_fagef.SetBackgroundColor(_bged)
				_dafg := 0
				_afgb := _dggg.ValAttr.String()
				if _c.HasPrefix(_afgb, "\u0070\u0063\u0074") {
					_ddadg, _afcfb := _g.Atoi(_afgb[3:])
					if _afcfb != nil {
						return
					}
					_dafg = _ddadg
				} else if _dggg.ValAttr > _aad.ST_ShdSolid && _dggg.ValAttr <= _aad.ST_ShdThinDiagCross {
					_dafg = 25
				}
				_bafa := float64(_dafg) / 100.0
				if _begcd := _dggg.ColorAttr; _begcd != nil {
					if _gadbc := _begcd.ST_HexColorRGB; _gadbc != nil {
						_eced := _ce.ColorRGBFromHex("\u0023" + *_gadbc)
						_fbeb, _ebca, _bbadf := _bged.ToRGB()
						_eefc, _baaa, _gcg := _eced.ToRGB()
						_bged = _ce.ColorRGBFromArithmetic((1-_bafa)*_fbeb+_bafa*_eefc, (1-_bafa)*_ebca+_bafa*_baaa, (1-_bafa)*_bbadf+_bafa*_gcg)
						_fagef.SetBackgroundColor(_bged)
					}
				}
			}
		}
	}
}

func _gadgb(_bggd *_aad.CT_TblWidth, _dbce int64) float64 {
	if _bggd != nil {
		if _bggd.TypeAttr == _aad.ST_TblWidthUnset || _bggd.TypeAttr == _aad.ST_TblWidthDxa {
			if _dfffe := _bggd.WAttr; _dfffe != nil {
				if _aedc := _dfffe.ST_DecimalNumberOrPercent; _aedc != nil {
					if _ffbb := _aedc.ST_UnqualifiedPercentage; _ffbb != nil {
						return _fg.PointsFromTwips(*_ffbb + _dbce)
					}
				}
			}
		}
	}
	return 0.0
}

func (_gdab *convertContext) addAbsoluteTable(_accb *_aad.CT_Tbl) {
	_gacc := _accb.TblGrid
	if _gacc == nil {
		return
	}
	_cfdf := len(_gacc.GridCol)
	_efef := false
	if _cfdf == 0 {
		_cfdf, _efef = _gdab.calculateTotalColumn(_accb)
	}
	_gedd := []float64{}
	_ggee := []float64{}
	_bedd := 0.0
	_fged := _gacc.GridCol
	_bbbd := _cfdf
	if len(_gdab._dgafg) == 0 {
		for _, _bcec := range _accb.EG_ContentRowContent {
			if _bcec == nil {
				continue
			}
			if _ffeb := _bcec.ContentRowContentChoice.Tr; len(_ffeb) > 0 {
				_fcfbb := _ffeb[0]
				if _cfaf := _fcfbb.TrPr; _cfaf != nil {
					if len(_cfaf.TrPrBaseChoice) != 0 {
						for _, _deag := range _cfaf.TrPrBaseChoice {
							if _deag.GridAfter != nil {
								if _deag.GridAfter.ValAttr == 0 {
									_bbbd = 0
									break
								}
								_deaa := int(_deag.GridAfter.ValAttr)
								if _deaa < _bbbd {
									_bbbd = _deaa
								}
							}
						}
					}
				}
			}
		}
		if _bbbd != _cfdf {
			_cfdf -= _bbbd
			_fged = _fged[:len(_fged)-_bbbd]
		}
		for _, _adadb := range _fged {
			_fdba := 0.0
			if _adadb.WAttr.ST_UnsignedDecimalNumber != nil {
				_fdba = _fg.PointsFromTwips(int64(*_adadb.WAttr.ST_UnsignedDecimalNumber))
			}
			_gedd = append(_gedd, _fdba)
			_bedd += _fdba
		}
	} else {
		for _, _gffd := range _gdab._dgafg {
			_gedd = append(_gedd, _gffd)
			_bedd += _gffd
		}
	}
	for _adacd := 0; _adacd < _cfdf; _adacd++ {
		_ggee = append(_ggee, _gedd[_adacd]/_bedd)
	}
	_ffdd, _abad, _dbc := _faaac(_gdab._adae, _accb.TblPr)
	var _adcb []*_aad.CT_TblStylePr
	if _ffdd.TblStyle != nil {
		_adcb = _dbab(_gdab._adae, _ffdd.TblStyle.ValAttr)
	}
	if _ffdd.TblLayout != nil && _ffdd.TblLayout.TypeAttr == _aad.ST_TblLayoutTypeFixed {
		_efef = false
	}
	_gdab.renderTableRows(_accb, _cfdf, _efef, _ggee, _ffdd, _adcb, _abad, _dbc, _bedd, nil)
}

type note struct {
	_cea string
	_agb []*_aad.EG_BlockLevelElts
	_ge  *_ce.Block
}

func (_cfadc *convertContext) addParagraphWithTableToHeaderFooter(_ecdd _ce.Table, _fbfd, _dcgff float64) {
	_cfadc.newParagraph()
	_cfadc._befb._bba = &_fg.Rectangle{Top: _fcdf(2), Bottom: _fcdf(2), Left: 0, Right: 0}
	_cfadc._befb._dae = &tableWrapper{_agae: &_ecdd, _cfd: _fbfd}
	_cfadc._befb._adg = _dcgff
	_cfadc._befb._cec = _ecdd.Height()
	_cfadc.determineParagraphBounds()
	if _cfadc._fdee {
		_cfadc.addCurrentParagraphHeaderToCurrentPage()
	} else if _cfadc._cfadd {
		_cfadc.addCurrentParagraphFooterToCurrentPage()
	}
}

func (_gdfg *convertContext) processCtr(_bcdg *_aad.CT_R, _caaf *_aad.CT_PPr, _bdbc bool, _ebeg *link, _aegd *_ce.StyledParagraph, _eeab bool, _ccga int, _faff int, _facfd int, _bbba *_ce.Division, _bcddg bool) (bool, int, bool, _ce.TextStyle) {
	var _dgda _ce.TextStyle
	_gdad := _aefa(_gdfg._adae, _bcdg.RPr, _caaf)
	for _, _ggag := range _bcdg.EG_RunInnerContent {
		var _efce *_ce.TextChunk
		if _ggag.RunInnerContentChoice.T != nil {
			_efbc := _ggag.RunInnerContentChoice.T.Content
			if _gdad != nil && _edgc(_gdad.Caps) {
				_efbc = _c.ToUpper(_efbc)
			}
			if _efbc == "" {
				_efbc = "\u0020"
			}
			_bdbc = true
			if _ebeg._debc != "" {
				if _ebeg._ffg == _af.ST_TargetModeExternal {
					_efce = _aegd.AddExternalLink(_efbc, _ebeg._debc)
				} else if _ebeg._ffg == _af.ST_TargetModeInternal {
					_efce = _aegd.Append(_efbc)
					_gdfg._eaaf[_efce] = _ebeg._debc
				}
			} else {
				_efce = _aegd.Append(_efbc)
			}
			if _gdad.Highlight != nil {
				_efce.Highlight(_a.HighlightColorToCreatorColorMap[_gdad.Highlight.ValAttr], 1.0)
			}
			_dgda, _, _, _ = _gdfg.makeRunStyle(_gdad, false, false, false, false, false)
			_efce.Style = _dgda
		} else if _ggag.RunInnerContentChoice.LastRenderedPageBreak != nil && !_eeab && _ccga != _faff {
			_facfd = _faff
			break
		} else if _ggag.RunInnerContentChoice.Br != nil {
			_aegd.Append("\u000a\u0020")
			_bdbc = true
		} else if _ggag.RunInnerContentChoice.Drawing != nil {
			for _, _edca := range _ggag.RunInnerContentChoice.Drawing.DrawingChoice {
				if _edca.Inline == nil {
					continue
				}
				_cdfb := _edca.Inline
				if _ddda := _cdfb.Graphic; _ddda != nil {
					if _gdg := _ddda.GraphicData; _gdg != nil {
						_cagc := _cdfb.Extent
						if _cagc == nil {
							continue
						}
						_gbgd := _ac.FromEMU(_cagc.CxAttr)
						_dgfe := _ac.FromEMU(_cagc.CyAttr)
						for _, _ebg := range _gdg.Any {
							if _eecfa, _cdffc := _ebg.(*_afg.Pic); _cdffc {
								if _eecfa.BlipFill != nil {
									_bgcg, _gdgg := _gdfg.makePdfImageFromGraphics(_eecfa)
									if _gdgg != nil {
										_cb.Log.Debug("C\u0061\u006e\u006e\u006ft \u006da\u006b\u0065\u0020\u0069\u006da\u0067\u0065\u003a\u0020\u0025\u0073", _gdgg)
									}
									if _bgcg != nil {
										_bgcg.Scale(_gbgd/_bgcg.Width(), _dgfe/_bgcg.Height())
										_acebe := _bbba.Add(_bgcg)
										if _acebe != nil {
											_cb.Log.Debug("\u0045\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0061\u0062l\u0065\u0020\u0074\u006f \u0061\u0064\u0064\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0064\u0069\u0076\u0069\u0073\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029", _acebe.Error())
										}
										_bdbc = true
										_bcddg = false
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return _bdbc, _facfd, _bcddg, _dgda
}

type page struct {
	_gd   *_fg.Rectangle
	_bg   []*paragraph
	_eff  float64
	_aac  float64
	_cag  []*zoneToSkip
	_aaf  []*image
	_ccb  []*image
	_efc  []*block
	_cad  []*block
	_bbge []*note
	_be   bool
	_ace  []*headerFooterRef
	_gb   []*headerFooterRef
	_fe   []*paragraph
	_gbg  []*paragraph
}

func (_geab *convertContext) makePdfImageFromRelId(_eaea *string) (*_ce.Image, error) {
	if _eaea != nil {
		_bfggb, _ebbeg := _geab._adae.GetHeaderFooterImageObjByRelId(*_eaea, _geab._fdee, _geab._cfadd)
		if _ebbeg != nil {
			return nil, _ebbeg
		}
		_fcdeb, _ebbeg := _ad.Open(_bfggb.Path)
		if _ebbeg != nil {
			return nil, _ebbeg
		}
		_ggdc, _ebbeg := _dd.ReadAll(_fcdeb)
		if _ebbeg != nil {
			return nil, _ebbeg
		}
		_ffbc, _ebbeg := _geab._gaeg.NewImageFromData(_ggdc)
		if _ebbeg != nil {
			return nil, _ebbeg
		}
		if _fg.DefaultImageEncoder != nil {
			_ffbc.SetEncoder(_fg.DefaultImageEncoder)
		} else {
			_ffbc.SetEncoder(_dc.NewFlateEncoder())
			if _c.ToLower(_bfggb.Format) == "\u006a\u0070\u0067" || _c.ToLower(_bfggb.Format) == "\u006a\u0070\u0065\u0067" {
				_ffbc.SetEncoder(_dc.NewDCTEncoder())
			}
		}
		return _ffbc, nil
	}
	return nil, nil
}

type borderLine struct {
	_bef _ce.Color
	_dde _fg.BorderPosition
	_gab float64
	_aaa float64
	_dgd float64
}

type line struct {
	_egf float64
	_beb float64
	_deb float64
	_gbc float64
	_eaf float64
	_beg []*span
	_cda bool
}

// ConvertToPdfWithOptions convert the document to PDF with given options.
func ConvertToPdfWithOptions(d *_bc.Document, opts *Options) *_ce.Creator {
	var _bdge map[string]string
	_fg.DefaultFontSize = 12
	if opts != nil {
		if opts.ProcessFields {
			_bdge = _dafd(d)
		}
		if len(opts.FontFiles) > 0 {
			_bfbab := _fg.RegisterFontsFromFiles(opts.FontFiles)
			if _bfbab != nil {
				_cb.Log.Debug("\u0046\u0061\u0069\u006c t\u006f\u0020\u006c\u006f\u0061\u0064\u0020\u0066\u006f\u006e\u0074\u0073\u003a\u0020%\u0076", opts.FontDirectory)
			}
		}
		if opts.FontDirectory != "" {
			_gfea := _fg.RegisterFontsFromDirectory(opts.FontDirectory)
			if _gfea != nil {
				_cb.Log.Debug("\u0046\u0061\u0069l\u0020\u0074\u006f\u0020l\u006f\u0061\u0064\u0020\u0066\u006f\u006et\u0020\u0064\u0069\u0072\u0065\u0063\u0074\u006f\u0072\u0079\u003a\u0020\u0025\u0076", _gfea.Error())
			}
		}
		if opts.DefaultFontSize > 0 {
			_fg.DefaultFontSize = float64(opts.DefaultFontSize)
		}
		if len(opts.RtlFontFile) > 0 {
			_fg.RtlFontFile, _ = _fg.LoadFontFromFile(opts.RtlFontFile)
		}
		if opts.DefaultImageEncoder != nil {
			_fg.DefaultImageEncoder = opts.DefaultImageEncoder
		}
	}
	_ffad := _fg.RegisterEmbeddedFonts(d)
	if _ffad != nil {
		_cb.Log.Debug("\u0046\u0061\u0069l\u0020\u0074\u006f\u0020l\u006f\u0061\u0064\u0020\u0065\u006d\u0062e\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0073\u003a\u0020\u0025\u0076", _ffad.Error())
	}
	var (
		_cbfd *_aad.CT_PPrGeneral
		_cabg *_aad.CT_RPr
	)
	if _agbg := d.Styles.X().DocDefaults; _agbg != nil {
		if _bdf := _agbg.PPrDefault; _bdf != nil {
			_cbfd = _bdf.PPr
		}
		if _dcfc := _agbg.RPrDefault; _dcfc != nil {
			_cabg = _dcfc.RPr
		}
	}
	_ffggb := _fg.GetDefaultPageSize()
	if opts != nil && opts.DefaultPageSize != _fg.DefaultPageSize {
		_ffggb = _fg.GetPageDimensions(opts.DefaultPageSize)
	}
	_feca := _ffggb[0]
	_gecfb := _ffggb[1]
	_cccb := _ac.Inch * 1.0
	_aefd := _ac.Inch * 0.5
	_ebedf, _dfbf, _ddcaa, _cbdg := _cccb, _cccb, _cccb, _cccb
	_agfgd, _fcfbe := _aefd, _aefd
	var (
		_cbgb []*headerFooterRef
		_efdg []*headerFooterRef
	)
	if _gbdb := d.BodySection().X(); _gbdb != nil {
		if _aabc := _gbdb.PgMar; _aabc != nil {
			if _aabc.LeftAttr.ST_UnsignedDecimalNumber != nil {
				_ebedf = _fg.PointsFromTwips(int64(*_aabc.LeftAttr.ST_UnsignedDecimalNumber))
			}
			if _aabc.LeftAttr.ST_UnsignedDecimalNumber != nil {
				_dfbf = _fg.PointsFromTwips(int64(*_aabc.RightAttr.ST_UnsignedDecimalNumber))
			}
			if _aabc.TopAttr.Int64 != nil {
				_ddcaa = _fg.PointsFromTwips(*_aabc.TopAttr.Int64)
			}
			if _aabc.BottomAttr.Int64 != nil {
				_cbdg = _fg.PointsFromTwips(*_aabc.BottomAttr.Int64)
			}
			if _aabc.HeaderAttr.ST_UnsignedDecimalNumber != nil {
				_agfgd = _fg.PointsFromTwips(int64(*_aabc.HeaderAttr.ST_UnsignedDecimalNumber))
			}
			if _aabc.FooterAttr.ST_UnsignedDecimalNumber != nil {
				_fcfbe = _fg.PointsFromTwips(int64(*_aabc.FooterAttr.ST_UnsignedDecimalNumber))
			}
		}
		if _caaa := _gbdb.PgSz; _caaa != nil {
			if _caaa.WAttr != nil {
				_feca = _fg.PointsFromTwips(int64(*_caaa.WAttr.ST_UnsignedDecimalNumber))
			}
			if _caaa.HAttr != nil {
				_gecfb = _fg.PointsFromTwips(int64(*_caaa.HAttr.ST_UnsignedDecimalNumber))
			}
		}
		for _, _cebb := range _gbdb.EG_HdrFtrReferences {
			if _gcbc := _cebb.HdrFtrReferencesChoice.HeaderReference; _gcbc != nil {
				_fefcg := &headerFooterRef{_bbaf: true, _edegd: _gcbc.IdAttr, _cffc: _gcbc.TypeAttr, _edgf: -1}
				_cbgb = append(_cbgb, _fefcg)
			}
			if _bcee := _cebb.HdrFtrReferencesChoice.FooterReference; _bcee != nil {
				_bffbe := &headerFooterRef{_cecfc: true, _edegd: _bcee.IdAttr, _cffc: _bcee.TypeAttr, _edgf: -1}
				_efdg = append(_efdg, _bffbe)
			}
		}
		if len(_gbdb.EG_HdrFtrReferences) < 1 {
			_cbec := &headerFooterRef{_cecfc: false, _bbaf: false, _edgf: -1}
			_cbgb = append(_cbgb, _cbec)
			_efdg = append(_efdg, _cbec)
		}
	}
	if d.Settings.X().DefaultTabStop == nil {
		_aacd = _fcdf(12.7)
	} else {
		_aacd = _fg.PointsFromTwips(int64(*d.Settings.X().DefaultTabStop.ValAttr.ST_UnsignedDecimalNumber))
	}
	_fgaf := _ce.New()
	_fgaf.SetPageSize(_ce.PageSize{_feca, _gecfb})
	_fgaf.SetPageMargins(_ebedf, _dfbf, _ddcaa, _cbdg)
	_gded := &convertContext{_gaeg: _fgaf, _adae: d, _cbca: _cbfd, _bgdf: _cabg, _gfcb: &_fg.Rectangle{Top: _ddcaa, Bottom: _gecfb - _cbdg, Left: _ebedf, Right: _feca - _dfbf}, _cgg: &_fg.Rectangle{Top: _ddcaa, Bottom: _cbdg, Left: _ebedf, Right: _dfbf}, _addd: []note{}, _cedb: map[int64]map[int64]int64{}, _fecb: _bdge, _ffcga: opts, _dbgac: _cbgb, _dfgfe: _efdg, _fcdb: _agfgd, _fecfc: _ddcaa, _fcbc: _gecfb - _fcfbe, _edda: _cbdg, _aeedg: _ebedf, _bgee: map[string]map[int64]*_aad.CT_Ind{}, _cbceg: []float64{_feca, _gecfb}, _aabd: []*_aad.CT_Tbl{}, _eaaf: map[*_ce.TextChunk]string{}, _afcgb: map[string]*_ca.PdfAnnotation{}}
	_gded.calculateHdrFtrContentHeight()
	_bgeb := d.X().Body.EG_BlockLevelElts
	_ffab := len(_bgeb)
	_gded._ggbfe = nil
	for _egdcc, _cce := range _bgeb {
		var _eafd []*_aad.EG_ContentBlockContent
		if _egdcc < _ffab-1 {
			_daacd := _bgeb[_egdcc+1]
			_eafd = _daacd.BlockLevelEltsChoice.EG_ContentBlockContent
		}
		_gded.addAbsoluteCBCs(_cce.BlockLevelEltsChoice.EG_ContentBlockContent, _eafd)
	}
	_gded.processInternalLinks()
	_gded.addTableGroup()
	_gded._ggbfe = nil
	_gded.addEndnotes()
	_gded.alignSymbolsVertically()
	_gded.drawPages()
	_gded.drawHeaderFooter()
	return _fgaf
}

func (_gcgc *convertContext) addBorderLine(_dabeb *_aad.CT_Border, _cfcg *paragraph, _agacg _fg.BorderPosition) {
	_gbea := 0.0
	if _afege := _dabeb.SzAttr; _afege != nil {
		_gbea = float64(*_afege) / 8
	}
	_gdee := 0.0
	if _bbada := _dabeb.SpaceAttr; _bbada != nil {
		_gdee = float64(*_bbada) * _ac.Pixel72
	}
	var _degfe _ce.Color
	if _feda := _dabeb.ColorAttr; _feda != nil {
		if _aabb := _feda.ST_HexColorAuto; _aabb == _aad.ST_HexColorAutoAuto {
			_degfe = _ce.ColorBlack
		}
		if _ffaeb := _feda.ST_HexColorRGB; _ffaeb != nil {
			_degfe = _ce.ColorRGBFromHex("\u0023" + *_ffaeb)
		}
	}
	if _agacg == _fg.BorderPositionBottom || _agacg == _fg.BorderPositionTop {
		_dcaf := &borderLine{_dde: _agacg, _gab: _gcgc._eeabe._gd.Right - _gcgc._eeabe._gd.Left, _dgd: _gbea, _bef: _degfe, _aaa: _gdee}
		_cfcg._dfc = append(_cfcg._dfc, _dcaf)
	} else {
		_afcgd := &borderLine{_dde: _agacg, _gab: _gbea, _dgd: _gcgc._eeabe._gd.Top - _gcgc._eeabe._gd.Bottom, _bef: _degfe, _aaa: _gdee}
		_cfcg._dfc = append(_cfcg._dfc, _afcgd)
	}
}

func (_eead *convertContext) makePdfBlockFromChart(_eadf *_f.Chart, _cedda, _ggad float64) (*_ce.Block, error) {
	_gccga := _eadf.CT_RelId.IdAttr
	_debf := _eead._adae.GetChartSpaceByRelId(_gccga)
	if _debf == nil {
		return nil, _e.New("\u004e\u006f\u0020\u0063\u0068\u0061\u0072\u0074\u0073\u0070\u0061\u0063\u0065")
	}
	var _egga *_ag.Theme
	_acbgb := _eead._adae.Themes()
	if len(_acbgb) > 0 {
		_egga = _acbgb[0]
	}
	return _fg.MakeBlockFromChartSpace(_debf, _cedda, _ggad, _egga)
}

func _cbecg(_fggaa *_bc.Document, _dfba string, _gega *_aad.CT_TblPr, _ddedc *_aad.CT_PPrGeneral, _bcdfe *_aad.CT_RPr) (*_aad.CT_TblPr, *_aad.CT_PPrGeneral, *_aad.CT_RPr) {
	if _gega.TblStyle != nil {
		_edabd := _fggaa.GetStyleByID(_dfba)
		if _adfbb := _edabd.X(); _adfbb != nil {
			if _aagbg := _adfbb.TblPr; _aagbg != nil {
				_bfef := _gega.TblBorders
				var _efgc *_aad.CT_TblBorders
				if _aagbg.TblBorders != nil {
					_efgc = _aagbg.TblBorders
				}
				if _bfef == nil {
					_bfef = _efgc
				} else {
					if _efgc != nil {
						if _bfef.Top == nil {
							_bfef.Top = _efgc.Top
						}
						if _bfef.Bottom == nil {
							_bfef.Bottom = _efgc.Bottom
						}
						if _bfef.Left == nil {
							_bfef.Left = _efgc.Left
						}
						if _bfef.Right == nil {
							_bfef.Right = _efgc.Right
						}
						if _bfef.InsideH == nil {
							_bfef.InsideH = _efgc.InsideH
						}
						if _bfef.InsideV == nil {
							_bfef.InsideV = _efgc.InsideV
						}
					}
				}
				_gega.TblBorders = _bfef
				_begd := _gega.Shd
				_eadg := _aagbg.Shd
				if _begd == nil {
					_begd = _eadg
				} else {
					if _eadg != nil && _begd.FillAttr == nil {
						_begd.FillAttr = _eadg.FillAttr
					}
				}
				_gega.Shd = _begd
				_edcad := _gega.TblCellMar
				_adcfe := _aagbg.TblCellMar
				if _edcad == nil {
					_edcad = _adcfe
				} else {
					if _adcfe != nil && _edcad.Left == nil {
						_edcad.Left = _adcfe.Left
					}
				}
				_gega.TblCellMar = _edcad
				if _gega.TblInd == nil {
					_gega.TblInd = _aagbg.TblInd
				}
				if _gega.Jc == nil {
					_gega.Jc = _aagbg.Jc
				}
			}
			if _adfbb.PPr != nil {
				_ddedc = _eaacg(_adfbb.PPr, _ddedc)
			}
			if _adfbb.RPr != nil {
				_bcdfe = _gefea(_adfbb.RPr, _bcdfe)
			}
			if _agfec := _adfbb.BasedOn; _agfec != nil {
				return _cbecg(_fggaa, _agfec.ValAttr, _gega, _ddedc, _bcdfe)
			}
		}
	}
	return _gega, _ddedc, _bcdfe
}

func _dag(_cca *_ce.Creator, _cbc *block) {
	_cbc._cee.SetPos(_cbc._dge, _cbc._aag)
	_dbe := _cca.Draw(_cbc._cee)
	if _dbe != nil {
		_cb.Log.Debug("\u0045\u0072\u0072or\u0020\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u0020\u0062\u006c\u006f\u0063\u006b\u003a\u0020\u0025\u0073", _dbe)
	}
	if _cbc._cecg {
		_fg.DrawRectangle(_cca, &_fg.Rectangle{Top: _cbc._aag, Bottom: _cbc._aag + _cbc._cee.Height(), Left: _cbc._dge, Right: _cbc._dge + _cbc._cee.Width()}, _cbc._caa, _cbc._cg)
	}
}

type zoneToSkip struct {
	_ccbg *_fg.Rectangle
	_cf   *_aad.WdEG_WrapTypeChoice
	_efa  uint32
}

func _aaaf(_fdcc *_aad.CT_Border) (_ce.CellBorderStyle, *_ce.Color, float64) {
	if _fdcc == nil {
		return _ce.CellBorderStyleNone, nil, 0
	}
	var _efead _ce.CellBorderStyle
	switch _fdcc.ValAttr {
	case _aad.ST_BorderSingle:
		_efead = _ce.CellBorderStyleSingle
	case _aad.ST_BorderDouble:
		_efead = _ce.CellBorderStyleDouble
	default:
		_efead = _ce.CellBorderStyleNone
	}
	_efbce := 0.0
	if _egeb := _fdcc.SzAttr; _egeb != nil {
		_efbce = float64(*_egeb) / 8
	}
	var _ebede _ce.Color
	if _fbaca := _fdcc.ColorAttr; _fbaca != nil {
		if _edef := _fbaca.ST_HexColorRGB; _edef != nil {
			_ebede = _ce.ColorRGBFromHex("\u0023" + *_edef)
		} else if _ecbb := _fbaca.ST_HexColorAuto; _ecbb == _aad.ST_HexColorAutoAuto {
			_ebede = _ce.ColorBlack
			if _efbce == 0 {
				_efbce = 2.0 / 8.0
			}
		}
	}
	return _efead, &_ebede, _efbce
}

func (_cdcc *convertContext) alignSymbolsVertically() {
	for _, _agdc := range _cdcc._edfd {
		for _, _ceec := range _agdc._bg {
			for _, _bgc := range _ceec._ea {
				_fda := 0.0
				for _, _gbad := range _bgc._beg {
					for _, _egae := range _gbad._adf {
						for _, _fdb := range _egae._ee {
							if _fdb._cde > _fda {
								_fda = _fdb._cde
							}
						}
					}
				}
				for _, _fefd := range _bgc._beg {
					for _, _fff := range _fefd._adf {
						for _, _cac := range _fff._ee {
							if _cac._cba < _fda-_ceec._agc {
								_cac._gfdc = _fda - _ceec._agc - _cac._cba
							}
						}
					}
				}
			}
		}
	}
}

type image struct {
	_bfb  *_ce.Image
	_gfga float64
	_gg   float64
}

func _faea(_ddade *_aad.CT_TblWidth, _cfagf, _dbdg float64) float64 {
	if _ddade != nil {
		if _acaf := _ddade.WAttr; _acaf != nil {
			if _dded := _acaf.ST_DecimalNumberOrPercent; _dded != nil {
				if _ebeee := _dded.ST_UnqualifiedPercentage; _ebeee != nil {
					switch _ddade.TypeAttr {
					case _aad.ST_TblWidthDxa:
						return float64(*_ebeee) / 20
					case _aad.ST_TblWidthPct:
						return float64(*_ebeee) / 100 / 50 * _cfagf
					default:
						return _dbdg
					}
				}
			}
		}
	}
	return _dbdg
}

func (_edg *convertContext) assignPropsToAbsoluteParagraph(_gefee *_aad.CT_PPr, _gbdef *paragraph) (float64, float64) {
	_edg._ecdc = _gefee
	_gefee = _ecgc(_gefee, _edg._cbca, _edg._bgdf)
	_gfe := 12.4
	if _gefee == nil {
		return 0, 0
	}
	_gbdef._agc = 0.0
	if _daeg := _gefee.RPr; _daeg != nil {
		_fbed := _acab(_daeg.Sz, _daeg.SzCs)
		if _fbed > _gfe {
			_gfe = _fbed
		} else {
			_gfe = _fbed * _ccc
		}
		_gbdef._acf = _gfe
	}
	if _gefee.Jc != nil {
		switch _gefee.Jc.ValAttr {
		case _aad.ST_JcRight:
			_gbdef._afa = _ce.TextAlignmentRight
		case _aad.ST_JcCenter:
			_gbdef._afa = _ce.TextAlignmentCenter
		case _aad.ST_JcBoth:
			_gbdef._afa = _ce.TextAlignmentJustify
		case _aad.ST_JcEnd:
			_gbdef._afa = _ce.TextAlignmentRight
		default:
			_gbdef._afa = _ce.TextAlignmentLeft
		}
	}
	var _gede, _cbad, _agga, _fdbfg, _dgfec float64
	if _adbaag := _gefee.Spacing; _adbaag != nil {
		if _bece := _adbaag.BeforeAttr; _bece != nil {
			if _bece.ST_UnsignedDecimalNumber != nil {
				_gede = _fg.PointsFromTwips(int64(*_bece.ST_UnsignedDecimalNumber))
			}
		}
		if _bcaa := _adbaag.AfterAttr; _bcaa != nil {
			if _bcaa.ST_UnsignedDecimalNumber != nil {
				_cbad = _fg.PointsFromTwips(int64(*_bcaa.ST_UnsignedDecimalNumber))
			}
		}
		if _gdeb := _adbaag.LineAttr; _gdeb != nil {
			if _gdeb.Int64 != nil && *_gdeb.Int64 != 0 {
				if _adbaag.LineRuleAttr == _aad.ST_LineSpacingRuleAuto {
					_cdffca := float64(*_gdeb.Int64) / 240
					if _cdffca > 1 {
						_gfe = _gfe * _cdffca
					}
				} else {
					if _fbbe := float64(*_gdeb.Int64) / 20; _fbbe > _gfe {
						_gfe = _fbbe
					}
				}
			}
		}
	}
	_fcgbb := _edg._eeabe._bg
	if len(_fcgbb) > 0 {
		_bfggf := _fcgbb[len(_fcgbb)-1]._bba.Bottom
		if _edg._ggbfe != nil && _edg._ggbfe.Spacing != nil && _gefee.Spacing != nil {
			if _edg.shouldApplyContextualSpacing(_gefee) {
				_befa := _gede - _bfggf
				if _bfggf > _gede {
					_gede = _befa
				} else {
					_gede = -_bfggf + _befa
				}
			} else if _bfggf > _gede {
				_gede = 0.0
			} else {
				_gede -= _bfggf
			}
		}
	} else {
		_gede -= _afc
	}
	_gbdef._agc = _gfe - _gbdef._acf
	_gbdef._acf = _gfe
	if _dcged := _gefee.Ind; _dcged != nil {
		if _ddce := _dcged.FirstLineAttr; _ddce != nil {
			if _ddce.ST_UnsignedDecimalNumber != nil {
				_dgfec = _fg.PointsFromTwips(int64(*_ddce.ST_UnsignedDecimalNumber))
			}
		}
		if _cbcd := _dcged.HangingAttr; _cbcd != nil {
			if _cbcd.ST_UnsignedDecimalNumber != nil {
				_dgfec -= _fg.PointsFromTwips(int64(*_cbcd.ST_UnsignedDecimalNumber))
			}
		}
		if _gcbf := _dcged.LeftAttr; _gcbf != nil {
			if _gcbf.Int64 != nil {
				_agga = _fg.PointsFromTwips(*_gcbf.Int64)
			}
		}
		if _beac := _dcged.RightAttr; _beac != nil {
			if _beac.Int64 != nil {
				_fdbfg = _fg.PointsFromTwips(*_beac.Int64)
			}
		}
	}
	if _gefee.PBdr != nil {
		if _dbee := _gefee.PBdr.Top; _dbee != nil {
			_edg.addBorderLine(_dbee, _gbdef, _fg.BorderPositionTop)
		}
		if _fdea := _gefee.PBdr.Left; _fdea != nil {
			_edg.addBorderLine(_fdea, _gbdef, _fg.BorderPositionLeft)
		}
		if _ead := _gefee.PBdr.Right; _ead != nil {
			_edg.addBorderLine(_ead, _gbdef, _fg.BorderPositionRight)
		}
		if _bfga := _gefee.PBdr.Bottom; _bfga != nil {
			_edg.addBorderLine(_bfga, _gbdef, _fg.BorderPositionBottom)
		}
	}
	_gbdef._bba = &_fg.Rectangle{Top: _gede, Bottom: _cbad, Left: _agga, Right: _fdbfg}
	_gbdef._adg = _dgfec
	_edg._ggbfe = _gefee
	return _gede, _agga
}

type word struct {
	_ee  []*symbol
	_gfd float64
	_cbg float64
	_gea bool
}

type block struct {
	_cee  *_ce.Block
	_dge  float64
	_aag  float64
	_cecg bool
	_caa  float64
	_cg   _ce.Color
}

func (_daae *convertContext) addInlineSymbol(_eabe *symbol) {
	if len(_daae._bcgdg._ee) > 0 {
		_gfbf := _daae._bcgdg._ee[len(_daae._bcgdg._ee)-1]._gfb
		if _gfbf == "\u0020" {
			_daae.addCurrentWordToParagraph()
			_daae.newWord()
		}
	}
	_daae._bcgdg._ee = append(_daae._bcgdg._ee, _eabe)
	_eabe._fa = _daae._bcgdg._cbg
	_daae._bcgdg._cbg += _eabe._gba
	_daae._bcgdg._gea = false
	_daae.adjustHeights(_eabe._cde)
}

func (_cbgc *convertContext) makePdfBlockFromCBCs(_fbdf [][]*_aad.EG_ContentBlockContent, _bdfd, _gdfb float64, _cbag *_fg.Rectangle, _cfgde bool, _facff *prefix) (*_ce.Block, error) {
	if _cbag == nil {
		_cbag = &_fg.Rectangle{}
	}
	_accf := &_fg.Rectangle{Top: _cbag.Top, Bottom: _gdfb - _cbag.Bottom, Left: _cbag.Left, Right: _bdfd - _cbag.Right}
	_caeg := _fg.MakeTempCreator(_bdfd, _gdfb)
	_gbfe := &convertContext{_gaeg: _caeg, _adae: _cbgc._adae, _gfcb: _accf, _ddcb: _facff, _ffcga: _cbgc._ffcga}
	for _, _fcff := range _fbdf {
		_gbfe.addAbsoluteCBCs(_fcff, nil)
	}
	if _cfgde {
		_defd := 0.0
		for _, _ccbb := range _gbfe._edfd {
			for _, _aabf := range _ccbb._bg {
				_defd += (_aabf._cec + _aabf._bba.Top + _aabf._bba.Bottom)
			}
		}
		_accf.Bottom = _defd - _cbag.Bottom
		_caeg = _fg.MakeTempCreator(_bdfd, _defd)
		_gbfe = &convertContext{_gaeg: _caeg, _adae: _cbgc._adae, _gfcb: _accf, _ddcb: _facff, _ffcga: _cbgc._ffcga}
		for _, _fdcebc := range _fbdf {
			_gbfe.addAbsoluteCBCs(_fdcebc, nil)
		}
	}
	_gbfe.alignSymbolsVertically()
	_gbfe._gaeg.NewPage()
	_gbfe.drawPage(_gbfe._edfd[len(_gbfe._edfd)-1])
	return _fg.MakeBlockFromCreator(_caeg)
}

func (_adda *convertContext) newSpan() {
	_ffaf := &span{_cead: _adda._bdgcc._gbc, _dff: _adda._bdgcc._deb}
	_adda._babd = _ffaf
	_adda._bdgcc._beg = append(_adda._bdgcc._beg, _ffaf)
}

func _gefea(_bac, _agaef *_aad.CT_RPr) *_aad.CT_RPr {
	if _bac == nil {
		return _agaef
	}
	if _agaef == nil {
		return _bac
	}
	if _bac.RStyle == nil {
		_bac.RStyle = _agaef.RStyle
	}
	if _bac.RFonts == nil {
		_bac.RFonts = _agaef.RFonts
	}
	if _bac.B == nil {
		_bac.B = _agaef.B
	}
	if _bac.BCs == nil {
		_bac.BCs = _agaef.BCs
	}
	if _bac.I == nil {
		_bac.I = _agaef.I
	}
	if _bac.ICs == nil {
		_bac.ICs = _agaef.ICs
	}
	if _bac.Caps == nil {
		_bac.Caps = _agaef.Caps
	}
	if _bac.SmallCaps == nil {
		_bac.SmallCaps = _agaef.SmallCaps
	}
	if _bac.Strike == nil {
		_bac.Strike = _agaef.Strike
	}
	if _bac.Dstrike == nil {
		_bac.Dstrike = _agaef.Dstrike
	}
	if _bac.Outline == nil {
		_bac.Outline = _agaef.Outline
	}
	if _bac.Shadow == nil {
		_bac.Shadow = _agaef.Shadow
	}
	if _bac.Emboss == nil {
		_bac.Emboss = _agaef.Emboss
	}
	if _bac.Imprint == nil {
		_bac.Imprint = _agaef.Imprint
	}
	if _bac.NoProof == nil {
		_bac.NoProof = _agaef.NoProof
	}
	if _bac.SnapToGrid == nil {
		_bac.SnapToGrid = _agaef.SnapToGrid
	}
	if _bac.Vanish == nil {
		_bac.Vanish = _agaef.Vanish
	}
	if _bac.WebHidden == nil {
		_bac.WebHidden = _agaef.WebHidden
	}
	if _bac.Color == nil {
		_bac.Color = _agaef.Color
	}
	if _bac.Spacing == nil {
		_bac.Spacing = _agaef.Spacing
	}
	if _bac.W == nil {
		_bac.W = _agaef.W
	}
	if _bac.Kern == nil {
		_bac.Kern = _agaef.Kern
	}
	if _bac.Position == nil {
		_bac.Position = _agaef.Position
	}
	if _bac.Sz == nil {
		_bac.Sz = _agaef.Sz
	}
	if _bac.SzCs == nil {
		_bac.SzCs = _agaef.SzCs
	}
	if _bac.Highlight == nil {
		_bac.Highlight = _agaef.Highlight
	}
	if _bac.U == nil {
		_bac.U = _agaef.U
	}
	if _bac.Effect == nil {
		_bac.Effect = _agaef.Effect
	}
	if _bac.Bdr == nil {
		_bac.Bdr = _agaef.Bdr
	}
	if _bac.Shd == nil {
		_bac.Shd = _agaef.Shd
	}
	if _bac.FitText == nil {
		_bac.FitText = _agaef.FitText
	}
	if _bac.VertAlign == nil {
		_bac.VertAlign = _agaef.VertAlign
	}
	if _bac.Rtl == nil {
		_bac.Rtl = _agaef.Rtl
	}
	if _bac.Cs == nil {
		_bac.Cs = _agaef.Cs
	}
	if _bac.Em == nil {
		_bac.Em = _agaef.Em
	}
	if _bac.Lang == nil {
		_bac.Lang = _agaef.Lang
	}
	if _bac.EastAsianLayout == nil {
		_bac.EastAsianLayout = _agaef.EastAsianLayout
	}
	if _bac.SpecVanish == nil {
		_bac.SpecVanish = _agaef.SpecVanish
	}
	if _bac.OMath == nil {
		_bac.OMath = _agaef.OMath
	}
	if _bac.RPrChange == nil {
		_bac.RPrChange = _agaef.RPrChange
	}
	return _bac
}

type link struct {
	_debc string
	_ffg  _af.ST_TargetMode
}

func _eaacg(_ege, _gcdbb *_aad.CT_PPrGeneral) *_aad.CT_PPrGeneral {
	if _ege == nil {
		return _ege
	}
	if _gcdbb == nil {
		return _ege
	}
	if _ege.PStyle == nil {
		_ege.PStyle = _gcdbb.PStyle
	}
	if _ege.KeepNext == nil {
		_ege.KeepNext = _gcdbb.KeepNext
	}
	if _ege.KeepLines == nil {
		_ege.KeepLines = _gcdbb.KeepLines
	}
	if _ege.PageBreakBefore == nil {
		_ege.PageBreakBefore = _gcdbb.PageBreakBefore
	}
	if _ege.FramePr == nil {
		_ege.FramePr = _gcdbb.FramePr
	}
	if _ege.WidowControl == nil {
		_ege.WidowControl = _gcdbb.WidowControl
	}
	if _ege.NumPr == nil {
		_ege.NumPr = _gcdbb.NumPr
	}
	if _ege.SuppressLineNumbers == nil {
		_ege.SuppressLineNumbers = _gcdbb.SuppressLineNumbers
	}
	if _ege.PBdr == nil {
		_ege.PBdr = _gcdbb.PBdr
	}
	if _ege.Shd == nil {
		_ege.Shd = _gcdbb.Shd
	}
	if _ege.Tabs == nil {
		_ege.Tabs = _gcdbb.Tabs
	}
	if _ege.SuppressAutoHyphens == nil {
		_ege.SuppressAutoHyphens = _gcdbb.SuppressAutoHyphens
	}
	if _ege.Kinsoku == nil {
		_ege.Kinsoku = _gcdbb.Kinsoku
	}
	if _ege.WordWrap == nil {
		_ege.WordWrap = _gcdbb.WordWrap
	}
	if _ege.OverflowPunct == nil {
		_ege.OverflowPunct = _gcdbb.OverflowPunct
	}
	if _ege.TopLinePunct == nil {
		_ege.TopLinePunct = _gcdbb.TopLinePunct
	}
	if _ege.AutoSpaceDE == nil {
		_ege.AutoSpaceDE = _gcdbb.AutoSpaceDE
	}
	if _ege.AutoSpaceDN == nil {
		_ege.AutoSpaceDN = _gcdbb.AutoSpaceDN
	}
	if _ege.Bidi == nil {
		_ege.Bidi = _gcdbb.Bidi
	}
	if _ege.AdjustRightInd == nil {
		_ege.AdjustRightInd = _gcdbb.AdjustRightInd
	}
	if _ege.SnapToGrid == nil {
		_ege.SnapToGrid = _gcdbb.SnapToGrid
	}
	if _ege.Spacing == nil {
		_ege.Spacing = _gcdbb.Spacing
	}
	if _ege.Ind == nil {
		_ege.Ind = _gcdbb.Ind
	}
	if _ege.ContextualSpacing == nil {
		_ege.ContextualSpacing = _gcdbb.ContextualSpacing
	}
	if _ege.MirrorIndents == nil {
		_ege.MirrorIndents = _gcdbb.MirrorIndents
	}
	if _ege.SuppressOverlap == nil {
		_ege.SuppressOverlap = _gcdbb.SuppressOverlap
	}
	if _ege.Jc == nil {
		_ege.Jc = _gcdbb.Jc
	}
	if _ege.TextDirection == nil {
		_ege.TextDirection = _gcdbb.TextDirection
	}
	if _ege.TextAlignment == nil {
		_ege.TextAlignment = _gcdbb.TextAlignment
	}
	if _ege.TextboxTightWrap == nil {
		_ege.TextboxTightWrap = _gcdbb.TextboxTightWrap
	}
	if _ege.OutlineLvl == nil {
		_ege.OutlineLvl = _gcdbb.OutlineLvl
	}
	if _ege.DivId == nil {
		_ege.DivId = _gcdbb.DivId
	}
	if _ege.CnfStyle == nil {
		_ege.CnfStyle = _gcdbb.CnfStyle
	}
	if _ege.PPrChange == nil {
		_ege.PPrChange = _gcdbb.PPrChange
	}
	return _ege
}

func _eaae(_bggaa *_ce.Creator, _cdcef *_ce.Block, _ccfd []*paragraph, _edbf float64, _dfgff _ce.PageFinalizeFunctionArgs) float64 {
	_faggc := 0.0
	_bcgg := 0.0
	for _, _eddc := range _ccfd {
		for _, _gccc := range _eddc._ea {
			for _, _ggagb := range _gccc._beg {
				for _, _badc := range _ggagb._adf {
					for _, _fcee := range _badc._ee {
						if _fcee._bbaa != nil {
							_fcee._bbaa.SetPos(_badc._gfd+_fcee._fa, _edbf)
							_cdcef.Draw(_fcee._bbaa)
						} else if _fcee._fgef != nil {
							if _fcee._fgef._dge == 0 {
								_fcee._fgef._dge = _badc._gfd + _fcee._fa
							}
							if _fcee._fgef._aag == 0 {
								_fcee._fgef._aag = _eddc._cd + _gccc._egf
							}
							_dag(_bggaa, _fcee._fgef)
						} else {
							_aeaf := _bggaa.NewStyledParagraph()
							if _fcee._dfg {
								_fcee._gfdc = 0
							} else if _fcee._fc {
								_fcee._gfdc = 1.2*_gccc._eaf - _fcee._cde
							}
							_agad := _badc._gfd + _fcee._fa + _bcgg
							_gdbg := _edbf + _gccc._egf + _fcee._gfdc + _faggc
							_aeaf.SetPos(_agad, _gdbg)
							_dfgb := false
							if _fcee._gfb == "\u005b\u0046\u0049E\u004c\u0044\u005f\u0050\u0041\u0047\u0045\u005d" {
								_fcee._gfb = _g.Itoa(_dfgff.PageNum)
								_dfgb = true
							}
							if _fcee._gfb == "\u005b\u0046I\u0045\u004c\u0044_\u004e\u0055\u004d\u0050\u0041\u0047\u0045\u0053\u005d" {
								_fcee._gfb = _g.Itoa(_dfgff.TotalPages)
								_dfgb = true
							}
							var _agbgb *_ce.TextChunk
							if _fcee._ffc != "" {
								_agbgb = _aeaf.AddExternalLink(_fcee._gfb, _fcee._ffc)
							} else {
								_agbgb = _aeaf.Append(_fcee._gfb)
							}
							if _fcee._fge != nil {
								_agbgb.Style = *_fcee._fge
							}
							if _dfgb {
								_bcgg += _aeaf.Width()
							}
							_cdcef.Draw(_aeaf)
							if _fcee._dab != nil {
								_cdcf := _gdbg + _fcee._cde
								_fg.DrawLine(_bggaa, _agad, _cdcf, _agad+_fcee._gba, _cdcf, 1, *_fcee._dab)
							}
						}
					}
				}
			}
		}
		if _eddc._dae != nil {
			_ebga := _ce.NewBlock(_eddc._dae._cfd, _dfgff.PageHeight)
			_ebga.SetPos(_eddc._gfg, _edbf)
			_ebga.Draw(_eddc._dae._agae)
			_cdcef.Draw(_ebga)
			_eddc._cec = _eddc._dae._agae.Height()
		}
		_faggc += _eddc._cec
	}
	return _faggc
}

func (_ggfae *convertContext) adjustHeights(_agfdd float64) {
	if _ggfae._bdgcc._eaf < _agfdd {
		_ggfae._befb._cec += (_agfdd - _ggfae._bdgcc._eaf)
		_ggfae._bdgcc._eaf = _agfdd
	}
}

func (_fgcc *convertContext) addAbsoluteCRC(_eecb []*_aad.EG_ContentRunContent, _dfbc *_aad.CT_PPr) bool {
	for _, _agba := range _eecb {
		if _bfg := _agba.ContentRunContentChoice.R; _bfg != nil {
			if _dfbc != nil && _dfbc.PStyle != nil {
				_ccfa := _fgcc._adae.GetStyleByID(_dfbc.PStyle.ValAttr)
				if _bbcb := _ccfa.X(); _bbcb != nil {
					if _bbcb.QFormat != nil && _edgc(_bbcb.QFormat) {
						if _bbcb.RPr != nil && _dfbc.RPr != nil {
							_dfbc.RPr = _fbdg(_dfbc.RPr, _bbcb.RPr)
						}
					}
					if _bbcb.RPr != nil {
						if _bbcb.UiPriority != nil && _bbcb.UiPriority.ValAttr > 0 && _bfg.RPr == nil {
							_dfbc.RPr = _fbdg(_dfbc.RPr, _bbcb.RPr)
						}
						_bfg.RPr = _gefea(_bfg.RPr, _bbcb.RPr)
					}
					if _fgcc._ddcb != nil {
						_dbaf, _fccc := _fgcc.getStyleProps(_dfbc.PStyle.ValAttr, _ccfa)
						_dfbc = _ecgc(_dfbc, _dbaf, _fccc)
						_bfg.RPr = _gefea(_bfg.RPr, _fccc)
					}
				}
			}
			_dabfb := _dfbc != nil || _bfg.RPr != nil
			if len(_bfg.EG_RunInnerContent) == 0 && _dabfb {
				_fgcc.addEmptyLine()
			}
			_fbe := _aefa(_fgcc._adae, _bfg.RPr, _dfbc)
			if _fgcc._ddcb != nil {
				_fgcc.addAbsoluteRIC(nil, _fbe, _dfbc)
				_fgcc._ddcb = nil
				_fgcc._befb._bfd = true
			}
			for _, _dcc := range _bfg.EG_RunInnerContent {
				if _fgcc.addAbsoluteRIC(_dcc, _fbe, _dfbc) {
					return true
				}
				_fgcc._befb._bfd = false
			}
			for _, _bec := range _bfg.Extra {
				if _ddfc, _faag := _bec.(*_aad.AlternateContentRun); _faag {
					if _cgdc := _ddfc.Choice; _cgdc != nil {
						if _gaea := _cgdc.Drawing; _gaea != nil {
							for _, _afeb := range _gaea.DrawingChoice {
								if _afeb.Inline == nil {
									continue
								}
								_bcgb := _afeb.Inline
								_bcf := _bcgb.Extent
								if _bcf == nil {
									return false
								}
								_gebc := _ac.FromEMU(_bcf.CxAttr)
								_aca := _ac.FromEMU(_bcf.CyAttr)
								if _dce := _bcgb.Graphic; _dce != nil {
									if _aece := _dce.GraphicData; _aece != nil {
										for _, _cbdc := range _aece.Any {
											if _efgd, _ffggc := _cbdc.(*_aad.WdWsp); _ffggc {
												_aaag, _bag := _fgcc.makeBlockFromWdWsp(_efgd)
												if _bag != nil {
													_cb.Log.Debug("C\u0061\u006e\u006e\u006ft \u0072e\u0061\u0064\u0020\u0062\u006co\u0063\u006b\u003a\u0020\u0025\u0073", _bag)
												}
												if _aaag == nil {
													continue
												}
												_aaag._cee.Scale(_gebc/_aaag._cee.Width(), _aca/_aaag._cee.Height())
												_fgcc.addInlineSymbol(&symbol{_cde: _aca, _gba: _gebc, _fgef: _aaag})
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return false
}

type prefix struct {
	_aade  string
	_aebg  []float64
	_fbac  bool
	_cbcff bool
}

var _aacd float64

func (_dbbb *convertContext) addTableWithDataRange(_aafb map[int][]tableCellProperties, _bbccf, _cfba, _fgegg int, _baef, _ddcd float64, _geg []float64, _ebbe []float64, _edde bool) {
	_gca := _dbbb._gaeg.NewTable(_fgegg)
	_ccaf := _gca.SetColumnWidths(_geg...)
	if _ccaf != nil {
		_cb.Log.Debug("\u0045\u0052\u0052\u004f\u0052\u003a \u0055\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0073\u0065\u0074\u0020\u0063\u006f\u006c\u0075\u006d\u006e \u0077\u0069\u0064\u0074\u0068\u0073\u0020\u0066\u006f\u0072\u0020\u0074\u0061\u0062l\u0065 \u0028\u0025\u0073\u0029", _ccaf.Error())
	}
	if _edde {
		_facf := _dbbb.addRowToTable(_aafb, 0, _gca, _ebbe)
		if _facf != nil {
			_cb.Log.Debug("\u0045\u0052\u0052\u004f\u0052:\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0061\u0064d\u0020\u0068\u0065\u0061\u0064\u0065\u0072\u0020\u0074\u006f\u0020\u0074\u0061\u0062\u006c\u0065\u0020\u0028\u0025\u0073\u0029", _facf.Error())
		}
	}
	for _gecf := _bbccf; _gecf <= _cfba; _gecf++ {
		_ffae := _dbbb.addRowToTable(_aafb, _gecf, _gca, _ebbe)
		if _ffae != nil {
			_cb.Log.Debug("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0061\u0064\u0064\u0020\u0072\u006f\u0077 \u0074\u006f\u0020\u0074\u0061b\u006c\u0065 \u0028\u0025\u0073\u0029", _ffae.Error())
		}
	}
	_dcgb := _fg.MakeTempCreatorMaxHeight(_baef)
	_ccaf = _dcgb.Draw(_gca)
	if _ccaf != nil {
		_cb.Log.Debug("\u0045\u0052RO\u0052\u003a\u0020U\u006e\u0061\u0062\u006ce t\u006f s\u0065\u0074\u0020\u0064\u0072\u0061\u0077 t\u0061\u0062\u006c\u0065\u0020\u0028\u0025s\u0029", _ccaf.Error())
	}
	_dbbb.addParagraphWithTable(*_gca, _baef, _ddcd)
}

func _cgdcg(_ecee int, _deff bool) string {
	_fgga := _da.NewBuffer([]byte{})
	for _, _bgbfa := range _badfd {
		for {
			if _ecee < _bgbfa._fdbec {
				break
			}
			_fgga.WriteString(_bgbfa._ggde)
			_ecee -= _bgbfa._fdbec
		}
	}
	_ebcac := _fgga.String()
	if _deff {
		_ebcac = _c.ToUpper(_ebcac)
	}
	return _ebcac
}

const (
	_aga = 0.67
	_ccc = 1.15
	_afc = 2.5
)

func _cefa(_ffd string) []*symbol { return []*symbol{{_gfb: _ffd, _fad: true}} }

func (_dcbbb *convertContext) calculateHdrFtrContentHeight() {
	_cfafd := _ce.New()
	_cfafd.SetPageSize(_ce.PageSize{_dcbbb._gaeg.Width(), _dcbbb._gaeg.Height()})
	_cfafd.SetPageMargins(_dcbbb._cgg.Left, _dcbbb._cgg.Right, _dcbbb._cgg.Top, _dcbbb._cgg.Bottom)
	_fdd := *_dcbbb
	_fdd._gaeg = _cfafd
	_fdd.newPage()
	_fdd.drawPages()
	_fdd.drawHeaderFooter()
	_fabe := _cfafd.Finalize()
	if _fabe != nil {
		_cb.Log.Error("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v", _fabe)
	}
	if _fdd._fecfc >= _dcbbb._cgg.Top {
		_dcbbb._gfcb.Top = _fdd._fecfc + _dcbbb._fcdb
		_dcbbb._cgg.Top = _fdd._fecfc + _dcbbb._fcdb
		_dcbbb._fecfc = _fdd._fecfc
	}
	if _fdd._edda < _dcbbb._cgg.Bottom {
		_afbf := (_fdd._edda / _dcbbb._cgg.Bottom) * (_fdd._edda * _ccc)
		_dcbbb._fcbc -= _afbf
	} else {
		_dcbbb._fcbc -= _fdd._edda
		_dcbbb._gfcb.Bottom = _dcbbb._fcbc
	}
	_dcbbb._gaeg.SetPageMargins(_dcbbb._cgg.Left, _dcbbb._cgg.Right, _dcbbb._cgg.Top, _dcbbb._cgg.Bottom)
}

func (_dgdb *convertContext) addTableGroup() {
	if _dgdb._befb == nil {
		_dgdb.newParagraph()
		_dgdb.determineParagraphBounds()
		_dgdb.newLine()
		_dgdb.newWord()
	}
	_ebf := len(_dgdb._aabd)
	if _ebf == 0 {
		return
	}
	if _ebf == 1 {
		_dgdb.addAbsoluteTable(_dgdb._aabd[0])
	} else {
		_dgdb._dgafg = []float64{}
		_ccf := _aad.NewCT_TblGrid()
		_cfab := 0
		_ccg := make([]struct {
			_bca float64
			_aee []float64
			_agd int
		}, _ebf)
		for _dcgf, _ceab := range _dgdb._aabd {
			if _ceab.TblGrid == nil || _ceab.TblGrid.GridCol == nil {
				_dgdb.calculateTotalColumn(_ceab)
			}
			_aff := len(_ceab.TblGrid.GridCol)
			_ccg[_dcgf]._agd = _aff
			if _aff > _cfab {
				_cfab = _aff
			}
			_ccg[_dcgf]._aee = make([]float64, _aff)
			for _dfcce, _cfb := range _ceab.TblGrid.GridCol {
				_fae := 0.0
				if _cfb.WAttr.ST_UnsignedDecimalNumber != nil {
					_fae = _fg.PointsFromTwips(int64(*_cfb.WAttr.ST_UnsignedDecimalNumber))
				}
				_ccg[_dcgf]._aee[_dfcce] = _fae
				_ccg[_dcgf]._bca += _fae
			}
		}
		_dgdb._dgafg = make([]float64, _cfab)
		for _bbb := 0; _bbb < _cfab; _bbb++ {
			_bd := 0.0
			var _beab *_aad.CT_TblGridCol
			for _bcb, _adb := range _dgdb._aabd {
				if _bbb >= _ccg[_bcb]._agd {
					continue
				}
				_gccd := _ccg[_bcb]._aee[_bbb]
				if _ccg[_bcb]._agd < _cfab {
					_edf := float64(_cfab) / float64(_ccg[_bcb]._agd)
					if _bbb == _ccg[_bcb]._agd-1 && _ccg[_bcb]._agd > 1 {
						_gae := 0.0
						for _dabd := _bbb; _dabd < _cfab; _dabd++ {
							if _dgdb._dgafg[_dabd] > 0 {
								_gae += _dgdb._dgafg[_dabd]
							}
						}
						if _gccd*_edf > _gae && _gae > 0 {
							_gccd = _gccd * _edf
						}
					} else {
						_gccd *= _edf
					}
				}
				if _gccd > _bd {
					_bd = _gccd
					_beab = _adb.TblGrid.GridCol[_bbb]
				}
			}
			_dgdb._dgafg[_bbb] = _bd
			if _beab != nil {
				_ccf.GridCol = append(_ccf.GridCol, _beab)
			} else {
				_fgg := _aad.NewCT_TblGridCol()
				_afaa := uint64(_fg.TwipsFromPoints(_bd))
				_fgg.WAttr = &_ede.ST_TwipsMeasure{ST_UnsignedDecimalNumber: &_afaa}
				_ccf.GridCol = append(_ccf.GridCol, _fgg)
			}
		}
		_egc := _dgdb._aabd[0].TblPr
		_aeb := []*_aad.CT_Row{}
		for _, _aced := range _dgdb._aabd {
			for _, _gffg := range _aced.EG_ContentRowContent {
				if _gffg != nil && len(_gffg.ContentRowContentChoice.Tr) > 0 {
					for _, _fgf := range _gffg.ContentRowContentChoice.Tr {
						if len(_fgf.EG_ContentCellContent) < len(_dgdb._dgafg) {
							for _ebce := len(_fgf.EG_ContentCellContent); _ebce < len(_dgdb._dgafg); _ebce++ {
								_eba := _aad.NewEG_ContentCellContent()
								_eba.ContentCellContentChoice = _aad.NewEG_ContentCellContentChoice()
								_eba.ContentCellContentChoice.Tc = []*_aad.CT_Tc{}
								_bgfgd := _aad.NewCT_Tc()
								_bgfgd.TcPr = _aad.NewCT_TcPr()
								_bgfgd.TcPr.TcBorders = _aad.NewCT_TcBorders()
								_bgfgd.TcPr.TcBorders.Top = _aad.NewCT_Border()
								_bgfgd.TcPr.TcBorders.Right = _aad.NewCT_Border()
								_bgfgd.TcPr.TcBorders.Left = _aad.NewCT_Border()
								_bgfgd.TcPr.TcBorders.Bottom = _aad.NewCT_Border()
								_eba.ContentCellContentChoice.Tc = append(_eba.ContentCellContentChoice.Tc, _bgfgd)
								_fgf.EG_ContentCellContent = append(_fgf.EG_ContentCellContent, _eba)
							}
						}
						_aeb = append(_aeb, _fgf)
					}
				}
			}
		}
		_agdb := &_aad.CT_Tbl{TblPr: _egc, TblGrid: _ccf}
		for _, _ccab := range _aeb {
			_agdb.EG_ContentRowContent = append(_agdb.EG_ContentRowContent, &_aad.EG_ContentRowContent{ContentRowContentChoice: &_aad.EG_ContentRowContentChoice{Tr: []*_aad.CT_Row{_ccab}}})
		}
		_dgdb.addAbsoluteTable(_agdb)
	}
	_dgdb._aabd = []*_aad.CT_Tbl{}
	_dgdb._dgafg = []float64{}
}

func (_ggb *convertContext) drawPage(_dcd *page) {
	if _dcd._be {
		_dad := _dcd._gd.Top + _gf*_aga
		_bce := _dcd._gd.Left
		_dga := _dcd._gd.Right
		_fg.DrawLine(_ggb._gaeg, _bce, _dad, _dga, _dad, _ef, _ce.ColorBlack)
	}
	for _, _fb := range _dcd._ccb {
		_gef(_ggb._gaeg, _fb)
	}
	for _, _geae := range _dcd._cad {
		_dag(_ggb._gaeg, _geae)
	}
	for _, _edc := range _dcd._bg {
		if _edc._gbb {
			_gcb := _edc._cd + _gf*_aga
			_bab := _dcd._gd.Left
			_bgfg := _bab + _fcdf(50)
			_fg.DrawLine(_ggb._gaeg, _bab, _gcb, _bgfg, _gcb, _ef, _ce.ColorBlack)
		} else {
			for _, _gefe := range _edc._ea {
				if _gefe._cda {
					_ggb.processRtlLine(_gefe)
				}
				for _, _baf := range _gefe._beg {
					for _, _dgf := range _baf._adf {
						for _, _dfb := range _dgf._ee {
							if _dfb._bbaa != nil {
								_dfb._bbaa.SetPos(_dgf._gfd+_dfb._fa, _edc._cd+_gefe._egf)
								_cfc := _ggb._gaeg.Draw(_dfb._bbaa)
								if _cfc != nil {
									_cb.Log.Debug("\u0045\u0072\u0072or\u0020\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073", _cfc)
								}
							} else if _dfb._fgef != nil {
								_dfb._fgef._dge = _dgf._gfd + _dfb._fa
								_dfb._fgef._aag = _edc._cd + _gefe._egf
								_dag(_ggb._gaeg, _dfb._fgef)
							} else {
								_fcc := _ggb._gaeg.NewStyledParagraph()
								if _dfb._dfg {
									_dfb._gfdc = 0
								} else if _dfb._fc {
									_dfb._gfdc = 1.2*_gefe._eaf - _dfb._cde
								}
								_eec := _dgf._gfd + _dfb._fa
								_edee := _edc._cd + _gefe._egf + _dfb._gfdc
								_fcc.SetPos(_eec, _edee)
								var _fadd *_ce.TextChunk
								if _dfb._ffc != "" {
									_fadd = _fcc.AddExternalLink(_dfb._gfb, _dfb._ffc)
								} else {
									_fadd = _fcc.Append(_dfb._gfb)
								}
								if _dfb._fge != nil {
									_fadd.Style = *_dfb._fge
								}
								if _dfb._caf != nil {
									_fadd.Highlight(*_dfb._caf, 1.0)
								}
								_edb := _ggb._gaeg.Draw(_fcc)
								if _edb != nil {
									_cb.Log.Debug("\u0045\u0072\u0072\u006fr \u0064\u0072\u0061\u0077\u0069\u006e\u0067\u0020\u0074\u0065\u0078\u0074\u003a\u0020%\u0073", _edb)
								}
								if _dfb._dab != nil {
									_gabb := _edee + _dfb._cba + 2.0
									_fg.DrawLine(_ggb._gaeg, _eec, _gabb, _eec+_dfb._gba, _gabb, 1, *_dfb._dab)
								}
							}
						}
					}
				}
			}
			if _edc._dae != nil {
				switch _edc._dae._db {
				case _ce.HorizontalAlignmentCenter:
					_edc._dae._agae.SetPos(_edc._gfg+(_dcd._gd.Right-_dcd._gd.Left-_edc._dae._cfd)/2, _edc._cd+_edc._bba.Top)
				case _ce.HorizontalAlignmentRight:
					_edc._dae._agae.SetPos(_dcd._gd.Right-_edc._dae._cfd-_edc._bba.Right, _edc._cd+_edc._bba.Top)
				default:
					_cfa := _edc._dae._bbf
					if _cfa == 0 {
						_cfa = _edc._gfg
					}
					_edc._dae._agae.SetPos(_cfa, _edc._cd+_edc._bba.Top)
				}
				_aae := _ce.NewBlock(_edc._dae._cfd, _ggb._gaeg.Height())
				_aae.SetPos(0, 0)
				_ = _aae.Draw(_edc._dae._agae)
				_ = _ggb._gaeg.Draw(_aae)
			}
			if _edc._dfc != nil {
				_cdc := (_dcd._gd.Left/_fg.DefaultFontSize - 1)
				_dcg := 1.5
				for _, _dabf := range _edc._dfc {
					_eag := _edc._df + _dabf._gab + _cdc
					if _eag > _edc._ccd+_cdc {
						_eag = _edc._ccd + _cdc
					}
					switch _dabf._dde {
					case _fg.BorderPositionTop:
						_ec := _edc._cd + _dabf._aaa
						_fg.DrawLine(_ggb._gaeg, _edc._df-_cdc, _ec, _eag, _ec, _dabf._dgd, _dabf._bef)
					case _fg.BorderPositionLeft:
						_cdf := _edc._cd + _edc._cec - _edc._bba.Top - _edc._bba.Bottom - _dabf._aaa - _dcg
						_ceg := _cdf + _edc._cec + _edc._bba.Top + _edc._bba.Bottom
						_dfe := _edc._df - _cdc
						_fg.DrawLine(_ggb._gaeg, _dfe, _cdf, _dfe, _ceg, _dabf._gab, _dabf._bef)
					case _fg.BorderPositionBottom:
						_cef := _edc._cd + _dabf._aaa + _edc._bba.Top + _edc._cec + _edc._bba.Bottom
						_fg.DrawLine(_ggb._gaeg, _edc._df-_cdc, _cef, _eag, _cef, _dabf._dgd, _dabf._bef)
					case _fg.BorderPositionRight:
						_cgd := _edc._cd + _edc._cec - _edc._bba.Top - _edc._bba.Bottom - _dabf._aaa - _dcg
						_dcge := _cgd + _edc._cec + _edc._bba.Top + _edc._bba.Bottom
						_dadc := _edc._ccd + _cdc
						_fg.DrawLine(_ggb._gaeg, _dadc, _cgd, _dadc, _dcge, _dabf._gab, _dabf._bef)
					}
				}
			}
		}
	}
	for _, _cgfb := range _dcd._aaf {
		_gef(_ggb._gaeg, _cgfb)
	}
	for _, _agf := range _dcd._efc {
		_dag(_ggb._gaeg, _agf)
	}
	if len(_dcd._bbge) > 0 {
		_bafge := _dcd._gd.Bottom + _gf*_aga
		_ddea := _dcd._gd.Left
		_edcb := _ddea + _fcdf(50)
		_fg.DrawLine(_ggb._gaeg, _ddea, _bafge, _edcb, _bafge, _ef, _ce.ColorBlack)
		_aeg := _dcd._gd.Bottom + _gf
		for _, _dffa := range _dcd._bbge {
			_dffa._ge.SetPos(_dcd._gd.Left, _aeg)
			_edcg := _ggb._gaeg.Draw(_dffa._ge)
			if _edcg != nil {
				_cb.Log.Debug("\u0045\u0072\u0072\u006f\u0072\u0020\u0064\u0072\u0061\u0077\u0069n\u0067\u0020\u0066\u006f\u006f\u0074\u006e\u006f\u0074\u0065:\u0020\u0025\u0073", _edcg)
			}
			_aeg += _dffa._ge.Height()
		}
	}
}

func _bceeb(_ggbfg, _gbdbe *_aad.CT_Border, _cfcgg bool) *_aad.CT_Border {
	if _cfcgg {
		return _ggbfg
	}
	return _gbdbe
}

func (_bcgf *convertContext) renderTableRow(_ebed *_aad.CT_Row, _abbbc *_aad.CT_Row, _gfgf float64, _bfcb map[int][]tableCellProperties, _ffec int, _ffeg *_aad.CT_TblPr, _dcdb int, _dfff int, _bgcab int, _def []*_aad.CT_TblStylePr, _aab *_aad.CT_PPrGeneral, _aafe *_aad.CT_RPr, _cbda *_ce.Table, _gaf []float64, _gceg int, _cdg float64, _aagb bool, _eaca []float64, _edeg *_aad.CT_Tbl, _aegg float64, _dgbg int, _dadde float64) (float64, int, *_ce.Table, int, float64, int, *_aad.CT_Row, bool) {
	_abcb := _ebed.TblPrEx
	_begg := false
	var _fabg float64
	_aeece := _aad.ST_HeightRuleAuto
	if _ffb := _ebed.TrPr; _ffb != nil {
		if len(_ffb.TrPrBaseChoice) != 0 {
			for _, _fgd := range _ffb.TrPrBaseChoice {
				if _fgd.TblHeader != nil && _abbbc == nil {
					_abbbc = _ebed
				}
				if _fgd.TrHeight != nil {
					_cabc := _fgd.TrHeight
					_aeece = _cabc.HRuleAttr
					if _acfbf := _cabc.ValAttr; _acfbf != nil {
						if _acfbf.ST_UnsignedDecimalNumber != nil {
							_fabg = _fg.PointsFromTwips(int64(*_acfbf.ST_UnsignedDecimalNumber))
							_begg = true
						}
					}
				}
			}
		}
	}
	if _gfgf == 0 || _gfgf > _bcgf._eeabe._gd.Right-_bcgf._eeabe._gd.Left {
		_gfgf = _bcgf._eeabe._gd.Right - _bcgf._eeabe._gd.Left
	}
	_ebedg := map[int]int{}
	_bbag := 0
	_fegfcf := -1
	for {
		_ddgd := false
		for _bbea, _ggfe := range _ebed.EG_ContentCellContent {
			if _addef := _ggfe.ContentCellContentChoice.Tc; len(_addef) > 0 {
				if _caed := _addef[0]; _caed != nil {
					_bdc := -1
					if _ddgdb, _geca := _ebedg[_bbea]; _geca {
						_bdc = _ddgdb
					}
					_cdeb := _bbea != _bgcab-1
					_fcb := _bbag > 0 && _bdc == -1 && _bbea < _fegfcf
					_bfcb[_ffec] = append(_bfcb[_ffec], tableCellProperties{_caed, _ffeg, _abcb, _dcdb, _bbea, _dfff, _bgcab, _def, _aab, _aafe, _cdeb, _bdc, _fcb, _begg, _fabg})
					if _fcb {
						_bcgf.addEmptyCellToTable(_cbda, _caed, _ffeg, _abcb, _dcdb, _bbea, _dfff, _bgcab, _def, _aafe)
					} else {
						_dgfa := _bcgf.addCellToTable(_cbda, _caed, _ffeg, _abcb, _dcdb, _bbea, _dfff, _bgcab, _def, _aab, _aafe, _cdeb, _bdc, _gaf)
						if !_ddgd && _dgfa > -1 {
							_ddgd = true
							_fegfcf = _bbea
						}
						_ebedg[_bbea] = _dgfa
					}
				}
			}
		}
		if !_ddgd {
			break
		}
		_bbag++
		_gceg = _ffec
		_ffec++
	}
	if _begg {
		if _aeece == _aad.ST_HeightRuleAtLeast {
			_ecff, _cddd := _cbda.GetRowHeight(_cbda.CurRow())
			if _cddd != nil {
				_cb.Log.Debug("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020\u0070a\u0072\u0073\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006f\u0066\u0020v\u003a\u006c\u0069\u006e\u0065\u0020\u0073\u0074\u0072\u006f\u006b\u0065 w\u0065\u0069\u0067\u0068\u0074\u0020\u0028\u0025\u0073\u0029", _cddd.Error())
			}
			if _ecff < _fabg {
				_cddd = _cbda.SetRowHeight(_cbda.CurRow(), _fabg)
				if _cddd != nil {
					_cb.Log.Debug("E\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0061b\u006c\u0065\u0020\u0074\u006f\u0020\u0073et\u0020\u0072\u006f\u0077 \u0068\u0065\u0069\u0067\u0068\u0074\u0073\u0020\u0066or\u0020\u0074a\u0062\u006c\u0065\u0020\u0028\u0025\u0073\u0029", _cddd.Error())
				}
			}
		} else {
			_aaeg := _cbda.SetRowHeight(_cbda.CurRow(), _fabg)
			if _aaeg != nil {
				_cb.Log.Debug("E\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0061b\u006c\u0065\u0020\u0074\u006f\u0020\u0073et\u0020\u0072\u006f\u0077 \u0068\u0065\u0069\u0067\u0068\u0074\u0073\u0020\u0066or\u0020\u0074a\u0062\u006c\u0065\u0020\u0028\u0025\u0073\u0029", _aaeg.Error())
			}
		}
	}
	_afde := _fg.MakeTempCreatorMaxHeight(_gfgf)
	_dcgfb := _afde.Draw(_cbda)
	if _dcgfb != nil {
		_cb.Log.Debug("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020\u0074o\u0020d\u0072\u0061\u0077\u0020\u0074\u0061\u0062\u006c\u0065\u0020\u0028\u0025\u0073\u0029", _dcgfb.Error())
	}
	if _cbda.Height() > _cdg {
		if _aagb {
			_bcgf.autofitColumns(_cbda, _gfgf, _eaca, _gaf)
			_bcgf.renderTableRows(_edeg, _bgcab, false, _eaca, _ffeg, _def, _aab, _aafe, _aegg, _abbbc)
			return _gfgf, _ffec, _cbda, _dgbg, _cdg, _gceg, _abbbc, true
		}
		if _gceg != -1 {
			_bcgf.addTableWithDataRange(_bfcb, _dgbg+1, _gceg, _bgcab, _gfgf, _dadde, _eaca, _gaf, false)
			_dgbg = _gceg
		} else {
			_bcgf.addTableWithDataRange(_bfcb, _dgbg+1, _ffec-1, _bgcab, _gfgf, _dadde, _eaca, _gaf, false)
			_dgbg = _ffec - 1
		}
		_gceg = -1
		_bcgf.newPage()
		_cdg = _bcgf.getPageAccessiblePart()
		_cbda = _bcgf._gaeg.NewTable(_bgcab)
		_dcgfb = _cbda.SetColumnWidths(_eaca...)
		if _dcgfb != nil {
			_cb.Log.Debug("\u0045\u0052\u0052\u004f\u0052\u003a \u0055\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0073\u0065\u0074\u0020\u0063\u006f\u006c\u0075\u006d\u006e \u0077\u0069\u0064\u0074\u0068\u0073\u0020\u0066\u006f\u0072\u0020\u0074\u0061\u0062l\u0065 \u0028\u0025\u0073\u0029", _dcgfb.Error())
		}
		if _abbbc != nil {
			_gfgf, _, _cbda, _, _cdg, _gceg, _abbbc, _ = _bcgf.renderTableRow(_abbbc, _abbbc, _gfgf, _bfcb, _ffec-1, _ffeg, 0, _dfff, _bgcab, _def, _aab, _aafe, _cbda, _gaf, _gceg, _cdg, _aagb, _eaca, _edeg, _aegg, _dgbg, _dadde)
		}
		for _gadb := _dgbg + 1; _gadb <= _ffec; _gadb++ {
			_dfga := _bfcb[_gadb]
			_faef := _dfga[0]._egd
			_dfgf := _dfga[0]._dec
			for _, _cbfa := range _dfga {
				if _cbfa._bgf {
					_bcgf.addEmptyCellToTable(_cbda, _cbfa._dfcf, _cbfa._bea, _cbfa._eg, _cbfa._dgg, _cbfa._ff, _cbfa._bead, _cbfa._eac, _cbfa._gfgd, _cbfa._dba)
				} else {
					_bcgf.addCellToTable(_cbda, _cbfa._dfcf, _cbfa._bea, _cbfa._eg, _cbfa._dgg, _cbfa._ff, _cbfa._bead, _cbfa._eac, _cbfa._gfgd, _cbfa._ab, _cbfa._dba, _cbfa._bff, _cbfa._eb, _gaf)
				}
			}
			if _faef {
				_dcgfb = _cbda.SetRowHeight(_cbda.CurRow(), _dfgf)
				if _dcgfb != nil {
					_cb.Log.Debug("E\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0061b\u006c\u0065\u0020\u0074\u006f\u0020\u0073et\u0020\u0072\u006f\u0077 \u0068\u0065\u0069\u0067\u0068\u0074\u0073\u0020\u0066or\u0020\u0074a\u0062\u006c\u0065\u0020\u0028\u0025\u0073\u0029", _dcgfb.Error())
				}
			}
		}
	}
	_ffec++
	return _gfgf, _ffec, _cbda, _dgbg, _cdg, _gceg, _abbbc, false
}

func (_badfc *convertContext) addAbsoluteHeaderFooterTable(_eaba *_aad.CT_Tbl) {
	_gfcc := _eaba.TblGrid
	if _gfcc == nil {
		return
	}
	_cagb := len(_gfcc.GridCol)
	if _cagb == 0 {
		return
	}
	_cecd := []float64{}
	_eefd := []float64{}
	_dgdbb := 0.0
	for _, _bebad := range _gfcc.GridCol {
		_fdbcg := 0.0
		if _bebad.WAttr.ST_UnsignedDecimalNumber != nil {
			_fdbcg = _fg.PointsFromTwips(int64(*_bebad.WAttr.ST_UnsignedDecimalNumber))
		}
		_cecd = append(_cecd, _fdbcg)
		_dgdbb += _fdbcg
	}
	for _ddcg := 0; _ddcg < _cagb; _ddcg++ {
		_eefd = append(_eefd, _cecd[_ddcg]/_dgdbb)
	}
	_cfgdb := _badfc._gaeg.NewTable(_cagb)
	_cfgdb.SetColumnWidths(_eefd...)
	_ggbee := _badfc._gaeg.NewTable(_cagb)
	_ggbee.SetColumnWidths(_eefd...)
	_fdceb, _efee, _fgedf := _faaac(_badfc._adae, _eaba.TblPr)
	var _babb []*_aad.CT_TblStylePr
	if _fdceb.TblStyle != nil {
		_babb = _dbab(_badfc._adae, _fdceb.TblStyle.ValAttr)
	}
	_dcdc := _faea(_fdceb.TblW, _badfc._eeabe._gd.Right-_badfc._eeabe._gd.Left, 0)
	_fbgbd := _faea(_fdceb.TblInd, _badfc._eeabe._gd.Right-_badfc._eeabe._gd.Left, 0)
	_bcaad := _badfc._eeabe._gd.Bottom - _badfc._eeabe._gd.Top
	_aegcc := len(_eaba.EG_ContentRowContent)
	_dfce := make([]float64, _cagb)
	for _cbfb, _efeb := range _eaba.EG_ContentRowContent {
		if _efeb == nil {
			continue
		}
		_fadc := _badfc._gaeg.NewTable(_cagb)
		_fadc.SetColumnWidths(_eefd...)
		if _cbdgf := _efeb.ContentRowContentChoice.Tr; len(_cbdgf) > 0 {
			_fefa := _cbdgf[0]
			_bebb := _fefa.TblPrEx
			for _abccb, _cccg := range _fefa.EG_ContentCellContent {
				if _adage := _cccg.ContentCellContentChoice.Tc; len(_adage) > 0 {
					if _ccee := _adage[0]; _ccee != nil {
						_badfc.addCellToTable(_ggbee, _ccee, _fdceb, _bebb, _cbfb, _abccb, _aegcc, _cagb, _babb, _efee, _fgedf, false, -1, _dfce)
						_badfc.addCellToTable(_fadc, _ccee, _fdceb, _bebb, _cbfb, _abccb, _aegcc, _cagb, _babb, _efee, _fgedf, false, -1, _dfce)
					}
				}
			}
			var _fdaca float64
			if _deba := _fefa.TrPr; _deba != nil {
				if len(_deba.TrPrBaseChoice) != 0 {
					_ggfee := _deba.TrPrBaseChoice[0]
					if _ggfee.TrHeight == nil {
						continue
					}
					_bgcc := _ggfee.TrHeight
					if _eafda := _bgcc.ValAttr; _eafda != nil {
						if _eafda.ST_UnsignedDecimalNumber != nil {
							_fdaca = _fg.PointsFromTwips(int64(*_eafda.ST_UnsignedDecimalNumber))
						}
					}
				}
			}
			if _fdaca < _fadc.Height() {
				_fdaca = _fadc.Height()
			}
			if _fdaca < _fcdf(4) {
				_fdaca = _fcdf(4)
			}
			_ggbee.SetRowHeight(_ggbee.CurRow(), _fdaca)
			_fadc.SetRowHeight(_fadc.CurRow(), _fdaca)
			if _dcdc == 0 || _dcdc > _badfc._eeabe._gd.Right-_badfc._eeabe._gd.Left {
				_dcdc = _badfc._eeabe._gd.Right - _badfc._eeabe._gd.Left
			}
			_gbac := _fg.MakeTempCreatorMaxHeight(_dcdc)
			_gbac.Draw(_ggbee)
			if _ggbee.Height() >= _bcaad {
				_badfc.addParagraphWithTable(*_cfgdb, _dcdc, _fbgbd)
				_badfc.newPage()
				*_ggbee = *_fadc
				_ggbee.SetRowHeight(_ggbee.CurRow(), _fdaca)
				_bcaad = _badfc._eeabe._gd.Bottom - _badfc._eeabe._gd.Top
				_cfgdb = nil
			} else {
				if _cfgdb == nil {
					_cfgdb = _badfc._gaeg.NewTable(_cagb)
					_cfgdb.SetColumnWidths(_eefd...)
				}
				*_cfgdb = *_fadc
			}
		}
	}
	if _cfgdb != nil {
		_badfc.addParagraphWithTableToHeaderFooter(*_cfgdb, _dcdc, _fbgbd)
	}
}

func (_efda *convertContext) addRowToTable(_gee map[int][]tableCellProperties, _afad int, _cdcgd *_ce.Table, _bfgb []float64) error {
	_ddaf := _gee[_afad]
	_baga := _ddaf[0]._egd
	_afcb := _ddaf[0]._dec
	for _, _fgda := range _ddaf {
		if _fgda._bgf {
			_efda.addEmptyCellToTable(_cdcgd, _fgda._dfcf, _fgda._bea, _fgda._eg, _fgda._dgg, _fgda._ff, _fgda._bead, _fgda._eac, _fgda._gfgd, _fgda._dba)
		} else {
			_efda.addCellToTable(_cdcgd, _fgda._dfcf, _fgda._bea, _fgda._eg, _fgda._dgg, _fgda._ff, _fgda._bead, _fgda._eac, _fgda._gfgd, _fgda._ab, _fgda._dba, _fgda._bff, _fgda._eb, _bfgb)
		}
	}
	if _baga {
		_feab := _cdcgd.SetRowHeight(_cdcgd.CurRow(), _afcb)
		if _feab != nil {
			return _d.Errorf("E\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0061b\u006c\u0065\u0020\u0074\u006f\u0020\u0073et\u0020\u0072\u006f\u0077 \u0068\u0065\u0069\u0067\u0068\u0074\u0073\u0020\u0066or\u0020\u0074a\u0062\u006c\u0065\u0020\u0028\u0025\u0073\u0029", _feab.Error())
		}
	}
	return nil
}

func (*convertContext) calculateTotalColumn(_cdaf *_aad.CT_Tbl) (_gag int, _afac bool) {
	_gag = 0
	_afac = false
	if len(_cdaf.EG_ContentRowContent) == 0 {
		return
	}
	_cb.Log.Debug("\u004d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0067\u0072\u0069\u0064\u0043\u006f\u006c\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u002c\u0020\u0063r\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u0067\u0072\u0069\u0064C\u006f\u006c\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u002e")
	_ceba := _cdaf.EG_ContentRowContent[0]
	if len(_ceba.ContentRowContentChoice.Tr) < 1 {
		return
	}
	_aebbb := _ceba.ContentRowContentChoice.Tr[0]
	if len(_aebbb.EG_ContentCellContent) < 1 {
		return
	}
	_bbgb := 0
	if _cdaf.TblPr != nil && _cdaf.TblPr.TblW != nil {
		if _daf := _cdaf.TblPr.TblW.WAttr; _daf != nil {
			switch _cdaf.TblPr.TblW.TypeAttr {
			case _aad.ST_TblWidthPct, _aad.ST_TblWidthDxa:
				if _daf.ST_DecimalNumberOrPercent != nil {
					if _daf.ST_DecimalNumberOrPercent.ST_UnqualifiedPercentage != nil {
						_bbgb = int(*_daf.ST_DecimalNumberOrPercent.ST_UnqualifiedPercentage)
					}
				}
			}
		}
	}
	var _acbg []*_aad.CT_TblGridCol
	for _, _bcbb := range _aebbb.EG_ContentCellContent {
		if _ecgd := _bcbb.ContentCellContentChoice.Tc; len(_ecgd) > 0 {
			if _daag := _ecgd[0]; _daag != nil {
				_gagf := _aad.NewCT_TblGridCol()
				if _daag.TcPr != nil {
					if _gbda := _daag.TcPr.TcW; _gbda != nil {
						if _gbda.WAttr != nil {
							if _egace := _gbda.WAttr.ST_DecimalNumberOrPercent; _egace != nil {
								if _bbdg := _egace.ST_UnqualifiedPercentage; _bbdg != nil {
									_agdca := uint64(*_bbdg)
									_eaee := &_ede.ST_TwipsMeasure{}
									_eaee.ST_UnsignedDecimalNumber = &_agdca
									_gagf.WAttr = _eaee
								}
							}
						}
					}
					_acbg = append(_acbg, _gagf)
					if _daag.TcPr.GridSpan != nil {
						for _bcdd := int(_daag.TcPr.GridSpan.ValAttr) - 1; _bcdd > 0; _bcdd-- {
							_dfd := _aad.NewCT_TblGridCol()
							_acbg = append(_acbg, _dfd)
						}
					}
				} else {
					_acbg = append(_acbg, _gagf)
				}
			}
		}
	}
	_dddg := uint64(_bbgb / len(_acbg))
	for _, _fefg := range _acbg {
		if _fefg.WAttr == nil {
			_ebe := &_ede.ST_TwipsMeasure{}
			_ebe.ST_UnsignedDecimalNumber = &_dddg
			_fefg.WAttr = _ebe
			_afac = true
		}
	}
	_cdaf.TblGrid.GridCol = _acbg
	_gag = len(_acbg)
	return
}

func _fca(_acbf string) string {
	_gaeb := _aadbf.FindStringSubmatch(_acbf)
	if len(_gaeb) < 2 {
		return ""
	}
	return _gaeb[1]
}

func (_fag *convertContext) addAbsoluteCBCs(_efcc []*_aad.EG_ContentBlockContent, _cfdd []*_aad.EG_ContentBlockContent) {
	_cbd := ""
	_faa := false
	for _, _ggg := range _cfdd {
		if len(_ggg.ContentBlockContentChoice.P) < 1 {
			_faa = true
			break
		}
		for _, _ddc := range _ggg.ContentBlockContentChoice.P {
			if len(_ddc.EG_PContent) == 0 {
				break
			}
			if _ddc.PPr != nil && _ddc.PPr.PStyle != nil {
				_cbd = _ddc.PPr.PStyle.ValAttr
				break
			}
		}
	}
	for _, _bgb := range _efcc {
		for _, _edbe := range _bgb.ContentBlockContentChoice.P {
			_fag.addTableGroup()
			_fag.newParagraph()
			for _, _bae := range _edbe.EG_PContent {
				for _, _dfgd := range _bae.PContentChoice.EG_ContentRunContent {
					for _, _dda := range _dfgd.ContentRunContentChoice.EG_RunLevelElts {
						for _, _deg := range _dda.RunLevelEltsChoice.EG_RangeMarkupElements {
							if _deg.RangeMarkupElementsChoice.BookmarkStart != nil {
								_fd := _ca.NewPdfAnnotationLink()
								_bcd := _ca.NewBorderStyle()
								_bcd.SetBorderWidth(0)
								_fd.BS = _bcd.ToPdfObject()
								_fd.Dest = _dc.MakeArray(_dc.MakeInteger(int64(len(_fag._edfd)-1)), _dc.MakeName("\u0058\u0059\u005a"), _dc.MakeFloat(_fag._bdgcc._beb), _dc.MakeFloat(_fag._bdgcc._egf), _dc.MakeFloat(0))
								_fag._afcgb[_deg.RangeMarkupElementsChoice.BookmarkStart.NameAttr] = _fd.PdfAnnotation
							}
						}
					}
				}
			}
			if _edbe.PPr != nil && _edbe.PPr.PStyle == nil {
				_beaf := _fag._adae.Styles.ParagraphStyles()
				for _, _aage := range _beaf {
					if _ddb := _aage.X().DefaultAttr; _ddb != nil {
						if _gabd := _ddb.Bool; _gabd != nil && *_gabd {
							_edbe.PPr = _ecgc(_edbe.PPr, _aage.X().PPr, _aage.X().RPr)
						}
						if _cdaa := _ddb.ST_OnOff1; _cdaa == _ede.ST_OnOff1On {
							_edbe.PPr = _ecgc(_edbe.PPr, _aage.X().PPr, _aage.X().RPr)
						}
						break
					}
				}
			}
			_abg, _fac := _fag.combinePPrWithStyles(_edbe.PPr)
			if _fac != nil {
				_fag._ddcb = _fac
			}
			if _edbe.PPr != nil && _edbe.PPr.PStyle != nil {
				if _edbe.PPr.PStyle.ValAttr != _cbd {
					_edbe.PPr.ContextualSpacing = nil
				}
			}
			if _abg != nil && _abg.SectPr != nil {
				_ebb, _ddg := _fag.getSectPrHeaderAndFooterRef(_abg.SectPr, len(_fag._edfd)-1)
				_fag._eeabe._ace = append(_fag._eeabe._ace, _ebb...)
				_fag._eeabe._gb = append(_fag._eeabe._gb, _ddg...)
				_fag._dbgac = append(_fag._dbgac, _ebb...)
				_fag._dfgfe = append(_fag._dfgfe, _ddg...)
				if !_faa && (_abg.SectPr.Type == nil || (_abg.SectPr.Type != nil && _abg.SectPr.Type.ValAttr != _aad.ST_SectionMarkContinuous)) && _fac == nil && !_edgc(_abg.WidowControl) {
					_fag.newPage()
					continue
				}
				if len(_edbe.EG_PContent) < 1 {
					continue
				}
			}
			_fag.assignPropsToAbsoluteParagraph(_abg, _fag._befb)
			_fag.determineParagraphBounds()
			_fag.newLine()
			_fag.newWord()
			_gad := _edbe.EG_PContent
			if len(_gad) == 0 {
				_fag.addEmptyLine()
			} else {
				if _fag.addAbsoluteEGPC(_gad, _abg) {
					_fag.addCurrentWordToParagraph()
					_fag.addCurrentParagraphToCurrentPage()
					_fag.newPage()
					continue
				}
				if _fag.currentParagraphOverflowsCurrentPage() {
					_fag.moveCurrentParagraphToNewPage()
				}
				_fag.addAnchorBlocks(_gad)
				_fag.addAnchorExtra(_gad)
				_fag.addCurrentWordToParagraph()
			}
			_fag.addCurrentParagraphToCurrentPage()
		}
		_fag._aabd = append(_fag._aabd, _bgb.ContentBlockContentChoice.Tbl...)
	}
	_fag._befb = nil
}

func (_cacgf *convertContext) newWord() {
	_cacgf._bcgdg = &word{_gea: true, _gfd: _cacgf._bdgcc._gbc}
}

func (_ggf *convertContext) processInternalLinks() {
	for _fgc, _dadb := range _ggf._eaaf {
		if _bfdb, _agcc := _ggf._afcgb[_dadb]; _agcc {
			_fgc.SetAnnotation(_bfdb)
		}
	}
}

// FontStyle represents a kind of font styling. It can be FontStyle_Regular, FontStyle_Bold, FontStyle_Italic and FontStyle_BoldItalic.
type FontStyle = _fg.FontStyle

func (_cagd *convertContext) makeBlockFromWdWsp(_bdff *_aad.WdWsp) (*block, error) {
	if _bgbe := _bdff.WordprocessingShapeChoice1; _bgbe != nil {
		if _cdge := _bgbe.Txbx; _cdge != nil {
			if _aefce := _cdge.TxbxContent; _aefce != nil {
				for _, _bcbbf := range _aefce.EG_BlockLevelElts {
					if _dfda := _bcbbf.BlockLevelEltsChoice.EG_ContentBlockContent; len(_dfda) > 0 {
						if _afbfc := _bdff.SpPr; _afbfc != nil {
							if _aedb := _afbfc.Xfrm; _aedb != nil {
								if _bagd := _aedb.Ext; _bagd != nil {
									_gaff := _ac.FromEMU(_bagd.CxAttr)
									_gbfc := _ac.FromEMU(_bagd.CyAttr)
									_gfggc := &_fg.Rectangle{Top: _bcba, Bottom: _bcba, Left: _bcba, Right: _bcba}
									_bbde, _efde := _cagd.makePdfBlockFromCBCs([][]*_aad.EG_ContentBlockContent{_dfda}, _gaff, _gbfc, _gfggc, false, nil)
									if _efde != nil {
										return nil, _efde
									}
									var _beabc bool
									var _fgfbd float64
									var _bcfdc _ce.Color
									if _ecb := _afbfc.GeometryChoice.PrstGeom; _ecb != nil {
										if _ecb.PrstAttr == _ag.ST_ShapeTypeRect {
											if _cfdee := _afbfc.Ln; _cfdee != nil {
												if _ceada := _cfdee.WAttr; _ceada != nil {
													_beabc = true
													_fgfbd = _ac.FromEMU(int64(*_ceada))
													_bcfdc = _ce.ColorBlack
													if _ebda := _cfdee.LineFillPropertiesChoice.SolidFill; _ebda != nil {
														if _eged := _ebda.SrgbClr; _eged != nil {
															_bcfdc = _ce.ColorRGBFromHex("\u0023" + _eged.ValAttr)
														}
													}
												}
											}
										}
									}
									_fdbg := &block{_cee: _bbde, _cecg: _beabc, _caa: _fgfbd, _cg: _bcfdc}
									return _fdbg, nil
								}
							}
						}
					}
				}
			}
		}
	}
	return nil, nil
}

func (_aeed *convertContext) shouldApplyContextualSpacing(Ppr *_aad.CT_PPr) bool {
	_bccg := _aeed._ggbfe.PStyle
	return Ppr != nil && Ppr.ContextualSpacing != nil && _edgc(Ppr.ContextualSpacing) && _aeed._ggbfe.ContextualSpacing != nil && _edgc(_aeed._ggbfe.ContextualSpacing) && Ppr.PStyle != nil && _bccg != nil && Ppr.PStyle.ValAttr == _bccg.ValAttr
}

func (_gdac *convertContext) addCurrentParagraphHeaderToCurrentPage() {
	_gdac.alignParagraph()
	_gdac._eeabe._fe = append(_gdac._eeabe._fe, _gdac._befb)
}
