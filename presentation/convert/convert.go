//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package convert

import (
	_ed "bytes"
	_b "errors"
	_cd "github.com/unidoc/unipdf/v4/contentstream/draw"
	_a "github.com/unidoc/unipdf/v4/core"
	_gg "github.com/unidoc/unipdf/v4/creator"
	_gf "github.com/unidoc/unipdf/v4/model"
	_cf "github.com/unidoc/unipdf/v4/render"
	_c "image"
	_d "image/color"
	_f "image/draw"
	_eg "math"
	_g "strconv"
	_df "strings"
	_cb "unioffice/common"
	_gd "unioffice/common/logger"
	_be "unioffice/common/tempstorage"
	_gb "unioffice/internal/convertutils"
	_eb "unioffice/measurement"
	_ce "unioffice/presentation"
	_ceb "unioffice/schema/soo/dml"
	_ge "unioffice/schema/soo/dml/chart"
	_af "unioffice/schema/soo/pml"
)

func (_def *convertContext) makePdfBlockFromTable(_gcf *_ceb.Tbl) *_gg.Table {
	_edf := _gcf.TblGrid
	if _edf == nil {
		return nil
	}
	_ddaf := len(_edf.GridCol)
	if _ddaf == 0 {
		return nil
	}
	_adbd := []float64{}
	_fccg := 0.0
	for _, _ade := range _edf.GridCol {
		_cac := _eb.FromEMU(_gb.FromSTCoordinate(_ade.WAttr))
		_adbd = append(_adbd, _cac)
		_fccg += _cac
	}
	_cga := []float64{}
	for _gecb := 0; _gecb < _ddaf; _gecb++ {
		_cga = append(_cga, _adbd[_gecb]/_fccg)
	}
	_cgaa := _def._aec.NewTable(_ddaf)
	_cgaa.SetColumnWidths(_cga...)
	_ecaa := _gcf.TblPr
	var _bdd *_ceb.CT_TableStyle
	if _ged := _ecaa.TablePropertiesChoice; _ged != nil {
		if _ged.TableStyle != nil {
			_bdd = _ged.TableStyle
		} else if _ged.TableStyleId != nil {
			_bdd = _def._gccb.GetTableStyleById(*_ged.TableStyleId)
		}
	}
	_dgb := _ceb.NewCT_TablePartStyle()
	_dgb.TcStyle = _ceb.NewCT_TableStyleCellStyle()
	_dgb.TcTxStyle = _ceb.NewCT_TableStyleTextStyle()
	if _bdd != nil {
		if _bdd.WholeTbl != nil {
			*_dgb = *_bdd.WholeTbl
		}
		if _bdd.TblBg != nil {
			if _dgb.TcStyle.ThemeableFillStyleChoice.Fill == nil {
				_dgb.TcStyle.ThemeableFillStyleChoice.Fill = _bdd.TblBg.ThemeableFillStyleChoice.Fill
			}
		}
	}
	if _dgb.TcStyle.ThemeableFillStyleChoice.Fill == nil {
		_dgb.TcStyle.ThemeableFillStyleChoice.Fill = _ceb.NewCT_FillProperties()
		_dgb.TcStyle.ThemeableFillStyleChoice.Fill.FillPropertiesChoice.NoFill = _ecaa.FillPropertiesChoice.NoFill
		_dgb.TcStyle.ThemeableFillStyleChoice.Fill.FillPropertiesChoice.SolidFill = _ecaa.FillPropertiesChoice.SolidFill
	}
	_cfbaf := len(_gcf.Tr)
	_bdgg := _gcf.TblPr.BandRowAttr != nil && *_gcf.TblPr.BandRowAttr
	_eafd := _gcf.TblPr.FirstRowAttr != nil && *_gcf.TblPr.FirstRowAttr
	_bac := _gcf.TblPr.LastRowAttr != nil && *_gcf.TblPr.LastRowAttr
	_bafb := _gcf.TblPr.BandColAttr != nil && *_gcf.TblPr.BandColAttr
	_gac := _gcf.TblPr.FirstColAttr != nil && *_gcf.TblPr.FirstColAttr
	_befe := _gcf.TblPr.LastColAttr != nil && *_gcf.TblPr.LastColAttr
	for _agac, _fedc := range _gcf.Tr {
		_cbdf := _agac == 0
		_geca := _agac == _cfbaf-1
		_bgg := _agac%2 == 0
		_gbgc := len(_fedc.Tc)
		var _eaff *_ceb.CT_TablePartStyle
		if _bdd != nil {
			if _cbdf && _eafd {
				_eaff = _bdd.FirstRow
			} else if _geca && _bac {
				_eaff = _bdd.LastRow
			} else if _bgg && _bdgg {
				_eaff = _bdd.Band2H
			} else if _bdgg {
				_eaff = _bdd.Band1H
			}
		}
		var _ffdg float64
		for _deg, _geff := range _fedc.Tc {
			_fbfa := _deg == 0
			_ddd := _deg == _gbgc-1
			_fbgf := _deg%2 == 0
			var _abea *_ceb.CT_TablePartStyle
			if _bdd != nil {
				if _fbfa && _gac {
					_abea = _bdd.FirstCol
				} else if _ddd && _befe {
					_abea = _bdd.LastCol
				} else if _fbgf && _bafb {
					_abea = _bdd.Band2V
				} else if _bafb {
					_abea = _bdd.Band1V
				}
			}
			_fbfd := _cgfc(_cgfc(_abea, _eaff), _dgb)
			_fgea := _def.addCellToTable(_cgaa, _geff, _fbfd, _cbdf, _geca, _fbfa, _ddd)
			if _fgea > _ffdg {
				_ffdg = _fgea
			}
		}
		_ffcc := _eb.FromEMU(_gb.FromSTCoordinate(_fedc.HAttr))
		if _ffcc < _ffdg {
			_ffcc = _ffdg
		}
		if _ffcc < _bagf(4) {
			_ffcc = _bagf(4)
		}
		_cgaa.SetRowHeight(_cgaa.CurRow(), _ffcc)
	}
	return _cgaa
}

type convertContext struct {
	_aec    *_gg.Creator
	_gced   *_gb.Rectangle
	_gccb   *_ce.Presentation
	_cbec   *_ce.Slide
	_gefac  *_af.SldMaster
	_dgg    *_af.SldLayout
	_bded   float64
	_cgcd   float64
	_gefacb []_gg.Drawable
	_bbed   *background
	_fbff   *_ceb.CT_TextParagraphProperties
	_dfe    *_ceb.CT_TextCharacterProperties
	_bdgf   *_ceb.CT_TextParagraphProperties
	_gceged *_ceb.CT_TextCharacterProperties
	_edd    *_ceb.CT_TextParagraphProperties
	_cag    *_ceb.CT_TextCharacterProperties
	_cbdd   []*_ceb.CT_TextParagraphProperties
	_cbdb   []*_ceb.CT_TextParagraphProperties
	_ace    []*_ceb.CT_TextParagraphProperties
	_dbgc   *_ceb.Theme
	_dce    *_ceb.CT_ColorMappingOverride
}

// RegisterFont makes a PdfFont accessible for using in converting to PDF.
func RegisterFont(name string, style FontStyle, font *_gf.PdfFont) {
	_gb.RegisterFont(name, style, font)
}
func (_dgdb *textboxContext) addPrefix(_eeaf *prefixData, _cffa *_gg.TextStyle) {
	_gba := _dcae(_eeaf._ebefd)
	_eef := *_cffa
	if _eeaf._ddg {
		_eef.Font = _gb.AssignStdFontByName(_eef, "\u0053\u0079\u006d\u0062\u006f\u006c")
	}
	for _, _dbbd := range _gba {
		_dbbd._fcad = &_eef
		_dgdb.addTextSymbol(_dbbd)
	}
	_gdfb := -(_eeaf._bada + _dgdb._bdfa._ccce)
	if _gdfb < 0 {
		_gdfb = 0
	}
	_abec := &symbol{_fag: "\u0020", _cce: _gdfb}
	_dgdb.addTextSymbol(_abec)
	_dgdb._bdfa._cgca += (_eeaf._bada + _eeaf._gggb)
}

// RegisterFontsFromDirectory registers all fonts from the given directory automatically detecting font families and styles.
func RegisterFontsFromDirectory(dirName string) error { return _gb.RegisterFontsFromDirectory(dirName) }

var _caaba = map[string]int32{"\u0076": 9830, "\u00d8": 8594, "\u00fc": 8730}

func (_dfdb *textboxContext) newLine() {
	if _dfdb._cge == nil {
		_dfdb.newParagraph()
	}
	_bbad := _dfdb._cge._ddbf + _dfdb._cge._adef
	_cged := &line{}
	_cged._bbg = _dfdb._cge._dbfa
	if len(_dfdb._cge._abcag) == 0 {
		_cged._bbg += _dfdb._cge._ffec
	}
	_cged._cff = _dfdb._cge._cfge
	_cged._fcd = _cged._bbg
	_cged._eafe = _bbad
	_dfdb._cge._abcag = append(_dfdb._cge._abcag, _cged)
	_dfdb._bcba = _cged
}
func (_feg *convertContext) renderPageWithDrawableToGoImage(_caab _gg.Drawable) (_c.Image, error) {
	_fdda := _gb.MakeTempCreator(_feg._cgcd, _feg._bded)
	_fdda.NewPage()
	_fdda.Draw(_caab)
	_edba, _fcccb := _gb.GetPageFromCreator(_fdda)
	if _fcccb != nil {
		return nil, _fcccb
	}
	return _cf.NewImageDevice().Render(_edba)
}
func (_ecac *convertContext) getShapeFromBlipFill(_abdf *_ceb.CT_BlipFillProperties, _bbb, _febb, _aeff, _egcd float64, _eaeea bool) _gg.Drawable {
	_cfgd, _dbcf, _gadb := _ecac.makePdfImageFromBlipFill(_abdf, _eaeea)
	if _gadb != nil {
		_gd.Log.Debug("\u0043\u0061\u006e\u006e\u006f\u0074\u0020\u006d\u0061\u006b\u0065\u0020\u0050D\u0046\u0020\u0069\u006d\u0061\u0067e\u0020\u0066\u0072\u006f\u006d\u0020\u0042\u006c\u0069\u0070\u0046\u0069\u006cl\u003a\u0020\u0025\u0073", _gadb)
		return nil
	}
	if _cfgd == nil {
		return nil
	}
	if _bgdf := _abdf.FillModePropertiesChoice.Tile; _bgdf != nil {
		_cfgd = _ecac.tileImage(_cfgd, _abdf.FillModePropertiesChoice.Tile, _aeff, _egcd)
	}
	if _edbd := _abdf.FillModePropertiesChoice.Stretch; _edbd != nil {
		_cfgd, _bbb, _febb = _ecac.stretchImage(_cfgd, _abdf.FillModePropertiesChoice.Stretch, _bbb, _febb, _aeff, _egcd)
	}
	if _cfgd == nil {
		return nil
	}
	if len(_dbcf) == 0 {
		_cfgd.SetPos(_bbb, _febb)
		return _cfgd
	}
	_cfgd = _ecac.applyBlipEffectsOnImg(_cfgd, _bbb, _febb, _dbcf)
	_cfgd.SetPos(_bbb, _febb)
	return _cfgd
}
func (_dcfff *convertContext) addCellToTable(_cfagc *_gg.Table, _dbbc *_ceb.CT_TableCell, _dafb *_ceb.CT_TablePartStyle, _dabd, _bacd, _ceaa, _cead bool) float64 {
	var _fbdb *_gg.TableCell
	_dcb := 1
	if _dbbc.GridSpanAttr != nil {
		_dcb = int(*_dbbc.GridSpanAttr)
	}
	_fbdb = _cfagc.MultiColCell(_dcb)
	_ddda := _dbbc.TcPr
	var _cbb *_ceb.CT_TableStyleTextStyle
	if _dafb != nil {
		_ddda = _agdf(_ddda, _dafb.TcStyle, _dabd, _bacd, _ceaa, _cead)
		_cbb = _dafb.TcTxStyle
	}
	_ffe := _ccd
	_cbde := _gg.CellVerticalAlignmentMiddle
	_edb := _debd(0.05)
	_gae := _debd(0.05)
	if _ddda != nil {
		if _dcde := _ddda.LnL; _dcde != nil {
			_ecg, _aebc, _fdb := _dcfff.getBorderStyle(_dcde)
			_fbdb.SetBorder(_gg.CellBorderSideLeft, _ecg, _fdb)
			if _aebc != nil && *_aebc != nil {
				_fbdb.SetSideBorderColor(_gg.CellBorderSideLeft, *_aebc)
			}
		}
		if _fefc := _ddda.LnT; _fefc != nil {
			_bgd, _faa, _faae := _dcfff.getBorderStyle(_fefc)
			_fbdb.SetBorder(_gg.CellBorderSideTop, _bgd, _faae)
			if _faa != nil && *_faa != nil {
				_fbdb.SetSideBorderColor(_gg.CellBorderSideTop, *_faa)
			}
		}
		if _edec := _ddda.LnR; _edec != nil {
			_gbcbf, _acfbf, _dbga := _dcfff.getBorderStyle(_edec)
			_fbdb.SetBorder(_gg.CellBorderSideRight, _gbcbf, _dbga)
			if _acfbf != nil && *_acfbf != nil {
				_fbdb.SetSideBorderColor(_gg.CellBorderSideRight, *_acfbf)
			}
		}
		if _add := _ddda.LnB; _add != nil {
			_fgc, _efbb, _gfa := _dcfff.getBorderStyle(_add)
			_fbdb.SetBorder(_gg.CellBorderSideBottom, _fgc, _gfa)
			if _efbb != nil && *_efbb != nil {
				_fbdb.SetSideBorderColor(_gg.CellBorderSideBottom, *_efbb)
			}
		}
		if _defd := _ddda.MarLAttr; _defd != nil {
			_ffe = float64(_gb.FromSTCoordinate32(*_defd))
		}
		switch _ddda.AnchorAttr {
		case _ceb.ST_TextAnchoringTypeT:
			_cbde = _gg.CellVerticalAlignmentTop
		case _ceb.ST_TextAnchoringTypeB:
			_cbde = _gg.CellVerticalAlignmentBottom
		}
		if _ddda.FillPropertiesChoice.NoFill == nil {
			if _bbff := _ddda.FillPropertiesChoice.SolidFill; _bbff != nil {
				_eede, _gcege := _dcfff.getColorFromSolidFill(_bbff)
				_fbdb.SetOpacity(_gcege)
				_fbdb.SetBackgroundColor(_eede)
			}
		}
		if _gdf := _ddda.MarBAttr; _gdf != nil {
			_edb = float64(_gb.FromSTCoordinate32(*_gdf))
		}
		if _agae := _ddda.MarTAttr; _agae != nil {
			_gae = float64(_gb.FromSTCoordinate32(*_agae))
		}
	}
	_fbdb.SetVerticalAlignment(_cbde)
	_fbdb.SetIndent(_ffe)
	var _bdae float64
	if _bggf := _dbbc.TxBody; _bggf != nil {
		_cec := _dcfff.makePdfDivisionFromTxBody(_bggf, _cbb)
		_bdae = _cec.Height() + _gae + _edb
		_fbdb.SetContent(_cec)
	}
	return _bdae
}
func (_eddb *textboxContext) adjustHeights(_cgd float64) {
	if _eddb._bcba._geg < _cgd {
		_eddb._cge._ddbf += (_cgd - _eddb._bcba._geg)
		_eddb._bcba._geg = _cgd
	}
}

const (
	FontStyle_Regular    FontStyle = 0
	FontStyle_Bold       FontStyle = 1
	FontStyle_Italic     FontStyle = 2
	FontStyle_BoldItalic FontStyle = 3
)

func (_dcfg *convertContext) getShapesFromSpPr(_gebd *_ceb.CT_ShapeProperties, _bafa *_ceb.CT_ShapeStyle, _gbdd bool, _ecb float64, _agc float64) ([]_gg.Drawable, float64, float64, float64, float64, _gg.Color, bool) {
	_fba := []_gg.Drawable{}
	var _feb, _ccc, _gbg, _gefa, _bafd float64
	var _daf, _gaa, _agcc, _gbe _gg.Color
	var _aabb *_ceb.CT_BlipFillProperties
	_fcc, _deed := 1.0, 1.0
	if _bafa != nil {
		_daf, _gaa, _gbe = _dcfg.getStyleColors(_bafa)
	}
	if _aef := _gebd.Ln; _aef != nil {
		if _aef.LineFillPropertiesChoice.NoFill != nil {
			_agcc, _bafd = nil, 0
		} else {
			_agcc, _bafd, _fcc = _dcfg.getInfoFromLn(_aef)
			if _agcc == nil {
				_agcc = _gbe
			}
		}
	}
	if _gebd.FillPropertiesChoice.NoFill != nil {
		_gaa, _deed = nil, 0
	} else if _gbdd {
		_gaa = _dcfg._bbed._fbbg
		_deed = _dcfg._bbed._dcfb
		_aabb = _dcfg._bbed._dbfe
	} else if _bcc := _gebd.FillPropertiesChoice.SolidFill; _bcc != nil {
		_gaa, _deed = _dcfg.getColorFromSolidFill(_bcc)
	}
	var _eagb bool
	if _gde := _gebd.Xfrm; _gde != nil {
		_feb, _ccc, _gbg, _gefa = _gb.GetDataFromXfrm(_gde)
		_feb += _ecb
		_ccc += _agc
		_eagb = true
	}
	if _feee := _gebd.GeometryChoice.CustGeom; _feee != nil {
		_dcg := []_cd.Point{}
		_dfdg, _cdf := 1.0, 1.0
		if _daba := _feee.PathLst; _daba != nil {
			for _, _cbcf := range _daba.Path {
				if _cbcf != nil {
					if _aeb := _cbcf.WAttr; _aeb != nil {
						_dfdg = _gbg / _eb.FromEMU(*_aeb)
					}
					if _ffbd := _cbcf.HAttr; _ffbd != nil {
						_cdf = _gefa / _eb.FromEMU(*_ffbd)
					}
					for _, _dbc := range _cbcf.Path2DChoice {
						if _dbc.Close != nil {
						}
						if _aff := _dbc.MoveTo; _dbc.MoveTo != nil {
							if _aff != nil && _aff.Pt != nil {
								_eccd, _bfdc := _gdc(_aff.Pt)
								_dcg = append(_dcg, _cd.Point{X: _eccd*_dfdg + _feb, Y: _bfdc*_cdf + _ccc})
							}
						}
						if _eee := _dbc.LnTo; _eee != nil && _eee.Pt != nil {
							_eae, _cab := _gdc(_eee.Pt)
							_dcg = append(_dcg, _cd.Point{X: _eae*_dfdg + _feb, Y: _cab*_cdf + _ccc})
						}
					}
					_cea := _dcfg._aec.NewPolygon([][]_cd.Point{_dcg})
					_cea.SetFillColor(_gaa)
					_cea.SetFillOpacity(_deed)
					_cea.SetBorderWidth(_bafd)
					if _agcc != nil {
						_cea.SetBorderColor(_agcc)
						_cea.SetBorderOpacity(_fcc)
					}
					_fba = append(_fba, _cea)
				}
			}
		}
	}
	if _dgff := _gebd.GeometryChoice.PrstGeom; _dgff != nil {
		switch _dgff.PrstAttr {
		case _ceb.ST_ShapeTypeRect:
			if _aabb != nil {
				_afg := _dcfg.getShapeFromBlipFill(_aabb, _feb, _ccc, _gbg, _gefa, false)
				_fba = append(_fba, _afg)
			} else {
				_cdg := _dcfg._aec.NewRectangle(_feb, _ccc, _gbg, _gefa)
				_beeg := _gaa != nil && _deed > 0
				if _beeg {
					_cdg.SetFillColor(_gaa)
					_cdg.SetFillOpacity(_deed)
				}
				_gcc := _agcc != nil && _fcc > 0 && _bafd > 0
				if _gcc {
					_cdg.SetBorderWidth(_bafd)
					_cdg.SetBorderColor(_agcc)
					_cdg.SetBorderOpacity(_fcc)
				}
				if _beeg || _gcc {
					_fba = append(_fba, _cdg)
				}
			}
		case _ceb.ST_ShapeTypeLine:
			_gggf := _dcfg._aec.NewLine(_feb, _ccc, _feb+_gbg, _ccc+_gefa)
			_gggf.SetLineWidth(_bafd)
			if _agcc != nil {
				_gggf.SetColor(_agcc)
			}
			_fba = append(_fba, _gggf)
		}
	}
	return _fba, _feb, _ccc, _gbg, _gefa, _daf, _eagb
}
func (_gfcgd *convertContext) getColorFromMatrixReference(_adf *_ceb.CT_StyleMatrixReference) _gg.Color {
	if _adf == nil {
		return nil
	}
	var _babf _gg.Color
	var _gbff string
	if _cdef := _adf.SrgbClr; _cdef != nil {
		_gbff = _cdef.ValAttr
	} else if _abda := _adf.SchemeClr; _abda != nil {
		_gbff = _gb.GetColorStringFromDmlColor(_gfcgd._gccb.GetColorBySchemeColor(_abda.ValAttr))
		_gbff = _gb.AdjustColor(_gbff, _abda.EG_ColorTransform)
	}
	if _gbff != "" {
		_babf = _gg.ColorRGBFromHex("\u0023" + _gbff)
	}
	return _babf
}

type prefixData struct {
	_ebefd string
	_ddg   bool
	_gggb  float64
	_bada  float64
}

func (_cdee *convertContext) applyBlipEffectsOnImg(_gff *_gg.Image, _bdfb, _ffdb float64, _dcc []*_ceb.CT_BlipChoice) *_gg.Image {
	if len(_dcc) == 0 {
		return _gff
	}
	_gff.SetPos(_bdfb, _ffdb)
	_bceb, _dae := _cdee.renderPageWithDrawableToGoImage(_gff)
	if _dae != nil {
		_gd.Log.Debug("\u0045\u0072\u0072\u006f\u0072\u0020\u0072\u0065\u006e\u0064\u0065\u0072\u0020a\u006e\u0020\u0069\u006d\u0061\u0067e\u0020\u0074\u006f\u0020\u0061\u0020\u0047\u006f\u0020\u0069\u006d\u0061\u0067e\u003a\u0020\u0025\u0073", _dae)
		return _gff
	}
	_cefg, _dae := _cdee.renderCurrentStateToGoImage()
	if _dae != nil {
		_gd.Log.Debug("\u0045\u0072\u0072\u006f\u0072\u0020\u0072\u0065n\u0064\u0065\u0072 t\u0068\u0065\u0020\u0063\u0075\u0072r\u0065\u006e\u0074\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0061\u0020G\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u003a \u0025\u0073", _dae)
		return _gff
	}
	_cfdf := _bceb.Bounds()
	_cdffb := _c.NewRGBA(_cfdf)
	_fbaa, _gcac := _gff.Width(), _gff.Height()
	for _, _adbe := range _dcc {
		if _cgaee := _adbe.AlphaModFix; _cgaee == nil {
			continue
		}
		if _eabc := _adbe.AlphaModFix.AmtAttr; _eabc != nil {
			if _bcce := _eabc.ST_PositivePercentageDecimal; _bcce != nil {
				_dfeb := uint8(255 * (*_bcce) / 100000)
				_bfeb := _c.NewUniform(_d.Alpha{_dfeb})
				_f.Draw(_cdffb, _cfdf, _cefg, _c.Point{0, 0}, _f.Src)
				_f.DrawMask(_cdffb, _cfdf, _bceb, _c.Point{0, 0}, _bfeb, _c.Point{0, 0}, _f.Over)
			}
		}
	}
	_efgg := _c.Rect(int(_bdfb), int(_ffdb), int(_bdfb+_fbaa)+1, int(_ffdb+_gcac)+1)
	_bbc := _gb.CropImageByRect(_cdffb, _efgg)
	_gdgge, _dae := _cdee._aec.NewImageFromGoImage(_bbc)
	if _dae != nil {
		_gd.Log.Debug("\u0045\u0072\u0072\u006f\u0072\u0020\u0061\u006e\u0020\u0069\u006d\u0061\u0067\u0065\u0020t\u006f \u0061\u0020\u0047\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073", _dae)
		return _gff
	}
	return _gdgge
}
func (_gea *convertContext) tileImage(_bad *_gg.Image, _dga *_ceb.CT_TileInfoProperties, _eaa, _fbdf float64) *_gg.Image {
	_bga, _bab := 1.0, 1.0
	if _bfd := _dga.SxAttr; _bfd != nil {
		_bga = _gb.FromSTPercentage(_bfd)
	}
	if _ecc := _dga.SyAttr; _ecc != nil {
		_bab = _gb.FromSTPercentage(_ecc)
	}
	_bda := _gb.MakeTempCreator(_eaa, _fbdf)
	_bad.Scale(_bga, _bab)
	_efb, _dfc := _bad.Width(), _bad.Height()
	var _abg, _cbc float64
	if _bgc := _dga.TxAttr; _bgc != nil {
		_abg = _eb.FromEMU(_gb.FromSTCoordinate(*_bgc))
	}
	if _cdc := _dga.TyAttr; _cdc != nil {
		_cbc = _eb.FromEMU(_gb.FromSTCoordinate(*_cdc))
	}
	if _abg > 0 {
		_abg -= _efb
	}
	if _cbc > 0 {
		_cbc -= _dfc
	}
	_ada := _gea._cgcd/_efb + 1
	_babc := _gea._bded/_dfc + 1
	for _faf := 0.0; _faf <= _ada; _faf++ {
		_egg := _faf * _efb
		for _ggb := 0.0; _ggb <= _babc; _ggb++ {
			_fg := _ggb * _dfc
			_bad.SetPos(_egg+_abg, _fg+_cbc)
			_bda.Draw(_bad)
		}
	}
	_da, _dbed := _gb.GetPageFromCreator(_bda)
	if _dbed != nil {
		_gd.Log.Debug("\u0043\u0061\u006e\u006e\u006f\u0074 \u0067\u0065\u0074\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0066\u0072\u006fm\u0020\u0063\u0072\u0065\u0061\u0074\u006fr\u003a\u0020\u0025\u0073", _dbed)
		return nil
	}
	_ccdc, _dbed := _cf.NewImageDevice().Render(_da)
	if _dbed != nil {
		_gd.Log.Debug("\u0043\u0061\u006eno\u0074\u0020\u0072\u0065\u006e\u0064\u0065\u0072\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073", _dbed)
		return nil
	}
	_abe, _dbed := _gea._aec.NewImageFromGoImage(_ccdc)
	if _dbed != nil {
		_gd.Log.Debug("\u0043\u0061nn\u006f\u0074\u0020c\u0072\u0065\u0061\u0074e i\u006dag\u0065\u0020\u0066\u0072\u006f\u006d\u0020Go\u0049\u006d\u0061\u0067\u0065\u003a\u0020%\u0073", _dbed)
		return nil
	}
	return _abe
}
func (_edgc *textboxContext) addCurrentWordToParagraph() {
	if _edgc._addb && _edgc._bcba._fcd+_edgc._bdfa._ccce > _edgc._bcba._cff {
		_edgc.newLine()
	}
	if !_edgc._bdfa._gcba || len(_edgc._bcba._afff) > 0 {
		_edgc._bdfa._cgca = _edgc._bcba._fcd
		_edgc._bcba._afff = append(_edgc._bcba._afff, _edgc._bdfa)
		_edgc._bcba._fcd += _edgc._bdfa._ccce
		for _, _edga := range _edgc._bdfa._agd {
			_edgc.adjustHeights(_edga._gag)
		}
	}
}
func (_gddb *convertContext) getColorFromSolidFill(_aeaf *_ceb.CT_SolidColorFillProperties) (_gg.Color, float64) {
	if _aeaf == nil {
		return nil, 1
	}
	var _cae string
	_dbbe := 1.0
	if _bbee := _aeaf.SrgbClr; _bbee != nil {
		_cae = _bbee.ValAttr
		_dbbe = _gb.GetOpacityFromColorTransform(_bbee.EG_ColorTransform)
	} else if _aabag := _aeaf.SchemeClr; _aabag != nil {
		_cae = _gb.GetColorStringFromDmlColor(_gddb._cbec.GetColorBySchemeColor(_aabag.ValAttr))
		_cae = _gb.AdjustColor(_cae, _aabag.EG_ColorTransform)
		_dbbe = _gb.GetOpacityFromColorTransform(_aabag.EG_ColorTransform)
	}
	if _cae != "" {
		_cfaa := _gg.ColorRGBFromHex("\u0023" + _cae)
		return _cfaa, _dbbe
	}
	return nil, 1
}
func (_dfff *textboxContext) alignParagraph() {
	_fgfaa := _dfff._cge
	if _fgfaa._fgg == _ceb.ST_TextAlignTypeL {
		return
	}
	_eggb := len(_fgfaa._abcag) - 1
	for _cefd, _bfdb := range _fgfaa._abcag {
		_gbf := true
		_cbfdc := len(_bfdb._afff)
		_geda := 0.0
		for _gdeg := len(_bfdb._afff) - 1; _gdeg >= 0; _gdeg-- {
			_feff := _bfdb._afff[_gdeg]
			if _gbf && _feff._gcba {
				_cbfdc = _gdeg
			} else {
				_gbf = false
				for _, _eaef := range _feff._agd {
					_geda += _eaef._cce
				}
			}
		}
		_bfdb._afff = _bfdb._afff[:_cbfdc]
		_ffeb := _bfdb._cff - _bfdb._bbg - _geda
		switch _fgfaa._fgg {
		case _ceb.ST_TextAlignTypeR:
			_bfdb.moveRight(_ffeb)
		case _ceb.ST_TextAlignTypeCtr:
			_bfdb.moveRight(_ffeb / 2)
		case _ceb.ST_TextAlignTypeJust:
			if _cefd != _eggb {
				_bcfa := []*word{}
				for _, _eegg := range _bfdb._afff {
					if _eegg._gcba {
						_bcfa = append(_bcfa, _eegg)
					}
				}
				_abfe := _ffeb / float64(len(_bcfa))
				for _, _gbbg := range _bcfa {
					_gbbg._ccce += _abfe
				}
				var _cebb *word
				for _, _cgag := range _bfdb._afff {
					if _cebb != nil {
						_cgag._cgca = _cebb._cgca + _cebb._ccce
					}
					_cebb = _cgag
				}
			}
		}
	}
}

var _edcc = []romanMatch{romanMatch{1000, "\u006d"}, romanMatch{900, "\u0063\u006d"}, romanMatch{500, "\u0064"}, romanMatch{400, "\u0063\u0064"}, romanMatch{100, "\u0063"}, romanMatch{90, "\u0078\u0063"}, romanMatch{50, "\u006c"}, romanMatch{40, "\u0078\u006c"}, romanMatch{10, "\u0078"}, romanMatch{9, "\u0069\u0078"}, romanMatch{5, "\u0076"}, romanMatch{4, "\u0069\u0076"}, romanMatch{1, "\u0069"}}

func (_ddba *textboxContext) newParagraph() {
	_afge := &paragraph{}
	_afge._aeac = _ddba._bbac
	_ddba._cge = _afge
}
func _faea(_gedb *_ceb.CT_TextCharacterProperties, _gab *_ceb.CT_TableStyleTextStyle) *_ceb.CT_TextCharacterProperties {
	_abbd := _ceb.NewCT_TextCharacterProperties()
	if _gedb != nil {
		*_abbd = *_gedb
	}
	if _gab == nil {
		return _abbd
	}
	if _abbd.BAttr == nil && _gab.BAttr != _ceb.ST_OnOffStyleTypeUnset {
		_bfbd := _gab.BAttr == _ceb.ST_OnOffStyleTypeOn
		_abbd.BAttr = &_bfbd
	}
	if _abbd.IAttr == nil && _gab.IAttr != _ceb.ST_OnOffStyleTypeUnset {
		_gadf := _gab.IAttr == _ceb.ST_OnOffStyleTypeOn
		_abbd.IAttr = &_gadf
	}
	if _abbd.FillPropertiesChoice.NoFill == nil && _abbd.FillPropertiesChoice.SolidFill == nil {
		_abbd.FillPropertiesChoice.SolidFill = _ceb.NewCT_SolidColorFillProperties()
		_abbd.FillPropertiesChoice.SolidFill.ScrgbClr = _gab.ScrgbClr
		_abbd.FillPropertiesChoice.SolidFill.SrgbClr = _gab.SrgbClr
		_abbd.FillPropertiesChoice.SolidFill.HslClr = _gab.HslClr
		_abbd.FillPropertiesChoice.SolidFill.SysClr = _gab.SysClr
		_abbd.FillPropertiesChoice.SolidFill.SchemeClr = _gab.SchemeClr
		_abbd.FillPropertiesChoice.SolidFill.PrstClr = _gab.PrstClr
	}
	if _eeeae := _gab.ThemeableFontStylesChoice.Font; _eeeae != nil && _abbd.Latin == nil && _abbd.Ea == nil && _abbd.Cs == nil {
		_abbd.Latin = _eeeae.Latin
		_abbd.Ea = _eeeae.Ea
		_abbd.Cs = _eeeae.Cs
	}
	return _abbd
}
func _dffe(_cgbc *_af.CT_CommonSlideData, _ggde _af.ST_PlaceholderType, _gbfed *uint32) (*_ceb.CT_Transform2D, *_ceb.CT_TextBody, *bool, *bool, *bool) {
	_gdca := _gbfed == nil
	if _cgbc != nil && (_ggde != _af.ST_PlaceholderTypeUnset || !_gdca) {
		if _fgegf := _cgbc.SpTree; _fgegf != nil {
			for _, _gfae := range _fgegf.GroupShapeChoice {
				if _gfae != nil {
					if _gfae.Sp != nil {
						_gcd, _bgcd := _ddad(_gfae.Sp)
						if _ggde == _gcd {
							if (_gdca && _bgcd == nil) || (!_gdca && _bgcd != nil && *_bgcd == *_gbfed) {
								var _dggc *_ceb.CT_Transform2D
								if _gfae.Sp.SpPr != nil {
									_dggc = _gfae.Sp.SpPr.Xfrm
								}
								_aecc := _ggde == _af.ST_PlaceholderTypeTitle || _ggde == _af.ST_PlaceholderTypeCtrTitle
								_cffg := _ggde == _af.ST_PlaceholderTypeSubTitle
								_fbbfa := !_aecc && _ggde != _af.ST_PlaceholderTypeUnset
								return _dggc, _gfae.Sp.TxBody, &_aecc, &_cffg, &_fbbfa
							}
						}
					}
				}
			}
		}
	}
	return nil, nil, nil, nil, nil
}

type paragraph struct {
	_caga  float64
	_adef  float64
	_dfad  float64
	_ffec  float64
	_dbfa  float64
	_cfge  float64
	_aeac  float64
	_ddbf  float64
	_fgg   _ceb.ST_TextAlignType
	_eggf  float64
	_dcgg  bool
	_abcag []*line
}

func _fbe(_fgbd int, _fdg bool) string {
	_afee := (_fgbd-1)/26 + 1
	_eafde := byte((_fgbd - 1) % 26)
	if _fdg {
		_eafde += byte(65)
	} else {
		_eafde += byte(97)
	}
	_fbea := _ed.NewBuffer([]byte{})
	for _caa := 0; _caa < _afee; _caa++ {
		_fbea.Write([]byte{_eafde})
	}
	return _fbea.String()
}
func (_edff *convertContext) renderCurrentStateToGoImage() (_c.Image, error) {
	_dfdf := _gb.MakeTempCreator(_edff._cgcd, _edff._bded)
	_dfdf.NewPage()
	for _, _efde := range _edff._gefacb {
		if _efde != nil {
			_dfdf.MoveTo(0, 0)
			_dfdf.Draw(_efde)
		}
	}
	_dacc, _faeg := _gb.GetPageFromCreator(_dfdf)
	if _faeg != nil {
		return nil, _faeg
	}
	return _cf.NewImageDevice().Render(_dacc)
}
func (_cbd *convertContext) makePdfDivisionFromTxBody(_dbb *_ceb.CT_TextBody, _feec *_ceb.CT_TableStyleTextStyle) *_gg.Division {
	_cccb := _cbd._aec.NewDivision()
	_fde := _cbd._fbff
	_gfg := _ceb.ST_TextAnchoringTypeT
	if _dgab := _dbb.BodyPr; _dgab != nil {
		if _ceae := _dgab.AnchorAttr; _ceae != _ceb.ST_TextAnchoringTypeUnset {
			_gfg = _dgab.AnchorAttr
		}
	}
	if _ege := _dbb.LstStyle; _ege != nil {
		var _agb *_ceb.CT_TextParagraphProperties
		if _ege.Lvl1pPr != nil {
			_agb = _ege.Lvl1pPr
		} else {
			_agb = _cbd._cbdd[0]
		}
		_fde = _bcd(_agb, _bcd(_ege.DefPPr, _fde))
	}
	for _, _bbe := range _dbb.P {
		if _bbe != nil {
			_bag := _cbd._aec.NewStyledParagraph()
			_fec := _bcd(_bbe.PPr, _fde)
			_dcfc := _eecd(_bbe.EndParaRPr, _fec.DefRPr)
			switch _fec.AlgnAttr {
			case _ceb.ST_TextAlignTypeR:
				_bag.SetTextAlignment(_gg.TextAlignmentRight)
			case _ceb.ST_TextAlignTypeCtr:
				_bag.SetTextAlignment(_gg.TextAlignmentCenter)
			case _ceb.ST_TextAlignTypeJust:
				_bag.SetTextAlignment(_gg.TextAlignmentJustify)
			}
			if len(_bbe.EG_TextRun) == 0 {
				_bag.Append("\u000a")
				_cccb.Add(_bag)
				continue
			}
			for _, _gecf := range _bbe.EG_TextRun {
				if _ebf := _gecf.TextRunChoice.Br; _ebf != nil {
					_bag.Append("\u000a")
				} else if _cbfa := _gecf.TextRunChoice.R; _cbfa != nil {
					_ggfd := _faea(_cbfa.RPr, _feec)
					_ggfd = _eecd(_ggfd, _dcfc)
					var _bgb _gg.Color
					if _ggfd.FillPropertiesChoice.SolidFill != nil {
						_bgb, _ = _cbd.getColorFromSolidFill(_ggfd.FillPropertiesChoice.SolidFill)
					} else {
						_bgb = _gg.ColorBlack
					}
					_fgb, _agg, _geab, _ := _cbd.makeStyleFromRPr(_ggfd)
					_fgb.Color = _bgb
					if _agg {
						_fgb.TextRise = 0.5
					} else if _geab {
						_fgb.TextRise = -0.5
					}
					_cafg := _cbfa.T
					if _ggfd.CapAttr == _ceb.ST_TextCapsTypeAll {
						for _, _cde := range _cafg {
							_cde = []rune(_df.ToUpper(string(_cde)))[0]
						}
					}
					_efcb := _bag.Append(_cafg)
					_efcb.Style = *_fgb
				}
			}
			_ = _gfg
			_cccb.Add(_bag)
		}
	}
	return _cccb
}
func (_aa *convertContext) extractDefaultProperties() {
	_ab := _aa._gccb.X()
	_bc := _ab.DefaultTextStyle
	var _bdc, _cgc, _fb, _ga, _bb, _aea, _afd, _gce, _fee, _ggg *_ceb.CT_TextParagraphProperties
	if _bc != nil {
		_bdc = _bc.DefPPr
		_cgc = _bcd(_bc.Lvl1pPr, _bdc)
		_fb = _bcd(_bc.Lvl2pPr, _bdc)
		_ga = _bcd(_bc.Lvl3pPr, _bdc)
		_bb = _bcd(_bc.Lvl4pPr, _bdc)
		_aea = _bcd(_bc.Lvl5pPr, _bdc)
		_afd = _bcd(_bc.Lvl6pPr, _bdc)
		_gce = _bcd(_bc.Lvl7pPr, _bdc)
		_fee = _bcd(_bc.Lvl8pPr, _bdc)
		_ggg = _bcd(_bc.Lvl9pPr, _bdc)
		_aa._fbff = _bdc
		_aa._dfe = _bdc.DefRPr
	}
	_aa._cbdd = make([]*_ceb.CT_TextParagraphProperties, 9)
	_aa._cbdd[0] = _cgc
	_aa._cbdd[1] = _fb
	_aa._cbdd[2] = _ga
	_aa._cbdd[3] = _bb
	_aa._cbdd[4] = _aea
	_aa._cbdd[5] = _afd
	_aa._cbdd[6] = _gce
	_aa._cbdd[7] = _fee
	_aa._cbdd[8] = _ggg
	_cfg := _aa._gccb.SlideMasters()[0].X()
	_cgb := _cfg.TxStyles
	_dbf := _cgb.TitleStyle
	_aa._bdgf = _bcd(_dbf.DefPPr, _bdc)
	_aa._gceged = _aa._bdgf.DefRPr
	_aa._cbdb = make([]*_ceb.CT_TextParagraphProperties, 9)
	_aa._cbdb[0] = _bcd(_dbf.Lvl1pPr, _cgc)
	_aa._cbdb[1] = _bcd(_dbf.Lvl2pPr, _fb)
	_aa._cbdb[2] = _bcd(_dbf.Lvl3pPr, _ga)
	_aa._cbdb[3] = _bcd(_dbf.Lvl4pPr, _bb)
	_aa._cbdb[4] = _bcd(_dbf.Lvl5pPr, _aea)
	_aa._cbdb[5] = _bcd(_dbf.Lvl6pPr, _afd)
	_aa._cbdb[6] = _bcd(_dbf.Lvl7pPr, _gce)
	_aa._cbdb[7] = _bcd(_dbf.Lvl8pPr, _fee)
	_aa._cbdb[8] = _bcd(_dbf.Lvl9pPr, _ggg)
	_ebg := _cgb.BodyStyle
	_aa._edd = _bcd(_ebg.DefPPr, _bdc)
	_aa._cag = _aa._edd.DefRPr
	_aa._ace = make([]*_ceb.CT_TextParagraphProperties, 9)
	_aa._ace[0] = _bcd(_ebg.Lvl1pPr, _cgc)
	_aa._ace[1] = _bcd(_ebg.Lvl2pPr, _fb)
	_aa._ace[2] = _bcd(_ebg.Lvl3pPr, _ga)
	_aa._ace[3] = _bcd(_ebg.Lvl4pPr, _bb)
	_aa._ace[4] = _bcd(_ebg.Lvl5pPr, _aea)
	_aa._ace[5] = _bcd(_ebg.Lvl6pPr, _afd)
	_aa._ace[6] = _bcd(_ebg.Lvl7pPr, _gce)
	_aa._ace[7] = _bcd(_ebg.Lvl8pPr, _fee)
	_aa._ace[8] = _bcd(_ebg.Lvl9pPr, _ggg)
}
func (_caed *convertContext) getColorFromFontReference(_fab *_ceb.CT_FontReference) _gg.Color {
	var _baa _gg.Color
	var _fadd string
	if _edgb := _fab.SrgbClr; _edgb != nil {
		_fadd = _edgb.ValAttr
	} else if _gfgg := _fab.SchemeClr; _gfgg != nil {
		_fadd = _gb.GetColorStringFromDmlColor(_caed._gccb.GetColorBySchemeColor(_gfgg.ValAttr))
		_fadd = _gb.AdjustColor(_fadd, _gfgg.EG_ColorTransform)
	}
	if _fadd != "" {
		_baa = _gg.ColorRGBFromHex("\u0023" + _fadd)
	}
	return _baa
}
func (_bbfge *textboxContext) addCurrentParagraph() {
	_bbfge._bbac = _bbfge._cge._aeac + _bbfge._cge._adef + _bbfge._cge._ddbf + _bbfge._cge._dfad
	_bbfge._ddb = append(_bbfge._ddb, _bbfge._cge)
	_bbfge.alignParagraph()
}
func (_bf *convertContext) drawSlide() {
	_bf._aec.NewPage()
	for _, _bee := range _bf._gefacb {
		if _bee != nil {
			_bf._aec.MoveTo(0, 0)
			_bf._aec.Draw(_bee)
		}
	}
}

type symbolStyle struct {
	_afc  *string
	_bae  *float64
	_dfcc *string
	_aebg *bool
	_agef *bool
	_fgfa *bool
	_aae  *bool
	_fce  *bool
}

func (_aba *textboxContext) addTextRun(_acad *_ceb.EG_TextRun, _deb *_ceb.CT_TextCharacterProperties, _cacg _gg.Color, _adc *prefixData) {
	if _eac := _acad.TextRunChoice.Br; _eac != nil {
		_aba.addCurrentWordToParagraph()
		_aba.newLine()
		_aba.newWord()
	} else if _eaee := _acad.TextRunChoice.R; _eaee != nil {
		var _bgdg _gg.Color
		if _eaee.RPr != nil && _eaee.RPr.FillPropertiesChoice.SolidFill != nil {
			_bgdg, _ = _aba._bff.getColorFromSolidFill(_eaee.RPr.FillPropertiesChoice.SolidFill)
		} else if _cacg != nil {
			_bgdg = _cacg
		} else if _deb.FillPropertiesChoice.SolidFill != nil {
			_bgdg, _ = _aba._bff.getColorFromSolidFill(_deb.FillPropertiesChoice.SolidFill)
		} else {
			_bgdg = _gg.ColorBlack
		}
		_ffab := _eecd(_eaee.RPr, _deb)
		_cfgc, _fbae, _babb, _gfad := _aba._bff.makeStyleFromRPr(_ffab)
		_cfgc.Color = _bgdg
		if _adc != nil {
			_aba.addPrefix(_adc, _cfgc)
		}
		_gdda := _dcae(_eaee.T)
		for _, _dcda := range _gdda {
			_dcda._fcad = _cfgc
			_dcda._fcb = _fbae
			_dcda._ccf = _babb
			_dcda._aadab = _gfad
			if _ffab.CapAttr == _ceb.ST_TextCapsTypeAll {
				_dcda._fag = _df.ToUpper(_dcda._fag)
			}
			_aba.addTextSymbol(_dcda)
		}
	}
}

type romanMatch struct {
	_ccfd int
	_dea  string
}

func (_gcee *textboxContext) addTextSymbol(_eeb *symbol) {
	_dbag := _gg.New()
	_egd := _dbag.NewStyledParagraph()
	_egd.SetMargins(0, 0, 0, 0)
	_adcd := _egd.Append(_eeb._fag)
	_ebba := 0.0
	if _eeb._fcad != nil {
		_adcd.Style = *_eeb._fcad
		if _eeb._fcad.CharSpacing != 0 {
			_ebba = _eeb._fcad.CharSpacing
		}
	}
	_eeb._cdff = _egd.Height()
	_eeb._gag = _egd.Height() * 1.2
	if _eeb._cce == 0 {
		_eeb._cce = _egd.Width() + _ebba
	}
	if len(_gcee._bdfa._agd) > 0 {
		_egde := _gcee._bdfa._agd[len(_gcee._bdfa._agd)-1]._fag
		if _gcee._cge._dcgg || _gb.IsNoSpaceLanguage(_egde) || (_egde == "\u0020") != (_eeb._fag == "\u0020") {
			_gcee.addCurrentWordToParagraph()
			_gcee.newWord()
		}
	}
	_gcee._bdfa._agd = append(_gcee._bdfa._agd, _eeb)
	_eeb._beegg = _gcee._bdfa._ccce
	_gcee._bdfa._ccce += _eeb._cce
	if _eeb._fag != "\u0020" {
		_gcee._bdfa._gcba = false
	}
	if _gcee._bdfa._ccce >= _gcee._cge._cfge-_gcee._cge._dbfa {
		_gcee.addCurrentWordToParagraph()
		_gcee.newLine()
		_gcee.newWord()
	}
}
func _efaa(_gcdc, _bfa *_ceb.CT_TableStyleCellStyle) *_ceb.CT_TableStyleCellStyle {
	_fgde := _ceb.NewCT_TableStyleCellStyle()
	if _gcdc != nil {
		*_fgde = *_gcdc
	}
	if _bfa == nil {
		return _fgde
	}
	if _fgde.TcBdr == nil {
		_fgde.TcBdr = _bfa.TcBdr
	} else {
		if _fgde.TcBdr.Left == nil {
			_fgde.TcBdr.Left = _bfa.TcBdr.Left
		}
		if _fgde.TcBdr.Right == nil {
			_fgde.TcBdr.Right = _bfa.TcBdr.Right
		}
		if _fgde.TcBdr.Top == nil {
			_fgde.TcBdr.Top = _bfa.TcBdr.Top
		}
		if _fgde.TcBdr.Bottom == nil {
			_fgde.TcBdr.Bottom = _bfa.TcBdr.Bottom
		}
		if _fgde.TcBdr.InsideH == nil {
			_fgde.TcBdr.InsideH = _bfa.TcBdr.InsideH
		}
		if _fgde.TcBdr.InsideV == nil {
			_fgde.TcBdr.InsideV = _bfa.TcBdr.InsideV
		}
	}
	if _fgde.ThemeableFillStyleChoice.Fill == nil {
		_fgde.ThemeableFillStyleChoice.Fill = _bfa.ThemeableFillStyleChoice.Fill
	}
	if _fgde.ThemeableFillStyleChoice.FillRef == nil {
		_fgde.ThemeableFillStyleChoice.FillRef = _bfa.ThemeableFillStyleChoice.FillRef
	}
	return _fgde
}
func _bcd(_ffgd, _eedc *_ceb.CT_TextParagraphProperties) *_ceb.CT_TextParagraphProperties {
	_fbdbd := _ceb.NewCT_TextParagraphProperties()
	if _ffgd != nil {
		*_fbdbd = *_ffgd
	}
	if _eedc == nil {
		return _fbdbd
	}
	if _fbdbd.MarLAttr == nil {
		_fbdbd.MarLAttr = _eedc.MarLAttr
	}
	if _fbdbd.MarRAttr == nil {
		_fbdbd.MarRAttr = _eedc.MarRAttr
	}
	if _fbdbd.LvlAttr == nil {
		_fbdbd.LvlAttr = _eedc.LvlAttr
	}
	if _fbdbd.IndentAttr == nil {
		_fbdbd.IndentAttr = _eedc.IndentAttr
	}
	if _fbdbd.AlgnAttr == _ceb.ST_TextAlignTypeUnset {
		_fbdbd.AlgnAttr = _eedc.AlgnAttr
	}
	if _fbdbd.DefTabSzAttr == nil {
		_fbdbd.DefTabSzAttr = _eedc.DefTabSzAttr
	}
	if _fbdbd.RtlAttr == nil {
		_fbdbd.RtlAttr = _eedc.RtlAttr
	}
	if _fbdbd.EaLnBrkAttr == nil {
		_fbdbd.EaLnBrkAttr = _eedc.EaLnBrkAttr
	}
	if _fbdbd.FontAlgnAttr == _ceb.ST_TextFontAlignTypeUnset {
		_fbdbd.FontAlgnAttr = _eedc.FontAlgnAttr
	}
	if _fbdbd.LatinLnBrkAttr == nil {
		_fbdbd.LatinLnBrkAttr = _eedc.LatinLnBrkAttr
	}
	if _fbdbd.HangingPunctAttr == nil {
		_fbdbd.HangingPunctAttr = _eedc.HangingPunctAttr
	}
	if _fbdbd.LnSpc == nil {
		_fbdbd.LnSpc = _eedc.LnSpc
	}
	if _fbdbd.SpcBef == nil {
		_fbdbd.SpcBef = _eedc.SpcBef
	}
	if _fbdbd.SpcAft == nil {
		_fbdbd.SpcAft = _eedc.SpcAft
	}
	if _fbdbd.TextBulletColorChoice.BuClrTx == nil {
		_fbdbd.TextBulletColorChoice.BuClrTx = _eedc.TextBulletColorChoice.BuClrTx
	}
	if _fbdbd.TextBulletColorChoice.BuClr == nil {
		_fbdbd.TextBulletColorChoice.BuClr = _eedc.TextBulletColorChoice.BuClr
	}
	if _fbdbd.TextBulletSizeChoice.BuSzTx == nil {
		_fbdbd.TextBulletSizeChoice.BuSzTx = _eedc.TextBulletSizeChoice.BuSzTx
	}
	if _fbdbd.TextBulletSizeChoice.BuSzPct == nil {
		_fbdbd.TextBulletSizeChoice.BuSzPct = _eedc.TextBulletSizeChoice.BuSzPct
	}
	if _fbdbd.TextBulletSizeChoice.BuSzPts == nil {
		_fbdbd.TextBulletSizeChoice.BuSzPts = _eedc.TextBulletSizeChoice.BuSzPts
	}
	if _fbdbd.TextBulletTypefaceChoice.BuFontTx == nil {
		_fbdbd.TextBulletTypefaceChoice.BuFontTx = _eedc.TextBulletTypefaceChoice.BuFontTx
	}
	if _fbdbd.TextBulletTypefaceChoice.BuFont == nil {
		_fbdbd.TextBulletTypefaceChoice.BuFont = _eedc.TextBulletTypefaceChoice.BuFont
	}
	if _fbdbd.TextBulletChoice.BuNone == nil {
		_fbdbd.TextBulletChoice.BuNone = _eedc.TextBulletChoice.BuNone
	}
	if _fbdbd.TextBulletChoice.BuAutoNum == nil {
		_fbdbd.TextBulletChoice.BuAutoNum = _eedc.TextBulletChoice.BuAutoNum
	}
	if _fbdbd.TextBulletChoice.BuChar == nil {
		_fbdbd.TextBulletChoice.BuChar = _eedc.TextBulletChoice.BuChar
	}
	if _fbdbd.TextBulletChoice.BuBlip == nil {
		_fbdbd.TextBulletChoice.BuBlip = _eedc.TextBulletChoice.BuBlip
	}
	if _fbdbd.TabLst == nil {
		_fbdbd.TabLst = _eedc.TabLst
	}
	if _fbdbd.ExtLst == nil {
		_fbdbd.ExtLst = _eedc.ExtLst
	}
	_fbdbd.DefRPr = _eecd(_fbdbd.DefRPr, _eedc.DefRPr)
	return _fbdbd
}
func (_agge *convertContext) getBorderStyle(_gfcg *_ceb.CT_LineProperties) (_gg.CellBorderStyle, *_gg.Color, float64) {
	if _gfcg == nil || _gfcg.LineFillPropertiesChoice.NoFill != nil {
		return _gg.CellBorderStyleNone, nil, 0
	}
	var _cfed _gg.Color
	if _fccc := _gfcg.LineFillPropertiesChoice.SolidFill; _fccc != nil {
		_cfed, _ = _agge.getColorFromSolidFill(_fccc)
	}
	_dbedg := 0.0
	if _gbdc := _gfcg.WAttr; _gbdc != nil {
		_dbedg = _eb.FromEMU(int64(*_gbdc))
	}
	return _gg.CellBorderStyleSingle, &_cfed, _dbedg
}
func (_deac *textboxContext) newWord() { _deac._bdfa = &word{_gcba: true, _cgca: _deac._bcba._fcd} }
func _eecd(_beeb, _eeba *_ceb.CT_TextCharacterProperties) *_ceb.CT_TextCharacterProperties {
	_aefe := _ceb.NewCT_TextCharacterProperties()
	if _beeb != nil {
		*_aefe = *_beeb
	}
	if _eeba == nil {
		return _aefe
	}
	if _aefe.KumimojiAttr == nil {
		_aefe.KumimojiAttr = _eeba.KumimojiAttr
	}
	if _aefe.LangAttr == nil {
		_aefe.LangAttr = _eeba.LangAttr
	}
	if _aefe.AltLangAttr == nil {
		_aefe.AltLangAttr = _eeba.AltLangAttr
	}
	if _aefe.SzAttr == nil {
		_aefe.SzAttr = _eeba.SzAttr
	}
	if _aefe.BAttr == nil {
		_aefe.BAttr = _eeba.BAttr
	}
	if _aefe.IAttr == nil {
		_aefe.IAttr = _eeba.IAttr
	}
	if _aefe.UAttr == _ceb.ST_TextUnderlineTypeUnset {
		_aefe.UAttr = _eeba.UAttr
	}
	if _aefe.StrikeAttr == _ceb.ST_TextStrikeTypeUnset {
		_aefe.StrikeAttr = _eeba.StrikeAttr
	}
	if _aefe.KernAttr == nil {
		_aefe.KernAttr = _eeba.KernAttr
	}
	if _aefe.CapAttr == _ceb.ST_TextCapsTypeUnset {
		_aefe.CapAttr = _eeba.CapAttr
	}
	if _aefe.SpcAttr == nil {
		_aefe.SpcAttr = _eeba.SpcAttr
	}
	if _aefe.NormalizeHAttr == nil {
		_aefe.NormalizeHAttr = _eeba.NormalizeHAttr
	}
	if _aefe.BaselineAttr == nil {
		_aefe.BaselineAttr = _eeba.BaselineAttr
	}
	if _aefe.NoProofAttr == nil {
		_aefe.NoProofAttr = _eeba.NoProofAttr
	}
	if _aefe.DirtyAttr == nil {
		_aefe.DirtyAttr = _eeba.DirtyAttr
	}
	if _aefe.ErrAttr == nil {
		_aefe.ErrAttr = _eeba.ErrAttr
	}
	if _aefe.SmtCleanAttr == nil {
		_aefe.SmtCleanAttr = _eeba.SmtCleanAttr
	}
	if _aefe.SmtIdAttr == nil {
		_aefe.SmtIdAttr = _eeba.SmtIdAttr
	}
	if _aefe.BmkAttr == nil {
		_aefe.BmkAttr = _eeba.BmkAttr
	}
	if _aefe.Ln == nil {
		_aefe.Ln = _eeba.Ln
	}
	if _aefe.FillPropertiesChoice.NoFill == nil {
		_aefe.FillPropertiesChoice.NoFill = _eeba.FillPropertiesChoice.NoFill
	}
	if _aefe.FillPropertiesChoice.SolidFill == nil {
		_aefe.FillPropertiesChoice.SolidFill = _eeba.FillPropertiesChoice.SolidFill
	}
	if _aefe.FillPropertiesChoice.BlipFill == nil {
		_aefe.FillPropertiesChoice.BlipFill = _eeba.FillPropertiesChoice.BlipFill
	}
	if _aefe.EffectPropertiesChoice.EffectLst == nil {
		_aefe.EffectPropertiesChoice.EffectLst = _eeba.EffectPropertiesChoice.EffectLst
	}
	if _aefe.EffectPropertiesChoice.EffectDag == nil {
		_aefe.EffectPropertiesChoice.EffectDag = _eeba.EffectPropertiesChoice.EffectDag
	}
	if _aefe.Highlight == nil {
		_aefe.Highlight = _eeba.Highlight
	}
	if _aefe.TextUnderlineLineChoice.ULnTx == nil {
		_aefe.TextUnderlineLineChoice.ULnTx = _eeba.TextUnderlineLineChoice.ULnTx
	}
	if _aefe.TextUnderlineLineChoice.ULn == nil {
		_aefe.TextUnderlineLineChoice.ULn = _eeba.TextUnderlineLineChoice.ULn
	}
	if _aefe.TextUnderlineFillChoice.UFillTx == nil {
		_aefe.TextUnderlineFillChoice.UFillTx = _eeba.TextUnderlineFillChoice.UFillTx
	}
	if _aefe.TextUnderlineFillChoice.UFill == nil {
		_aefe.TextUnderlineFillChoice.UFill = _eeba.TextUnderlineFillChoice.UFill
	}
	if _aefe.Latin == nil {
		_aefe.Latin = _eeba.Latin
	}
	if _aefe.Ea == nil {
		_aefe.Ea = _eeba.Ea
	}
	if _aefe.Cs == nil {
		_aefe.Cs = _eeba.Cs
	}
	if _aefe.Sym == nil {
		_aefe.Sym = _eeba.Sym
	}
	if _aefe.Rtl == nil {
		_aefe.Rtl = _eeba.Rtl
	}
	return _aefe
}
func _gdc(_fcab *_ceb.CT_AdjPoint2D) (float64, float64) {
	var _befg, _acac float64
	_ccdb, _ffbc := _fcab.XAttr, _fcab.YAttr
	if _cgcdd := _ccdb.ST_Coordinate; _cgcdd != nil {
		_befg = _eb.FromEMU(_gb.FromSTCoordinate(*_cgcdd))
	}
	if _ebc := _ffbc.ST_Coordinate; _ebc != nil {
		_acac = _eb.FromEMU(_gb.FromSTCoordinate(*_ebc))
	}
	return _befg, _acac
}

// FontStyle represents a kind of font styling. It can be FontStyle_Regular, FontStyle_Bold, FontStyle_Italic and FontStyle_BoldItalic.
type FontStyle = _gb.FontStyle

func _ecgc(_acgf *bool) bool { return _acgf != nil && *_acgf }
func (_fdd *convertContext) makePdfImageFromBlipFill(_bfcb *_ceb.CT_BlipFillProperties, _fbbf bool) (*_gg.Image, []*_ceb.CT_BlipChoice, error) {
	if _fefg := _bfcb.Blip; _fefg != nil {
		if _gbfe := _fefg.EmbedAttr; _gbfe != nil {
			var _fbaef _cb.ImageRef
			var _ebcb bool
			if _fbbf {
				_fbaef, _ebcb = _fdd._cbec.GetLayoutImageByRelID(*_gbfe)
			} else {
				_fbaef, _ebcb = _fdd._cbec.GetImageByRelID(*_gbfe)
			}
			if _ebcb {
				_bgag, _ggea := _be.Open(_fbaef.Path())
				if _ggea != nil {
					_gd.Log.Debug("\u0046\u0069\u006c\u0065 o\u0070\u0065\u006e\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073", _ggea)
					return nil, nil, _ggea
				}
				defer _bgag.Close()
				_efbg, _, _ggea := _c.Decode(_bgag)
				if _ggea != nil {
					_gd.Log.Debug("\u0044\u0065\u0063\u006fde\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020%\u0073", _ggea)
					return nil, nil, _ggea
				}
				if _dbec := _bfcb.SrcRect; _dbec != nil {
					_dgc := _efbg.Bounds().Size()
					_fcaef := _dgc.X
					_dcaef := _dgc.Y
					var _ffdc, _egc, _gcg, _dcdea int
					var _cgg bool
					if _cage := _dbec.LAttr; _cage != nil {
						_ffdc = int(float64(_fcaef) * _gb.FromSTPercentage(_cage))
						_cgg = true
					} else {
						_ffdc = 0
					}
					if _bdede := _dbec.TAttr; _bdede != nil {
						_gcg = int(float64(_dcaef) * _gb.FromSTPercentage(_bdede))
						_cgg = true
					} else {
						_gcg = 0
					}
					if _gegd := _dbec.RAttr; _gegd != nil {
						_egc = int(float64(_fcaef) * (1 - _gb.FromSTPercentage(_gegd)))
						_cgg = true
					} else {
						_egc = _fcaef
					}
					if _fdcc := _dbec.BAttr; _fdcc != nil {
						_dcdea = int(float64(_dcaef) * (1 - _gb.FromSTPercentage(_fdcc)))
						_cgg = true
					} else {
						_dcdea = _dcaef
					}
					if _cgg {
						_efbg = _gb.CropImageByRect(_efbg, _c.Rect(_ffdc, _gcg, _egc+1, _dcdea+1))
					}
				}
				_dcgb, _ggea := _fdd._aec.NewImageFromGoImage(_efbg)
				_dcgb.SetEncoder(_a.NewFlateEncoder())
				if _df.ToLower(_fbaef.Format()) == "\u006a\u0070\u0067" || _df.ToLower(_fbaef.Format()) == "\u006a\u0070\u0065\u0067" {
					_dcgb.SetEncoder(_a.NewDCTEncoder())
				}
				if _ggea != nil {
					_gd.Log.Debug("\u0043\u0061\u006e\u006e\u006ft\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0050\u0044\u0046\u0020\u0069m\u0061\u0067\u0065\u0020\u0066\u0072\u006f\u006d\u0020\u0047\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073", _ggea)
					return nil, nil, _ggea
				}
				return _dcgb, _fefg.BlipChoice, nil
			}
		}
	}
	return nil, nil, nil
}

// Options contains the options for convert process
type Options struct {

	// DefaultPageSize is applied when there is no page size explicitly set in the document.
	// A4 is the default option.
	DefaultPageSize _gb.PageSize
}

func _dcbfg(_cafc, _ebec *_ceb.CT_TextBody) (*_ceb.CT_TextBodyProperties, *_ceb.CT_TextListStyle) {
	if _cafc == nil && _ebec == nil {
		return nil, nil
	}
	if _cafc == nil {
		return _ebec.BodyPr, _ebec.LstStyle
	}
	if _ebec == nil {
		return _cafc.BodyPr, _cafc.LstStyle
	}
	_dgdc, _cafd := _cafc.BodyPr, _cafc.LstStyle
	_fgba, _eeage := _ebec.BodyPr, _ebec.LstStyle
	_eddc := _gbdbd(_dgdc, _fgba)
	_gfag := _cgdb(_cafd, _eeage)
	return _eddc, _gfag
}
func (_fgd *textboxContext) drawParagraphs() {
	_fgd._gecg.NewPage()
	for _, _bade := range _fgd._ddb {
		for _, _defe := range _bade._abcag {
			for _, _bfc := range _defe._afff {
				for _, _ebbe := range _bfc._agd {
					_afcc := _fgd._gecg.NewStyledParagraph()
					if _ebbe._fcb {
						_ebbe._cbfd = 0
					} else if _ebbe._ccf {
						_ebbe._cbfd = 1.2*_defe._geg - _ebbe._cdff
					}
					_eaae := _bfc._cgca + _ebbe._beegg
					_adab := _bade._aeac + _defe._eafe + _ebbe._cbfd
					_afcc.SetPos(_eaae, _adab)
					_fbaf := _afcc.Append(_ebbe._fag)
					if _ebbe._fcad != nil {
						_fbaf.Style = *_ebbe._fcad
					}
					_fgd._gecg.Draw(_afcc)
					if _ebbe._aadab {
						_aebcf := _adab + _ebbe._cdff + 2
						_gb.DrawLine(_fgd._gecg, _eaae, _aebcf, _eaae+_ebbe._cce, _aebcf, 1, _ebbe._fcad.Color)
					}
				}
			}
		}
	}
}
func _bagf(_agee float64) float64 { return _agee * _eb.Millimeter }
func _debd(_abaa float64) float64 { return _abaa * _eb.Inch }
func (_cadc *textboxContext) alignVertically(_dbge _ceb.ST_TextAnchoringType) {
	_cadc.alignParagraphsVertically(_dbge)
	_cadc.alignSymbolsVertically()
}
func (_addc *textboxContext) assignPropsToCurrentParagraph(_fbgc *_ceb.CT_TextParagraphProperties) {
	_abef := 12.4
	if _fbgc == nil {
		_addc._cge._eggf = _abef
		return
	}
	if _agaac := _fbgc.DefRPr; _agaac != nil {
		_eeag := _agaac.SzAttr
		if _eeag != nil {
			_bgcc := float64(*_eeag) / 1200
			if _abef <= _bgcc {
				_abef = _bgcc
			}
		}
	}
	if _ggfdg := _fbgc.MarLAttr; _ggfdg != nil {
		_addc._cge._dbfa = _eb.FromEMU(int64(*_ggfdg))
	}
	_addc._cge._cfge = _addc._eeea
	if _agdg := _fbgc.MarRAttr; _agdg != nil {
		_addc._cge._cfge -= _eb.FromEMU(int64(*_agdg))
	}
	if _gfcc := _fbgc.IndentAttr; _gfcc != nil {
		_addc._cge._ffec = _eb.FromEMU(int64(*_gfcc))
	}
	if _fgff := _fbgc.LatinLnBrkAttr; _fgff != nil {
		_addc._cge._dcgg = *_fgff
	}
	if _bdcb := _fbgc.LnSpc; _bdcb != nil && _bdcb.TextSpacingChoice != nil {
		if _ebga := _bdcb.TextSpacingChoice.SpcPct; _ebga != nil {
			if _adeg := _ebga.ValAttr.ST_TextSpacingPercent; _adeg != nil {
				_abef = float64(*_adeg) / 5000
			}
		}
	}
	var _afca float64
	if _bcfc := _fbgc.SpcBef; _bcfc != nil && _bcfc.TextSpacingChoice != nil {
		if _fcf := _bcfc.TextSpacingChoice.SpcPts; _fcf != nil {
			_afca = float64(_fcf.ValAttr) / 100
		}
	}
	_gdgg := _addc._ddb
	if len(_gdgg) > 0 {
		_afca -= _gdgg[len(_gdgg)-1]._dfad
		if _afca < 0 {
			_afca = 0
		}
	}
	_addc._cge._adef = _afca
	if _cfd := _fbgc.SpcAft; _cfd != nil && _cfd.TextSpacingChoice != nil {
		if _dgd := _cfd.TextSpacingChoice.SpcPts; _dgd != nil {
			_addc._cge._dfad = float64(_dgd.ValAttr) / 100
		}
	}
	_addc._cge._eggf = _abef
	_addc._cge._fgg = _fbgc.AlgnAttr
}
func _gbdbd(_ffae, _gcfa *_ceb.CT_TextBodyProperties) *_ceb.CT_TextBodyProperties {
	_adcf := _ceb.NewCT_TextBodyProperties()
	if _ffae != nil {
		*_adcf = *_ffae
	}
	if _gcfa == nil {
		return _adcf
	}
	if _adcf.RotAttr == nil {
		_adcf.RotAttr = _gcfa.RotAttr
	}
	if _adcf.SpcFirstLastParaAttr == nil {
		_adcf.SpcFirstLastParaAttr = _gcfa.SpcFirstLastParaAttr
	}
	if _adcf.VertOverflowAttr == _ceb.ST_TextVertOverflowTypeUnset {
		_adcf.VertOverflowAttr = _gcfa.VertOverflowAttr
	}
	if _adcf.HorzOverflowAttr == _ceb.ST_TextHorzOverflowTypeUnset {
		_adcf.HorzOverflowAttr = _gcfa.HorzOverflowAttr
	}
	if _adcf.VertAttr == _ceb.ST_TextVerticalTypeUnset {
		_adcf.VertAttr = _gcfa.VertAttr
	}
	if _adcf.WrapAttr == _ceb.ST_TextWrappingTypeUnset {
		_adcf.WrapAttr = _gcfa.WrapAttr
	}
	if _adcf.LInsAttr == nil {
		_adcf.LInsAttr = _gcfa.LInsAttr
	}
	if _adcf.TInsAttr == nil {
		_adcf.TInsAttr = _gcfa.TInsAttr
	}
	if _adcf.RInsAttr == nil {
		_adcf.RInsAttr = _gcfa.RInsAttr
	}
	if _adcf.BInsAttr == nil {
		_adcf.BInsAttr = _gcfa.BInsAttr
	}
	if _adcf.NumColAttr == nil {
		_adcf.NumColAttr = _gcfa.NumColAttr
	}
	if _adcf.SpcColAttr == nil {
		_adcf.SpcColAttr = _gcfa.SpcColAttr
	}
	if _adcf.RtlColAttr == nil {
		_adcf.RtlColAttr = _gcfa.RtlColAttr
	}
	if _adcf.AnchorAttr == _ceb.ST_TextAnchoringTypeUnset {
		_adcf.AnchorAttr = _gcfa.AnchorAttr
	}
	if _adcf.AnchorCtrAttr == nil {
		_adcf.AnchorCtrAttr = _gcfa.AnchorCtrAttr
	}
	if _adcf.ForceAAAttr == nil {
		_adcf.ForceAAAttr = _gcfa.ForceAAAttr
	}
	if _adcf.UprightAttr == nil {
		_adcf.UprightAttr = _gcfa.UprightAttr
	}
	if _adcf.CompatLnSpcAttr == nil {
		_adcf.CompatLnSpcAttr = _gcfa.CompatLnSpcAttr
	}
	if _adcf.PrstTxWarp == nil {
		_adcf.PrstTxWarp = _gcfa.PrstTxWarp
	}
	if _adcf.TextAutofitChoice.NoAutofit == nil {
		_adcf.TextAutofitChoice.NoAutofit = _gcfa.TextAutofitChoice.NoAutofit
	}
	if _adcf.TextAutofitChoice.NormAutofit == nil {
		_adcf.TextAutofitChoice.NormAutofit = _gcfa.TextAutofitChoice.NormAutofit
	}
	if _adcf.TextAutofitChoice.SpAutoFit == nil {
		_adcf.TextAutofitChoice.SpAutoFit = _gcfa.TextAutofitChoice.SpAutoFit
	}
	if _adcf.Scene3d == nil {
		_adcf.Scene3d = _gcfa.Scene3d
	}
	if _adcf.Text3DChoice.Sp3d == nil {
		_adcf.Text3DChoice.Sp3d = _gcfa.Text3DChoice.Sp3d
	}
	if _adcf.Text3DChoice.FlatTx == nil {
		_adcf.Text3DChoice.FlatTx = _gcfa.Text3DChoice.FlatTx
	}
	if _adcf.ExtLst == nil {
		_adcf.ExtLst = _gcfa.ExtLst
	}
	return _adcf
}

type textboxContext struct {
	_bff  *convertContext
	_eeea float64
	_aggf float64
	_gecg *_gg.Creator
	_bbac float64
	_ddb  []*paragraph
	_cge  *paragraph
	_bcba *line
	_bdfa *word
	_addb bool
}

func (_acfb *convertContext) getShapes(_dee *_af.CT_Shape, _ccda bool, _cgfa bool) []_gg.Drawable {
	_gbc := []_gg.Drawable{}
	_ffb := _dee.SpPr
	if _ffb == nil {
		return _gbc
	}
	var _adb bool
	if _eba := _dee.UseBgFillAttr; _eba != nil {
		_adb = *_eba
	}
	_ecab, _eag, _bfe, _ebee, _ccg, _bfb, _dfd := _acfb.getShapesFromSpPr(_ffb, _dee.Style, _adb, 0.0, 0.0)
	if !_cgfa {
		_gbc = append(_gbc, _ecab...)
	}
	if _eaf := _dee.TxBody; _eaf != nil && !_ccda {
		_fc, _gfea, _ffa, _gbbf, _cba, _eab := _acfb.getPhData(_dee)
		if _cgfa && !(_gbbf || _cba) {
			return _gbc
		}
		if _fc != nil && !_dfd {
			_eag, _bfe, _ebee, _ccg = _gb.GetDataFromXfrm(_fc)
		}
		_dab, _beb := _acfb.makePdfBlockFromTxBody(_eaf, _gfea, _ffa, _ebee, _ccg, _bfb, _gbbf, _eab)
		if _beb != nil {
			_gd.Log.Debug("\u0043\u0061\u006e\u006e\u006f\u0074\u0020\u006d\u0061\u006b\u0065\u0020\u0050\u0044\u0046\u0020\u0062\u006c\u006f\u0063\u006b\u0020\u0066\u0072o\u006d\u0020\u0074\u0065\u0078t\u0062\u006fx\u003a\u0020\u0025\u0073", _beb)
		} else if _dab != nil {
			_dab.SetPos(_eag, _bfe)
			_gbc = append(_gbc, _dab)
		}
	}
	return _gbc
}
func (_bdg *convertContext) stretchImage(_daa *_gg.Image, _gda *_ceb.CT_StretchInfoProperties, _cdb, _gdg, _fef, _aac float64) (*_gg.Image, float64, float64) {
	_ega := _gda.FillRect
	if _ega == nil {
		_acfg := _daa.Width() / _daa.Height()
		_eeda := _fef / _aac
		var _eaad, _eff float64
		if _acfg > _eeda {
			_eff = _aac
			_eaad = _aac * _acfg
		} else {
			_eaad = _fef
			_eff = _fef / _acfg
		}
		_daa.Scale(_eaad/_daa.Width(), _eff/_daa.Height())
		return _daa, _cdb, _gdg
	}
	var _gdb, _aeag, _gdgf, _cbf float64
	if _cbca := _ega.LAttr; _cbca != nil {
		_gdgf = _gb.FromSTPercentage(_cbca)
	}
	if _aada := _ega.TAttr; _aada != nil {
		_gdb = _gb.FromSTPercentage(_aada)
	}
	if _cgf := _ega.RAttr; _cgf != nil {
		_cbf = _gb.FromSTPercentage(_cgf)
	}
	if _ebef := _ega.BAttr; _ebef != nil {
		_aeag = _gb.FromSTPercentage(_ebef)
	}
	_cef := _fef * (1 - _gdgf - _cbf)
	_aaba := _aac * (1 - _gdb - _aeag)
	_daa.Scale(_cef/_daa.Width(), _aaba/_daa.Height())
	return _daa, _cdb + _gdgf*_fef, _gdg + _gdb*_aac
}

type line struct {
	_eafe float64
	_bbg  float64
	_cff  float64
	_fcd  float64
	_geg  float64
	_afff []*word
}

func (_eegf *convertContext) getInfoFromLn(_ffba *_ceb.CT_LineProperties) (_gg.Color, float64, float64) {
	if _ffba == nil || _ffba.LineFillPropertiesChoice.NoFill != nil {
		return nil, 0, 0
	}
	var _faaf float64
	_dbbea, _fdbc := _eegf.getColorFromSolidFill(_ffba.LineFillPropertiesChoice.SolidFill)
	if _gbbb := _ffba.WAttr; _gbbb != nil {
		_faaf = _eb.FromEMU(int64(*_gbbb))
	} else {
		_faaf = 1
	}
	return _dbbea, _faaf, _fdbc
}
func (_dcad *convertContext) makePdfBlockFromTxBody(_fdf *_ceb.CT_TextBody, _bbd *_ceb.CT_TextBodyProperties, _ggcb *_ceb.CT_TextListStyle, _ecbe, _fcce float64, _bce _gg.Color, _dffa, _afb bool) (*_gg.Block, error) {
	var _ede *_ceb.CT_TextParagraphProperties
	if _fdee := _fdf.LstStyle; _fdee != nil {
		var _gddf *_ceb.CT_TextParagraphProperties
		if _fdee.Lvl1pPr != nil {
			_gddf = _fdee.Lvl1pPr
		}
		_ede = _bcd(_gddf, _fdee.DefPPr)
	}
	var _dag *_ceb.CT_TextParagraphProperties
	if _ede != nil {
		if _dffa {
			_dag = _dcad._cbdb[0]
		} else if _afb {
			_dag = _dcad._ace[0]
		} else {
			_dag = _dcad._cbdd[0]
		}
		if _ggcb != nil {
			_dag = _bcd(_bcd(_ggcb.Lvl1pPr, _ggcb.DefPPr), _dag)
		}
		_dag = _bcd(_ede, _dag)
	} else {
		if _dffa {
			_dag = _dcad._bdgf
		} else if _afb {
			_dag = _dcad._edd
		} else {
			_dag = _dcad._fbff
		}
	}
	_edc, _dfa := _bagf(2.5), _bagf(2.5)
	_ccga, _dad := _bagf(1.3), _bagf(1.3)
	_fgf := true
	_dcff := _ceb.ST_TextAnchoringTypeT
	if _bbd != nil {
		if _acc := _bbd.AnchorAttr; _acc != _ceb.ST_TextAnchoringTypeUnset {
			_dcff = _acc
		}
	}
	if _gccd := _fdf.BodyPr; _gccd != nil {
		if _bccf := _gccd.LInsAttr; _bccf != nil {
			_edc = _eb.FromEMU(_gb.FromSTCoordinate32(*_bccf))
		}
		if _badf := _gccd.TInsAttr; _badf != nil {
			_ccga = _eb.FromEMU(_gb.FromSTCoordinate32(*_badf))
		}
		if _bbec := _gccd.RInsAttr; _bbec != nil {
			_dfa = _eb.FromEMU(_gb.FromSTCoordinate32(*_bbec))
		}
		if _fbad := _gccd.BInsAttr; _fbad != nil {
			_dad = _eb.FromEMU(_gb.FromSTCoordinate32(*_fbad))
		}
		_fgf = _gccd.WrapAttr != _ceb.ST_TextWrappingTypeNone
		if _gge := _gccd.AnchorAttr; _gge != _ceb.ST_TextAnchoringTypeUnset {
			_dcff = _gccd.AnchorAttr
		}
	}
	_abdc := _gb.MakeTempCreator(_ecbe, _fcce)
	_abdc.SetPageMargins(_edc, _dfa, _ccga, _dad)
	_eaea := &textboxContext{_bff: _dcad, _addb: _fgf, _eeea: _ecbe - _edc - _dfa, _aggf: _fcce - _ccga - _dad, _gecg: _abdc, _ddb: []*paragraph{}}
	_ead := 1
	for _, _cfe := range _fdf.P {
		if _cfe != nil {
			_afbe := _cfe.PPr
			var _dgfb *prefixData
			if _afbe != nil && _afbe.TextBulletChoice.BuNone == nil {
				var _fbg string
				var _cbe bool
				if _eedf := _afbe.TextBulletChoice.BuAutoNum; _eedf != nil {
					var _bcf string
					if _gbef := _eedf.StartAtAttr; _gbef != nil {
						_ead = int(*_gbef)
					}
					var _cbag string
					switch _eedf.TypeAttr {
					case _ceb.ST_TextAutonumberSchemeAlphaUcParenBoth, _ceb.ST_TextAutonumberSchemeAlphaUcParenR, _ceb.ST_TextAutonumberSchemeAlphaUcPeriod:
						_cbag = _fbe(_ead, true)
					case _ceb.ST_TextAutonumberSchemeAlphaLcParenBoth, _ceb.ST_TextAutonumberSchemeAlphaLcParenR, _ceb.ST_TextAutonumberSchemeAlphaLcPeriod:
						_cbag = _fbe(_ead, false)
					case _ceb.ST_TextAutonumberSchemeRomanUcParenBoth, _ceb.ST_TextAutonumberSchemeRomanUcParenR, _ceb.ST_TextAutonumberSchemeRomanUcPeriod:
						_cbag = _ffg(_ead, true)
					case _ceb.ST_TextAutonumberSchemeRomanLcParenBoth, _ceb.ST_TextAutonumberSchemeRomanLcParenR, _ceb.ST_TextAutonumberSchemeRomanLcPeriod:
						_cbag = _ffg(_ead, false)
					default:
						_cbag = _g.Itoa(_ead)
					}
					switch _eedf.TypeAttr {
					case _ceb.ST_TextAutonumberSchemeAlphaLcPeriod, _ceb.ST_TextAutonumberSchemeAlphaUcPeriod, _ceb.ST_TextAutonumberSchemeArabicPeriod, _ceb.ST_TextAutonumberSchemeRomanLcPeriod, _ceb.ST_TextAutonumberSchemeRomanUcPeriod, _ceb.ST_TextAutonumberSchemeArabicDbPeriod, _ceb.ST_TextAutonumberSchemeEa1ChsPeriod, _ceb.ST_TextAutonumberSchemeEa1ChtPeriod, _ceb.ST_TextAutonumberSchemeEa1JpnChsDbPeriod, _ceb.ST_TextAutonumberSchemeEa1JpnKorPeriod, _ceb.ST_TextAutonumberSchemeThaiAlphaPeriod, _ceb.ST_TextAutonumberSchemeThaiNumPeriod, _ceb.ST_TextAutonumberSchemeHindiAlphaPeriod, _ceb.ST_TextAutonumberSchemeHindiNumPeriod, _ceb.ST_TextAutonumberSchemeHindiAlpha1Period:
						_bcf = "\u002e"
					case _ceb.ST_TextAutonumberSchemeAlphaLcParenR, _ceb.ST_TextAutonumberSchemeAlphaUcParenR, _ceb.ST_TextAutonumberSchemeArabicParenR, _ceb.ST_TextAutonumberSchemeRomanLcParenR, _ceb.ST_TextAutonumberSchemeRomanUcParenR, _ceb.ST_TextAutonumberSchemeThaiAlphaParenR, _ceb.ST_TextAutonumberSchemeThaiNumParenR, _ceb.ST_TextAutonumberSchemeHindiNumParenR:
						_bcf = "\u0029"
					}
					_fbg = _cbag + _bcf
					_ead++
				} else if _bec := _afbe.TextBulletChoice.BuChar; _bec != nil {
					_gbcb := _bec.CharAttr
					if _dcgf, _ebff := _caaba[_gbcb]; _ebff {
						_gbcb = string(rune(_dcgf))
					} else {
						_gbcb = "\u2022"
					}
					_fbg = _gbcb
					_cbe = true
				}
				if _fbg != "" {
					var _bgf, _aaad float64
					if _afbe.MarLAttr != nil {
						_bgf = _eb.FromEMU(int64(*_afbe.MarLAttr))
					}
					if _afbe.IndentAttr != nil {
						_aaad = _eb.FromEMU(int64(*_afbe.IndentAttr))
					}
					_dgfb = &prefixData{_ebefd: _fbg, _ddg: _cbe, _gggb: _bgf, _bada: _aaad}
				}
			}
			_afbe = _bcd(_afbe, _dag)
			_gad := _eecd(_cfe.EndParaRPr, _afbe.DefRPr)
			_eaea.newParagraph()
			_eaea.assignPropsToCurrentParagraph(_afbe)
			_eaea.newLine()
			_eaea.newWord()
			for _bdfc, _cbfc := range _cfe.EG_TextRun {
				_eaea.addTextRun(_cbfc, _gad, _bce, _dgfb)
				if _bdfc > 0 {
					_dgfb = nil
				}
			}
			_eaea.addCurrentWordToParagraph()
		}
		_eaea.addCurrentParagraph()
	}
	_eaea.alignVertically(_dcff)
	_eaea.drawParagraphs()
	return _gb.MakeBlockFromCreator(_abdc)
}
func (_de *convertContext) makeSlide() {
	_gfee := _de._cbec.GetSlideLayout().CSld
	_de.addShapes(_gfee, true)
	_gfee = _de._cbec.X().CSld
	_de.addShapes(_gfee, false)
}
func (_bgagb *convertContext) getStyleColors(_ffac *_ceb.CT_ShapeStyle) (_gg.Color, _gg.Color, _gg.Color) {
	var _eaeg, _debb, _fgcf _gg.Color
	if _afa := _ffac.LnRef; _afa != nil {
		_debb = _bgagb.getColorFromMatrixReference(_afa)
	}
	if _eegb := _ffac.FillRef; _eegb != nil {
		_fgcf = _bgagb.getColorFromMatrixReference(_eegb)
	}
	if _cdgd := _ffac.FontRef; _cdgd != nil {
		_eaeg = _bgagb.getColorFromFontReference(_cdgd)
	}
	return _eaeg, _fgcf, _debb
}
func (_fcg *convertContext) makeStyleFromRPr(_dfab *_ceb.CT_TextCharacterProperties) (*_gg.TextStyle, bool, bool, bool) {
	var _fge, _bcb, _efa bool
	_cfga := _fcg._aec.NewTextStyle()
	if _dfab != nil {
		_bba := _gb.FontStyle_Regular
		_cdeb := _ecgc(_dfab.BAttr)
		_ffc := _ecgc(_dfab.IAttr)
		if _cdeb && _ffc {
			_bba = _gb.FontStyle_BoldItalic
		} else if _cdeb {
			_bba = _gb.FontStyle_Bold
		} else if _ffc {
			_bba = _gb.FontStyle_Italic
		}
		_efa = _dfab.UAttr != _ceb.ST_TextUnderlineTypeUnset && _dfab.UAttr != _ceb.ST_TextUnderlineTypeNone
		_fdc := "\u0064e\u0066\u0061\u0075\u006c\u0074"
		if _abf := _dfab.Latin; _abf != nil {
			_fdc = _abf.TypefaceAttr
		} else if _abcd := _dfab.Ea; _abcd != nil {
			_fdc = _abcd.TypefaceAttr
		} else if _bedb := _dfab.Cs; _bedb != nil {
			_fdc = _bedb.TypefaceAttr
		} else if _acg := _dfab.Sym; _acg != nil {
			_fdc = _acg.TypefaceAttr
		}
		if _ecbc, _babg := _gb.StdFontsMap[_fdc]; _babg {
			_cfga.Font = _gb.AssignStdFontByName(_cfga, _ecbc[_bba])
		} else if _accb := _gb.GetRegisteredFont(_fdc, _bba); _accb != nil {
			_cfga.Font = _accb
		} else {
			_gd.Log.Debug("\u0046\u006f\u006e\u0074\u0020\u0025\u0073\u0020\u0077\u0069\u0074h\u0020\u0073\u0074\u0079\u006c\u0065\u0020\u0025s\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u002c\u0020\u0072\u0065\u0073\u0065\u0074 \u0074\u006f\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u002e", _fdc, _bba)
			_cfga.Font = _gb.AssignStdFontByName(_cfga, _gb.StdFontsMap["\u0064e\u0066\u0061\u0075\u006c\u0074"][_bba])
		}
		var _agaa float64
		if _gceg := _dfab.SzAttr; _gceg != nil {
			_agaa = _eg.Round(float64(*_gceg)/100) - 0.5
		} else {
			_agaa = _gb.DefaultFontSize
		}
		if _adae := _dfab.BaselineAttr; _adae != nil {
			if _faec := _adae.ST_PercentageDecimal; _faec != nil {
				if *_faec > 0 {
					_fge = true
				} else if *_faec < 0 {
					_bcb = true
				}
			}
		}
		if _fge || _bcb {
			_agaa = _eg.Round(_agaa * 0.64)
		}
		_cfga.FontSize = _agaa
		_bfeg := 0.0
		if _ffce := _dfab.SpcAttr; _ffce != nil {
			if _gfbf := _ffce.ST_TextPointUnqualified; _gfbf != nil && *_gfbf > 0 {
				_bfeg = float64(*_gfbf) / 100
			}
		}
		_cfga.CharSpacing = _bfeg
	}
	return &_cfga, _fge, _bcb, _efa
}
func _dage(_bafad, _cfbc *_ceb.CT_TableStyleTextStyle) *_ceb.CT_TableStyleTextStyle {
	_dfaa := _ceb.NewCT_TableStyleTextStyle()
	if _bafad != nil {
		*_dfaa = *_bafad
	}
	if _cfbc == nil {
		return _dfaa
	}
	if _dfaa.BAttr == _ceb.ST_OnOffStyleTypeUnset {
		_dfaa.BAttr = _cfbc.BAttr
	}
	if _dfaa.IAttr == _ceb.ST_OnOffStyleTypeUnset {
		_dfaa.IAttr = _cfbc.IAttr
	}
	if _dfaa.ThemeableFontStylesChoice.Font == nil {
		_dfaa.ThemeableFontStylesChoice.Font = _cfbc.ThemeableFontStylesChoice.Font
	}
	if _dfaa.ThemeableFontStylesChoice.FontRef == nil {
		_dfaa.ThemeableFontStylesChoice.FontRef = _cfbc.ThemeableFontStylesChoice.FontRef
	}
	if _dfaa.ScrgbClr == nil {
		_dfaa.ScrgbClr = _cfbc.ScrgbClr
	}
	if _dfaa.SrgbClr == nil {
		_dfaa.SrgbClr = _cfbc.SrgbClr
	}
	if _dfaa.HslClr == nil {
		_dfaa.HslClr = _cfbc.HslClr
	}
	if _dfaa.SysClr == nil {
		_dfaa.SysClr = _cfbc.SysClr
	}
	if _dfaa.SchemeClr == nil {
		_dfaa.SchemeClr = _cfbc.SchemeClr
	}
	if _dfaa.PrstClr == nil {
		_dfaa.PrstClr = _cfbc.PrstClr
	}
	return _dfaa
}
func (_edg *convertContext) addShapes(_ee *_af.CT_CommonSlideData, _dg bool) {
	if _ee == nil {
		return
	}
	_gbd := &background{}
	if _gcb := _ee.Bg; _gcb != nil {
		if _eed := _gcb.BackgroundChoice.BgPr; _eed != nil {
			if _eed.FillPropertiesChoice.NoFill == nil {
				if _gee := _eed.FillPropertiesChoice.SolidFill; _gee != nil {
					_gfe, _ac := _edg.getColorFromSolidFill(_gee)
					if _gfe != nil {
						_gbd._fbbg = _gfe
						_gbd._dcfb = _ac
					}
				} else if _eea := _eed.FillPropertiesChoice.BlipFill; _eea != nil {
					_gbd._dbfe = _eea
				}
			}
		}
	}
	_edg._bbed = _gbd
	if _fbb := _ee.SpTree; _fbb != nil {
		for _, _bde := range _fbb.GroupShapeChoice {
			if _bde != nil {
				if _bde.Sp != nil {
					_dc := _edg.getShapes(_bde.Sp, _dg, false)
					_edg._gefacb = append(_edg._gefacb, _dc...)
				}
				if _bde.GraphicFrame != nil {
					var _aca, _fed, _gef, _ebe float64
					if _ggd := _bde.GraphicFrame.Xfrm; _ggd != nil {
						_aca, _fed, _gef, _ebe = _gb.GetDataFromXfrm(_ggd)
					}
					if _gef == 0 && _ebe == 0 {
						_gef = _edg._cgcd
						_ebe = _edg._bded
					}
					if _gfb := _bde.GraphicFrame.Graphic; _gfb != nil {
						if _bg := _gfb.GraphicData; _bg != nil {
							for _, _fbd := range _bg.Any {
								if _dbe, _efe := _fbd.(*_ge.Chart); _efe {
									_dbff, _ccdg := _edg.makePdfBlockFromChart(_dbe, _gef, _ebe)
									if _ccdg != nil {
										_gd.Log.Debug("C\u0061\u006e\u006e\u006ft \u0072e\u0061\u0064\u0020\u0062\u006co\u0063\u006b\u003a\u0020\u0025\u0073", _ccdg)
									}
									if _dbff != nil {
										_dbff.SetPos(_aca, _fed)
										_edg._gefacb = append(_edg._gefacb, _dbff)
									}
								} else if _gca, _dgf := _fbd.(*_ceb.Tbl); _dgf {
									_aad := _edg.makePdfBlockFromTable(_gca)
									if _aad != nil {
										_fae := _gg.NewBlock(_gef, _ebe)
										_fae.SetPos(_aca, _fed)
										_abd := _fae.Draw(_aad)
										if _abd != nil {
											_gd.Log.Debug("C\u0061\u006e\u006e\u006ft \u0064r\u0061\u0077\u0020\u0074\u0061b\u006c\u0065\u003a\u0020\u0025\u0073", _abd)
											if _abd == _gg.ErrContentNotFit {
												_fae = _gg.NewBlock(_edg._cgcd-1.5*_aca, _edg._bded-1.5*_fed)
												_fae.SetPos(_aca, _fed)
												_abd = _fae.Draw(_aad)
											}
										}
										if _abd == nil {
											_edg._gefacb = append(_edg._gefacb, _fae)
										}
									}
								}
							}
						}
					}
				}
				if _bde.CxnSp != nil {
					_acf := _edg.getConnectors(_bde.CxnSp)
					_edg._gefacb = append(_edg._gefacb, _acf...)
				}
				if _bde.GrpSp != nil {
					_bdf := 0.0
					_aaa := 0.0
					if _bef := _bde.GrpSp.GrpSpPr.Xfrm; _bef != nil {
						_bdf, _aaa = _gb.GetGroupOffsetFromXfrm(_bef)
					}
					for _, _ebb := range _bde.GrpSp.GroupShapeChoice {
						if _ebb.CxnSp != nil {
							_gfc := _edg.getGroupConnectors(_ebb.CxnSp, _bdf, _aaa)
							_edg._gefacb = append(_edg._gefacb, _gfc...)
						}
					}
				}
				if _bde.Pic != nil {
					_ad := false
					var _afdb, _gcaf, _ag, _fac float64
					if _aab := _bde.Pic.SpPr; _aab != nil {
						if _ea := _aab.Xfrm; _ea != nil {
							_afdb, _gcaf, _ag, _fac = _gb.GetDataFromXfrm(_ea)
							_ad = true
						}
					}
					var _cda _af.ST_PlaceholderType
					var _ff *uint32
					if _ggc := _bde.Pic.NvPicPr; _ggc != nil {
						if _caf := _ggc.NvPr; _caf != nil {
							if _dff := _caf.Ph; _dff != nil {
								_cda = _dff.TypeAttr
								_ff = _dff.IdxAttr
							}
						}
					}
					_gec, _, _, _, _ := _dffe(_edg._gefac.CSld, _cda, _ff)
					_fd, _, _, _, _ := _dffe(_edg._dgg.CSld, _cda, _ff)
					if _fd == nil {
						_fd = _gec
					}
					if _fd != nil && !_ad {
						_afdb, _gcaf, _ag, _fac = _gb.GetDataFromXfrm(_fd)
					}
					if _bed := _bde.Pic.BlipFill; _bed != nil {
						_aga := _edg.getShapeFromBlipFill(_bed, _afdb, _gcaf, _ag, _fac, _dg)
						_edg._gefacb = append(_edg._gefacb, _aga)
					}
				}
			}
		}
	}
}
func _cgfc(_abgb, _afeeg *_ceb.CT_TablePartStyle) *_ceb.CT_TablePartStyle {
	_bfdg := _ceb.NewCT_TablePartStyle()
	if _abgb != nil {
		*_bfdg = *_abgb
	}
	if _afeeg == nil {
		return _bfdg
	}
	if _bfdg.TcTxStyle == nil {
		_bfdg.TcTxStyle = _afeeg.TcTxStyle
	} else {
		_bfdg.TcTxStyle = _dage(_bfdg.TcTxStyle, _afeeg.TcTxStyle)
	}
	if _bfdg.TcStyle == nil {
		_bfdg.TcStyle = _afeeg.TcStyle
	} else {
		_bfdg.TcStyle = _efaa(_bfdg.TcStyle, _afeeg.TcStyle)
	}
	return _bfdg
}
func (_dbg *convertContext) getGroupConnectors(_dcf *_af.CT_Connector, _adg float64, _abca float64) []_gg.Drawable {
	_befd, _, _, _, _, _, _ := _dbg.getShapesFromSpPr(_dcf.SpPr, _dcf.Style, false, _adg, _abca)
	return _befd
}

type background struct {
	_fbbg _gg.Color
	_dcfb float64
	_dbfe *_ceb.CT_BlipFillProperties
}

// ConvertToPdf converts a presentation to a PDF file. This package is beta, breaking changes can take place.
func ConvertToPdf(pr *_ce.Presentation) *_gg.Creator { return ConvertToPdfWithOptions(pr, nil) }
func _ffg(_befea int, _cagg bool) string {
	_dbd := _ed.NewBuffer([]byte{})
	for _, _cad := range _edcc {
		for {
			if _befea < _cad._ccfd {
				break
			}
			_dbd.WriteString(_cad._dea)
			_befea -= _cad._ccfd
		}
	}
	_edgf := _dbd.String()
	if _cagg {
		_edgf = _df.ToUpper(_edgf)
	}
	return _edgf
}
func _dcae(_bgfb string) []*symbol {
	_dda := []*symbol{}
	for _, _dba := range _bgfb {
		_dda = append(_dda, &symbol{_fag: string(_dba)})
	}
	return _dda
}
func (_aag *textboxContext) alignParagraphsVertically(_dac _ceb.ST_TextAnchoringType) {
	if _dac == _ceb.ST_TextAnchoringTypeT {
		return
	}
	_aeg := 0.0
	for _, _abb := range _aag._ddb {
		_aeg += _abb._adef + _abb._ddbf + _abb._dfad
	}
	var _cbff float64
	switch _dac {
	case _ceb.ST_TextAnchoringTypeCtr:
		_cbff = (_aag._aggf - _aeg) / 2
	case _ceb.ST_TextAnchoringTypeB:
		_cbff = _aag._aggf - _aeg
	}
	for _, _eec := range _aag._ddb {
		_eec._aeac += _cbff
	}
}
func (_ec *convertContext) makePdfBlockFromChart(_afe *_ge.Chart, _fe, _cfb float64) (*_gg.Block, error) {
	_cc := _afe.CT_RelId.IdAttr
	_cg := _ec._cbec.GetChartSpaceByRelId(_cc)
	if _cg == nil {
		return nil, _b.New("\u004e\u006f\u0020\u0063\u0068\u0061\u0072\u0074\u0073\u0070\u0061\u0063\u0065")
	}
	var _db *_ceb.Theme
	_cfa := _ec._gccb.Themes()
	if len(_cfa) > 0 {
		_db = _cfa[0]
	}
	return _gb.MakeBlockFromChartSpace(_cg, _fe, _cfb, _db)
}

var _ccd = _bagf(1.9)

func (_efbd *convertContext) getPhData(_efd *_af.CT_Shape) (*_ceb.CT_Transform2D, *_ceb.CT_TextBodyProperties, *_ceb.CT_TextListStyle, bool, bool, bool) {
	_bfgd, _acb := _ddad(_efd)
	_afed, _cdba, _gdce, _fgeg, _fdfe := _dffe(_efbd._gefac.CSld, _bfgd, _acb)
	_ebd, _efdf, _ebbb, _geffb, _gcef := _dffe(_efbd._dgg.CSld, _bfgd, _acb)
	if _ebd == nil {
		_ebd = _afed
	}
	_ceg, _geac := _dcbfg(_efdf, _cdba)
	var _eaega, _cded, _fggf bool
	if _ebbb == nil {
		if _gdce != nil {
			_eaega = *_gdce
		}
	} else {
		_eaega = *_ebbb
	}
	if _gcef == nil {
		if _fdfe != nil {
			_fggf = *_fdfe
		}
	} else {
		_fggf = *_gcef
	}
	if _geffb == nil {
		if _fgeg != nil {
			_cded = *_fgeg
		}
	} else {
		_cded = *_geffb
	}
	return _ebd, _ceg, _geac, _eaega, _cded, _fggf
}
func (_ddaa *line) moveRight(_aceg float64) {
	for _, _ggbg := range _ddaa._afff {
		_ggbg._cgca += _aceg
	}
}

// ConvertToPdfWithOptions convert a presentation to PDF with given options.
func ConvertToPdfWithOptions(pr *_ce.Presentation, opts *Options) *_gg.Creator {
	_bd := pr.X().SldSz
	_ef := _eb.FromEMU(int64(_bd.CxAttr))
	_gbb := _eb.FromEMU(int64(_bd.CyAttr))
	_fa := _gg.PageSize{_ef, _gbb}
	if (_fa == _gg.PageSize{}) {
		_fa = _gb.GetDefaultPageSize()
		if opts != nil && opts.DefaultPageSize != _gb.DefaultPageSize {
			_fa = _gb.GetPageDimensions(opts.DefaultPageSize)
		}
	}
	_ggf := _gg.New()
	_ggf.SetPageSize(_fa)
	var _gc *_ceb.Theme
	if len(pr.Themes()) > 0 {
		_gc = pr.Themes()[0]
	}
	for _, _ca := range pr.Slides() {
		if _ca.X() == nil {
			continue
		}
		_ae := &convertContext{_aec: _ggf, _cbec: &_ca, _dgg: _ca.GetSlideLayout(), _gefac: pr.SlideMasters()[0].X(), _gccb: pr, _dbgc: _gc, _dce: _ca.X().ClrMapOvr, _bded: _fa[1], _cgcd: _fa[0]}
		_ae.extractDefaultProperties()
		_ae.makeSlide()
		_ae.drawSlide()
	}
	return _ggf
}

type symbol struct {
	_fag   string
	_beegg float64
	_gag   float64
	_cdff  float64
	_cbfd  float64
	_cce   float64
	_fcad  *_gg.TextStyle
	_bbfg  string
	_fcb   bool
	_ccf   bool
	_aadab bool
}

func _agdf(_gefc *_ceb.CT_TableCellProperties, _ceff *_ceb.CT_TableStyleCellStyle, _bca, _bdff, _ggcc, _ggcg bool) *_ceb.CT_TableCellProperties {
	_eagf := _ceb.NewCT_TableCellProperties()
	if _gefc != nil {
		*_eagf = *_gefc
	}
	if _ceff == nil {
		return _eagf
	}
	if _fggfg := _ceff.ThemeableFillStyleChoice.FillRef; _fggfg != nil {
		_ggfe := _ceb.NewCT_SolidColorFillProperties()
		_ggfe.ScrgbClr = _fggfg.ScrgbClr
		_ggfe.SrgbClr = _fggfg.SrgbClr
		_ggfe.HslClr = _fggfg.HslClr
		_ggfe.SysClr = _fggfg.SysClr
		_ggfe.SchemeClr = _fggfg.SchemeClr
		_ggfe.PrstClr = _fggfg.PrstClr
		_eagf.FillPropertiesChoice.SolidFill = _ggfe
	}
	if _eagf.FillPropertiesChoice.NoFill == nil && _eagf.FillPropertiesChoice.SolidFill == nil {
		if _ffda := _ceff.ThemeableFillStyleChoice.Fill; _ffda != nil {
			if _eagf.FillPropertiesChoice.NoFill == nil {
				_eagf.FillPropertiesChoice.NoFill = _ffda.FillPropertiesChoice.NoFill
			}
			if _eagf.FillPropertiesChoice.SolidFill == nil {
				_eagf.FillPropertiesChoice.SolidFill = _ffda.FillPropertiesChoice.SolidFill
			}
		}
	}
	if _febc := _ceff.TcBdr; _febc != nil {
		if _eagf.LnL == nil {
			var _bedbf *_ceb.CT_ThemeableLineStyle
			if _ggcc {
				_bedbf = _febc.Left
			} else {
				_bedbf = _febc.InsideV
			}
			if _bedbf != nil {
				_eagf.LnL = _bedbf.ThemeableLineStyleChoice.Ln
			}
		}
		if _eagf.LnR == nil {
			var _agbf *_ceb.CT_ThemeableLineStyle
			if _ggcg {
				_agbf = _febc.Right
			} else {
				_agbf = _febc.InsideV
			}
			if _agbf != nil {
				_eagf.LnR = _agbf.ThemeableLineStyleChoice.Ln
			}
		}
		if _eagf.LnT == nil {
			var _dgda *_ceb.CT_ThemeableLineStyle
			if _bca {
				_dgda = _febc.Top
			} else {
				_dgda = _febc.InsideH
			}
			if _dgda != nil {
				_eagf.LnT = _dgda.ThemeableLineStyleChoice.Ln
			}
		}
		if _eagf.LnB == nil {
			var _fcfg *_ceb.CT_ThemeableLineStyle
			if _bdff {
				_fcfg = _febc.Bottom
			} else {
				_fcfg = _febc.InsideH
			}
			if _fcfg != nil {
				_eagf.LnB = _fcfg.ThemeableLineStyleChoice.Ln
			}
		}
	}
	return _eagf
}
func (_efc *convertContext) getConnectors(_fbf *_af.CT_Connector) []_gg.Drawable {
	_faee, _, _, _, _, _, _ := _efc.getShapesFromSpPr(_fbf.SpPr, _fbf.Style, false, 0.0, 0.0)
	return _faee
}
func _cgdb(_edfd, _fefd *_ceb.CT_TextListStyle) *_ceb.CT_TextListStyle {
	_fccd := _ceb.NewCT_TextListStyle()
	if _edfd != nil {
		*_fccd = *_edfd
	}
	if _fefd == nil {
		return _fccd
	}
	_fccd.DefPPr = _bcd(_fccd.DefPPr, _fefd.DefPPr)
	_fccd.Lvl1pPr = _bcd(_fccd.Lvl1pPr, _fefd.Lvl1pPr)
	_fccd.Lvl2pPr = _bcd(_fccd.Lvl2pPr, _fefd.Lvl2pPr)
	_fccd.Lvl3pPr = _bcd(_fccd.Lvl3pPr, _fefd.Lvl3pPr)
	_fccd.Lvl4pPr = _bcd(_fccd.Lvl4pPr, _fefd.Lvl4pPr)
	_fccd.Lvl5pPr = _bcd(_fccd.Lvl5pPr, _fefd.Lvl5pPr)
	_fccd.Lvl6pPr = _bcd(_fccd.Lvl6pPr, _fefd.Lvl6pPr)
	_fccd.Lvl7pPr = _bcd(_fccd.Lvl7pPr, _fefd.Lvl7pPr)
	_fccd.Lvl8pPr = _bcd(_fccd.Lvl8pPr, _fefd.Lvl8pPr)
	_fccd.Lvl9pPr = _bcd(_fccd.Lvl9pPr, _fefd.Lvl9pPr)
	return _fccd
}
func (_fecf *textboxContext) alignSymbolsVertically() {
	for _, _bfec := range _fecf._ddb {
		for _, _efg := range _bfec._abcag {
			_acfd := 0.0
			for _, _gedf := range _efg._afff {
				for _, _aebd := range _gedf._agd {
					if _aebd._gag > _acfd {
						_acfd = _aebd._gag
					}
				}
			}
			for _, _cfff := range _efg._afff {
				for _, _afeef := range _cfff._agd {
					if _afeef._cdff < _acfd {
						_afeef._cbfd = _acfd - _afeef._cdff
					}
				}
			}
		}
	}
}
func _ddad(_cbfdb *_af.CT_Shape) (_af.ST_PlaceholderType, *uint32) {
	if _agf := _cbfdb.NvSpPr; _agf != nil {
		if _caeb := _agf.NvPr; _caeb != nil {
			if _cdcg := _caeb.Ph; _cdcg != nil {
				return _cdcg.TypeAttr, _cdcg.IdxAttr
			}
		}
	}
	return _af.ST_PlaceholderTypeUnset, nil
}

type word struct {
	_agd  []*symbol
	_cgca float64
	_ccce float64
	_gcba bool
}
